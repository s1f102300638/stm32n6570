
mtk3bsp2_stm32n657_FSBL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000034c  34180400  34180400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c728  34180750  34180750  00000750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005cc  3418ce78  3418ce78  0000ce78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  3418d444  3418d444  0000e660  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  3418d444  3418d444  0000d444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  3418d44c  3418d44c  0000e660  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  3418d44c  3418d44c  0000d44c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  3418d450  3418d450  0000d450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .ai_weights   00000000  71000000  71000000  0000e660  2**0
                  CONTENTS
  9 .ai_activations 00000000  34000000  34000000  0000e660  2**0
                  CONTENTS
 10 .ai_buffers   00000000  34100000  34100000  0000e660  2**0
                  CONTENTS
 11 .axisram3_section 00000000  34200000  34200000  0000e660  2**0
                  CONTENTS
 12 .axisram4_section 00000000  34270000  34270000  0000e660  2**0
                  CONTENTS
 13 .axisram5_section 00000000  342e0000  342e0000  0000e660  2**0
                  CONTENTS
 14 .axisram6_section 00000000  34350000  34350000  0000e660  2**0
                  CONTENTS
 15 .xspi1_data   00000000  90000000  90000000  0000e660  2**0
                  CONTENTS
 16 .data         000001d4  341c0000  3418d454  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 17 .noncacheable 00000004  341c01d4  3418d628  0000e1d4  2**0
                  ALLOC
 18 .gnu.sgstubs  00000020  3418d640  3418d640  0000e640  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .bss          00000204  341c01d8  341c01d8  0000f1d8  2**2
                  ALLOC
 20 ._user_heap_stack 00001804  341c03dc  341c03dc  0000f1d8  2**0
                  ALLOC
 21 .ARM.attributes 0000003a  00000000  00000000  0000e660  2**0
                  CONTENTS, READONLY
 22 .debug_info   00023cf0  00000000  00000000  0000e69a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_abbrev 00002adc  00000000  00000000  0003238a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_loclists 000093f9  00000000  00000000  00034e66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_aranges 00000f60  00000000  00000000  0003e260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_rnglists 000017d6  00000000  00000000  0003f1c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_macro  000054f5  00000000  00000000  00040996  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line   0001bd11  00000000  00000000  00045e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_str    0022ef3d  00000000  00000000  00061b9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 30 .comment      00000043  00000000  00000000  00290ad9  2**0
                  CONTENTS, READONLY
 31 .debug_frame  00003bb4  00000000  00000000  00290b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 32 .debug_line_str 00000074  00000000  00000000  002946d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

34180750 <__do_global_dtors_aux>:
34180750:	b510      	push	{r4, lr}
34180752:	4c05      	ldr	r4, [pc, #20]	@ (34180768 <__do_global_dtors_aux+0x18>)
34180754:	7823      	ldrb	r3, [r4, #0]
34180756:	b933      	cbnz	r3, 34180766 <__do_global_dtors_aux+0x16>
34180758:	4b04      	ldr	r3, [pc, #16]	@ (3418076c <__do_global_dtors_aux+0x1c>)
3418075a:	b113      	cbz	r3, 34180762 <__do_global_dtors_aux+0x12>
3418075c:	4804      	ldr	r0, [pc, #16]	@ (34180770 <__do_global_dtors_aux+0x20>)
3418075e:	f3af 8000 	nop.w
34180762:	2301      	movs	r3, #1
34180764:	7023      	strb	r3, [r4, #0]
34180766:	bd10      	pop	{r4, pc}
34180768:	341c01d8 	.word	0x341c01d8
3418076c:	00000000 	.word	0x00000000
34180770:	3418ce60 	.word	0x3418ce60

34180774 <frame_dummy>:
34180774:	b508      	push	{r3, lr}
34180776:	4b03      	ldr	r3, [pc, #12]	@ (34180784 <frame_dummy+0x10>)
34180778:	b11b      	cbz	r3, 34180782 <frame_dummy+0xe>
3418077a:	4903      	ldr	r1, [pc, #12]	@ (34180788 <frame_dummy+0x14>)
3418077c:	4803      	ldr	r0, [pc, #12]	@ (3418078c <frame_dummy+0x18>)
3418077e:	f3af 8000 	nop.w
34180782:	bd08      	pop	{r3, pc}
34180784:	00000000 	.word	0x00000000
34180788:	341c01dc 	.word	0x341c01dc
3418078c:	3418ce60 	.word	0x3418ce60

34180790 <strlen>:
34180790:	4603      	mov	r3, r0
34180792:	f813 2b01 	ldrb.w	r2, [r3], #1
34180796:	2a00      	cmp	r2, #0
34180798:	d1fb      	bne.n	34180792 <strlen+0x2>
3418079a:	1a18      	subs	r0, r3, r0
3418079c:	3801      	subs	r0, #1
3418079e:	4770      	bx	lr

341807a0 <__aeabi_drsub>:
341807a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
341807a4:	e002      	b.n	341807ac <__adddf3>
341807a6:	bf00      	nop

341807a8 <__aeabi_dsub>:
341807a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

341807ac <__adddf3>:
341807ac:	b530      	push	{r4, r5, lr}
341807ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
341807b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
341807b6:	ea94 0f05 	teq	r4, r5
341807ba:	bf08      	it	eq
341807bc:	ea90 0f02 	teqeq	r0, r2
341807c0:	bf1f      	itttt	ne
341807c2:	ea54 0c00 	orrsne.w	ip, r4, r0
341807c6:	ea55 0c02 	orrsne.w	ip, r5, r2
341807ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
341807ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
341807d2:	f000 80e2 	beq.w	3418099a <__adddf3+0x1ee>
341807d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
341807da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
341807de:	bfb8      	it	lt
341807e0:	426d      	neglt	r5, r5
341807e2:	dd0c      	ble.n	341807fe <__adddf3+0x52>
341807e4:	442c      	add	r4, r5
341807e6:	ea80 0202 	eor.w	r2, r0, r2
341807ea:	ea81 0303 	eor.w	r3, r1, r3
341807ee:	ea82 0000 	eor.w	r0, r2, r0
341807f2:	ea83 0101 	eor.w	r1, r3, r1
341807f6:	ea80 0202 	eor.w	r2, r0, r2
341807fa:	ea81 0303 	eor.w	r3, r1, r3
341807fe:	2d36      	cmp	r5, #54	@ 0x36
34180800:	bf88      	it	hi
34180802:	bd30      	pophi	{r4, r5, pc}
34180804:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
34180808:	ea4f 3101 	mov.w	r1, r1, lsl #12
3418080c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
34180810:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
34180814:	d002      	beq.n	3418081c <__adddf3+0x70>
34180816:	4240      	negs	r0, r0
34180818:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
3418081c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
34180820:	ea4f 3303 	mov.w	r3, r3, lsl #12
34180824:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
34180828:	d002      	beq.n	34180830 <__adddf3+0x84>
3418082a:	4252      	negs	r2, r2
3418082c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
34180830:	ea94 0f05 	teq	r4, r5
34180834:	f000 80a7 	beq.w	34180986 <__adddf3+0x1da>
34180838:	f1a4 0401 	sub.w	r4, r4, #1
3418083c:	f1d5 0e20 	rsbs	lr, r5, #32
34180840:	db0d      	blt.n	3418085e <__adddf3+0xb2>
34180842:	fa02 fc0e 	lsl.w	ip, r2, lr
34180846:	fa22 f205 	lsr.w	r2, r2, r5
3418084a:	1880      	adds	r0, r0, r2
3418084c:	f141 0100 	adc.w	r1, r1, #0
34180850:	fa03 f20e 	lsl.w	r2, r3, lr
34180854:	1880      	adds	r0, r0, r2
34180856:	fa43 f305 	asr.w	r3, r3, r5
3418085a:	4159      	adcs	r1, r3
3418085c:	e00e      	b.n	3418087c <__adddf3+0xd0>
3418085e:	f1a5 0520 	sub.w	r5, r5, #32
34180862:	f10e 0e20 	add.w	lr, lr, #32
34180866:	2a01      	cmp	r2, #1
34180868:	fa03 fc0e 	lsl.w	ip, r3, lr
3418086c:	bf28      	it	cs
3418086e:	f04c 0c02 	orrcs.w	ip, ip, #2
34180872:	fa43 f305 	asr.w	r3, r3, r5
34180876:	18c0      	adds	r0, r0, r3
34180878:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
3418087c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
34180880:	d507      	bpl.n	34180892 <__adddf3+0xe6>
34180882:	f04f 0e00 	mov.w	lr, #0
34180886:	f1dc 0c00 	rsbs	ip, ip, #0
3418088a:	eb7e 0000 	sbcs.w	r0, lr, r0
3418088e:	eb6e 0101 	sbc.w	r1, lr, r1
34180892:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
34180896:	d31b      	bcc.n	341808d0 <__adddf3+0x124>
34180898:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
3418089c:	d30c      	bcc.n	341808b8 <__adddf3+0x10c>
3418089e:	0849      	lsrs	r1, r1, #1
341808a0:	ea5f 0030 	movs.w	r0, r0, rrx
341808a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
341808a8:	f104 0401 	add.w	r4, r4, #1
341808ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
341808b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
341808b4:	f080 809a 	bcs.w	341809ec <__adddf3+0x240>
341808b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
341808bc:	bf08      	it	eq
341808be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
341808c2:	f150 0000 	adcs.w	r0, r0, #0
341808c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
341808ca:	ea41 0105 	orr.w	r1, r1, r5
341808ce:	bd30      	pop	{r4, r5, pc}
341808d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
341808d4:	4140      	adcs	r0, r0
341808d6:	eb41 0101 	adc.w	r1, r1, r1
341808da:	3c01      	subs	r4, #1
341808dc:	bf28      	it	cs
341808de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
341808e2:	d2e9      	bcs.n	341808b8 <__adddf3+0x10c>
341808e4:	f091 0f00 	teq	r1, #0
341808e8:	bf04      	itt	eq
341808ea:	4601      	moveq	r1, r0
341808ec:	2000      	moveq	r0, #0
341808ee:	fab1 f381 	clz	r3, r1
341808f2:	bf08      	it	eq
341808f4:	3320      	addeq	r3, #32
341808f6:	f1a3 030b 	sub.w	r3, r3, #11
341808fa:	f1b3 0220 	subs.w	r2, r3, #32
341808fe:	da0c      	bge.n	3418091a <__adddf3+0x16e>
34180900:	320c      	adds	r2, #12
34180902:	dd08      	ble.n	34180916 <__adddf3+0x16a>
34180904:	f102 0c14 	add.w	ip, r2, #20
34180908:	f1c2 020c 	rsb	r2, r2, #12
3418090c:	fa01 f00c 	lsl.w	r0, r1, ip
34180910:	fa21 f102 	lsr.w	r1, r1, r2
34180914:	e00c      	b.n	34180930 <__adddf3+0x184>
34180916:	f102 0214 	add.w	r2, r2, #20
3418091a:	bfd8      	it	le
3418091c:	f1c2 0c20 	rsble	ip, r2, #32
34180920:	fa01 f102 	lsl.w	r1, r1, r2
34180924:	fa20 fc0c 	lsr.w	ip, r0, ip
34180928:	bfdc      	itt	le
3418092a:	ea41 010c 	orrle.w	r1, r1, ip
3418092e:	4090      	lslle	r0, r2
34180930:	1ae4      	subs	r4, r4, r3
34180932:	bfa2      	ittt	ge
34180934:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
34180938:	4329      	orrge	r1, r5
3418093a:	bd30      	popge	{r4, r5, pc}
3418093c:	ea6f 0404 	mvn.w	r4, r4
34180940:	3c1f      	subs	r4, #31
34180942:	da1c      	bge.n	3418097e <__adddf3+0x1d2>
34180944:	340c      	adds	r4, #12
34180946:	dc0e      	bgt.n	34180966 <__adddf3+0x1ba>
34180948:	f104 0414 	add.w	r4, r4, #20
3418094c:	f1c4 0220 	rsb	r2, r4, #32
34180950:	fa20 f004 	lsr.w	r0, r0, r4
34180954:	fa01 f302 	lsl.w	r3, r1, r2
34180958:	ea40 0003 	orr.w	r0, r0, r3
3418095c:	fa21 f304 	lsr.w	r3, r1, r4
34180960:	ea45 0103 	orr.w	r1, r5, r3
34180964:	bd30      	pop	{r4, r5, pc}
34180966:	f1c4 040c 	rsb	r4, r4, #12
3418096a:	f1c4 0220 	rsb	r2, r4, #32
3418096e:	fa20 f002 	lsr.w	r0, r0, r2
34180972:	fa01 f304 	lsl.w	r3, r1, r4
34180976:	ea40 0003 	orr.w	r0, r0, r3
3418097a:	4629      	mov	r1, r5
3418097c:	bd30      	pop	{r4, r5, pc}
3418097e:	fa21 f004 	lsr.w	r0, r1, r4
34180982:	4629      	mov	r1, r5
34180984:	bd30      	pop	{r4, r5, pc}
34180986:	f094 0f00 	teq	r4, #0
3418098a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
3418098e:	bf06      	itte	eq
34180990:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
34180994:	3401      	addeq	r4, #1
34180996:	3d01      	subne	r5, #1
34180998:	e74e      	b.n	34180838 <__adddf3+0x8c>
3418099a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
3418099e:	bf18      	it	ne
341809a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
341809a4:	d029      	beq.n	341809fa <__adddf3+0x24e>
341809a6:	ea94 0f05 	teq	r4, r5
341809aa:	bf08      	it	eq
341809ac:	ea90 0f02 	teqeq	r0, r2
341809b0:	d005      	beq.n	341809be <__adddf3+0x212>
341809b2:	ea54 0c00 	orrs.w	ip, r4, r0
341809b6:	bf04      	itt	eq
341809b8:	4619      	moveq	r1, r3
341809ba:	4610      	moveq	r0, r2
341809bc:	bd30      	pop	{r4, r5, pc}
341809be:	ea91 0f03 	teq	r1, r3
341809c2:	bf1e      	ittt	ne
341809c4:	2100      	movne	r1, #0
341809c6:	2000      	movne	r0, #0
341809c8:	bd30      	popne	{r4, r5, pc}
341809ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
341809ce:	d105      	bne.n	341809dc <__adddf3+0x230>
341809d0:	0040      	lsls	r0, r0, #1
341809d2:	4149      	adcs	r1, r1
341809d4:	bf28      	it	cs
341809d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
341809da:	bd30      	pop	{r4, r5, pc}
341809dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
341809e0:	bf3c      	itt	cc
341809e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
341809e6:	bd30      	popcc	{r4, r5, pc}
341809e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
341809ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
341809f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
341809f4:	f04f 0000 	mov.w	r0, #0
341809f8:	bd30      	pop	{r4, r5, pc}
341809fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
341809fe:	bf1a      	itte	ne
34180a00:	4619      	movne	r1, r3
34180a02:	4610      	movne	r0, r2
34180a04:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
34180a08:	bf1c      	itt	ne
34180a0a:	460b      	movne	r3, r1
34180a0c:	4602      	movne	r2, r0
34180a0e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
34180a12:	bf06      	itte	eq
34180a14:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
34180a18:	ea91 0f03 	teqeq	r1, r3
34180a1c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
34180a20:	bd30      	pop	{r4, r5, pc}
34180a22:	bf00      	nop

34180a24 <__aeabi_ui2d>:
34180a24:	f090 0f00 	teq	r0, #0
34180a28:	bf04      	itt	eq
34180a2a:	2100      	moveq	r1, #0
34180a2c:	4770      	bxeq	lr
34180a2e:	b530      	push	{r4, r5, lr}
34180a30:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34180a34:	f104 0432 	add.w	r4, r4, #50	@ 0x32
34180a38:	f04f 0500 	mov.w	r5, #0
34180a3c:	f04f 0100 	mov.w	r1, #0
34180a40:	e750      	b.n	341808e4 <__adddf3+0x138>
34180a42:	bf00      	nop

34180a44 <__aeabi_i2d>:
34180a44:	f090 0f00 	teq	r0, #0
34180a48:	bf04      	itt	eq
34180a4a:	2100      	moveq	r1, #0
34180a4c:	4770      	bxeq	lr
34180a4e:	b530      	push	{r4, r5, lr}
34180a50:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34180a54:	f104 0432 	add.w	r4, r4, #50	@ 0x32
34180a58:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
34180a5c:	bf48      	it	mi
34180a5e:	4240      	negmi	r0, r0
34180a60:	f04f 0100 	mov.w	r1, #0
34180a64:	e73e      	b.n	341808e4 <__adddf3+0x138>
34180a66:	bf00      	nop

34180a68 <__aeabi_f2d>:
34180a68:	0042      	lsls	r2, r0, #1
34180a6a:	ea4f 01e2 	mov.w	r1, r2, asr #3
34180a6e:	ea4f 0131 	mov.w	r1, r1, rrx
34180a72:	ea4f 7002 	mov.w	r0, r2, lsl #28
34180a76:	bf1f      	itttt	ne
34180a78:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
34180a7c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
34180a80:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
34180a84:	4770      	bxne	lr
34180a86:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
34180a8a:	bf08      	it	eq
34180a8c:	4770      	bxeq	lr
34180a8e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
34180a92:	bf04      	itt	eq
34180a94:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
34180a98:	4770      	bxeq	lr
34180a9a:	b530      	push	{r4, r5, lr}
34180a9c:	f44f 7460 	mov.w	r4, #896	@ 0x380
34180aa0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
34180aa4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
34180aa8:	e71c      	b.n	341808e4 <__adddf3+0x138>
34180aaa:	bf00      	nop

34180aac <__aeabi_ul2d>:
34180aac:	ea50 0201 	orrs.w	r2, r0, r1
34180ab0:	bf08      	it	eq
34180ab2:	4770      	bxeq	lr
34180ab4:	b530      	push	{r4, r5, lr}
34180ab6:	f04f 0500 	mov.w	r5, #0
34180aba:	e00a      	b.n	34180ad2 <__aeabi_l2d+0x16>

34180abc <__aeabi_l2d>:
34180abc:	ea50 0201 	orrs.w	r2, r0, r1
34180ac0:	bf08      	it	eq
34180ac2:	4770      	bxeq	lr
34180ac4:	b530      	push	{r4, r5, lr}
34180ac6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
34180aca:	d502      	bpl.n	34180ad2 <__aeabi_l2d+0x16>
34180acc:	4240      	negs	r0, r0
34180ace:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34180ad2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
34180ad6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
34180ada:	ea5f 5c91 	movs.w	ip, r1, lsr #22
34180ade:	f43f aed8 	beq.w	34180892 <__adddf3+0xe6>
34180ae2:	f04f 0203 	mov.w	r2, #3
34180ae6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
34180aea:	bf18      	it	ne
34180aec:	3203      	addne	r2, #3
34180aee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
34180af2:	bf18      	it	ne
34180af4:	3203      	addne	r2, #3
34180af6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
34180afa:	f1c2 0320 	rsb	r3, r2, #32
34180afe:	fa00 fc03 	lsl.w	ip, r0, r3
34180b02:	fa20 f002 	lsr.w	r0, r0, r2
34180b06:	fa01 fe03 	lsl.w	lr, r1, r3
34180b0a:	ea40 000e 	orr.w	r0, r0, lr
34180b0e:	fa21 f102 	lsr.w	r1, r1, r2
34180b12:	4414      	add	r4, r2
34180b14:	e6bd      	b.n	34180892 <__adddf3+0xe6>
34180b16:	bf00      	nop

34180b18 <__aeabi_uldivmod>:
34180b18:	b953      	cbnz	r3, 34180b30 <__aeabi_uldivmod+0x18>
34180b1a:	b94a      	cbnz	r2, 34180b30 <__aeabi_uldivmod+0x18>
34180b1c:	2900      	cmp	r1, #0
34180b1e:	bf08      	it	eq
34180b20:	2800      	cmpeq	r0, #0
34180b22:	bf1c      	itt	ne
34180b24:	f04f 31ff 	movne.w	r1, #4294967295
34180b28:	f04f 30ff 	movne.w	r0, #4294967295
34180b2c:	f000 b9e8 	b.w	34180f00 <__aeabi_idiv0>
34180b30:	f1ad 0c08 	sub.w	ip, sp, #8
34180b34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
34180b38:	f000 f83e 	bl	34180bb8 <__udivmoddi4>
34180b3c:	f8dd e004 	ldr.w	lr, [sp, #4]
34180b40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
34180b44:	b004      	add	sp, #16
34180b46:	4770      	bx	lr

34180b48 <__aeabi_d2lz>:
34180b48:	4602      	mov	r2, r0
34180b4a:	b508      	push	{r3, lr}
34180b4c:	460b      	mov	r3, r1
34180b4e:	ec43 2b17 	vmov	d7, r2, r3
34180b52:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
34180b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34180b5a:	d403      	bmi.n	34180b64 <__aeabi_d2lz+0x1c>
34180b5c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
34180b60:	f000 b80a 	b.w	34180b78 <__aeabi_d2ulz>
34180b64:	eeb1 7b47 	vneg.f64	d7, d7
34180b68:	ec51 0b17 	vmov	r0, r1, d7
34180b6c:	f000 f804 	bl	34180b78 <__aeabi_d2ulz>
34180b70:	4240      	negs	r0, r0
34180b72:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
34180b76:	bd08      	pop	{r3, pc}

34180b78 <__aeabi_d2ulz>:
34180b78:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 34180ba8 <__aeabi_d2ulz+0x30>
34180b7c:	ec41 0b17 	vmov	d7, r0, r1
34180b80:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 34180bb0 <__aeabi_d2ulz+0x38>
34180b84:	ee27 6b06 	vmul.f64	d6, d7, d6
34180b88:	eebc 6bc6 	vcvt.u32.f64	s12, d6
34180b8c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
34180b90:	ee16 1a10 	vmov	r1, s12
34180b94:	eea4 7b45 	vfms.f64	d7, d4, d5
34180b98:	eefc 7bc7 	vcvt.u32.f64	s15, d7
34180b9c:	ee17 0a90 	vmov	r0, s15
34180ba0:	4770      	bx	lr
34180ba2:	bf00      	nop
34180ba4:	f3af 8000 	nop.w
34180ba8:	00000000 	.word	0x00000000
34180bac:	3df00000 	.word	0x3df00000
34180bb0:	00000000 	.word	0x00000000
34180bb4:	41f00000 	.word	0x41f00000

34180bb8 <__udivmoddi4>:
34180bb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34180bbc:	9d09      	ldr	r5, [sp, #36]	@ 0x24
34180bbe:	4688      	mov	r8, r1
34180bc0:	4604      	mov	r4, r0
34180bc2:	468e      	mov	lr, r1
34180bc4:	2b00      	cmp	r3, #0
34180bc6:	d14a      	bne.n	34180c5e <__udivmoddi4+0xa6>
34180bc8:	428a      	cmp	r2, r1
34180bca:	4617      	mov	r7, r2
34180bcc:	d95f      	bls.n	34180c8e <__udivmoddi4+0xd6>
34180bce:	fab2 f682 	clz	r6, r2
34180bd2:	b14e      	cbz	r6, 34180be8 <__udivmoddi4+0x30>
34180bd4:	f1c6 0320 	rsb	r3, r6, #32
34180bd8:	fa01 fe06 	lsl.w	lr, r1, r6
34180bdc:	40b7      	lsls	r7, r6
34180bde:	40b4      	lsls	r4, r6
34180be0:	fa20 f303 	lsr.w	r3, r0, r3
34180be4:	ea43 0e0e 	orr.w	lr, r3, lr
34180be8:	ea4f 4817 	mov.w	r8, r7, lsr #16
34180bec:	fa1f fc87 	uxth.w	ip, r7
34180bf0:	0c23      	lsrs	r3, r4, #16
34180bf2:	fbbe f1f8 	udiv	r1, lr, r8
34180bf6:	fb08 ee11 	mls	lr, r8, r1, lr
34180bfa:	fb01 f20c 	mul.w	r2, r1, ip
34180bfe:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
34180c02:	429a      	cmp	r2, r3
34180c04:	d907      	bls.n	34180c16 <__udivmoddi4+0x5e>
34180c06:	18fb      	adds	r3, r7, r3
34180c08:	f101 30ff 	add.w	r0, r1, #4294967295
34180c0c:	d202      	bcs.n	34180c14 <__udivmoddi4+0x5c>
34180c0e:	429a      	cmp	r2, r3
34180c10:	f200 8154 	bhi.w	34180ebc <__udivmoddi4+0x304>
34180c14:	4601      	mov	r1, r0
34180c16:	1a9b      	subs	r3, r3, r2
34180c18:	b2a2      	uxth	r2, r4
34180c1a:	fbb3 f0f8 	udiv	r0, r3, r8
34180c1e:	fb08 3310 	mls	r3, r8, r0, r3
34180c22:	fb00 fc0c 	mul.w	ip, r0, ip
34180c26:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
34180c2a:	4594      	cmp	ip, r2
34180c2c:	d90b      	bls.n	34180c46 <__udivmoddi4+0x8e>
34180c2e:	18ba      	adds	r2, r7, r2
34180c30:	f100 33ff 	add.w	r3, r0, #4294967295
34180c34:	bf2c      	ite	cs
34180c36:	2401      	movcs	r4, #1
34180c38:	2400      	movcc	r4, #0
34180c3a:	4594      	cmp	ip, r2
34180c3c:	d902      	bls.n	34180c44 <__udivmoddi4+0x8c>
34180c3e:	2c00      	cmp	r4, #0
34180c40:	f000 813f 	beq.w	34180ec2 <__udivmoddi4+0x30a>
34180c44:	4618      	mov	r0, r3
34180c46:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
34180c4a:	eba2 020c 	sub.w	r2, r2, ip
34180c4e:	2100      	movs	r1, #0
34180c50:	b11d      	cbz	r5, 34180c5a <__udivmoddi4+0xa2>
34180c52:	40f2      	lsrs	r2, r6
34180c54:	2300      	movs	r3, #0
34180c56:	e9c5 2300 	strd	r2, r3, [r5]
34180c5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34180c5e:	428b      	cmp	r3, r1
34180c60:	d905      	bls.n	34180c6e <__udivmoddi4+0xb6>
34180c62:	b10d      	cbz	r5, 34180c68 <__udivmoddi4+0xb0>
34180c64:	e9c5 0100 	strd	r0, r1, [r5]
34180c68:	2100      	movs	r1, #0
34180c6a:	4608      	mov	r0, r1
34180c6c:	e7f5      	b.n	34180c5a <__udivmoddi4+0xa2>
34180c6e:	fab3 f183 	clz	r1, r3
34180c72:	2900      	cmp	r1, #0
34180c74:	d14e      	bne.n	34180d14 <__udivmoddi4+0x15c>
34180c76:	4543      	cmp	r3, r8
34180c78:	f0c0 8112 	bcc.w	34180ea0 <__udivmoddi4+0x2e8>
34180c7c:	4282      	cmp	r2, r0
34180c7e:	f240 810f 	bls.w	34180ea0 <__udivmoddi4+0x2e8>
34180c82:	4608      	mov	r0, r1
34180c84:	2d00      	cmp	r5, #0
34180c86:	d0e8      	beq.n	34180c5a <__udivmoddi4+0xa2>
34180c88:	e9c5 4e00 	strd	r4, lr, [r5]
34180c8c:	e7e5      	b.n	34180c5a <__udivmoddi4+0xa2>
34180c8e:	2a00      	cmp	r2, #0
34180c90:	f000 80ac 	beq.w	34180dec <__udivmoddi4+0x234>
34180c94:	fab2 f682 	clz	r6, r2
34180c98:	2e00      	cmp	r6, #0
34180c9a:	f040 80bb 	bne.w	34180e14 <__udivmoddi4+0x25c>
34180c9e:	1a8b      	subs	r3, r1, r2
34180ca0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
34180ca4:	b2bc      	uxth	r4, r7
34180ca6:	2101      	movs	r1, #1
34180ca8:	0c02      	lsrs	r2, r0, #16
34180caa:	b280      	uxth	r0, r0
34180cac:	fbb3 fcfe 	udiv	ip, r3, lr
34180cb0:	fb0e 331c 	mls	r3, lr, ip, r3
34180cb4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
34180cb8:	fb04 f20c 	mul.w	r2, r4, ip
34180cbc:	429a      	cmp	r2, r3
34180cbe:	d90e      	bls.n	34180cde <__udivmoddi4+0x126>
34180cc0:	18fb      	adds	r3, r7, r3
34180cc2:	f10c 38ff 	add.w	r8, ip, #4294967295
34180cc6:	bf2c      	ite	cs
34180cc8:	f04f 0901 	movcs.w	r9, #1
34180ccc:	f04f 0900 	movcc.w	r9, #0
34180cd0:	429a      	cmp	r2, r3
34180cd2:	d903      	bls.n	34180cdc <__udivmoddi4+0x124>
34180cd4:	f1b9 0f00 	cmp.w	r9, #0
34180cd8:	f000 80ec 	beq.w	34180eb4 <__udivmoddi4+0x2fc>
34180cdc:	46c4      	mov	ip, r8
34180cde:	1a9b      	subs	r3, r3, r2
34180ce0:	fbb3 f8fe 	udiv	r8, r3, lr
34180ce4:	fb0e 3318 	mls	r3, lr, r8, r3
34180ce8:	fb04 f408 	mul.w	r4, r4, r8
34180cec:	ea40 4203 	orr.w	r2, r0, r3, lsl #16
34180cf0:	4294      	cmp	r4, r2
34180cf2:	d90b      	bls.n	34180d0c <__udivmoddi4+0x154>
34180cf4:	18ba      	adds	r2, r7, r2
34180cf6:	f108 33ff 	add.w	r3, r8, #4294967295
34180cfa:	bf2c      	ite	cs
34180cfc:	2001      	movcs	r0, #1
34180cfe:	2000      	movcc	r0, #0
34180d00:	4294      	cmp	r4, r2
34180d02:	d902      	bls.n	34180d0a <__udivmoddi4+0x152>
34180d04:	2800      	cmp	r0, #0
34180d06:	f000 80d1 	beq.w	34180eac <__udivmoddi4+0x2f4>
34180d0a:	4698      	mov	r8, r3
34180d0c:	1b12      	subs	r2, r2, r4
34180d0e:	ea48 400c 	orr.w	r0, r8, ip, lsl #16
34180d12:	e79d      	b.n	34180c50 <__udivmoddi4+0x98>
34180d14:	f1c1 0620 	rsb	r6, r1, #32
34180d18:	408b      	lsls	r3, r1
34180d1a:	fa08 f401 	lsl.w	r4, r8, r1
34180d1e:	fa00 f901 	lsl.w	r9, r0, r1
34180d22:	fa22 f706 	lsr.w	r7, r2, r6
34180d26:	fa28 f806 	lsr.w	r8, r8, r6
34180d2a:	408a      	lsls	r2, r1
34180d2c:	431f      	orrs	r7, r3
34180d2e:	fa20 f306 	lsr.w	r3, r0, r6
34180d32:	0c38      	lsrs	r0, r7, #16
34180d34:	4323      	orrs	r3, r4
34180d36:	fa1f fc87 	uxth.w	ip, r7
34180d3a:	0c1c      	lsrs	r4, r3, #16
34180d3c:	fbb8 fef0 	udiv	lr, r8, r0
34180d40:	fb00 881e 	mls	r8, r0, lr, r8
34180d44:	ea44 4408 	orr.w	r4, r4, r8, lsl #16
34180d48:	fb0e f80c 	mul.w	r8, lr, ip
34180d4c:	45a0      	cmp	r8, r4
34180d4e:	d90e      	bls.n	34180d6e <__udivmoddi4+0x1b6>
34180d50:	193c      	adds	r4, r7, r4
34180d52:	f10e 3aff 	add.w	sl, lr, #4294967295
34180d56:	bf2c      	ite	cs
34180d58:	f04f 0b01 	movcs.w	fp, #1
34180d5c:	f04f 0b00 	movcc.w	fp, #0
34180d60:	45a0      	cmp	r8, r4
34180d62:	d903      	bls.n	34180d6c <__udivmoddi4+0x1b4>
34180d64:	f1bb 0f00 	cmp.w	fp, #0
34180d68:	f000 80b8 	beq.w	34180edc <__udivmoddi4+0x324>
34180d6c:	46d6      	mov	lr, sl
34180d6e:	eba4 0408 	sub.w	r4, r4, r8
34180d72:	fa1f f883 	uxth.w	r8, r3
34180d76:	fbb4 f3f0 	udiv	r3, r4, r0
34180d7a:	fb00 4413 	mls	r4, r0, r3, r4
34180d7e:	fb03 fc0c 	mul.w	ip, r3, ip
34180d82:	ea48 4404 	orr.w	r4, r8, r4, lsl #16
34180d86:	45a4      	cmp	ip, r4
34180d88:	d90e      	bls.n	34180da8 <__udivmoddi4+0x1f0>
34180d8a:	193c      	adds	r4, r7, r4
34180d8c:	f103 30ff 	add.w	r0, r3, #4294967295
34180d90:	bf2c      	ite	cs
34180d92:	f04f 0801 	movcs.w	r8, #1
34180d96:	f04f 0800 	movcc.w	r8, #0
34180d9a:	45a4      	cmp	ip, r4
34180d9c:	d903      	bls.n	34180da6 <__udivmoddi4+0x1ee>
34180d9e:	f1b8 0f00 	cmp.w	r8, #0
34180da2:	f000 809f 	beq.w	34180ee4 <__udivmoddi4+0x32c>
34180da6:	4603      	mov	r3, r0
34180da8:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
34180dac:	eba4 040c 	sub.w	r4, r4, ip
34180db0:	fba0 ec02 	umull	lr, ip, r0, r2
34180db4:	4564      	cmp	r4, ip
34180db6:	4673      	mov	r3, lr
34180db8:	46e0      	mov	r8, ip
34180dba:	d302      	bcc.n	34180dc2 <__udivmoddi4+0x20a>
34180dbc:	d107      	bne.n	34180dce <__udivmoddi4+0x216>
34180dbe:	45f1      	cmp	r9, lr
34180dc0:	d205      	bcs.n	34180dce <__udivmoddi4+0x216>
34180dc2:	ebbe 0302 	subs.w	r3, lr, r2
34180dc6:	eb6c 0c07 	sbc.w	ip, ip, r7
34180dca:	3801      	subs	r0, #1
34180dcc:	46e0      	mov	r8, ip
34180dce:	b15d      	cbz	r5, 34180de8 <__udivmoddi4+0x230>
34180dd0:	ebb9 0203 	subs.w	r2, r9, r3
34180dd4:	eb64 0408 	sbc.w	r4, r4, r8
34180dd8:	fa04 f606 	lsl.w	r6, r4, r6
34180ddc:	fa22 f301 	lsr.w	r3, r2, r1
34180de0:	40cc      	lsrs	r4, r1
34180de2:	431e      	orrs	r6, r3
34180de4:	e9c5 6400 	strd	r6, r4, [r5]
34180de8:	2100      	movs	r1, #0
34180dea:	e736      	b.n	34180c5a <__udivmoddi4+0xa2>
34180dec:	fbb1 fcf2 	udiv	ip, r1, r2
34180df0:	0c01      	lsrs	r1, r0, #16
34180df2:	4614      	mov	r4, r2
34180df4:	b280      	uxth	r0, r0
34180df6:	4696      	mov	lr, r2
34180df8:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34180dfc:	2620      	movs	r6, #32
34180dfe:	4690      	mov	r8, r2
34180e00:	ea40 4301 	orr.w	r3, r0, r1, lsl #16
34180e04:	4610      	mov	r0, r2
34180e06:	fbb1 f1f2 	udiv	r1, r1, r2
34180e0a:	eba3 0308 	sub.w	r3, r3, r8
34180e0e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
34180e12:	e74b      	b.n	34180cac <__udivmoddi4+0xf4>
34180e14:	40b7      	lsls	r7, r6
34180e16:	f1c6 0320 	rsb	r3, r6, #32
34180e1a:	fa01 f206 	lsl.w	r2, r1, r6
34180e1e:	fa21 f803 	lsr.w	r8, r1, r3
34180e22:	ea4f 4e17 	mov.w	lr, r7, lsr #16
34180e26:	fa20 f303 	lsr.w	r3, r0, r3
34180e2a:	b2bc      	uxth	r4, r7
34180e2c:	40b0      	lsls	r0, r6
34180e2e:	4313      	orrs	r3, r2
34180e30:	0c02      	lsrs	r2, r0, #16
34180e32:	0c19      	lsrs	r1, r3, #16
34180e34:	b280      	uxth	r0, r0
34180e36:	fbb8 f9fe 	udiv	r9, r8, lr
34180e3a:	fb0e 8819 	mls	r8, lr, r9, r8
34180e3e:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
34180e42:	fb09 f804 	mul.w	r8, r9, r4
34180e46:	4588      	cmp	r8, r1
34180e48:	d951      	bls.n	34180eee <__udivmoddi4+0x336>
34180e4a:	1879      	adds	r1, r7, r1
34180e4c:	f109 3cff 	add.w	ip, r9, #4294967295
34180e50:	bf2c      	ite	cs
34180e52:	f04f 0a01 	movcs.w	sl, #1
34180e56:	f04f 0a00 	movcc.w	sl, #0
34180e5a:	4588      	cmp	r8, r1
34180e5c:	d902      	bls.n	34180e64 <__udivmoddi4+0x2ac>
34180e5e:	f1ba 0f00 	cmp.w	sl, #0
34180e62:	d031      	beq.n	34180ec8 <__udivmoddi4+0x310>
34180e64:	eba1 0108 	sub.w	r1, r1, r8
34180e68:	fbb1 f9fe 	udiv	r9, r1, lr
34180e6c:	fb09 f804 	mul.w	r8, r9, r4
34180e70:	fb0e 1119 	mls	r1, lr, r9, r1
34180e74:	b29b      	uxth	r3, r3
34180e76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34180e7a:	4543      	cmp	r3, r8
34180e7c:	d235      	bcs.n	34180eea <__udivmoddi4+0x332>
34180e7e:	18fb      	adds	r3, r7, r3
34180e80:	f109 31ff 	add.w	r1, r9, #4294967295
34180e84:	bf2c      	ite	cs
34180e86:	f04f 0a01 	movcs.w	sl, #1
34180e8a:	f04f 0a00 	movcc.w	sl, #0
34180e8e:	4543      	cmp	r3, r8
34180e90:	d2bb      	bcs.n	34180e0a <__udivmoddi4+0x252>
34180e92:	f1ba 0f00 	cmp.w	sl, #0
34180e96:	d1b8      	bne.n	34180e0a <__udivmoddi4+0x252>
34180e98:	f1a9 0102 	sub.w	r1, r9, #2
34180e9c:	443b      	add	r3, r7
34180e9e:	e7b4      	b.n	34180e0a <__udivmoddi4+0x252>
34180ea0:	1a84      	subs	r4, r0, r2
34180ea2:	eb68 0203 	sbc.w	r2, r8, r3
34180ea6:	2001      	movs	r0, #1
34180ea8:	4696      	mov	lr, r2
34180eaa:	e6eb      	b.n	34180c84 <__udivmoddi4+0xcc>
34180eac:	443a      	add	r2, r7
34180eae:	f1a8 0802 	sub.w	r8, r8, #2
34180eb2:	e72b      	b.n	34180d0c <__udivmoddi4+0x154>
34180eb4:	f1ac 0c02 	sub.w	ip, ip, #2
34180eb8:	443b      	add	r3, r7
34180eba:	e710      	b.n	34180cde <__udivmoddi4+0x126>
34180ebc:	3902      	subs	r1, #2
34180ebe:	443b      	add	r3, r7
34180ec0:	e6a9      	b.n	34180c16 <__udivmoddi4+0x5e>
34180ec2:	443a      	add	r2, r7
34180ec4:	3802      	subs	r0, #2
34180ec6:	e6be      	b.n	34180c46 <__udivmoddi4+0x8e>
34180ec8:	eba7 0808 	sub.w	r8, r7, r8
34180ecc:	f1a9 0c02 	sub.w	ip, r9, #2
34180ed0:	4441      	add	r1, r8
34180ed2:	fbb1 f9fe 	udiv	r9, r1, lr
34180ed6:	fb09 f804 	mul.w	r8, r9, r4
34180eda:	e7c9      	b.n	34180e70 <__udivmoddi4+0x2b8>
34180edc:	f1ae 0e02 	sub.w	lr, lr, #2
34180ee0:	443c      	add	r4, r7
34180ee2:	e744      	b.n	34180d6e <__udivmoddi4+0x1b6>
34180ee4:	3b02      	subs	r3, #2
34180ee6:	443c      	add	r4, r7
34180ee8:	e75e      	b.n	34180da8 <__udivmoddi4+0x1f0>
34180eea:	4649      	mov	r1, r9
34180eec:	e78d      	b.n	34180e0a <__udivmoddi4+0x252>
34180eee:	eba1 0108 	sub.w	r1, r1, r8
34180ef2:	46cc      	mov	ip, r9
34180ef4:	fbb1 f9fe 	udiv	r9, r1, lr
34180ef8:	fb09 f804 	mul.w	r8, r9, r4
34180efc:	e7b8      	b.n	34180e70 <__udivmoddi4+0x2b8>
34180efe:	bf00      	nop

34180f00 <__aeabi_idiv0>:
34180f00:	4770      	bx	lr
34180f02:	bf00      	nop

34180f04 <LL_AHB4_GRP1_EnableClock>:
  * @retval None
  */
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34180f04:	4b04      	ldr	r3, [pc, #16]	@ (34180f18 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34180f06:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34180f08:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->AHB4ENR);
34180f0c:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34180f10:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34180f12:	9b01      	ldr	r3, [sp, #4]
}
34180f14:	b002      	add	sp, #8
34180f16:	4770      	bx	lr
34180f18:	56028000 	.word	0x56028000

34180f1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
34180f1c:	b530      	push	{r4, r5, lr}
34180f1e:	b0b7      	sub	sp, #220	@ 0xdc
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
34180f20:	2298      	movs	r2, #152	@ 0x98
34180f22:	2100      	movs	r1, #0
34180f24:	a810      	add	r0, sp, #64	@ 0x40
34180f26:	f008 fc62 	bl	341897ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
34180f2a:	2240      	movs	r2, #64	@ 0x40
34180f2c:	2100      	movs	r1, #0
34180f2e:	4668      	mov	r0, sp
34180f30:	f008 fc5d 	bl	341897ee <memset>

  /** Configure the System Power Supply
  */
  if (HAL_PWREx_ConfigSupply(PWR_EXTERNAL_SOURCE_SUPPLY) != HAL_OK)
34180f34:	2000      	movs	r0, #0
34180f36:	f000 fe89 	bl	34181c4c <HAL_PWREx_ConfigSupply>
34180f3a:	b108      	cbz	r0, 34180f40 <SystemClock_Config+0x24>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
34180f3c:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
34180f3e:	e7fe      	b.n	34180f3e <SystemClock_Config+0x22>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
34180f40:	2302      	movs	r3, #2
34180f42:	9310      	str	r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
34180f44:	2308      	movs	r3, #8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
34180f46:	9015      	str	r0, [sp, #84]	@ 0x54
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
34180f48:	e9cd 3013 	strd	r3, r0, [sp, #76]	@ 0x4c
  RCC_OscInitStruct.PLL1.PLLState = RCC_PLL_NONE;
34180f4c:	901a      	str	r0, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180f4e:	9021      	str	r0, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180f50:	9028      	str	r0, [sp, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180f52:	902f      	str	r0, [sp, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180f54:	a810      	add	r0, sp, #64	@ 0x40
34180f56:	f001 f8a3 	bl	341820a0 <HAL_RCC_OscConfig>
34180f5a:	b108      	cbz	r0, 34180f60 <SystemClock_Config+0x44>
34180f5c:	b672      	cpsid	i
  while (1)
34180f5e:	e7fe      	b.n	34180f5e <SystemClock_Config+0x42>
  HAL_RCC_GetClockConfig(&RCC_ClkInitStruct);
34180f60:	4668      	mov	r0, sp
34180f62:	f001 ff23 	bl	34182dac <HAL_RCC_GetClockConfig>
  if ((RCC_ClkInitStruct.CPUCLKSource == RCC_CPUCLKSOURCE_IC1) ||
34180f66:	9b01      	ldr	r3, [sp, #4]
34180f68:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34180f6c:	d003      	beq.n	34180f76 <SystemClock_Config+0x5a>
34180f6e:	9b02      	ldr	r3, [sp, #8]
34180f70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34180f74:	d10a      	bne.n	34180f8c <SystemClock_Config+0x70>
    RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_HSI;
34180f76:	2003      	movs	r0, #3
34180f78:	2300      	movs	r3, #0
34180f7a:	e9cd 0300 	strd	r0, r3, [sp]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180f7e:	4668      	mov	r0, sp
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
34180f80:	9302      	str	r3, [sp, #8]
    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180f82:	f001 fc89 	bl	34182898 <HAL_RCC_ClockConfig>
34180f86:	b108      	cbz	r0, 34180f8c <SystemClock_Config+0x70>
34180f88:	b672      	cpsid	i
  while (1)
34180f8a:	e7fe      	b.n	34180f8a <SystemClock_Config+0x6e>
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
34180f8c:	2201      	movs	r2, #1
34180f8e:	2310      	movs	r3, #16
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34180f90:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL1.PLLM = 4;
34180f92:	2404      	movs	r4, #4
  RCC_OscInitStruct.PLL1.PLLN = 75;
34180f94:	214b      	movs	r1, #75	@ 0x4b
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
34180f96:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34180f9a:	2300      	movs	r3, #0
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180f9c:	a810      	add	r0, sp, #64	@ 0x40
  RCC_OscInitStruct.PLL1.PLLSource = RCC_PLLSOURCE_HSI;
34180f9e:	e9cd 531a 	strd	r5, r3, [sp, #104]	@ 0x68
  RCC_OscInitStruct.PLL1.PLLFractional = 0;
34180fa2:	e9cd 311d 	strd	r3, r1, [sp, #116]	@ 0x74
  RCC_OscInitStruct.PLL1.PLLP2 = 1;
34180fa6:	e9cd 221f 	strd	r2, r2, [sp, #124]	@ 0x7c
  RCC_OscInitStruct.PLL1.PLLM = 4;
34180faa:	941c      	str	r4, [sp, #112]	@ 0x70
  RCC_OscInitStruct.PLL2.PLLState = RCC_PLL_NONE;
34180fac:	9321      	str	r3, [sp, #132]	@ 0x84
  RCC_OscInitStruct.PLL3.PLLState = RCC_PLL_NONE;
34180fae:	9328      	str	r3, [sp, #160]	@ 0xa0
  RCC_OscInitStruct.PLL4.PLLState = RCC_PLL_NONE;
34180fb0:	932f      	str	r3, [sp, #188]	@ 0xbc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
34180fb2:	f001 f875 	bl	341820a0 <HAL_RCC_OscConfig>
34180fb6:	b108      	cbz	r0, 34180fbc <SystemClock_Config+0xa0>
34180fb8:	b672      	cpsid	i
  while (1)
34180fba:	e7fe      	b.n	34180fba <SystemClock_Config+0x9e>
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34180fbc:	f44f 3340 	mov.w	r3, #196608	@ 0x30000
34180fc0:	227f      	movs	r2, #127	@ 0x7f
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34180fc2:	f04f 7140 	mov.w	r1, #50331648	@ 0x3000000
  RCC_ClkInitStruct.CPUCLKSource = RCC_CPUCLKSOURCE_IC1;
34180fc6:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
34180fca:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
34180fce:	e9cd 1302 	strd	r1, r3, [sp, #8]
  RCC_ClkInitStruct.IC2Selection.ClockDivider = 3;
34180fd2:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
34180fd4:	e9cd 0004 	strd	r0, r0, [sp, #16]
  RCC_ClkInitStruct.APB5CLKDivider = RCC_APB5_DIV1;
34180fd8:	e9cd 0006 	strd	r0, r0, [sp, #24]
  RCC_ClkInitStruct.IC1Selection.ClockDivider = 2;
34180fdc:	e9cd 0508 	strd	r0, r5, [sp, #32]
  RCC_ClkInitStruct.IC6Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180fe0:	e9cd 300b 	strd	r3, r0, [sp, #44]	@ 0x2c
  RCC_ClkInitStruct.IC11Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180fe4:	e9cd 400d 	strd	r4, r0, [sp, #52]	@ 0x34
  RCC_ClkInitStruct.IC2Selection.ClockSelection = RCC_ICCLKSOURCE_PLL1;
34180fe8:	900a      	str	r0, [sp, #40]	@ 0x28
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180fea:	4668      	mov	r0, sp
  RCC_ClkInitStruct.IC11Selection.ClockDivider = 3;
34180fec:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct) != HAL_OK)
34180fee:	f001 fc53 	bl	34182898 <HAL_RCC_ClockConfig>
34180ff2:	b108      	cbz	r0, 34180ff8 <SystemClock_Config+0xdc>
34180ff4:	b672      	cpsid	i
  while (1)
34180ff6:	e7fe      	b.n	34180ff6 <SystemClock_Config+0xda>
}
34180ff8:	b037      	add	sp, #220	@ 0xdc
34180ffa:	bd30      	pop	{r4, r5, pc}

34180ffc <main>:
{
34180ffc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
34180ffe:	f000 fb2d 	bl	3418165c <HAL_Init>
  SystemClock_Config();
34181002:	f7ff ff8b 	bl	34180f1c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
34181006:	2214      	movs	r2, #20
34181008:	2100      	movs	r1, #0
3418100a:	a801      	add	r0, sp, #4
3418100c:	f008 fbef 	bl	341897ee <memset>
  __HAL_RCC_GPIOH_CLK_ENABLE();
34181010:	2080      	movs	r0, #128	@ 0x80
34181012:	f7ff ff77 	bl	34180f04 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
34181016:	2004      	movs	r0, #4
34181018:	f7ff ff74 	bl	34180f04 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOE_CLK_ENABLE();
3418101c:	2010      	movs	r0, #16
3418101e:	f7ff ff71 	bl	34180f04 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOD_CLK_ENABLE();
34181022:	2008      	movs	r0, #8
34181024:	f7ff ff6e 	bl	34180f04 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
34181028:	2002      	movs	r0, #2
3418102a:	f7ff ff6b 	bl	34180f04 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOP_CLK_ENABLE();
3418102e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
34181032:	f7ff ff67 	bl	34180f04 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOO_CLK_ENABLE();
34181036:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
3418103a:	f7ff ff63 	bl	34180f04 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOG_CLK_ENABLE();
3418103e:	2040      	movs	r0, #64	@ 0x40
34181040:	f7ff ff60 	bl	34180f04 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOF_CLK_ENABLE();
34181044:	2020      	movs	r0, #32
34181046:	f7ff ff5d 	bl	34180f04 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPION_CLK_ENABLE();
3418104a:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
3418104e:	f7ff ff59 	bl	34180f04 <LL_AHB4_GRP1_EnableClock>
  __HAL_RCC_GPIOA_CLK_ENABLE();
34181052:	2001      	movs	r0, #1
34181054:	f7ff ff56 	bl	34180f04 <LL_AHB4_GRP1_EnableClock>
  HAL_GPIO_WritePin(GPIOO, GPIO_PIN_1, GPIO_PIN_RESET);
34181058:	2200      	movs	r2, #0
3418105a:	2102      	movs	r1, #2
3418105c:	4836      	ldr	r0, [pc, #216]	@ (34181138 <main+0x13c>)
3418105e:	f000 fddb 	bl	34181c18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pull = GPIO_NOPULL;
34181062:	2500      	movs	r5, #0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
34181064:	2202      	movs	r2, #2
34181066:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOO, &GPIO_InitStruct);
34181068:	4833      	ldr	r0, [pc, #204]	@ (34181138 <main+0x13c>)
3418106a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
3418106c:	e9cd 2301 	strd	r2, r3, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
34181070:	e9cd 5503 	strd	r5, r5, [sp, #12]
  HAL_GPIO_Init(GPIOO, &GPIO_InitStruct);
34181074:	f000 fbb8 	bl	341817e8 <HAL_GPIO_Init>
  huart1.Init.BaudRate = 115200;
34181078:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
  huart1.Instance = USART1;
3418107c:	4c2f      	ldr	r4, [pc, #188]	@ (3418113c <main+0x140>)
  huart1.Init.BaudRate = 115200;
3418107e:	4930      	ldr	r1, [pc, #192]	@ (34181140 <main+0x144>)
  if (HAL_UART_Init(&huart1) != HAL_OK)
34181080:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
34181082:	e9c4 1300 	strd	r1, r3, [r4]
  huart1.Init.Mode = UART_MODE_TX_RX;
34181086:	230c      	movs	r3, #12
  huart1.Init.StopBits = UART_STOPBITS_1;
34181088:	e9c4 5502 	strd	r5, r5, [r4, #8]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
3418108c:	e9c4 3505 	strd	r3, r5, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
34181090:	e9c4 5507 	strd	r5, r5, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
34181094:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
  huart1.Init.Parity = UART_PARITY_NONE;
34181098:	6125      	str	r5, [r4, #16]
  if (HAL_UART_Init(&huart1) != HAL_OK)
3418109a:	f007 f975 	bl	34188388 <HAL_UART_Init>
3418109e:	4601      	mov	r1, r0
341810a0:	b108      	cbz	r0, 341810a6 <main+0xaa>
341810a2:	b672      	cpsid	i
  while (1)
341810a4:	e7fe      	b.n	341810a4 <main+0xa8>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
341810a6:	4620      	mov	r0, r4
341810a8:	f007 fb06 	bl	341886b8 <HAL_UARTEx_SetTxFifoThreshold>
341810ac:	4601      	mov	r1, r0
341810ae:	b108      	cbz	r0, 341810b4 <main+0xb8>
341810b0:	b672      	cpsid	i
  while (1)
341810b2:	e7fe      	b.n	341810b2 <main+0xb6>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
341810b4:	4620      	mov	r0, r4
341810b6:	f007 fb99 	bl	341887ec <HAL_UARTEx_SetRxFifoThreshold>
341810ba:	b108      	cbz	r0, 341810c0 <main+0xc4>
341810bc:	b672      	cpsid	i
  while (1)
341810be:	e7fe      	b.n	341810be <main+0xc2>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
341810c0:	4620      	mov	r0, r4
341810c2:	f007 fa73 	bl	341885ac <HAL_UARTEx_DisableFifoMode>
341810c6:	4604      	mov	r4, r0
341810c8:	b108      	cbz	r0, 341810ce <main+0xd2>
341810ca:	b672      	cpsid	i
  while (1)
341810cc:	e7fe      	b.n	341810cc <main+0xd0>
  HAL_Delay(100);
341810ce:	2064      	movs	r0, #100	@ 0x64
341810d0:	f000 fae8 	bl	341816a4 <HAL_Delay>
    appStack = *((uint32_t*)APPLICATION_ADDRESS);
341810d4:	f04f 5350 	mov.w	r3, #872415232	@ 0x34000000
341810d8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
    appEntry = *((uint32_t*)(APPLICATION_ADDRESS + 4));
341810dc:	f8d3 0404 	ldr.w	r0, [r3, #1028]	@ 0x404
    if ((appStack & 0xFF000000) != 0x34000000)
341810e0:	f002 437f 	and.w	r3, r2, #4278190080	@ 0xff000000
341810e4:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
341810e8:	d001      	beq.n	341810ee <main+0xf2>
341810ea:	b672      	cpsid	i
  while (1)
341810ec:	e7fe      	b.n	341810ec <main+0xf0>
341810ee:	b672      	cpsid	i
        NVIC->ICER[i] = 0xFFFFFFFF;
341810f0:	f04f 0e08 	mov.w	lr, #8
    SysTick->CTRL = 0;
341810f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
        NVIC->ICER[i] = 0xFFFFFFFF;
341810f8:	f04f 31ff 	mov.w	r1, #4294967295
341810fc:	f04e e001 	dls	lr, lr
    SysTick->CTRL = 0;
34181100:	611c      	str	r4, [r3, #16]
    SysTick->LOAD = 0;
34181102:	615c      	str	r4, [r3, #20]
    SysTick->VAL = 0;
34181104:	619c      	str	r4, [r3, #24]
        NVIC->ICER[i] = 0xFFFFFFFF;
34181106:	00a3      	lsls	r3, r4, #2
34181108:	f103 4360 	add.w	r3, r3, #3758096384	@ 0xe0000000
3418110c:	f503 4361 	add.w	r3, r3, #57600	@ 0xe100
34181110:	f8c3 1080 	str.w	r1, [r3, #128]	@ 0x80
    for (uint32_t i = 0; i < 8; i++)
34181114:	3401      	adds	r4, #1
        NVIC->ICPR[i] = 0xFFFFFFFF;
34181116:	f8c3 1180 	str.w	r1, [r3, #384]	@ 0x180
    for (uint32_t i = 0; i < 8; i++)
3418111a:	f00f c00d 	le	lr, 34181106 <main+0x10a>
    SCB->VTOR = APPLICATION_ADDRESS;
3418111e:	4b09      	ldr	r3, [pc, #36]	@ (34181144 <main+0x148>)
34181120:	4909      	ldr	r1, [pc, #36]	@ (34181148 <main+0x14c>)
34181122:	6099      	str	r1, [r3, #8]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
34181124:	f382 8808 	msr	MSP, r2
  __ASM volatile ("dsb 0xF":::"memory");
34181128:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
3418112c:	f3bf 8f6f 	isb	sy
  __ASM volatile ("cpsie i" : : : "memory");
34181130:	b662      	cpsie	i
    app_reset_handler();
34181132:	4780      	blx	r0
    while(1);
34181134:	e7fe      	b.n	34181134 <main+0x138>
34181136:	bf00      	nop
34181138:	56023800 	.word	0x56023800
3418113c:	341c01f4 	.word	0x341c01f4
34181140:	52001000 	.word	0x52001000
34181144:	e000ed00 	.word	0xe000ed00
34181148:	34000400 	.word	0x34000400

3418114c <Error_Handler>:
  __ASM volatile ("cpsid i" : : : "memory");
3418114c:	b672      	cpsid	i
  while (1)
3418114e:	e7fe      	b.n	3418114e <Error_Handler+0x2>

34181150 <assert_failed>:
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
34181150:	4770      	bx	lr
	...

34181154 <LL_AHB4_GRP1_EnableClock>:
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34181154:	4b04      	ldr	r3, [pc, #16]	@ (34181168 <LL_AHB4_GRP1_EnableClock+0x14>)
{
34181156:	b082      	sub	sp, #8
  WRITE_REG(RCC->AHB4ENSR, Periphs);
34181158:	f8c3 0a5c 	str.w	r0, [r3, #2652]	@ 0xa5c
  tmpreg = READ_REG(RCC->AHB4ENR);
3418115c:	f8d3 325c 	ldr.w	r3, [r3, #604]	@ 0x25c
34181160:	9301      	str	r3, [sp, #4]
  (void)tmpreg;
34181162:	9b01      	ldr	r3, [sp, #4]
}
34181164:	b002      	add	sp, #8
34181166:	4770      	bx	lr
34181168:	56028000 	.word	0x56028000

3418116c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
3418116c:	b508      	push	{r3, lr}

  /* USER CODE END MspInit 0 */

  /* System interrupt init*/

  HAL_PWREx_EnableVddIO2();
3418116e:	f000 fd91 	bl	34181c94 <HAL_PWREx_EnableVddIO2>

  HAL_PWREx_EnableVddIO3();
34181172:	f000 fd97 	bl	34181ca4 <HAL_PWREx_EnableVddIO3>

  HAL_PWREx_EnableVddIO4();
34181176:	f000 fd9d 	bl	34181cb4 <HAL_PWREx_EnableVddIO4>
  HAL_PWREx_EnableVddIO5();

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
3418117a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_PWREx_EnableVddIO5();
3418117e:	f000 bda1 	b.w	34181cc4 <HAL_PWREx_EnableVddIO5>
	...

34181184 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
34181184:	b510      	push	{r4, lr}
34181186:	4604      	mov	r4, r0
34181188:	b0ea      	sub	sp, #424	@ 0x1a8
  GPIO_InitTypeDef GPIO_InitStruct = {0};
3418118a:	2214      	movs	r2, #20
3418118c:	2100      	movs	r1, #0
3418118e:	a801      	add	r0, sp, #4
34181190:	f008 fb2d 	bl	341897ee <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
34181194:	f44f 72c8 	mov.w	r2, #400	@ 0x190
34181198:	2100      	movs	r1, #0
3418119a:	a806      	add	r0, sp, #24
3418119c:	f008 fb27 	bl	341897ee <memset>
  if(huart->Instance==USART1)
341811a0:	6822      	ldr	r2, [r4, #0]
341811a2:	4b14      	ldr	r3, [pc, #80]	@ (341811f4 <HAL_UART_MspInit+0x70>)
341811a4:	429a      	cmp	r2, r3
341811a6:	d123      	bne.n	341811f0 <HAL_UART_MspInit+0x6c>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
341811a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
341811ac:	2200      	movs	r2, #0
341811ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
341811b2:	4b11      	ldr	r3, [pc, #68]	@ (341811f8 <HAL_UART_MspInit+0x74>)
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
341811b4:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
341811b6:	935a      	str	r3, [sp, #360]	@ 0x168
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
341811b8:	f001 ff56 	bl	34183068 <HAL_RCCEx_PeriphCLKConfig>
341811bc:	b108      	cbz	r0, 341811c2 <HAL_UART_MspInit+0x3e>
    {
      Error_Handler();
341811be:	f7ff ffc5 	bl	3418114c <Error_Handler>
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
  __IO uint32_t tmpreg;
  WRITE_REG(RCC->APB2ENSR, Periphs);
341811c2:	2010      	movs	r0, #16
341811c4:	4b0d      	ldr	r3, [pc, #52]	@ (341811fc <HAL_UART_MspInit+0x78>)
    /**USART1 GPIO Configuration
    PE5     ------> USART1_TX
    PE6     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
341811c6:	2260      	movs	r2, #96	@ 0x60
341811c8:	f8c3 0a6c 	str.w	r0, [r3, #2668]	@ 0xa6c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_REG(RCC->APB2ENR);
341811cc:	f8d3 326c 	ldr.w	r3, [r3, #620]	@ 0x26c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
341811d0:	a901      	add	r1, sp, #4
341811d2:	9300      	str	r3, [sp, #0]
  (void)tmpreg;
341811d4:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_GPIOE_CLK_ENABLE();
341811d6:	f7ff ffbd 	bl	34181154 <LL_AHB4_GRP1_EnableClock>
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
341811da:	2302      	movs	r3, #2
341811dc:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
341811e0:	2300      	movs	r3, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
341811e2:	e9cd 3303 	strd	r3, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
341811e6:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
341811e8:	4805      	ldr	r0, [pc, #20]	@ (34181200 <HAL_UART_MspInit+0x7c>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
341811ea:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
341811ec:	f000 fafc 	bl	341817e8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
341811f0:	b06a      	add	sp, #424	@ 0x1a8
341811f2:	bd10      	pop	{r4, pc}
341811f4:	52001000 	.word	0x52001000
341811f8:	07060030 	.word	0x07060030
341811fc:	56028000 	.word	0x56028000
34181200:	56021000 	.word	0x56021000

34181204 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
34181204:	e7fe      	b.n	34181204 <NMI_Handler>

34181206 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
34181206:	e7fe      	b.n	34181206 <HardFault_Handler>

34181208 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
34181208:	e7fe      	b.n	34181208 <MemManage_Handler>

3418120a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
3418120a:	e7fe      	b.n	3418120a <BusFault_Handler>

3418120c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
3418120c:	e7fe      	b.n	3418120c <UsageFault_Handler>

3418120e <SecureFault_Handler>:
void SecureFault_Handler(void)
{
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
3418120e:	e7fe      	b.n	3418120e <SecureFault_Handler>

34181210 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
34181210:	4770      	bx	lr

34181212 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
34181212:	4770      	bx	lr

34181214 <PendSV_Handler>:
}

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
34181214:	4770      	bx	lr

34181216 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
34181216:	f000 ba33 	b.w	34181680 <HAL_IncTick>

3418121a <_close>:
/* These are stub implementations to resolve libc warnings */

int _close(int file) 
{
    return -1;
}
3418121a:	f04f 30ff 	mov.w	r0, #4294967295
3418121e:	4770      	bx	lr

34181220 <_lseek>:

int _lseek(int file, int ptr, int dir) 
{
    return 0;
}
34181220:	2000      	movs	r0, #0
34181222:	4770      	bx	lr

34181224 <_read>:

int _read(int file, char *ptr, int len) 
{
    return 0;
}
34181224:	2000      	movs	r0, #0
34181226:	4770      	bx	lr

34181228 <_write>:
    /* Basic implementation - could be connected to UART for printf */
    for (int i = 0; i < len; i++) {
        /* Could output to UART here */
    }
    return len;
}
34181228:	4610      	mov	r0, r2
3418122a:	4770      	bx	lr

3418122c <_fstat>:

int _fstat(int file, struct stat *st) 
{
    st->st_mode = S_IFCHR;
3418122c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
    return 0;
}
34181230:	2000      	movs	r0, #0
    st->st_mode = S_IFCHR;
34181232:	604b      	str	r3, [r1, #4]
}
34181234:	4770      	bx	lr

34181236 <_isatty>:

int _isatty(int file) 
{
    return 1;
}
34181236:	2001      	movs	r0, #1
34181238:	4770      	bx	lr

3418123a <_getpid>:
}

__attribute__((weak)) int _getpid(void) 
{
    return 1;
}
3418123a:	2001      	movs	r0, #1
3418123c:	4770      	bx	lr

3418123e <_kill>:

__attribute__((weak)) int _kill(int pid, int sig) 
{
    return -1;
}
3418123e:	f04f 30ff 	mov.w	r0, #4294967295
34181242:	4770      	bx	lr

34181244 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
34181244:	4a0b      	ldr	r2, [pc, #44]	@ (34181274 <_sbrk+0x30>)
{
34181246:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
34181248:	6811      	ldr	r1, [r2, #0]
{
3418124a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
3418124c:	b909      	cbnz	r1, 34181252 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
3418124e:	490a      	ldr	r1, [pc, #40]	@ (34181278 <_sbrk+0x34>)
34181250:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
34181252:	6810      	ldr	r0, [r2, #0]
34181254:	4909      	ldr	r1, [pc, #36]	@ (3418127c <_sbrk+0x38>)
34181256:	4c0a      	ldr	r4, [pc, #40]	@ (34181280 <_sbrk+0x3c>)
34181258:	4403      	add	r3, r0
3418125a:	1b09      	subs	r1, r1, r4
3418125c:	428b      	cmp	r3, r1
3418125e:	d906      	bls.n	3418126e <_sbrk+0x2a>
  {
    errno = ENOMEM;
34181260:	f008 fb18 	bl	34189894 <__errno>
34181264:	230c      	movs	r3, #12
34181266:	6003      	str	r3, [r0, #0]
    return (void *)-1;
34181268:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
3418126c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
3418126e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
34181270:	e7fc      	b.n	3418126c <_sbrk+0x28>
34181272:	bf00      	nop
34181274:	341c0288 	.word	0x341c0288
34181278:	341c03e0 	.word	0x341c03e0
3418127c:	34200000 	.word	0x34200000
34181280:	00001000 	.word	0x00001000

34181284 <SystemInit>:

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#else
  SCB->VTOR = INTVECT_START;
34181284:	4b44      	ldr	r3, [pc, #272]	@ (34181398 <SystemInit+0x114>)
34181286:	4a45      	ldr	r2, [pc, #276]	@ (3418139c <SystemInit+0x118>)
{
34181288:	b570      	push	{r4, r5, r6, lr}
#endif  /* USER_VECT_TAB_ADDRESS */

  /* RNG reset */
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3418128a:	2001      	movs	r0, #1
  SCB->VTOR = INTVECT_START;
3418128c:	609a      	str	r2, [r3, #8]
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 1;
  SAU->RBAR = 0;
  SAU->RLAR = 0;
  SAU->RNR = 2;
3418128e:	2502      	movs	r5, #2
  SAU->RNR = 0;
34181290:	2200      	movs	r2, #0
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
34181292:	4943      	ldr	r1, [pc, #268]	@ (341813a0 <SystemInit+0x11c>)
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
  /* Delay after an RCC peripheral clock enabling */
  (void)RCC->APB4ENR2;

  /* Set default Vector Table location after system reset or return from Standby */
  SYSCFG->INITSVTORCR = SCB->VTOR;
34181294:	4e43      	ldr	r6, [pc, #268]	@ (341813a4 <SystemInit+0x120>)
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
34181296:	f501 5480 	add.w	r4, r1, #4096	@ 0x1000
  RCC->AHB3RSTSR = RCC_AHB3RSTSR_RNGRSTS;
3418129a:	f8c1 0a18 	str.w	r0, [r1, #2584]	@ 0xa18
  RCC->AHB3RSTCR = RCC_AHB3RSTCR_RNGRSTC;
3418129e:	f8c4 0218 	str.w	r0, [r4, #536]	@ 0x218
  RCC->AHB3ENCR = RCC_AHB3ENCR_RNGENC;
341812a2:	f8c4 0258 	str.w	r0, [r4, #600]	@ 0x258
  SAU->RNR = 0;
341812a6:	f8c3 20d8 	str.w	r2, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
341812aa:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
341812ae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 1;
341812b2:	f8c3 00d8 	str.w	r0, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
341812b6:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
341812ba:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 2;
341812be:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 3;
341812c2:	2503      	movs	r5, #3
  SAU->RBAR = 0;
341812c4:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
341812c8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 3;
341812cc:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 4;
341812d0:	2504      	movs	r5, #4
  SAU->RBAR = 0;
341812d2:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
341812d6:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 4;
341812da:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 5;
341812de:	2505      	movs	r5, #5
  SAU->RBAR = 0;
341812e0:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
341812e4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 5;
341812e8:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 6;
341812ec:	2506      	movs	r5, #6
  SAU->RBAR = 0;
341812ee:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
341812f2:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 6;
341812f6:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RNR = 7;
341812fa:	2507      	movs	r5, #7
  SAU->RBAR = 0;
341812fc:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
34181300:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  SAU->RNR = 7;
34181304:	f8c3 50d8 	str.w	r5, [r3, #216]	@ 0xd8
  SAU->RBAR = 0;
34181308:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
  SAU->RLAR = 0;
3418130c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  RCC->APB4ENSR2 = RCC_APB4ENSR2_SYSCFGENS;
34181310:	f8c1 0a78 	str.w	r0, [r1, #2680]	@ 0xa78
  (void)RCC->APB4ENR2;
34181314:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  SYSCFG->INITSVTORCR = SCB->VTOR;
34181318:	689a      	ldr	r2, [r3, #8]
3418131a:	6132      	str	r2, [r6, #16]

  /* Enable VDDADC CLAMP */
  PWR->SVMCR3 |= PWR_SVMCR3_ASV;
3418131c:	4a22      	ldr	r2, [pc, #136]	@ (341813a8 <SystemInit+0x124>)
3418131e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
34181320:	f445 5580 	orr.w	r5, r5, #4096	@ 0x1000
34181324:	63d5      	str	r5, [r2, #60]	@ 0x3c
  PWR->SVMCR3 |= PWR_SVMCR3_AVMEN;
34181326:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
34181328:	f045 0510 	orr.w	r5, r5, #16
3418132c:	63d5      	str	r5, [r2, #60]	@ 0x3c
  /* read back the register to make sure that the transaction has taken place */
  (void) PWR->SVMCR3;
3418132e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
  /* enable VREF */
  RCC->APB4ENR1 |= RCC_APB4ENR1_VREFBUFEN;
34181330:	f8d1 2274 	ldr.w	r2, [r1, #628]	@ 0x274
34181334:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34181338:	f8c1 2274 	str.w	r2, [r1, #628]	@ 0x274

  /* RCC Fix to lower power consumption */
  RCC->APB4ENR2 |= 0x00000010UL;
3418133c:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
34181340:	f042 0210 	orr.w	r2, r2, #16
34181344:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278
  (void) RCC->APB4ENR2;
34181348:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
  RCC->APB4ENR2 &= ~(0x00000010UL);
3418134c:	f8d1 2278 	ldr.w	r2, [r1, #632]	@ 0x278
34181350:	f022 0210 	bic.w	r2, r2, #16
34181354:	f8c1 2278 	str.w	r2, [r1, #632]	@ 0x278

  /* XSPI2 & XSPIM reset                                  */
  RCC->AHB5RSTSR = RCC_AHB5RSTSR_XSPIMRSTS | RCC_AHB5RSTSR_XSPI2RSTS;
34181358:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
3418135c:	f8c1 2a20 	str.w	r2, [r1, #2592]	@ 0xa20
  RCC->AHB5RSTCR = RCC_AHB5RSTCR_XSPIMRSTC | RCC_AHB5RSTCR_XSPI2RSTC;
34181360:	f8c4 2220 	str.w	r2, [r4, #544]	@ 0x220
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
  /* Deactivate TIM2 clock */
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;

  /* Deactivate GPIOG clock */
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34181364:	2240      	movs	r2, #64	@ 0x40
  RCC->APB1RSTSR1 = RCC_APB1RSTSR1_TIM2RSTS;
34181366:	f8c1 0a24 	str.w	r0, [r1, #2596]	@ 0xa24
  RCC->APB1RSTCR1 = RCC_APB1RSTCR1_TIM2RSTC;
3418136a:	f8c4 0224 	str.w	r0, [r4, #548]	@ 0x224
  RCC->APB1ENCR1 = RCC_APB1ENCR1_TIM2ENC;
3418136e:	f8c4 0264 	str.w	r0, [r4, #612]	@ 0x264
  RCC->AHB4ENCR = RCC_AHB4ENCR_GPIOGENC;
34181372:	f8c4 225c 	str.w	r2, [r4, #604]	@ 0x25c

  /* Read back the value to make sure it is written before deactivating SYSCFG */
  (void) SYSCFG->INITSVTORCR;
34181376:	6932      	ldr	r2, [r6, #16]
  /* Deactivate SYSCFG clock */
  RCC->APB4ENCR2 = RCC_APB4ENCR2_SYSCFGENC;
34181378:	f8c4 0278 	str.w	r0, [r4, #632]	@ 0x278
  TZ_SAU_Setup();
#endif /* USER_TZ_SAU_SETUP */

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
3418137c:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
34181380:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
34181384:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
34181388:	4a08      	ldr	r2, [pc, #32]	@ (341813ac <SystemInit+0x128>)
3418138a:	f8d2 3088 	ldr.w	r3, [r2, #136]	@ 0x88
3418138e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
34181392:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif /* __FPU_PRESENT && __FPU_USED */

}
34181396:	bd70      	pop	{r4, r5, r6, pc}
34181398:	e000ed00 	.word	0xe000ed00
3418139c:	34180400 	.word	0x34180400
341813a0:	56028000 	.word	0x56028000
341813a4:	56008000 	.word	0x56008000
341813a8:	56024800 	.word	0x56024800
341813ac:	e002ed00 	.word	0xe002ed00

341813b0 <SystemCoreClockUpdate>:
  uint32_t pllp2 = 0;
  uint32_t pllcfgr, pllsource, pllbypass, ic_divider;
  float_t pllvco;

  /* Get CPUCLK source -------------------------------------------------------*/
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
341813b0:	4b6e      	ldr	r3, [pc, #440]	@ (3418156c <SystemCoreClockUpdate+0x1bc>)
{
341813b2:	b5f0      	push	{r4, r5, r6, r7, lr}
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
341813b4:	6a1a      	ldr	r2, [r3, #32]
341813b6:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
341813ba:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
341813be:	f000 80b8 	beq.w	34181532 <SystemCoreClockUpdate+0x182>
341813c2:	d806      	bhi.n	341813d2 <SystemCoreClockUpdate+0x22>
341813c4:	b962      	cbnz	r2, 341813e0 <SystemCoreClockUpdate+0x30>
  {
  case 0:  /* HSI used as system clock source (default after reset) */
    sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
341813c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
341813c8:	4b69      	ldr	r3, [pc, #420]	@ (34181570 <SystemCoreClockUpdate+0x1c0>)
341813ca:	f3c2 12c1 	ubfx	r2, r2, #7, #2
341813ce:	40d3      	lsrs	r3, r2
    break;
341813d0:	e003      	b.n	341813da <SystemCoreClockUpdate+0x2a>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
341813d2:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
341813d6:	d00b      	beq.n	341813f0 <SystemCoreClockUpdate+0x40>
  uint32_t sysclk = 0;
341813d8:	2300      	movs	r3, #0
    /* Nothing to do, should not occur */
    break;
  }

  /* Return system clock frequency (CPU frequency) */
  SystemCoreClock = sysclk;
341813da:	4a66      	ldr	r2, [pc, #408]	@ (34181574 <SystemCoreClockUpdate+0x1c4>)
341813dc:	6013      	str	r3, [r2, #0]
}
341813de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
341813e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      sysclk = MSI_VALUE;
341813e2:	4a65      	ldr	r2, [pc, #404]	@ (34181578 <SystemCoreClockUpdate+0x1c8>)
341813e4:	f413 7f00 	tst.w	r3, #512	@ 0x200
341813e8:	4b64      	ldr	r3, [pc, #400]	@ (3418157c <SystemCoreClockUpdate+0x1cc>)
341813ea:	bf08      	it	eq
341813ec:	4613      	moveq	r3, r2
341813ee:	e7f4      	b.n	341813da <SystemCoreClockUpdate+0x2a>
    switch (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL))
341813f0:	f8d3 20c4 	ldr.w	r2, [r3, #196]	@ 0xc4
341813f4:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
341813f8:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
341813fc:	d02a      	beq.n	34181454 <SystemCoreClockUpdate+0xa4>
341813fe:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34181402:	d036      	beq.n	34181472 <SystemCoreClockUpdate+0xc2>
34181404:	2a00      	cmp	r2, #0
34181406:	d143      	bne.n	34181490 <SystemCoreClockUpdate+0xe0>
      pllcfgr = READ_REG(RCC->PLL1CFGR1);
34181408:	f8d3 7080 	ldr.w	r7, [r3, #128]	@ 0x80
      if (pllbypass == 0U)
3418140c:	013d      	lsls	r5, r7, #4
      pllsource = pllcfgr & RCC_PLL1CFGR1_PLL1SEL;
3418140e:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
34181412:	f100 8096 	bmi.w	34181542 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34181416:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
        pllcfgr = READ_REG(RCC->PLL1CFGR3);
3418141a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
        plln = (pllcfgr & RCC_PLL1CFGR1_PLL1DIVN) >>  RCC_PLL1CFGR1_PLL1DIVN_Pos;
3418141e:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllfracn = READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >>  RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos;
34181422:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34181426:	460e      	mov	r6, r1
    switch (pllsource)
34181428:	f1b6 5f00 	cmp.w	r6, #536870912	@ 0x20000000
        pllp1 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV1) >>  RCC_PLL4CFGR3_PLL4PDIV1_Pos;
3418142c:	f3c2 65c2 	ubfx	r5, r2, #27, #3
        pllm = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVM) >>  RCC_PLL4CFGR1_PLL4DIVM_Pos;
34181430:	f3c7 5105 	ubfx	r1, r7, #20, #6
        pllp2 = (pllcfgr & RCC_PLL4CFGR3_PLL4PDIV2) >>  RCC_PLL4CFGR3_PLL4PDIV2_Pos;
34181434:	f3c2 6202 	ubfx	r2, r2, #24, #3
    switch (pllsource)
34181438:	d04f      	beq.n	341814da <SystemCoreClockUpdate+0x12a>
3418143a:	d87c      	bhi.n	34181536 <SystemCoreClockUpdate+0x186>
3418143c:	2e00      	cmp	r6, #0
3418143e:	d03c      	beq.n	341814ba <SystemCoreClockUpdate+0x10a>
34181440:	2600      	movs	r6, #0
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34181442:	4b4a      	ldr	r3, [pc, #296]	@ (3418156c <SystemCoreClockUpdate+0x1bc>)
        sysclk = MSI_VALUE;
34181444:	4f4c      	ldr	r7, [pc, #304]	@ (34181578 <SystemCoreClockUpdate+0x1c8>)
      if (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL) == 0UL)
34181446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        sysclk = MSI_VALUE;
34181448:	f413 7f00 	tst.w	r3, #512	@ 0x200
3418144c:	4b4b      	ldr	r3, [pc, #300]	@ (3418157c <SystemCoreClockUpdate+0x1cc>)
3418144e:	bf08      	it	eq
34181450:	463b      	moveq	r3, r7
34181452:	e038      	b.n	341814c6 <SystemCoreClockUpdate+0x116>
      pllcfgr = READ_REG(RCC->PLL2CFGR1);
34181454:	f8d3 7090 	ldr.w	r7, [r3, #144]	@ 0x90
      if (pllbypass == 0U)
34181458:	013c      	lsls	r4, r7, #4
      pllsource = pllcfgr & RCC_PLL2CFGR1_PLL2SEL;
3418145a:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3418145e:	d470      	bmi.n	34181542 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
34181460:	f8d3 0094 	ldr.w	r0, [r3, #148]	@ 0x94
        plln = (pllcfgr & RCC_PLL2CFGR1_PLL2DIVN) >>  RCC_PLL2CFGR1_PLL2DIVN_Pos;
34181464:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL2CFGR3);
34181468:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
        pllfracn = READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >>  RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos;
3418146c:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL2CFGR3_PLL2PDIV1) >>  RCC_PLL2CFGR3_PLL2PDIV1_Pos;
34181470:	e7d9      	b.n	34181426 <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL3CFGR1);
34181472:	f8d3 70a0 	ldr.w	r7, [r3, #160]	@ 0xa0
      if (pllbypass == 0U)
34181476:	0138      	lsls	r0, r7, #4
      pllsource = pllcfgr & RCC_PLL3CFGR1_PLL3SEL;
34181478:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3418147c:	d461      	bmi.n	34181542 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
3418147e:	f8d3 00a4 	ldr.w	r0, [r3, #164]	@ 0xa4
        plln = (pllcfgr & RCC_PLL3CFGR1_PLL3DIVN) >>  RCC_PLL3CFGR1_PLL3DIVN_Pos;
34181482:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL3CFGR3);
34181486:	f8d3 20a8 	ldr.w	r2, [r3, #168]	@ 0xa8
        pllfracn = READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >>  RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos;
3418148a:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllp1 = (pllcfgr & RCC_PLL3CFGR3_PLL3PDIV1) >>  RCC_PLL3CFGR3_PLL3PDIV1_Pos;
3418148e:	e7ca      	b.n	34181426 <SystemCoreClockUpdate+0x76>
      pllcfgr = READ_REG(RCC->PLL4CFGR1);
34181490:	f8d3 70b0 	ldr.w	r7, [r3, #176]	@ 0xb0
      if (pllbypass == 0U)
34181494:	013a      	lsls	r2, r7, #4
      pllsource = pllcfgr & RCC_PLL4CFGR1_PLL4SEL;
34181496:	f007 41e0 	and.w	r1, r7, #1879048192	@ 0x70000000
      if (pllbypass == 0U)
3418149a:	d452      	bmi.n	34181542 <SystemCoreClockUpdate+0x192>
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
3418149c:	f8d3 00b4 	ldr.w	r0, [r3, #180]	@ 0xb4
        plln = (pllcfgr & RCC_PLL4CFGR1_PLL4DIVN) >>  RCC_PLL4CFGR1_PLL4DIVN_Pos;
341814a0:	f3c7 240b 	ubfx	r4, r7, #8, #12
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
341814a4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
        pllfracn = READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >>  RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos;
341814a8:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
        pllcfgr = READ_REG(RCC->PLL4CFGR3);
341814ac:	e7bb      	b.n	34181426 <SystemCoreClockUpdate+0x76>
    switch (pllsource)
341814ae:	460a      	mov	r2, r1
341814b0:	460d      	mov	r5, r1
341814b2:	4608      	mov	r0, r1
341814b4:	460c      	mov	r4, r1
341814b6:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
      sysclk = HSI_VALUE >> ((RCC->HSICFGR & RCC_HSICFGR_HSIDIV) >> RCC_HSICFGR_HSIDIV_Pos);
341814ba:	4b2c      	ldr	r3, [pc, #176]	@ (3418156c <SystemCoreClockUpdate+0x1bc>)
341814bc:	6c9f      	ldr	r7, [r3, #72]	@ 0x48
341814be:	4b2c      	ldr	r3, [pc, #176]	@ (34181570 <SystemCoreClockUpdate+0x1c0>)
341814c0:	f3c7 17c1 	ubfx	r7, r7, #7, #2
341814c4:	40fb      	lsrs	r3, r7
    if (pllbypass == 0U)
341814c6:	b14e      	cbz	r6, 341814dc <SystemCoreClockUpdate+0x12c>
    ic_divider = (READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL;
341814c8:	4a28      	ldr	r2, [pc, #160]	@ (3418156c <SystemCoreClockUpdate+0x1bc>)
341814ca:	f8d2 20c4 	ldr.w	r2, [r2, #196]	@ 0xc4
341814ce:	f3c2 4207 	ubfx	r2, r2, #16, #8
341814d2:	3201      	adds	r2, #1
    sysclk = sysclk / ic_divider;
341814d4:	fbb3 f3f2 	udiv	r3, r3, r2
    break;
341814d8:	e77f      	b.n	341813da <SystemCoreClockUpdate+0x2a>
      sysclk = HSE_VALUE;
341814da:	4b29      	ldr	r3, [pc, #164]	@ (34181580 <SystemCoreClockUpdate+0x1d0>)
      pllvco = ((float_t)sysclk * ((float_t)plln + ((float_t)pllfracn/(float_t)0x1000000UL))) / (float_t)pllm;
341814dc:	ee07 0a10 	vmov	s14, r0
341814e0:	eeb8 6ac7 	vcvt.f32.s32	s12, s14
341814e4:	ee07 4a10 	vmov	s14, r4
341814e8:	ee07 3a90 	vmov	s15, r3
341814ec:	eddf 6a25 	vldr	s13, [pc, #148]	@ 34181584 <SystemCoreClockUpdate+0x1d4>
341814f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
341814f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
341814f8:	eea6 7a26 	vfma.f32	s14, s12, s13
341814fc:	ee67 7a87 	vmul.f32	s15, s15, s14
34181500:	ee07 1a10 	vmov	s14, r1
34181504:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
34181508:	eec7 6a87 	vdiv.f32	s13, s15, s14
      sysclk = (uint32_t)((float_t)(pllvco/(((float_t)pllp1) * ((float_t)pllp2))));
3418150c:	ee07 5a90 	vmov	s15, r5
34181510:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
34181514:	ee07 2a90 	vmov	s15, r2
34181518:	eef8 7ae7 	vcvt.f32.s32	s15, s15
3418151c:	ee27 7a27 	vmul.f32	s14, s14, s15
34181520:	eec6 7a87 	vdiv.f32	s15, s13, s14
34181524:	eefc 7ae7 	vcvt.u32.f32	s15, s15
34181528:	ee17 3a90 	vmov	r3, s15
3418152c:	e7cc      	b.n	341814c8 <SystemCoreClockUpdate+0x118>
      sysclk = HSE_VALUE;
3418152e:	4b14      	ldr	r3, [pc, #80]	@ (34181580 <SystemCoreClockUpdate+0x1d0>)
34181530:	e7ca      	b.n	341814c8 <SystemCoreClockUpdate+0x118>
  switch (RCC->CFGR1 & RCC_CFGR1_CPUSWS)
34181532:	4b13      	ldr	r3, [pc, #76]	@ (34181580 <SystemCoreClockUpdate+0x1d0>)
34181534:	e751      	b.n	341813da <SystemCoreClockUpdate+0x2a>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
34181536:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
3418153a:	4b13      	ldr	r3, [pc, #76]	@ (34181588 <SystemCoreClockUpdate+0x1d8>)
3418153c:	bf18      	it	ne
3418153e:	2300      	movne	r3, #0
34181540:	e7cc      	b.n	341814dc <SystemCoreClockUpdate+0x12c>
    switch (pllsource)
34181542:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
34181546:	d0f2      	beq.n	3418152e <SystemCoreClockUpdate+0x17e>
34181548:	d809      	bhi.n	3418155e <SystemCoreClockUpdate+0x1ae>
3418154a:	2900      	cmp	r1, #0
3418154c:	d0af      	beq.n	341814ae <SystemCoreClockUpdate+0xfe>
3418154e:	2200      	movs	r2, #0
34181550:	f04f 6600 	mov.w	r6, #134217728	@ 0x8000000
34181554:	4615      	mov	r5, r2
34181556:	4610      	mov	r0, r2
34181558:	4614      	mov	r4, r2
3418155a:	4611      	mov	r1, r2
3418155c:	e771      	b.n	34181442 <SystemCoreClockUpdate+0x92>
      sysclk = EXTERNAL_I2S_CLOCK_VALUE;
3418155e:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
34181562:	4b09      	ldr	r3, [pc, #36]	@ (34181588 <SystemCoreClockUpdate+0x1d8>)
34181564:	bf18      	it	ne
34181566:	2300      	movne	r3, #0
34181568:	e7ae      	b.n	341814c8 <SystemCoreClockUpdate+0x118>
3418156a:	bf00      	nop
3418156c:	56028000 	.word	0x56028000
34181570:	03d09000 	.word	0x03d09000
34181574:	341c0000 	.word	0x341c0000
34181578:	003d0900 	.word	0x003d0900
3418157c:	00f42400 	.word	0x00f42400
34181580:	016e3600 	.word	0x016e3600
34181584:	33800000 	.word	0x33800000
34181588:	00bb8000 	.word	0x00bb8000

3418158c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
3418158c:	ed6d cf81 	vstr	FPCXTNS, [sp, #-4]!
34181590:	b500      	push	{lr}
  SystemCoreClockUpdate();
34181592:	f7ff ff0d 	bl	341813b0 <SystemCoreClockUpdate>

  return SystemCoreClock;
}
34181596:	4b05      	ldr	r3, [pc, #20]	@ (341815ac <__acle_se_SECURE_SystemCoreClockUpdate+0x20>)
34181598:	f85d eb04 	ldr.w	lr, [sp], #4
3418159c:	6818      	ldr	r0, [r3, #0]
3418159e:	ec9f 0a10 	vscclrm	{s0-s15, VPR}
341815a2:	e89f 900e 	clrm	{r1, r2, r3, ip, APSR}
341815a6:	ecfd cf81 	vldr	FPCXTNS, [sp], #4
341815aa:	4774      	bxns	lr
341815ac:	341c0000 	.word	0x341c0000

341815b0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_sstack
341815b0:	480f      	ldr	r0, [pc, #60]	@ (341815f0 <LoopForever+0x4>)
  msr   MSPLIM, r0
341815b2:	f380 880a 	msr	MSPLIM, r0
  ldr   r0, =_estack
341815b6:	480f      	ldr	r0, [pc, #60]	@ (341815f4 <LoopForever+0x8>)
  mov   sp, r0          /* set stack pointer */
341815b8:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
341815ba:	f7ff fe63 	bl	34181284 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
341815be:	480e      	ldr	r0, [pc, #56]	@ (341815f8 <LoopForever+0xc>)
  ldr r1, =_edata
341815c0:	490e      	ldr	r1, [pc, #56]	@ (341815fc <LoopForever+0x10>)
  ldr r2, =_sidata
341815c2:	4a0f      	ldr	r2, [pc, #60]	@ (34181600 <LoopForever+0x14>)
  movs r3, #0
341815c4:	2300      	movs	r3, #0
  b LoopCopyDataInit
341815c6:	e002      	b.n	341815ce <LoopCopyDataInit>

341815c8 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
341815c8:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
341815ca:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
341815cc:	3304      	adds	r3, #4

341815ce <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
341815ce:	18c4      	adds	r4, r0, r3
  cmp r4, r1
341815d0:	428c      	cmp	r4, r1
  bcc CopyDataInit
341815d2:	d3f9      	bcc.n	341815c8 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
341815d4:	4a0b      	ldr	r2, [pc, #44]	@ (34181604 <LoopForever+0x18>)
  ldr r4, =_ebss
341815d6:	4c0c      	ldr	r4, [pc, #48]	@ (34181608 <LoopForever+0x1c>)
  movs r3, #0
341815d8:	2300      	movs	r3, #0
  b LoopFillZerobss
341815da:	e001      	b.n	341815e0 <LoopFillZerobss>

341815dc <FillZerobss>:

FillZerobss:
  str  r3, [r2]
341815dc:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
341815de:	3204      	adds	r2, #4

341815e0 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
341815e0:	42a2      	cmp	r2, r4
  bcc FillZerobss
341815e2:	d3fb      	bcc.n	341815dc <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
341815e4:	f008 f95c 	bl	341898a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
341815e8:	f7ff fd08 	bl	34180ffc <main>

341815ec <LoopForever>:

LoopForever:
  b LoopForever
341815ec:	e7fe      	b.n	341815ec <LoopForever>
341815ee:	0000      	.short	0x0000
  ldr   r0, =_sstack
341815f0:	341ff000 	.word	0x341ff000
  ldr   r0, =_estack
341815f4:	34200000 	.word	0x34200000
  ldr r0, =_sdata
341815f8:	341c0000 	.word	0x341c0000
  ldr r1, =_edata
341815fc:	341c01d4 	.word	0x341c01d4
  ldr r2, =_sidata
34181600:	3418d454 	.word	0x3418d454
  ldr r2, =_sbss
34181604:	341c01d8 	.word	0x341c01d8
  ldr r4, =_ebss
34181608:	341c03dc 	.word	0x341c03dc

3418160c <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
3418160c:	e7fe      	b.n	3418160c <ADC1_2_IRQHandler>
	...

34181610 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
34181610:	b538      	push	{r3, r4, r5, lr}
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq == 0UL)
34181612:	4b0f      	ldr	r3, [pc, #60]	@ (34181650 <HAL_InitTick+0x40>)
{
34181614:	4605      	mov	r5, r0
  if ((uint32_t)uwTickFreq == 0UL)
34181616:	781a      	ldrb	r2, [r3, #0]
34181618:	b90a      	cbnz	r2, 3418161e <HAL_InitTick+0xe>
  {
    return HAL_ERROR;
3418161a:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
3418161c:	bd38      	pop	{r3, r4, r5, pc}
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
3418161e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
34181622:	fbb3 f3f2 	udiv	r3, r3, r2
34181626:	4a0b      	ldr	r2, [pc, #44]	@ (34181654 <HAL_InitTick+0x44>)
34181628:	6810      	ldr	r0, [r2, #0]
3418162a:	fbb0 f0f3 	udiv	r0, r0, r3
3418162e:	f000 f8c7 	bl	341817c0 <HAL_SYSTICK_Config>
34181632:	4604      	mov	r4, r0
34181634:	2800      	cmp	r0, #0
34181636:	d1f0      	bne.n	3418161a <HAL_InitTick+0xa>
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
34181638:	2d0f      	cmp	r5, #15
3418163a:	d8ee      	bhi.n	3418161a <HAL_InitTick+0xa>
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
3418163c:	4602      	mov	r2, r0
3418163e:	4629      	mov	r1, r5
34181640:	f04f 30ff 	mov.w	r0, #4294967295
34181644:	f000 f85e 	bl	34181704 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
34181648:	4b03      	ldr	r3, [pc, #12]	@ (34181658 <HAL_InitTick+0x48>)
3418164a:	4620      	mov	r0, r4
3418164c:	601d      	str	r5, [r3, #0]
  return HAL_OK;
3418164e:	e7e5      	b.n	3418161c <HAL_InitTick+0xc>
34181650:	341c0004 	.word	0x341c0004
34181654:	341c0000 	.word	0x341c0000
34181658:	341c0008 	.word	0x341c0008

3418165c <HAL_Init>:
{
3418165c:	b510      	push	{r4, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
3418165e:	2003      	movs	r0, #3
34181660:	f000 f832 	bl	341816c8 <HAL_NVIC_SetPriorityGrouping>
  SystemCoreClockUpdate();
34181664:	f7ff fea4 	bl	341813b0 <SystemCoreClockUpdate>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
34181668:	200f      	movs	r0, #15
3418166a:	f7ff ffd1 	bl	34181610 <HAL_InitTick>
3418166e:	4604      	mov	r4, r0
34181670:	b918      	cbnz	r0, 3418167a <HAL_Init+0x1e>
  HAL_MspInit();
34181672:	f7ff fd7b 	bl	3418116c <HAL_MspInit>
}
34181676:	4620      	mov	r0, r4
34181678:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
3418167a:	2401      	movs	r4, #1
3418167c:	e7fb      	b.n	34181676 <HAL_Init+0x1a>
	...

34181680 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
34181680:	4a03      	ldr	r2, [pc, #12]	@ (34181690 <HAL_IncTick+0x10>)
34181682:	4b04      	ldr	r3, [pc, #16]	@ (34181694 <HAL_IncTick+0x14>)
34181684:	6811      	ldr	r1, [r2, #0]
34181686:	781b      	ldrb	r3, [r3, #0]
34181688:	440b      	add	r3, r1
3418168a:	6013      	str	r3, [r2, #0]
}
3418168c:	4770      	bx	lr
3418168e:	bf00      	nop
34181690:	341c028c 	.word	0x341c028c
34181694:	341c0004 	.word	0x341c0004

34181698 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
34181698:	4b01      	ldr	r3, [pc, #4]	@ (341816a0 <HAL_GetTick+0x8>)
3418169a:	6818      	ldr	r0, [r3, #0]
}
3418169c:	4770      	bx	lr
3418169e:	bf00      	nop
341816a0:	341c028c 	.word	0x341c028c

341816a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay Specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
341816a4:	b538      	push	{r3, r4, r5, lr}
341816a6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
341816a8:	f7ff fff6 	bl	34181698 <HAL_GetTick>
341816ac:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
341816ae:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
341816b0:	bf1e      	ittt	ne
341816b2:	4b04      	ldrne	r3, [pc, #16]	@ (341816c4 <HAL_Delay+0x20>)
341816b4:	781b      	ldrbne	r3, [r3, #0]
341816b6:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
341816b8:	f7ff ffee 	bl	34181698 <HAL_GetTick>
341816bc:	1b43      	subs	r3, r0, r5
341816be:	42a3      	cmp	r3, r4
341816c0:	d3fa      	bcc.n	341816b8 <HAL_Delay+0x14>
  {
  }
}
341816c2:	bd38      	pop	{r3, r4, r5, pc}
341816c4:	341c0004 	.word	0x341c0004

341816c8 <HAL_NVIC_SetPriorityGrouping>:
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
341816c8:	1ec3      	subs	r3, r0, #3
341816ca:	2b04      	cmp	r3, #4
{
341816cc:	b510      	push	{r4, lr}
341816ce:	4604      	mov	r4, r0
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
341816d0:	d903      	bls.n	341816da <HAL_NVIC_SetPriorityGrouping+0x12>
341816d2:	21e6      	movs	r1, #230	@ 0xe6
341816d4:	4809      	ldr	r0, [pc, #36]	@ (341816fc <HAL_NVIC_SetPriorityGrouping+0x34>)
341816d6:	f7ff fd3b 	bl	34181150 <assert_failed>
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
341816da:	4909      	ldr	r1, [pc, #36]	@ (34181700 <HAL_NVIC_SetPriorityGrouping+0x38>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
341816dc:	0223      	lsls	r3, r4, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
341816de:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
341816e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
341816e4:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
341816e8:	0412      	lsls	r2, r2, #16
341816ea:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
341816ec:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
341816ee:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
341816f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
341816f6:	60cb      	str	r3, [r1, #12]

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
341816f8:	bd10      	pop	{r4, pc}
341816fa:	bf00      	nop
341816fc:	3418ce78 	.word	0x3418ce78
34181700:	e000ed00 	.word	0xe000ed00

34181704 <HAL_NVIC_SetPriority>:
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34181704:	f110 0f0c 	cmn.w	r0, #12
{
34181708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3418170c:	4605      	mov	r5, r0
3418170e:	460c      	mov	r4, r1
34181710:	4617      	mov	r7, r2
  assert_param(IS_NVIC_PRIORITY_INTERRUPT(IRQn));
34181712:	db01      	blt.n	34181718 <HAL_NVIC_SetPriority+0x14>
34181714:	1d03      	adds	r3, r0, #4
34181716:	d103      	bne.n	34181720 <HAL_NVIC_SetPriority+0x1c>
34181718:	21ff      	movs	r1, #255	@ 0xff
3418171a:	4826      	ldr	r0, [pc, #152]	@ (341817b4 <HAL_NVIC_SetPriority+0xb0>)
3418171c:	f7ff fd18 	bl	34181150 <assert_failed>
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
34181720:	4b25      	ldr	r3, [pc, #148]	@ (341817b8 <HAL_NVIC_SetPriority+0xb4>)
34181722:	68de      	ldr	r6, [r3, #12]
34181724:	f3c6 2602 	ubfx	r6, r6, #8, #3

  prioritygroup = (NVIC_GetPriorityGrouping() & 0x7U);
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority, prioritygroup));
34181728:	2e02      	cmp	r6, #2
3418172a:	d806      	bhi.n	3418173a <HAL_NVIC_SetPriority+0x36>
3418172c:	b157      	cbz	r7, 34181744 <HAL_NVIC_SetPriority+0x40>
3418172e:	f44f 7181 	mov.w	r1, #258	@ 0x102
34181732:	4820      	ldr	r0, [pc, #128]	@ (341817b4 <HAL_NVIC_SetPriority+0xb0>)
34181734:	f7ff fd0c 	bl	34181150 <assert_failed>
34181738:	e004      	b.n	34181744 <HAL_NVIC_SetPriority+0x40>
3418173a:	2301      	movs	r3, #1
3418173c:	1ef2      	subs	r2, r6, #3
3418173e:	4093      	lsls	r3, r2
34181740:	42bb      	cmp	r3, r7
34181742:	d9f4      	bls.n	3418172e <HAL_NVIC_SetPriority+0x2a>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority, prioritygroup));
34181744:	2c0f      	cmp	r4, #15
34181746:	f1c6 0807 	rsb	r8, r6, #7
3418174a:	d804      	bhi.n	34181756 <HAL_NVIC_SetPriority+0x52>
3418174c:	2301      	movs	r3, #1
3418174e:	fa03 f308 	lsl.w	r3, r3, r8
34181752:	42a3      	cmp	r3, r4
34181754:	d804      	bhi.n	34181760 <HAL_NVIC_SetPriority+0x5c>
34181756:	f240 1103 	movw	r1, #259	@ 0x103
3418175a:	4816      	ldr	r0, [pc, #88]	@ (341817b4 <HAL_NVIC_SetPriority+0xb0>)
3418175c:	f7ff fcf8 	bl	34181150 <assert_failed>
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34181760:	f1b8 0f04 	cmp.w	r8, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34181764:	f106 0304 	add.w	r3, r6, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
34181768:	bf28      	it	cs
3418176a:	f04f 0804 	movcs.w	r8, #4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3418176e:	f04f 32ff 	mov.w	r2, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
34181772:	2b06      	cmp	r3, #6
34181774:	f1a6 0603 	sub.w	r6, r6, #3
34181778:	bf98      	it	ls
3418177a:	2600      	movls	r6, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3418177c:	fa02 f808 	lsl.w	r8, r2, r8
34181780:	ea24 0308 	bic.w	r3, r4, r8
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
34181784:	40b2      	lsls	r2, r6
34181786:	ea27 0702 	bic.w	r7, r7, r2
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3418178a:	40b3      	lsls	r3, r6
  if ((int32_t)(IRQn) >= 0)
3418178c:	2d00      	cmp	r5, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
3418178e:	ea43 0307 	orr.w	r3, r3, r7
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34181792:	bfac      	ite	ge
34181794:	f105 4560 	addge.w	r5, r5, #3758096384	@ 0xe0000000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
34181798:	4a08      	ldrlt	r2, [pc, #32]	@ (341817bc <HAL_NVIC_SetPriority+0xb8>)
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
3418179a:	ea4f 1303 	mov.w	r3, r3, lsl #4
3418179e:	b2db      	uxtb	r3, r3
341817a0:	bfab      	itete	ge
341817a2:	f505 4561 	addge.w	r5, r5, #57600	@ 0xe100
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
341817a6:	f005 050f 	andlt.w	r5, r5, #15
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
341817aa:	f885 3300 	strbge.w	r3, [r5, #768]	@ 0x300
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
341817ae:	5553      	strblt	r3, [r2, r5]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
341817b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
341817b4:	3418ce78 	.word	0x3418ce78
341817b8:	e000ed00 	.word	0xe000ed00
341817bc:	e000ed14 	.word	0xe000ed14

341817c0 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
341817c0:	3801      	subs	r0, #1
341817c2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
341817c6:	d20b      	bcs.n	341817e0 <HAL_SYSTICK_Config+0x20>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
341817c8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
341817cc:	21f0      	movs	r1, #240	@ 0xf0
341817ce:	4a05      	ldr	r2, [pc, #20]	@ (341817e4 <HAL_SYSTICK_Config+0x24>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
341817d0:	6158      	str	r0, [r3, #20]
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
341817d2:	f882 1023 	strb.w	r1, [r2, #35]	@ 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
341817d6:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
341817d8:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
341817da:	6198      	str	r0, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
341817dc:	611a      	str	r2, [r3, #16]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
341817de:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
341817e0:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
  return SysTick_Config(TicksNumb);
}
341817e2:	4770      	bx	lr
341817e4:	e000ed00 	.word	0xe000ed00

341817e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
341817e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00u;
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
341817ec:	4b47      	ldr	r3, [pc, #284]	@ (3418190c <HAL_GPIO_Init+0x124>)
{
341817ee:	4604      	mov	r4, r0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
341817f0:	4298      	cmp	r0, r3
{
341817f2:	460e      	mov	r6, r1
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
341817f4:	d054      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
341817f6:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
341817fa:	4298      	cmp	r0, r3
341817fc:	d050      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
341817fe:	4b44      	ldr	r3, [pc, #272]	@ (34181910 <HAL_GPIO_Init+0x128>)
34181800:	4298      	cmp	r0, r3
34181802:	d04d      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181804:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181808:	4298      	cmp	r0, r3
3418180a:	d049      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
3418180c:	4b41      	ldr	r3, [pc, #260]	@ (34181914 <HAL_GPIO_Init+0x12c>)
3418180e:	4298      	cmp	r0, r3
34181810:	d046      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181812:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181816:	4298      	cmp	r0, r3
34181818:	d042      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
3418181a:	4b3f      	ldr	r3, [pc, #252]	@ (34181918 <HAL_GPIO_Init+0x130>)
3418181c:	4298      	cmp	r0, r3
3418181e:	d03f      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181820:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181824:	4298      	cmp	r0, r3
34181826:	d03b      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181828:	4b3c      	ldr	r3, [pc, #240]	@ (3418191c <HAL_GPIO_Init+0x134>)
3418182a:	4298      	cmp	r0, r3
3418182c:	d038      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
3418182e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181832:	4298      	cmp	r0, r3
34181834:	d034      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181836:	4b3a      	ldr	r3, [pc, #232]	@ (34181920 <HAL_GPIO_Init+0x138>)
34181838:	4298      	cmp	r0, r3
3418183a:	d031      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
3418183c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181840:	4298      	cmp	r0, r3
34181842:	d02d      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181844:	4b37      	ldr	r3, [pc, #220]	@ (34181924 <HAL_GPIO_Init+0x13c>)
34181846:	4298      	cmp	r0, r3
34181848:	d02a      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
3418184a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3418184e:	4298      	cmp	r0, r3
34181850:	d026      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181852:	4b35      	ldr	r3, [pc, #212]	@ (34181928 <HAL_GPIO_Init+0x140>)
34181854:	4298      	cmp	r0, r3
34181856:	d023      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181858:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3418185c:	4298      	cmp	r0, r3
3418185e:	d01f      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181860:	4b32      	ldr	r3, [pc, #200]	@ (3418192c <HAL_GPIO_Init+0x144>)
34181862:	4298      	cmp	r0, r3
34181864:	d01c      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181866:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
3418186a:	4298      	cmp	r0, r3
3418186c:	d018      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
3418186e:	4b30      	ldr	r3, [pc, #192]	@ (34181930 <HAL_GPIO_Init+0x148>)
34181870:	4298      	cmp	r0, r3
34181872:	d015      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181874:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181878:	4298      	cmp	r0, r3
3418187a:	d011      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
3418187c:	4b2d      	ldr	r3, [pc, #180]	@ (34181934 <HAL_GPIO_Init+0x14c>)
3418187e:	4298      	cmp	r0, r3
34181880:	d00e      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181882:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181886:	4298      	cmp	r0, r3
34181888:	d00a      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
3418188a:	4b2b      	ldr	r3, [pc, #172]	@ (34181938 <HAL_GPIO_Init+0x150>)
3418188c:	4298      	cmp	r0, r3
3418188e:	d007      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181890:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181894:	4298      	cmp	r0, r3
34181896:	d003      	beq.n	341818a0 <HAL_GPIO_Init+0xb8>
34181898:	21ad      	movs	r1, #173	@ 0xad
3418189a:	4828      	ldr	r0, [pc, #160]	@ (3418193c <HAL_GPIO_Init+0x154>)
3418189c:	f7ff fc58 	bl	34181150 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
341818a0:	6833      	ldr	r3, [r6, #0]
341818a2:	b29a      	uxth	r2, r3
341818a4:	b112      	cbz	r2, 341818ac <HAL_GPIO_Init+0xc4>
341818a6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
341818aa:	d303      	bcc.n	341818b4 <HAL_GPIO_Init+0xcc>
341818ac:	21ae      	movs	r1, #174	@ 0xae
341818ae:	4823      	ldr	r0, [pc, #140]	@ (3418193c <HAL_GPIO_Init+0x154>)
341818b0:	f7ff fc4e 	bl	34181150 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
341818b4:	6873      	ldr	r3, [r6, #4]
341818b6:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
341818ba:	d011      	beq.n	341818e0 <HAL_GPIO_Init+0xf8>
341818bc:	d81d      	bhi.n	341818fa <HAL_GPIO_Init+0x112>
341818be:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
341818c2:	d00d      	beq.n	341818e0 <HAL_GPIO_Init+0xf8>
341818c4:	d809      	bhi.n	341818da <HAL_GPIO_Init+0xf2>
341818c6:	2b03      	cmp	r3, #3
341818c8:	d90a      	bls.n	341818e0 <HAL_GPIO_Init+0xf8>
341818ca:	3b11      	subs	r3, #17
341818cc:	2b01      	cmp	r3, #1
341818ce:	d907      	bls.n	341818e0 <HAL_GPIO_Init+0xf8>
341818d0:	21af      	movs	r1, #175	@ 0xaf
341818d2:	481a      	ldr	r0, [pc, #104]	@ (3418193c <HAL_GPIO_Init+0x154>)
341818d4:	f7ff fc3c 	bl	34181150 <assert_failed>
341818d8:	e002      	b.n	341818e0 <HAL_GPIO_Init+0xf8>
341818da:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
341818de:	d1f7      	bne.n	341818d0 <HAL_GPIO_Init+0xe8>
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
      {
        temp = EXTI->EXTICR[position >> 2u];
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
341818e0:	f04f 0900 	mov.w	r9, #0
341818e4:	464f      	mov	r7, r9
341818e6:	f8df 8024 	ldr.w	r8, [pc, #36]	@ 3418190c <HAL_GPIO_Init+0x124>
        EXTI->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
341818ea:	f8df a054 	ldr.w	sl, [pc, #84]	@ 34181940 <HAL_GPIO_Init+0x158>
  while (((GPIO_Init->Pin) >> position) != 0x00u)
341818ee:	6835      	ldr	r5, [r6, #0]
341818f0:	fa35 f307 	lsrs.w	r3, r5, r7
341818f4:	d126      	bne.n	34181944 <HAL_GPIO_Init+0x15c>
      }
    }

    position++;
  }
}
341818f6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
341818fa:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
341818fe:	d0ef      	beq.n	341818e0 <HAL_GPIO_Init+0xf8>
34181900:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34181904:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
34181908:	e7e9      	b.n	341818de <HAL_GPIO_Init+0xf6>
3418190a:	bf00      	nop
3418190c:	56020000 	.word	0x56020000
34181910:	56020400 	.word	0x56020400
34181914:	56020800 	.word	0x56020800
34181918:	56020c00 	.word	0x56020c00
3418191c:	56021000 	.word	0x56021000
34181920:	56021400 	.word	0x56021400
34181924:	56021800 	.word	0x56021800
34181928:	56021c00 	.word	0x56021c00
3418192c:	56023400 	.word	0x56023400
34181930:	56023800 	.word	0x56023800
34181934:	56023c00 	.word	0x56023c00
34181938:	56024000 	.word	0x56024000
3418193c:	3418ceaf 	.word	0x3418ceaf
34181940:	56025000 	.word	0x56025000
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
34181944:	f04f 0b01 	mov.w	fp, #1
34181948:	fa0b fb07 	lsl.w	fp, fp, r7
    if (iocurrent != 0x00u)
3418194c:	ea1b 0505 	ands.w	r5, fp, r5
34181950:	f000 8130 	beq.w	34181bb4 <HAL_GPIO_Init+0x3cc>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
34181954:	6873      	ldr	r3, [r6, #4]
34181956:	f003 0303 	and.w	r3, r3, #3
3418195a:	3b01      	subs	r3, #1
3418195c:	2b01      	cmp	r3, #1
3418195e:	d81a      	bhi.n	34181996 <HAL_GPIO_Init+0x1ae>
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
34181960:	68f3      	ldr	r3, [r6, #12]
34181962:	2b03      	cmp	r3, #3
34181964:	d903      	bls.n	3418196e <HAL_GPIO_Init+0x186>
34181966:	21be      	movs	r1, #190	@ 0xbe
34181968:	489e      	ldr	r0, [pc, #632]	@ (34181be4 <HAL_GPIO_Init+0x3fc>)
3418196a:	f7ff fbf1 	bl	34181150 <assert_failed>
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3418196e:	2303      	movs	r3, #3
        temp = GPIOx->OSPEEDR;
34181970:	68a2      	ldr	r2, [r4, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
34181972:	fa03 f309 	lsl.w	r3, r3, r9
34181976:	ea22 0203 	bic.w	r2, r2, r3
        temp |= (GPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
3418197a:	68f3      	ldr	r3, [r6, #12]
3418197c:	fa03 f309 	lsl.w	r3, r3, r9
34181980:	4313      	orrs	r3, r2
        GPIOx->OSPEEDR = temp;
34181982:	60a3      	str	r3, [r4, #8]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34181984:	6873      	ldr	r3, [r6, #4]
        temp = GPIOx->OTYPER;
34181986:	6862      	ldr	r2, [r4, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34181988:	f3c3 1300 	ubfx	r3, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
3418198c:	ea22 020b 	bic.w	r2, r2, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
34181990:	40bb      	lsls	r3, r7
34181992:	4313      	orrs	r3, r2
        GPIOx->OTYPER = temp;
34181994:	6063      	str	r3, [r4, #4]
      if (((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) ||
34181996:	e9d6 3201 	ldrd	r3, r2, [r6, #4]
3418199a:	f003 0303 	and.w	r3, r3, #3
3418199e:	2b03      	cmp	r3, #3
341819a0:	d102      	bne.n	341819a8 <HAL_GPIO_Init+0x1c0>
341819a2:	2a01      	cmp	r2, #1
341819a4:	f000 8082 	beq.w	34181aac <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
341819a8:	2a02      	cmp	r2, #2
341819aa:	d903      	bls.n	341819b4 <HAL_GPIO_Init+0x1cc>
341819ac:	21d1      	movs	r1, #209	@ 0xd1
341819ae:	488d      	ldr	r0, [pc, #564]	@ (34181be4 <HAL_GPIO_Init+0x3fc>)
341819b0:	f7ff fbce 	bl	34181150 <assert_failed>
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
341819b4:	2303      	movs	r3, #3
        temp = GPIOx->PUPDR;
341819b6:	68e2      	ldr	r2, [r4, #12]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
341819b8:	fa03 f309 	lsl.w	r3, r3, r9
341819bc:	ea22 0203 	bic.w	r2, r2, r3
        temp |= ((GPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
341819c0:	68b3      	ldr	r3, [r6, #8]
341819c2:	fa03 f309 	lsl.w	r3, r3, r9
341819c6:	4313      	orrs	r3, r2
        GPIOx->PUPDR = temp;
341819c8:	60e3      	str	r3, [r4, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
341819ca:	6873      	ldr	r3, [r6, #4]
341819cc:	f003 0303 	and.w	r3, r3, #3
341819d0:	2b02      	cmp	r3, #2
341819d2:	d16b      	bne.n	34181aac <HAL_GPIO_Init+0x2c4>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
341819d4:	4544      	cmp	r4, r8
341819d6:	d053      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
341819d8:	4b83      	ldr	r3, [pc, #524]	@ (34181be8 <HAL_GPIO_Init+0x400>)
341819da:	429c      	cmp	r4, r3
341819dc:	d050      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
341819de:	4b83      	ldr	r3, [pc, #524]	@ (34181bec <HAL_GPIO_Init+0x404>)
341819e0:	429c      	cmp	r4, r3
341819e2:	d04d      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
341819e4:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
341819e8:	429c      	cmp	r4, r3
341819ea:	d049      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
341819ec:	4b80      	ldr	r3, [pc, #512]	@ (34181bf0 <HAL_GPIO_Init+0x408>)
341819ee:	429c      	cmp	r4, r3
341819f0:	d046      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
341819f2:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
341819f6:	429c      	cmp	r4, r3
341819f8:	d042      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
341819fa:	4b7e      	ldr	r3, [pc, #504]	@ (34181bf4 <HAL_GPIO_Init+0x40c>)
341819fc:	429c      	cmp	r4, r3
341819fe:	d03f      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a00:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181a04:	429c      	cmp	r4, r3
34181a06:	d03b      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a08:	4b7b      	ldr	r3, [pc, #492]	@ (34181bf8 <HAL_GPIO_Init+0x410>)
34181a0a:	429c      	cmp	r4, r3
34181a0c:	d038      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a0e:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181a12:	429c      	cmp	r4, r3
34181a14:	d034      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a16:	4b79      	ldr	r3, [pc, #484]	@ (34181bfc <HAL_GPIO_Init+0x414>)
34181a18:	429c      	cmp	r4, r3
34181a1a:	d031      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a1c:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181a20:	429c      	cmp	r4, r3
34181a22:	d02d      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a24:	4b76      	ldr	r3, [pc, #472]	@ (34181c00 <HAL_GPIO_Init+0x418>)
34181a26:	429c      	cmp	r4, r3
34181a28:	d02a      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a2a:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181a2e:	429c      	cmp	r4, r3
34181a30:	d026      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a32:	4b74      	ldr	r3, [pc, #464]	@ (34181c04 <HAL_GPIO_Init+0x41c>)
34181a34:	429c      	cmp	r4, r3
34181a36:	d023      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a38:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181a3c:	429c      	cmp	r4, r3
34181a3e:	d01f      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a40:	4b71      	ldr	r3, [pc, #452]	@ (34181c08 <HAL_GPIO_Init+0x420>)
34181a42:	429c      	cmp	r4, r3
34181a44:	d01c      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a46:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181a4a:	429c      	cmp	r4, r3
34181a4c:	d018      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a4e:	4b6f      	ldr	r3, [pc, #444]	@ (34181c0c <HAL_GPIO_Init+0x424>)
34181a50:	429c      	cmp	r4, r3
34181a52:	d015      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a54:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181a58:	429c      	cmp	r4, r3
34181a5a:	d011      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a5c:	4b6c      	ldr	r3, [pc, #432]	@ (34181c10 <HAL_GPIO_Init+0x428>)
34181a5e:	429c      	cmp	r4, r3
34181a60:	d00e      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a62:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181a66:	429c      	cmp	r4, r3
34181a68:	d00a      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a6a:	4b6a      	ldr	r3, [pc, #424]	@ (34181c14 <HAL_GPIO_Init+0x42c>)
34181a6c:	429c      	cmp	r4, r3
34181a6e:	d007      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a70:	f103 4370 	add.w	r3, r3, #4026531840	@ 0xf0000000
34181a74:	429c      	cmp	r4, r3
34181a76:	d003      	beq.n	34181a80 <HAL_GPIO_Init+0x298>
34181a78:	21de      	movs	r1, #222	@ 0xde
34181a7a:	485a      	ldr	r0, [pc, #360]	@ (34181be4 <HAL_GPIO_Init+0x3fc>)
34181a7c:	f7ff fb68 	bl	34181150 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
34181a80:	6933      	ldr	r3, [r6, #16]
34181a82:	2b0f      	cmp	r3, #15
34181a84:	d903      	bls.n	34181a8e <HAL_GPIO_Init+0x2a6>
34181a86:	21df      	movs	r1, #223	@ 0xdf
34181a88:	4856      	ldr	r0, [pc, #344]	@ (34181be4 <HAL_GPIO_Init+0x3fc>)
34181a8a:	f7ff fb61 	bl	34181150 <assert_failed>
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34181a8e:	230f      	movs	r3, #15
        temp = GPIOx->AFR[position >> 3u];
34181a90:	08fa      	lsrs	r2, r7, #3
34181a92:	eb04 0282 	add.w	r2, r4, r2, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34181a96:	f007 0107 	and.w	r1, r7, #7
        temp = GPIOx->AFR[position >> 3u];
34181a9a:	6a10      	ldr	r0, [r2, #32]
        temp &= ~(0xFu << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34181a9c:	0089      	lsls	r1, r1, #2
34181a9e:	408b      	lsls	r3, r1
34181aa0:	ea20 0003 	bic.w	r0, r0, r3
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * GPIO_AFRL_AFSEL1_Pos));
34181aa4:	6933      	ldr	r3, [r6, #16]
34181aa6:	408b      	lsls	r3, r1
34181aa8:	4303      	orrs	r3, r0
        GPIOx->AFR[position >> 3u] = temp;
34181aaa:	6213      	str	r3, [r2, #32]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34181aac:	2303      	movs	r3, #3
      temp = GPIOx->MODER;
34181aae:	6820      	ldr	r0, [r4, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
34181ab0:	fa03 f209 	lsl.w	r2, r3, r9
34181ab4:	ea20 0002 	bic.w	r0, r0, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
34181ab8:	6872      	ldr	r2, [r6, #4]
34181aba:	ea02 0103 	and.w	r1, r2, r3
34181abe:	fa01 f109 	lsl.w	r1, r1, r9
34181ac2:	4301      	orrs	r1, r0
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34181ac4:	f412 3f40 	tst.w	r2, #196608	@ 0x30000
      GPIOx->MODER = temp;
34181ac8:	6021      	str	r1, [r4, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
34181aca:	d073      	beq.n	34181bb4 <HAL_GPIO_Init+0x3cc>
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34181acc:	f04f 0e0f 	mov.w	lr, #15
34181ad0:	f027 0103 	bic.w	r1, r7, #3
34181ad4:	f101 41ac 	add.w	r1, r1, #1442840576	@ 0x56000000
34181ad8:	f501 3114 	add.w	r1, r1, #151552	@ 0x25000
34181adc:	ea07 0003 	and.w	r0, r7, r3
        temp = EXTI->EXTICR[position >> 2u];
34181ae0:	f8d1 c060 	ldr.w	ip, [r1, #96]	@ 0x60
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34181ae4:	4098      	lsls	r0, r3
34181ae6:	fa0e fe00 	lsl.w	lr, lr, r0
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34181aea:	4544      	cmp	r4, r8
        temp &= ~(0x0FuL << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34181aec:	ea2c 0c0e 	bic.w	ip, ip, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34181af0:	d064      	beq.n	34181bbc <HAL_GPIO_Init+0x3d4>
34181af2:	f8df e0f8 	ldr.w	lr, [pc, #248]	@ 34181bec <HAL_GPIO_Init+0x404>
34181af6:	4574      	cmp	r4, lr
34181af8:	d062      	beq.n	34181bc0 <HAL_GPIO_Init+0x3d8>
34181afa:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
34181afe:	4574      	cmp	r4, lr
34181b00:	d060      	beq.n	34181bc4 <HAL_GPIO_Init+0x3dc>
34181b02:	f50e 6e80 	add.w	lr, lr, #1024	@ 0x400
34181b06:	4574      	cmp	r4, lr
34181b08:	d020      	beq.n	34181b4c <HAL_GPIO_Init+0x364>
34181b0a:	4b3b      	ldr	r3, [pc, #236]	@ (34181bf8 <HAL_GPIO_Init+0x410>)
34181b0c:	429c      	cmp	r4, r3
34181b0e:	d05b      	beq.n	34181bc8 <HAL_GPIO_Init+0x3e0>
34181b10:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34181b14:	429c      	cmp	r4, r3
34181b16:	d059      	beq.n	34181bcc <HAL_GPIO_Init+0x3e4>
34181b18:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34181b1c:	429c      	cmp	r4, r3
34181b1e:	d057      	beq.n	34181bd0 <HAL_GPIO_Init+0x3e8>
34181b20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34181b24:	429c      	cmp	r4, r3
34181b26:	d055      	beq.n	34181bd4 <HAL_GPIO_Init+0x3ec>
34181b28:	f503 53c0 	add.w	r3, r3, #6144	@ 0x1800
34181b2c:	429c      	cmp	r4, r3
34181b2e:	d053      	beq.n	34181bd8 <HAL_GPIO_Init+0x3f0>
34181b30:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34181b34:	429c      	cmp	r4, r3
34181b36:	d051      	beq.n	34181bdc <HAL_GPIO_Init+0x3f4>
34181b38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34181b3c:	429c      	cmp	r4, r3
34181b3e:	d04f      	beq.n	34181be0 <HAL_GPIO_Init+0x3f8>
34181b40:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34181b44:	429c      	cmp	r4, r3
34181b46:	bf14      	ite	ne
34181b48:	2310      	movne	r3, #16
34181b4a:	230b      	moveq	r3, #11
34181b4c:	4083      	lsls	r3, r0
34181b4e:	ea43 030c 	orr.w	r3, r3, ip
        EXTI->EXTICR[position >> 2u] = temp;
34181b52:	660b      	str	r3, [r1, #96]	@ 0x60
        temp = EXTI->IMR1;
34181b54:	f8da 3080 	ldr.w	r3, [sl, #128]	@ 0x80
        temp &= ~(iocurrent);
34181b58:	f412 3f80 	tst.w	r2, #65536	@ 0x10000
34181b5c:	ea23 0105 	bic.w	r1, r3, r5
34181b60:	ea43 0305 	orr.w	r3, r3, r5
34181b64:	bf08      	it	eq
34181b66:	460b      	moveq	r3, r1
        EXTI->IMR1 = temp;
34181b68:	f8ca 3080 	str.w	r3, [sl, #128]	@ 0x80
        temp = EXTI->EMR1;
34181b6c:	f8da 3084 	ldr.w	r3, [sl, #132]	@ 0x84
        temp &= ~(iocurrent);
34181b70:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
34181b74:	ea23 0105 	bic.w	r1, r3, r5
34181b78:	ea43 0305 	orr.w	r3, r3, r5
34181b7c:	bf08      	it	eq
34181b7e:	460b      	moveq	r3, r1
        EXTI->EMR1 = temp;
34181b80:	f8ca 3084 	str.w	r3, [sl, #132]	@ 0x84
        temp = EXTI->RTSR1;
34181b84:	f8da 3000 	ldr.w	r3, [sl]
        temp &= ~(iocurrent);
34181b88:	f412 1f80 	tst.w	r2, #1048576	@ 0x100000
34181b8c:	ea23 0105 	bic.w	r1, r3, r5
34181b90:	ea43 0305 	orr.w	r3, r3, r5
34181b94:	bf08      	it	eq
34181b96:	460b      	moveq	r3, r1
        EXTI->RTSR1 = temp;
34181b98:	f8ca 3000 	str.w	r3, [sl]
        temp = EXTI->FTSR1;
34181b9c:	f8da 3004 	ldr.w	r3, [sl, #4]
        temp &= ~(iocurrent);
34181ba0:	f412 1f00 	tst.w	r2, #2097152	@ 0x200000
34181ba4:	ea23 0105 	bic.w	r1, r3, r5
34181ba8:	ea45 0503 	orr.w	r5, r5, r3
34181bac:	bf08      	it	eq
34181bae:	460d      	moveq	r5, r1
        EXTI->FTSR1 = temp;
34181bb0:	f8ca 5004 	str.w	r5, [sl, #4]
    position++;
34181bb4:	3701      	adds	r7, #1
34181bb6:	f109 0902 	add.w	r9, r9, #2
34181bba:	e698      	b.n	341818ee <HAL_GPIO_Init+0x106>
        temp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03u) * EXTI_EXTICR1_EXTI1_Pos));
34181bbc:	2300      	movs	r3, #0
34181bbe:	e7c5      	b.n	34181b4c <HAL_GPIO_Init+0x364>
34181bc0:	2301      	movs	r3, #1
34181bc2:	e7c3      	b.n	34181b4c <HAL_GPIO_Init+0x364>
34181bc4:	2302      	movs	r3, #2
34181bc6:	e7c1      	b.n	34181b4c <HAL_GPIO_Init+0x364>
34181bc8:	2304      	movs	r3, #4
34181bca:	e7bf      	b.n	34181b4c <HAL_GPIO_Init+0x364>
34181bcc:	2305      	movs	r3, #5
34181bce:	e7bd      	b.n	34181b4c <HAL_GPIO_Init+0x364>
34181bd0:	2306      	movs	r3, #6
34181bd2:	e7bb      	b.n	34181b4c <HAL_GPIO_Init+0x364>
34181bd4:	2307      	movs	r3, #7
34181bd6:	e7b9      	b.n	34181b4c <HAL_GPIO_Init+0x364>
34181bd8:	2308      	movs	r3, #8
34181bda:	e7b7      	b.n	34181b4c <HAL_GPIO_Init+0x364>
34181bdc:	2309      	movs	r3, #9
34181bde:	e7b5      	b.n	34181b4c <HAL_GPIO_Init+0x364>
34181be0:	230a      	movs	r3, #10
34181be2:	e7b3      	b.n	34181b4c <HAL_GPIO_Init+0x364>
34181be4:	3418ceaf 	.word	0x3418ceaf
34181be8:	46020000 	.word	0x46020000
34181bec:	56020400 	.word	0x56020400
34181bf0:	56020800 	.word	0x56020800
34181bf4:	56020c00 	.word	0x56020c00
34181bf8:	56021000 	.word	0x56021000
34181bfc:	56021400 	.word	0x56021400
34181c00:	56021800 	.word	0x56021800
34181c04:	56021c00 	.word	0x56021c00
34181c08:	56023400 	.word	0x56023400
34181c0c:	56023800 	.word	0x56023800
34181c10:	56023c00 	.word	0x56023c00
34181c14:	56024000 	.word	0x56024000

34181c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
34181c18:	b570      	push	{r4, r5, r6, lr}
34181c1a:	4605      	mov	r5, r0
34181c1c:	4616      	mov	r6, r2
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
34181c1e:	460c      	mov	r4, r1
34181c20:	b921      	cbnz	r1, 34181c2c <HAL_GPIO_WritePin+0x14>
34181c22:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
34181c26:	4808      	ldr	r0, [pc, #32]	@ (34181c48 <HAL_GPIO_WritePin+0x30>)
34181c28:	f7ff fa92 	bl	34181150 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
34181c2c:	2e01      	cmp	r6, #1
34181c2e:	d906      	bls.n	34181c3e <HAL_GPIO_WritePin+0x26>
34181c30:	f240 11a1 	movw	r1, #417	@ 0x1a1
34181c34:	4804      	ldr	r0, [pc, #16]	@ (34181c48 <HAL_GPIO_WritePin+0x30>)
34181c36:	f7ff fa8b 	bl	34181150 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
34181c3a:	61ac      	str	r4, [r5, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
34181c3c:	bd70      	pop	{r4, r5, r6, pc}
  if (PinState != GPIO_PIN_RESET)
34181c3e:	2e00      	cmp	r6, #0
34181c40:	d1fb      	bne.n	34181c3a <HAL_GPIO_WritePin+0x22>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
34181c42:	62ac      	str	r4, [r5, #40]	@ 0x28
}
34181c44:	e7fa      	b.n	34181c3c <HAL_GPIO_WritePin+0x24>
34181c46:	bf00      	nop
34181c48:	3418ceaf 	.word	0x3418ceaf

34181c4c <HAL_PWREx_ConfigSupply>:
  * @note: The power supply configuration is not reset by wakeup from Standby mode and
  *        application reset, but only reset by VDD POR.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply(uint32_t SupplySource)
{
34181c4c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_PWR_SUPPLY(SupplySource));
34181c4e:	f030 0304 	bics.w	r3, r0, #4
{
34181c52:	4604      	mov	r4, r0
  assert_param(IS_PWR_SUPPLY(SupplySource));
34181c54:	d004      	beq.n	34181c60 <HAL_PWREx_ConfigSupply+0x14>
34181c56:	f44f 7187 	mov.w	r1, #270	@ 0x10e
34181c5a:	480c      	ldr	r0, [pc, #48]	@ (34181c8c <HAL_PWREx_ConfigSupply+0x40>)
34181c5c:	f7ff fa78 	bl	34181150 <assert_failed>

  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR1, PWR_SUPPLY_CONFIG_MASK, SupplySource);
34181c60:	4d0b      	ldr	r5, [pc, #44]	@ (34181c90 <HAL_PWREx_ConfigSupply+0x44>)
34181c62:	682b      	ldr	r3, [r5, #0]
34181c64:	f023 0304 	bic.w	r3, r3, #4
34181c68:	4323      	orrs	r3, r4
34181c6a:	602b      	str	r3, [r5, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
34181c6c:	f7ff fd14 	bl	34181698 <HAL_GetTick>
34181c70:	4604      	mov	r4, r0

  /* Wait till voltage level flag is set */
  while ((PWR->VOSCR & PWR_VOSCR_ACTVOSRDY) == 0U)
34181c72:	6a2b      	ldr	r3, [r5, #32]
34181c74:	039b      	lsls	r3, r3, #14
34181c76:	d501      	bpl.n	34181c7c <HAL_PWREx_ConfigSupply+0x30>
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;
34181c78:	2000      	movs	r0, #0
}
34181c7a:	bd38      	pop	{r3, r4, r5, pc}
    if ((HAL_GetTick() - tickstart) > PWR_FLAG_SETTING_DELAY)
34181c7c:	f7ff fd0c 	bl	34181698 <HAL_GetTick>
34181c80:	1b00      	subs	r0, r0, r4
34181c82:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
34181c86:	d9f4      	bls.n	34181c72 <HAL_PWREx_ConfigSupply+0x26>
      return HAL_ERROR;
34181c88:	2001      	movs	r0, #1
34181c8a:	e7f6      	b.n	34181c7a <HAL_PWREx_ConfigSupply+0x2e>
34181c8c:	3418cee4 	.word	0x3418cee4
34181c90:	56024800 	.word	0x56024800

34181c94 <HAL_PWREx_EnableVddIO2>:
  * @note   Setting this bit is mandatory to use PO[5:0] and PP[15:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO2(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO2SV);
34181c94:	4a02      	ldr	r2, [pc, #8]	@ (34181ca0 <HAL_PWREx_EnableVddIO2+0xc>)
34181c96:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34181c98:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34181c9c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34181c9e:	4770      	bx	lr
34181ca0:	56024800 	.word	0x56024800

34181ca4 <HAL_PWREx_EnableVddIO3>:
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO3(void)
{
  SET_BIT(PWR->SVMCR3, PWR_SVMCR3_VDDIO3SV);
34181ca4:	4a02      	ldr	r2, [pc, #8]	@ (34181cb0 <HAL_PWREx_EnableVddIO3+0xc>)
34181ca6:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
34181ca8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
34181cac:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
34181cae:	4770      	bx	lr
34181cb0:	56024800 	.word	0x56024800

34181cb4 <HAL_PWREx_EnableVddIO4>:
  * @note   Setting this bit is mandatory to use PB[9,8], PC[12:6], and PD[2] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO4(void)
{
  SET_BIT(PWR->SVMCR1, PWR_SVMCR1_VDDIO4SV);
34181cb4:	4a02      	ldr	r2, [pc, #8]	@ (34181cc0 <HAL_PWREx_EnableVddIO4+0xc>)
34181cb6:	6b53      	ldr	r3, [r2, #52]	@ 0x34
34181cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34181cbc:	6353      	str	r3, [r2, #52]	@ 0x34
}
34181cbe:	4770      	bx	lr
34181cc0:	56024800 	.word	0x56024800

34181cc4 <HAL_PWREx_EnableVddIO5>:
  * @note   Setting this bit is mandatory to use PN[12:0] I/Os.
  * @retval None.
  */
void HAL_PWREx_EnableVddIO5(void)
{
  SET_BIT(PWR->SVMCR2, PWR_SVMCR2_VDDIO5SV);
34181cc4:	4a02      	ldr	r2, [pc, #8]	@ (34181cd0 <HAL_PWREx_EnableVddIO5+0xc>)
34181cc6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
34181cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
34181ccc:	6393      	str	r3, [r2, #56]	@ 0x38
}
34181cce:	4770      	bx	lr
34181cd0:	56024800 	.word	0x56024800

34181cd4 <LL_RCC_HSI_IsReady>:
  * @rmtoll SR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34181cd4:	4b02      	ldr	r3, [pc, #8]	@ (34181ce0 <LL_RCC_HSI_IsReady+0xc>)
34181cd6:	6858      	ldr	r0, [r3, #4]
}
34181cd8:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34181cdc:	4770      	bx	lr
34181cde:	bf00      	nop
34181ce0:	56028000 	.word	0x56028000

34181ce4 <LL_RCC_MSI_IsReady>:
  * @rmtoll SR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34181ce4:	4b02      	ldr	r3, [pc, #8]	@ (34181cf0 <LL_RCC_MSI_IsReady+0xc>)
34181ce6:	6858      	ldr	r0, [r3, #4]
}
34181ce8:	f3c0 0080 	ubfx	r0, r0, #2, #1
34181cec:	4770      	bx	lr
34181cee:	bf00      	nop
34181cf0:	56028000 	.word	0x56028000

34181cf4 <LL_RCC_PLL1_IsReady>:
  * @rmtoll SR           PLL1RDY         LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
34181cf4:	4b02      	ldr	r3, [pc, #8]	@ (34181d00 <LL_RCC_PLL1_IsReady+0xc>)
34181cf6:	6858      	ldr	r0, [r3, #4]
}
34181cf8:	f3c0 2000 	ubfx	r0, r0, #8, #1
34181cfc:	4770      	bx	lr
34181cfe:	bf00      	nop
34181d00:	56028000 	.word	0x56028000

34181d04 <RCC_PLL_IsNewConfig>:
  * @param  pPLLInit Pointer to an RCC_PLLInitTypeDef structure that
  *                  contains the configuration parameters.  *
  * @retval 1 if success else 0
  */
static uint32_t RCC_PLL_IsNewConfig(uint32_t PLLnumber, const RCC_PLLInitTypeDef *pPLLInit)
{
34181d04:	b570      	push	{r4, r5, r6, lr}
  /* !!! WARNING: ONLY INTEGER AND FRACTIONAL MODES MANAGED TODAY !!! */

  /* Check for PLLCFGR1, PLLCFGR2 and PLLCFGR3 parameters updates */
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34181d06:	690b      	ldr	r3, [r1, #16]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34181d08:	4d1b      	ldr	r5, [pc, #108]	@ (34181d78 <RCC_PLL_IsNewConfig+0x74>)
      (pPLLInit->PLLSource | (pPLLInit->PLLM << RCC_PLL1CFGR1_PLL1DIVM_Pos) \
34181d0a:	688e      	ldr	r6, [r1, #8]
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34181d0c:	0104      	lsls	r4, r0, #4
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34181d0e:	5962      	ldr	r2, [r4, r5]
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34181d10:	021b      	lsls	r3, r3, #8
34181d12:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
34181d16:	684e      	ldr	r6, [r1, #4]
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34181d18:	f022 420c 	bic.w	r2, r2, #2348810240	@ 0x8c000000
34181d1c:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
       | (pPLLInit->PLLN << RCC_PLL1CFGR1_PLL1DIVN_Pos)))
34181d20:	4333      	orrs	r3, r6
  if ((*p_rcc_pll_cfgr1_reg & (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN)) != \
34181d22:	429a      	cmp	r2, r3
34181d24:	d126      	bne.n	34181d74 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34181d26:	4b15      	ldr	r3, [pc, #84]	@ (34181d7c <RCC_PLL_IsNewConfig+0x78>)
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr2_reg & RCC_PLL1CFGR2_PLL1DIVNFRAC) != \
34181d28:	68ca      	ldr	r2, [r1, #12]
34181d2a:	58e3      	ldr	r3, [r4, r3]
34181d2c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34181d30:	4293      	cmp	r3, r2
34181d32:	d11f      	bne.n	34181d74 <RCC_PLL_IsNewConfig+0x70>
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34181d34:	4b12      	ldr	r3, [pc, #72]	@ (34181d80 <RCC_PLL_IsNewConfig+0x7c>)
           (pPLLInit->PLLFractional << RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos))
  {
    ret = 1U; /* New PLL configuration */
  }
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34181d36:	58e2      	ldr	r2, [r4, r3]
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34181d38:	e9d1 6305 	ldrd	r6, r3, [r1, #20]
34181d3c:	061b      	lsls	r3, r3, #24
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34181d3e:	f002 527c 	and.w	r2, r2, #1056964608	@ 0x3f000000
           ((pPLLInit->PLLP1 << RCC_PLL1CFGR3_PLL1PDIV1_Pos) | (pPLLInit->PLLP2 << RCC_PLL1CFGR3_PLL1PDIV2_Pos)))
34181d42:	ea43 63c6 	orr.w	r3, r3, r6, lsl #27
  else if ((*p_rcc_pll_cfgr3_reg & (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2)) != \
34181d46:	429a      	cmp	r2, r3
34181d48:	d114      	bne.n	34181d74 <RCC_PLL_IsNewConfig+0x70>
  {
    /* Mode change detection*/
    uint32_t pllState;

    /* Get current Mode*/
    if (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34181d4a:	4b0e      	ldr	r3, [pc, #56]	@ (34181d84 <RCC_PLL_IsNewConfig+0x80>)
34181d4c:	685a      	ldr	r2, [r3, #4]
34181d4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
34181d52:	fa03 f000 	lsl.w	r0, r3, r0
34181d56:	4390      	bics	r0, r2
34181d58:	d00a      	beq.n	34181d70 <RCC_PLL_IsNewConfig+0x6c>
    {
      pllState = RCC_PLL_ON;
    }
    else
    {
      if ((*p_rcc_pll_cfgr1_reg & RCC_PLL1CFGR1_PLL1BYP) != 0UL)
34181d5a:	5963      	ldr	r3, [r4, r5]
      {
        pllState = RCC_PLL_BYPASS;
34181d5c:	f013 6f00 	tst.w	r3, #134217728	@ 0x8000000
34181d60:	bf0c      	ite	eq
34181d62:	2301      	moveq	r3, #1
34181d64:	2303      	movne	r3, #3
        pllState = RCC_PLL_OFF;
      }
    }

    /* Compare with new mode */
    if (pllState != pPLLInit->PLLState)
34181d66:	6808      	ldr	r0, [r1, #0]
34181d68:	1ac0      	subs	r0, r0, r3
34181d6a:	bf18      	it	ne
34181d6c:	2001      	movne	r0, #1
      ret = 1U; /* New PLL configuration */
    }
  }

  return ret;
}
34181d6e:	bd70      	pop	{r4, r5, r6, pc}
      pllState = RCC_PLL_ON;
34181d70:	2302      	movs	r3, #2
34181d72:	e7f8      	b.n	34181d66 <RCC_PLL_IsNewConfig+0x62>
    ret = 1U; /* New PLL configuration */
34181d74:	2001      	movs	r0, #1
  return ret;
34181d76:	e7fa      	b.n	34181d6e <RCC_PLL_IsNewConfig+0x6a>
34181d78:	56028080 	.word	0x56028080
34181d7c:	56028084 	.word	0x56028084
34181d80:	56028088 	.word	0x56028088
34181d84:	56028000 	.word	0x56028000

34181d88 <RCC_PLL_Enable>:
{
34181d88:	b570      	push	{r4, r5, r6, lr}
  WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34181d8a:	f44f 7480 	mov.w	r4, #256	@ 0x100
34181d8e:	4e09      	ldr	r6, [pc, #36]	@ (34181db4 <RCC_PLL_Enable+0x2c>)
34181d90:	4084      	lsls	r4, r0
34181d92:	f8c6 4800 	str.w	r4, [r6, #2048]	@ 0x800
  tickstart = HAL_GetTick();
34181d96:	f7ff fc7f 	bl	34181698 <HAL_GetTick>
34181d9a:	4605      	mov	r5, r0
  while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34181d9c:	6873      	ldr	r3, [r6, #4]
34181d9e:	421c      	tst	r4, r3
34181da0:	d001      	beq.n	34181da6 <RCC_PLL_Enable+0x1e>
  return ret;
34181da2:	2000      	movs	r0, #0
}
34181da4:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34181da6:	f7ff fc77 	bl	34181698 <HAL_GetTick>
34181daa:	1b40      	subs	r0, r0, r5
34181dac:	2801      	cmp	r0, #1
34181dae:	d9f5      	bls.n	34181d9c <RCC_PLL_Enable+0x14>
      return HAL_TIMEOUT;
34181db0:	2003      	movs	r0, #3
34181db2:	e7f7      	b.n	34181da4 <RCC_PLL_Enable+0x1c>
34181db4:	56028000 	.word	0x56028000

34181db8 <RCC_PLL_Config>:
  if (pPLLInit->PLLState == RCC_PLL_ON)
34181db8:	680b      	ldr	r3, [r1, #0]
{
34181dba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  if (pPLLInit->PLLState == RCC_PLL_ON)
34181dbe:	2b02      	cmp	r3, #2
{
34181dc0:	4681      	mov	r9, r0
34181dc2:	460d      	mov	r5, r1
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34181dc4:	4f83      	ldr	r7, [pc, #524]	@ (34181fd4 <RCC_PLL_Config+0x21c>)
  p_rcc_pll_cfgr3_reg = &(RCC->PLL1CFGR3) + (((uint32_t)0x4) * PLLnumber);
34181dc6:	4e84      	ldr	r6, [pc, #528]	@ (34181fd8 <RCC_PLL_Config+0x220>)
  p_rcc_pll_cfgr1_reg = &(RCC->PLL1CFGR1) + (((uint32_t)0x4) * PLLnumber);
34181dc8:	ea4f 1400 	mov.w	r4, r0, lsl #4
  if (pPLLInit->PLLState == RCC_PLL_ON)
34181dcc:	f040 8099 	bne.w	34181f02 <RCC_PLL_Config+0x14a>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34181dd0:	684b      	ldr	r3, [r1, #4]
34181dd2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34181dd6:	d004      	beq.n	34181de2 <RCC_PLL_Config+0x2a>
34181dd8:	f240 71fa 	movw	r1, #2042	@ 0x7fa
34181ddc:	487f      	ldr	r0, [pc, #508]	@ (34181fdc <RCC_PLL_Config+0x224>)
34181dde:	f7ff f9b7 	bl	34181150 <assert_failed>
    assert_param(IS_RCC_PLLFRACN_VALUE(pPLLInit->PLLFractional));
34181de2:	68eb      	ldr	r3, [r5, #12]
34181de4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
34181de8:	d304      	bcc.n	34181df4 <RCC_PLL_Config+0x3c>
34181dea:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34181dee:	487b      	ldr	r0, [pc, #492]	@ (34181fdc <RCC_PLL_Config+0x224>)
34181df0:	f7ff f9ae 	bl	34181150 <assert_failed>
    assert_param(IS_RCC_PLLM_VALUE(pPLLInit->PLLM));
34181df4:	68ab      	ldr	r3, [r5, #8]
34181df6:	3b01      	subs	r3, #1
34181df8:	2b3e      	cmp	r3, #62	@ 0x3e
34181dfa:	d904      	bls.n	34181e06 <RCC_PLL_Config+0x4e>
34181dfc:	f240 71fc 	movw	r1, #2044	@ 0x7fc
34181e00:	4876      	ldr	r0, [pc, #472]	@ (34181fdc <RCC_PLL_Config+0x224>)
34181e02:	f7ff f9a5 	bl	34181150 <assert_failed>
    assert_param(IS_RCC_PLLN_VALUE(pPLLInit->PLLN));
34181e06:	f640 12ba 	movw	r2, #2490	@ 0x9ba
34181e0a:	692b      	ldr	r3, [r5, #16]
34181e0c:	3b0a      	subs	r3, #10
34181e0e:	4293      	cmp	r3, r2
34181e10:	d904      	bls.n	34181e1c <RCC_PLL_Config+0x64>
34181e12:	f240 71fd 	movw	r1, #2045	@ 0x7fd
34181e16:	4871      	ldr	r0, [pc, #452]	@ (34181fdc <RCC_PLL_Config+0x224>)
34181e18:	f7ff f99a 	bl	34181150 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP1));
34181e1c:	696b      	ldr	r3, [r5, #20]
34181e1e:	3b01      	subs	r3, #1
34181e20:	2b06      	cmp	r3, #6
34181e22:	d904      	bls.n	34181e2e <RCC_PLL_Config+0x76>
34181e24:	f240 71fe 	movw	r1, #2046	@ 0x7fe
34181e28:	486c      	ldr	r0, [pc, #432]	@ (34181fdc <RCC_PLL_Config+0x224>)
34181e2a:	f7ff f991 	bl	34181150 <assert_failed>
    assert_param(IS_RCC_PLLP_VALUE(pPLLInit->PLLP2));
34181e2e:	69ab      	ldr	r3, [r5, #24]
34181e30:	3b01      	subs	r3, #1
34181e32:	2b06      	cmp	r3, #6
34181e34:	d904      	bls.n	34181e40 <RCC_PLL_Config+0x88>
34181e36:	f240 71ff 	movw	r1, #2047	@ 0x7ff
34181e3a:	4868      	ldr	r0, [pc, #416]	@ (34181fdc <RCC_PLL_Config+0x224>)
34181e3c:	f7ff f988 	bl	34181150 <assert_failed>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34181e40:	f44f 7880 	mov.w	r8, #256	@ 0x100
34181e44:	4b66      	ldr	r3, [pc, #408]	@ (34181fe0 <RCC_PLL_Config+0x228>)
34181e46:	fa08 f809 	lsl.w	r8, r8, r9
34181e4a:	f8c3 8000 	str.w	r8, [r3]
    tickstart = HAL_GetTick();
34181e4e:	f7ff fc23 	bl	34181698 <HAL_GetTick>
34181e52:	4681      	mov	r9, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34181e54:	f8df a194 	ldr.w	sl, [pc, #404]	@ 34181fec <RCC_PLL_Config+0x234>
34181e58:	f8da 3004 	ldr.w	r3, [sl, #4]
34181e5c:	ea38 0303 	bics.w	r3, r8, r3
34181e60:	d040      	beq.n	34181ee4 <RCC_PLL_Config+0x12c>
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34181e62:	59a3      	ldr	r3, [r4, r6]
  p_rcc_pll_cfgr2_reg = &(RCC->PLL1CFGR2) + (((uint32_t)0x4) * PLLnumber);
34181e64:	495f      	ldr	r1, [pc, #380]	@ (34181fe4 <RCC_PLL_Config+0x22c>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODSSDIS);
34181e66:	f043 0304 	orr.w	r3, r3, #4
34181e6a:	51a3      	str	r3, [r4, r6]
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34181e6c:	59e3      	ldr	r3, [r4, r7]
34181e6e:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
34181e72:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1SEL | RCC_PLL1CFGR1_PLL1DIVM | RCC_PLL1CFGR1_PLL1DIVN), \
34181e74:	692b      	ldr	r3, [r5, #16]
34181e76:	68aa      	ldr	r2, [r5, #8]
34181e78:	021b      	lsls	r3, r3, #8
34181e7a:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
34181e7e:	686a      	ldr	r2, [r5, #4]
34181e80:	59e0      	ldr	r0, [r4, r7]
34181e82:	4313      	orrs	r3, r2
34181e84:	4a58      	ldr	r2, [pc, #352]	@ (34181fe8 <RCC_PLL_Config+0x230>)
34181e86:	4002      	ands	r2, r0
34181e88:	4313      	orrs	r3, r2
34181e8a:	51e3      	str	r3, [r4, r7]
    MODIFY_REG(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1PDIV1 | RCC_PLL1CFGR3_PLL1PDIV2), \
34181e8c:	59a2      	ldr	r2, [r4, r6]
34181e8e:	e9d5 0305 	ldrd	r0, r3, [r5, #20]
34181e92:	061b      	lsls	r3, r3, #24
34181e94:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
34181e98:	ea43 63c0 	orr.w	r3, r3, r0, lsl #27
34181e9c:	4313      	orrs	r3, r2
34181e9e:	51a3      	str	r3, [r4, r6]
    MODIFY_REG(*p_rcc_pll_cfgr2_reg, RCC_PLL1CFGR2_PLL1DIVNFRAC, \
34181ea0:	5863      	ldr	r3, [r4, r1]
34181ea2:	68ea      	ldr	r2, [r5, #12]
34181ea4:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
34181ea8:	4313      	orrs	r3, r2
34181eaa:	5063      	str	r3, [r4, r1]
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1MODDSEN);
34181eac:	59a3      	ldr	r3, [r4, r6]
34181eae:	f023 0308 	bic.w	r3, r3, #8
34181eb2:	51a3      	str	r3, [r4, r6]
    if (pPLLInit->PLLFractional != 0U)
34181eb4:	68eb      	ldr	r3, [r5, #12]
34181eb6:	b11b      	cbz	r3, 34181ec0 <RCC_PLL_Config+0x108>
      SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODDSEN | RCC_PLL1CFGR3_PLL1DACEN));
34181eb8:	59a3      	ldr	r3, [r4, r6]
34181eba:	f043 030a 	orr.w	r3, r3, #10
34181ebe:	51a3      	str	r3, [r4, r6]
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34181ec0:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34181ec2:	4d4a      	ldr	r5, [pc, #296]	@ (34181fec <RCC_PLL_Config+0x234>)
    SET_BIT(*p_rcc_pll_cfgr3_reg, (RCC_PLL1CFGR3_PLL1MODSSRST | RCC_PLL1CFGR3_PLL1PDIVEN));
34181ec4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
34181ec8:	f043 0301 	orr.w	r3, r3, #1
34181ecc:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CSR, RCC_CSR_PLL1ONS << PLLnumber);
34181ece:	f8c5 8800 	str.w	r8, [r5, #2048]	@ 0x800
    tickstart = HAL_GetTick();
34181ed2:	f7ff fbe1 	bl	34181698 <HAL_GetTick>
34181ed6:	4604      	mov	r4, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == 0U)
34181ed8:	686b      	ldr	r3, [r5, #4]
34181eda:	ea18 0f03 	tst.w	r8, r3
34181ede:	d00a      	beq.n	34181ef6 <RCC_PLL_Config+0x13e>
  HAL_StatusTypeDef ret = HAL_OK;
34181ee0:	2000      	movs	r0, #0
34181ee2:	e006      	b.n	34181ef2 <RCC_PLL_Config+0x13a>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34181ee4:	f7ff fbd8 	bl	34181698 <HAL_GetTick>
34181ee8:	eba0 0009 	sub.w	r0, r0, r9
34181eec:	2801      	cmp	r0, #1
34181eee:	d9b3      	bls.n	34181e58 <RCC_PLL_Config+0xa0>
        return HAL_TIMEOUT;
34181ef0:	2003      	movs	r0, #3
}
34181ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34181ef6:	f7ff fbcf 	bl	34181698 <HAL_GetTick>
34181efa:	1b00      	subs	r0, r0, r4
34181efc:	2801      	cmp	r0, #1
34181efe:	d9eb      	bls.n	34181ed8 <RCC_PLL_Config+0x120>
34181f00:	e7f6      	b.n	34181ef0 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_BYPASS)
34181f02:	2b03      	cmp	r3, #3
34181f04:	d146      	bne.n	34181f94 <RCC_PLL_Config+0x1dc>
    assert_param(IS_RCC_PLLSOURCE(pPLLInit->PLLSource));
34181f06:	684b      	ldr	r3, [r1, #4]
34181f08:	b37b      	cbz	r3, 34181f6a <RCC_PLL_Config+0x1b2>
34181f0a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34181f0e:	d032      	beq.n	34181f76 <RCC_PLL_Config+0x1be>
34181f10:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181f14:	d032      	beq.n	34181f7c <RCC_PLL_Config+0x1c4>
34181f16:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34181f1a:	d00d      	beq.n	34181f38 <RCC_PLL_Config+0x180>
34181f1c:	f640 013f 	movw	r1, #2111	@ 0x83f
34181f20:	482e      	ldr	r0, [pc, #184]	@ (34181fdc <RCC_PLL_Config+0x224>)
34181f22:	f7ff f915 	bl	34181150 <assert_failed>
    if (RCC_PLL_Source_IsReady(pPLLInit->PLLSource) == 1U)
34181f26:	686b      	ldr	r3, [r5, #4]
{
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  switch (PLLSource)
34181f28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34181f2c:	d026      	beq.n	34181f7c <RCC_PLL_Config+0x1c4>
34181f2e:	d803      	bhi.n	34181f38 <RCC_PLL_Config+0x180>
34181f30:	b1db      	cbz	r3, 34181f6a <RCC_PLL_Config+0x1b2>
34181f32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34181f36:	d01e      	beq.n	34181f76 <RCC_PLL_Config+0x1be>
      WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34181f38:	f44f 7680 	mov.w	r6, #256	@ 0x100
34181f3c:	4b28      	ldr	r3, [pc, #160]	@ (34181fe0 <RCC_PLL_Config+0x228>)
34181f3e:	fa06 f609 	lsl.w	r6, r6, r9
34181f42:	601e      	str	r6, [r3, #0]
      tickstart = HAL_GetTick();
34181f44:	f7ff fba8 	bl	34181698 <HAL_GetTick>
34181f48:	4680      	mov	r8, r0
      while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34181f4a:	f8df 90a0 	ldr.w	r9, [pc, #160]	@ 34181fec <RCC_PLL_Config+0x234>
34181f4e:	f8d9 3004 	ldr.w	r3, [r9, #4]
34181f52:	ea36 0303 	bics.w	r3, r6, r3
34181f56:	d016      	beq.n	34181f86 <RCC_PLL_Config+0x1ce>
      MODIFY_REG(*p_rcc_pll_cfgr1_reg, (RCC_PLL1CFGR1_PLL1BYP | RCC_PLL1CFGR1_PLL1SEL), \
34181f58:	59e3      	ldr	r3, [r4, r7]
34181f5a:	686a      	ldr	r2, [r5, #4]
34181f5c:	f023 43f0 	bic.w	r3, r3, #2013265920	@ 0x78000000
34181f60:	4313      	orrs	r3, r2
34181f62:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
34181f66:	51e3      	str	r3, [r4, r7]
34181f68:	e7ba      	b.n	34181ee0 <RCC_PLL_Config+0x128>
  {
    case RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() == 0U)
34181f6a:	f7ff feb3 	bl	34181cd4 <LL_RCC_HSI_IsReady>
34181f6e:	2800      	cmp	r0, #0
34181f70:	d1e2      	bne.n	34181f38 <RCC_PLL_Config+0x180>
      ret = HAL_ERROR;
34181f72:	2001      	movs	r0, #1
34181f74:	e7bd      	b.n	34181ef2 <RCC_PLL_Config+0x13a>
      {
        ret = 0U;
      }
      break;
    case RCC_PLLSOURCE_MSI:
      if (LL_RCC_MSI_IsReady() == 0U)
34181f76:	f7ff feb5 	bl	34181ce4 <LL_RCC_MSI_IsReady>
34181f7a:	e7f8      	b.n	34181f6e <RCC_PLL_Config+0x1b6>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34181f7c:	4b1b      	ldr	r3, [pc, #108]	@ (34181fec <RCC_PLL_Config+0x234>)
34181f7e:	685b      	ldr	r3, [r3, #4]
34181f80:	06db      	lsls	r3, r3, #27
34181f82:	d5f6      	bpl.n	34181f72 <RCC_PLL_Config+0x1ba>
34181f84:	e7d8      	b.n	34181f38 <RCC_PLL_Config+0x180>
        if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34181f86:	f7ff fb87 	bl	34181698 <HAL_GetTick>
34181f8a:	eba0 0008 	sub.w	r0, r0, r8
34181f8e:	2801      	cmp	r0, #1
34181f90:	d9dd      	bls.n	34181f4e <RCC_PLL_Config+0x196>
34181f92:	e7ad      	b.n	34181ef0 <RCC_PLL_Config+0x138>
  else if (pPLLInit->PLLState == RCC_PLL_OFF)
34181f94:	2b01      	cmp	r3, #1
34181f96:	d1a3      	bne.n	34181ee0 <RCC_PLL_Config+0x128>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34181f98:	f44f 7580 	mov.w	r5, #256	@ 0x100
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34181f9c:	59a3      	ldr	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34181f9e:	4085      	lsls	r5, r0
    CLEAR_BIT(*p_rcc_pll_cfgr3_reg, RCC_PLL1CFGR3_PLL1PDIVEN);
34181fa0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
34181fa4:	51a3      	str	r3, [r4, r6]
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34181fa6:	4b0e      	ldr	r3, [pc, #56]	@ (34181fe0 <RCC_PLL_Config+0x228>)
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34181fa8:	f8df 8040 	ldr.w	r8, [pc, #64]	@ 34181fec <RCC_PLL_Config+0x234>
    WRITE_REG(RCC->CCR, RCC_CCR_PLL1ONC << PLLnumber);
34181fac:	601d      	str	r5, [r3, #0]
    tickstart = HAL_GetTick();
34181fae:	f7ff fb73 	bl	34181698 <HAL_GetTick>
34181fb2:	4606      	mov	r6, r0
    while (READ_BIT(RCC->SR, (RCC_SR_PLL1RDY << PLLnumber)) == (RCC_SR_PLL1RDY << PLLnumber))
34181fb4:	f8d8 3004 	ldr.w	r3, [r8, #4]
34181fb8:	ea35 0303 	bics.w	r3, r5, r3
34181fbc:	d003      	beq.n	34181fc6 <RCC_PLL_Config+0x20e>
    CLEAR_BIT(*p_rcc_pll_cfgr1_reg, RCC_PLL1CFGR1_PLL1BYP);
34181fbe:	59e3      	ldr	r3, [r4, r7]
34181fc0:	f023 6300 	bic.w	r3, r3, #134217728	@ 0x8000000
34181fc4:	e7cf      	b.n	34181f66 <RCC_PLL_Config+0x1ae>
      if ((HAL_GetTick() - tickstart) > RCC_PLL_TIMEOUT_VALUE)
34181fc6:	f7ff fb67 	bl	34181698 <HAL_GetTick>
34181fca:	1b80      	subs	r0, r0, r6
34181fcc:	2801      	cmp	r0, #1
34181fce:	d9f1      	bls.n	34181fb4 <RCC_PLL_Config+0x1fc>
34181fd0:	e78e      	b.n	34181ef0 <RCC_PLL_Config+0x138>
34181fd2:	bf00      	nop
34181fd4:	56028080 	.word	0x56028080
34181fd8:	56028088 	.word	0x56028088
34181fdc:	3418cf1b 	.word	0x3418cf1b
34181fe0:	56029000 	.word	0x56029000
34181fe4:	56028084 	.word	0x56028084
34181fe8:	8c0000ff 	.word	0x8c0000ff
34181fec:	56028000 	.word	0x56028000

34181ff0 <RCC_IC_CheckPLLSources>:
  uint32_t ret = 1U;

  /* No assert since done in calling function */

  /* Check PLLSource1 clock source */
  switch (PLLSource1)
34181ff0:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34181ff4:	b508      	push	{r3, lr}
  switch (PLLSource1)
34181ff6:	d021      	beq.n	3418203c <RCC_IC_CheckPLLSources+0x4c>
34181ff8:	d805      	bhi.n	34182006 <RCC_IC_CheckPLLSources+0x16>
34181ffa:	b9c0      	cbnz	r0, 3418202e <RCC_IC_CheckPLLSources+0x3e>
  {
    case LL_RCC_ICCLKSOURCE_PLL1:
      if (LL_RCC_PLL1_IsReady() == 0U)
34181ffc:	f7ff fe7a 	bl	34181cf4 <LL_RCC_PLL1_IsReady>
34182000:	b178      	cbz	r0, 34182022 <RCC_IC_CheckPLLSources+0x32>
  uint32_t ret = 1U;
34182002:	2201      	movs	r2, #1
34182004:	e003      	b.n	3418200e <RCC_IC_CheckPLLSources+0x1e>
  switch (PLLSource1)
34182006:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3418200a:	d01e      	beq.n	3418204a <RCC_IC_CheckPLLSources+0x5a>
3418200c:	2200      	movs	r2, #0
      ret = 0U;
      break;
  }

  /* Check PLLSource2 clock source */
  switch (PLLSource2)
3418200e:	f1b1 5f00 	cmp.w	r1, #536870912	@ 0x20000000
34182012:	d03c      	beq.n	3418208e <RCC_IC_CheckPLLSources+0x9e>
34182014:	d820      	bhi.n	34182058 <RCC_IC_CheckPLLSources+0x68>
34182016:	b349      	cbz	r1, 3418206c <RCC_IC_CheckPLLSources+0x7c>
34182018:	f1b1 5f80 	cmp.w	r1, #268435456	@ 0x10000000
3418201c:	d030      	beq.n	34182080 <RCC_IC_CheckPLLSources+0x90>
        }
      }
      break;
    default:
      /* Unexpected */
      ret = 0U;
3418201e:	2200      	movs	r2, #0
34182020:	e02c      	b.n	3418207c <RCC_IC_CheckPLLSources+0x8c>
  * @rmtoll PLL1CFGR1    PLL1BYP         LL_RCC_PLL1_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34182022:	4b1e      	ldr	r3, [pc, #120]	@ (3418209c <RCC_IC_CheckPLLSources+0xac>)
34182024:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  * @rmtoll PLL4CFGR1    PLL4BYP         LL_RCC_PLL4_IsEnabledBypass
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL4_IsEnabledBypass(void)
{
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34182028:	f3c2 62c0 	ubfx	r2, r2, #27, #1
3418202c:	e7ef      	b.n	3418200e <RCC_IC_CheckPLLSources+0x1e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
3418202e:	4b1b      	ldr	r3, [pc, #108]	@ (3418209c <RCC_IC_CheckPLLSources+0xac>)
34182030:	685a      	ldr	r2, [r3, #4]
34182032:	0592      	lsls	r2, r2, #22
34182034:	d4e5      	bmi.n	34182002 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34182036:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
3418203a:	e7f5      	b.n	34182028 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418203c:	4b17      	ldr	r3, [pc, #92]	@ (3418209c <RCC_IC_CheckPLLSources+0xac>)
3418203e:	685a      	ldr	r2, [r3, #4]
34182040:	0550      	lsls	r0, r2, #21
34182042:	d4de      	bmi.n	34182002 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34182044:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
34182048:	e7ee      	b.n	34182028 <RCC_IC_CheckPLLSources+0x38>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3418204a:	4b14      	ldr	r3, [pc, #80]	@ (3418209c <RCC_IC_CheckPLLSources+0xac>)
3418204c:	685a      	ldr	r2, [r3, #4]
3418204e:	0512      	lsls	r2, r2, #20
34182050:	d4d7      	bmi.n	34182002 <RCC_IC_CheckPLLSources+0x12>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34182052:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
34182056:	e7e7      	b.n	34182028 <RCC_IC_CheckPLLSources+0x38>
  switch (PLLSource2)
34182058:	f1b1 5f40 	cmp.w	r1, #805306368	@ 0x30000000
3418205c:	d1df      	bne.n	3418201e <RCC_IC_CheckPLLSources+0x2e>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
3418205e:	4b0f      	ldr	r3, [pc, #60]	@ (3418209c <RCC_IC_CheckPLLSources+0xac>)
34182060:	6859      	ldr	r1, [r3, #4]
34182062:	0509      	lsls	r1, r1, #20
34182064:	d40a      	bmi.n	3418207c <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
34182066:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
3418206a:	e005      	b.n	34182078 <RCC_IC_CheckPLLSources+0x88>
      if (LL_RCC_PLL1_IsReady() == 0U)
3418206c:	f7ff fe42 	bl	34181cf4 <LL_RCC_PLL1_IsReady>
34182070:	b920      	cbnz	r0, 3418207c <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34182072:	4b0a      	ldr	r3, [pc, #40]	@ (3418209c <RCC_IC_CheckPLLSources+0xac>)
34182074:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
34182078:	0118      	lsls	r0, r3, #4
3418207a:	d5d0      	bpl.n	3418201e <RCC_IC_CheckPLLSources+0x2e>
      break;
  }

  return ret;
}
3418207c:	4610      	mov	r0, r2
3418207e:	bd08      	pop	{r3, pc}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34182080:	4b06      	ldr	r3, [pc, #24]	@ (3418209c <RCC_IC_CheckPLLSources+0xac>)
34182082:	6859      	ldr	r1, [r3, #4]
34182084:	0589      	lsls	r1, r1, #22
34182086:	d4f9      	bmi.n	3418207c <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
34182088:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
3418208c:	e7f4      	b.n	34182078 <RCC_IC_CheckPLLSources+0x88>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418208e:	4b03      	ldr	r3, [pc, #12]	@ (3418209c <RCC_IC_CheckPLLSources+0xac>)
34182090:	6859      	ldr	r1, [r3, #4]
34182092:	0548      	lsls	r0, r1, #21
34182094:	d4f2      	bmi.n	3418207c <RCC_IC_CheckPLLSources+0x8c>
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34182096:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
3418209a:	e7ed      	b.n	34182078 <RCC_IC_CheckPLLSources+0x88>
3418209c:	56028000 	.word	0x56028000

341820a0 <HAL_RCC_OscConfig>:
{
341820a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if (pRCC_OscInitStruct == NULL)
341820a4:	4604      	mov	r4, r0
341820a6:	b918      	cbnz	r0, 341820b0 <HAL_RCC_OscConfig+0x10>
    return HAL_ERROR;
341820a8:	2001      	movs	r0, #1
}
341820aa:	b003      	add	sp, #12
341820ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));
341820b0:	6803      	ldr	r3, [r0, #0]
341820b2:	b133      	cbz	r3, 341820c2 <HAL_RCC_OscConfig+0x22>
341820b4:	06dd      	lsls	r5, r3, #27
341820b6:	d104      	bne.n	341820c2 <HAL_RCC_OscConfig+0x22>
341820b8:	f44f 71b9 	mov.w	r1, #370	@ 0x172
341820bc:	4893      	ldr	r0, [pc, #588]	@ (3418230c <HAL_RCC_OscConfig+0x26c>)
341820be:	f7ff f847 	bl	34181150 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
341820c2:	4b93      	ldr	r3, [pc, #588]	@ (34182310 <HAL_RCC_OscConfig+0x270>)
341820c4:	6a1e      	ldr	r6, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
341820c6:	6a1d      	ldr	r5, [r3, #32]
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
341820c8:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
341820cc:	f406 1640 	and.w	r6, r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
341820d0:	f002 4be0 	and.w	fp, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
341820d4:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
341820d8:	f005 5540 	and.w	r5, r5, #805306368	@ 0x30000000
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
341820dc:	f002 4ae0 	and.w	sl, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
341820e0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
341820e4:	f002 49e0 	and.w	r9, r2, #1879048192	@ 0x70000000
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
341820e8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
  rccsr = RCC->SR;
341820ec:	685f      	ldr	r7, [r3, #4]
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
341820ee:	6823      	ldr	r3, [r4, #0]
341820f0:	f002 48e0 	and.w	r8, r2, #1879048192	@ 0x70000000
341820f4:	07d8      	lsls	r0, r3, #31
341820f6:	d463      	bmi.n	341821c0 <HAL_RCC_OscConfig+0x120>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
341820f8:	6823      	ldr	r3, [r4, #0]
341820fa:	0799      	lsls	r1, r3, #30
341820fc:	f100 80d4 	bmi.w	341822a8 <HAL_RCC_OscConfig+0x208>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
34182100:	6823      	ldr	r3, [r4, #0]
34182102:	06d8      	lsls	r0, r3, #27
34182104:	d522      	bpl.n	3418214c <HAL_RCC_OscConfig+0xac>
    assert_param(IS_RCC_MSI(pRCC_OscInitStruct->MSIState));
34182106:	69e3      	ldr	r3, [r4, #28]
34182108:	2b00      	cmp	r3, #0
3418210a:	f000 8347 	beq.w	3418279c <HAL_RCC_OscConfig+0x6fc>
3418210e:	2b04      	cmp	r3, #4
34182110:	f000 834d 	beq.w	341827ae <HAL_RCC_OscConfig+0x70e>
34182114:	f240 2105 	movw	r1, #517	@ 0x205
34182118:	487c      	ldr	r0, [pc, #496]	@ (3418230c <HAL_RCC_OscConfig+0x26c>)
3418211a:	f7ff f819 	bl	34181150 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3418211e:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
34182122:	f040 8148 	bne.w	341823b6 <HAL_RCC_OscConfig+0x316>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
34182126:	69e3      	ldr	r3, [r4, #28]
34182128:	2b00      	cmp	r3, #0
3418212a:	d0bd      	beq.n	341820a8 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
3418212c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
3418212e:	2b1f      	cmp	r3, #31
34182130:	d904      	bls.n	3418213c <HAL_RCC_OscConfig+0x9c>
34182132:	f44f 7106 	mov.w	r1, #536	@ 0x218
34182136:	4875      	ldr	r0, [pc, #468]	@ (3418230c <HAL_RCC_OscConfig+0x26c>)
34182138:	f7ff f80a 	bl	34181150 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSITRIM, Value << RCC_MSICFGR_MSITRIM_Pos);
3418213c:	4a74      	ldr	r2, [pc, #464]	@ (34182310 <HAL_RCC_OscConfig+0x270>)
3418213e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34182140:	6c53      	ldr	r3, [r2, #68]	@ 0x44
34182142:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
34182146:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418214a:	6453      	str	r3, [r2, #68]	@ 0x44
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
3418214c:	6823      	ldr	r3, [r4, #0]
3418214e:	0718      	lsls	r0, r3, #28
34182150:	f100 8189 	bmi.w	34182466 <HAL_RCC_OscConfig+0x3c6>
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
34182154:	6823      	ldr	r3, [r4, #0]
34182156:	0759      	lsls	r1, r3, #29
34182158:	f100 81b4 	bmi.w	341824c4 <HAL_RCC_OscConfig+0x424>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL1.PLLState));
3418215c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3418215e:	2b03      	cmp	r3, #3
34182160:	d904      	bls.n	3418216c <HAL_RCC_OscConfig+0xcc>
34182162:	f240 21a5 	movw	r1, #677	@ 0x2a5
34182166:	4869      	ldr	r0, [pc, #420]	@ (3418230c <HAL_RCC_OscConfig+0x26c>)
34182168:	f7fe fff2 	bl	34181150 <assert_failed>
  if (pRCC_OscInitStruct->PLL1.PLLState != RCC_PLL_NONE)
3418216c:	6aa7      	ldr	r7, [r4, #40]	@ 0x28
3418216e:	2f00      	cmp	r7, #0
34182170:	f040 8210 	bne.w	34182594 <HAL_RCC_OscConfig+0x4f4>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL2.PLLState));
34182174:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34182176:	2b03      	cmp	r3, #3
34182178:	d904      	bls.n	34182184 <HAL_RCC_OscConfig+0xe4>
3418217a:	f240 21d3 	movw	r1, #723	@ 0x2d3
3418217e:	4863      	ldr	r0, [pc, #396]	@ (3418230c <HAL_RCC_OscConfig+0x26c>)
34182180:	f7fe ffe6 	bl	34181150 <assert_failed>
  if (pRCC_OscInitStruct->PLL2.PLLState != RCC_PLL_NONE)
34182184:	6c67      	ldr	r7, [r4, #68]	@ 0x44
34182186:	2f00      	cmp	r7, #0
34182188:	f040 8246 	bne.w	34182618 <HAL_RCC_OscConfig+0x578>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL3.PLLState));
3418218c:	6e23      	ldr	r3, [r4, #96]	@ 0x60
3418218e:	2b03      	cmp	r3, #3
34182190:	d904      	bls.n	3418219c <HAL_RCC_OscConfig+0xfc>
34182192:	f240 3101 	movw	r1, #769	@ 0x301
34182196:	485d      	ldr	r0, [pc, #372]	@ (3418230c <HAL_RCC_OscConfig+0x26c>)
34182198:	f7fe ffda 	bl	34181150 <assert_failed>
  if (pRCC_OscInitStruct->PLL3.PLLState != RCC_PLL_NONE)
3418219c:	6e27      	ldr	r7, [r4, #96]	@ 0x60
3418219e:	2f00      	cmp	r7, #0
341821a0:	f040 827a 	bne.w	34182698 <HAL_RCC_OscConfig+0x5f8>
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL4.PLLState));
341821a4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
341821a6:	2b03      	cmp	r3, #3
341821a8:	d904      	bls.n	341821b4 <HAL_RCC_OscConfig+0x114>
341821aa:	f240 312e 	movw	r1, #814	@ 0x32e
341821ae:	4857      	ldr	r0, [pc, #348]	@ (3418230c <HAL_RCC_OscConfig+0x26c>)
341821b0:	f7fe ffce 	bl	34181150 <assert_failed>
  if (pRCC_OscInitStruct->PLL4.PLLState != RCC_PLL_NONE)
341821b4:	6fe7      	ldr	r7, [r4, #124]	@ 0x7c
341821b6:	2f00      	cmp	r7, #0
341821b8:	f040 82b0 	bne.w	3418271c <HAL_RCC_OscConfig+0x67c>
  return HAL_OK;
341821bc:	2000      	movs	r0, #0
341821be:	e774      	b.n	341820aa <HAL_RCC_OscConfig+0xa>
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));
341821c0:	6863      	ldr	r3, [r4, #4]
341821c2:	2b00      	cmp	r3, #0
341821c4:	f000 8313 	beq.w	341827ee <HAL_RCC_OscConfig+0x74e>
341821c8:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
341821cc:	2a10      	cmp	r2, #16
341821ce:	f000 8305 	beq.w	341827dc <HAL_RCC_OscConfig+0x73c>
341821d2:	4a50      	ldr	r2, [pc, #320]	@ (34182314 <HAL_RCC_OscConfig+0x274>)
341821d4:	4293      	cmp	r3, r2
341821d6:	f000 8301 	beq.w	341827dc <HAL_RCC_OscConfig+0x73c>
341821da:	f44f 71c0 	mov.w	r1, #384	@ 0x180
341821de:	484b      	ldr	r0, [pc, #300]	@ (3418230c <HAL_RCC_OscConfig+0x26c>)
341821e0:	f7fe ffb6 	bl	34181150 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
341821e4:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
341821e8:	d103      	bne.n	341821f2 <HAL_RCC_OscConfig+0x152>
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
341821ea:	6863      	ldr	r3, [r4, #4]
341821ec:	2b00      	cmp	r3, #0
341821ee:	d183      	bne.n	341820f8 <HAL_RCC_OscConfig+0x58>
341821f0:	e75a      	b.n	341820a8 <HAL_RCC_OscConfig+0x8>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
341821f2:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
341821f6:	d0f8      	beq.n	341821ea <HAL_RCC_OscConfig+0x14a>
341821f8:	f1bb 5f00 	cmp.w	fp, #536870912	@ 0x20000000
341821fc:	d101      	bne.n	34182202 <HAL_RCC_OscConfig+0x162>
        ((pll1src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
341821fe:	05fa      	lsls	r2, r7, #23
34182200:	d4f3      	bmi.n	341821ea <HAL_RCC_OscConfig+0x14a>
34182202:	f1ba 5f00 	cmp.w	sl, #536870912	@ 0x20000000
34182206:	d101      	bne.n	3418220c <HAL_RCC_OscConfig+0x16c>
        ((pll2src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34182208:	05bb      	lsls	r3, r7, #22
3418220a:	d4ee      	bmi.n	341821ea <HAL_RCC_OscConfig+0x14a>
3418220c:	f1b9 5f00 	cmp.w	r9, #536870912	@ 0x20000000
34182210:	d101      	bne.n	34182216 <HAL_RCC_OscConfig+0x176>
        ((pll3src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
34182212:	0578      	lsls	r0, r7, #21
34182214:	d4e9      	bmi.n	341821ea <HAL_RCC_OscConfig+0x14a>
34182216:	f1b8 5f00 	cmp.w	r8, #536870912	@ 0x20000000
3418221a:	d101      	bne.n	34182220 <HAL_RCC_OscConfig+0x180>
        ((pll4src == LL_RCC_PLLSOURCE_HSE) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
3418221c:	0539      	lsls	r1, r7, #20
3418221e:	d4e4      	bmi.n	341821ea <HAL_RCC_OscConfig+0x14a>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34182220:	6862      	ldr	r2, [r4, #4]
34182222:	4b3b      	ldr	r3, [pc, #236]	@ (34182310 <HAL_RCC_OscConfig+0x270>)
34182224:	2a10      	cmp	r2, #16
34182226:	d114      	bne.n	34182252 <HAL_RCC_OscConfig+0x1b2>
34182228:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
      tickstart = HAL_GetTick();
3418222c:	f7ff fa34 	bl	34181698 <HAL_GetTick>
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34182230:	6863      	ldr	r3, [r4, #4]
      tickstart = HAL_GetTick();
34182232:	9001      	str	r0, [sp, #4]
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
34182234:	b35b      	cbz	r3, 3418228e <HAL_RCC_OscConfig+0x1ee>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) == 0U)
34182236:	4b36      	ldr	r3, [pc, #216]	@ (34182310 <HAL_RCC_OscConfig+0x270>)
34182238:	685a      	ldr	r2, [r3, #4]
3418223a:	06d2      	lsls	r2, r2, #27
3418223c:	f53f af5c 	bmi.w	341820f8 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34182240:	f7ff fa2a 	bl	34181698 <HAL_GetTick>
34182244:	9b01      	ldr	r3, [sp, #4]
34182246:	1ac0      	subs	r0, r0, r3
34182248:	2864      	cmp	r0, #100	@ 0x64
3418224a:	4b31      	ldr	r3, [pc, #196]	@ (34182310 <HAL_RCC_OscConfig+0x270>)
3418224c:	d9f4      	bls.n	34182238 <HAL_RCC_OscConfig+0x198>
            return HAL_TIMEOUT;
3418224e:	2003      	movs	r0, #3
34182250:	e72b      	b.n	341820aa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
34182252:	b93a      	cbnz	r2, 34182264 <HAL_RCC_OscConfig+0x1c4>
34182254:	2110      	movs	r1, #16
34182256:	4a30      	ldr	r2, [pc, #192]	@ (34182318 <HAL_RCC_OscConfig+0x278>)
34182258:	6011      	str	r1, [r2, #0]
3418225a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
3418225c:	f422 32c0 	bic.w	r2, r2, #98304	@ 0x18000
34182260:	655a      	str	r2, [r3, #84]	@ 0x54
34182262:	e7e3      	b.n	3418222c <HAL_RCC_OscConfig+0x18c>
34182264:	f248 0110 	movw	r1, #32784	@ 0x8010
34182268:	428a      	cmp	r2, r1
3418226a:	d109      	bne.n	34182280 <HAL_RCC_OscConfig+0x1e0>
3418226c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
3418226e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
34182272:	655a      	str	r2, [r3, #84]	@ 0x54
34182274:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34182276:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
3418227a:	655a      	str	r2, [r3, #84]	@ 0x54
3418227c:	2210      	movs	r2, #16
3418227e:	e7d3      	b.n	34182228 <HAL_RCC_OscConfig+0x188>
34182280:	4924      	ldr	r1, [pc, #144]	@ (34182314 <HAL_RCC_OscConfig+0x274>)
34182282:	428a      	cmp	r2, r1
34182284:	d1e6      	bne.n	34182254 <HAL_RCC_OscConfig+0x1b4>
34182286:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
34182288:	f442 32c0 	orr.w	r2, r2, #98304	@ 0x18000
3418228c:	e7f5      	b.n	3418227a <HAL_RCC_OscConfig+0x1da>
        while (READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0U)
3418228e:	4b20      	ldr	r3, [pc, #128]	@ (34182310 <HAL_RCC_OscConfig+0x270>)
34182290:	685a      	ldr	r2, [r3, #4]
34182292:	06d3      	lsls	r3, r2, #27
34182294:	f57f af30 	bpl.w	341820f8 <HAL_RCC_OscConfig+0x58>
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
34182298:	f7ff f9fe 	bl	34181698 <HAL_GetTick>
3418229c:	9b01      	ldr	r3, [sp, #4]
3418229e:	1ac0      	subs	r0, r0, r3
341822a0:	2864      	cmp	r0, #100	@ 0x64
341822a2:	4b1b      	ldr	r3, [pc, #108]	@ (34182310 <HAL_RCC_OscConfig+0x270>)
341822a4:	d9f4      	bls.n	34182290 <HAL_RCC_OscConfig+0x1f0>
341822a6:	e7d2      	b.n	3418224e <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
341822a8:	68e3      	ldr	r3, [r4, #12]
341822aa:	2b00      	cmp	r3, #0
341822ac:	f000 8288 	beq.w	341827c0 <HAL_RCC_OscConfig+0x720>
341822b0:	2b08      	cmp	r3, #8
341822b2:	f000 828c 	beq.w	341827ce <HAL_RCC_OscConfig+0x72e>
341822b6:	f240 11b5 	movw	r1, #437	@ 0x1b5
341822ba:	4814      	ldr	r0, [pc, #80]	@ (3418230c <HAL_RCC_OscConfig+0x26c>)
341822bc:	f7fe ff48 	bl	34181150 <assert_failed>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
341822c0:	bb66      	cbnz	r6, 3418231c <HAL_RCC_OscConfig+0x27c>
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
341822c2:	68e3      	ldr	r3, [r4, #12]
341822c4:	2b00      	cmp	r3, #0
341822c6:	f43f aeef 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
341822ca:	6923      	ldr	r3, [r4, #16]
341822cc:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
341822d0:	d004      	beq.n	341822dc <HAL_RCC_OscConfig+0x23c>
341822d2:	f240 11c7 	movw	r1, #455	@ 0x1c7
341822d6:	480d      	ldr	r0, [pc, #52]	@ (3418230c <HAL_RCC_OscConfig+0x26c>)
341822d8:	f7fe ff3a 	bl	34181150 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
341822dc:	6963      	ldr	r3, [r4, #20]
341822de:	2b7f      	cmp	r3, #127	@ 0x7f
341822e0:	d904      	bls.n	341822ec <HAL_RCC_OscConfig+0x24c>
341822e2:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
341822e6:	4809      	ldr	r0, [pc, #36]	@ (3418230c <HAL_RCC_OscConfig+0x26c>)
341822e8:	f7fe ff32 	bl	34181150 <assert_failed>
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSIDIV, Divider);
341822ec:	4a08      	ldr	r2, [pc, #32]	@ (34182310 <HAL_RCC_OscConfig+0x270>)
341822ee:	6921      	ldr	r1, [r4, #16]
341822f0:	6c93      	ldr	r3, [r2, #72]	@ 0x48
341822f2:	f423 73c0 	bic.w	r3, r3, #384	@ 0x180
341822f6:	430b      	orrs	r3, r1
341822f8:	6493      	str	r3, [r2, #72]	@ 0x48
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
341822fa:	6c93      	ldr	r3, [r2, #72]	@ 0x48
341822fc:	6961      	ldr	r1, [r4, #20]
341822fe:	f423 03fe 	bic.w	r3, r3, #8323072	@ 0x7f0000
34182302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34182306:	6493      	str	r3, [r2, #72]	@ 0x48
}
34182308:	e6fa      	b.n	34182100 <HAL_RCC_OscConfig+0x60>
3418230a:	bf00      	nop
3418230c:	3418cf1b 	.word	0x3418cf1b
34182310:	56028000 	.word	0x56028000
34182314:	00018010 	.word	0x00018010
34182318:	56029000 	.word	0x56029000
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
3418231c:	2d00      	cmp	r5, #0
3418231e:	d0d0      	beq.n	341822c2 <HAL_RCC_OscConfig+0x222>
34182320:	f1bb 0f00 	cmp.w	fp, #0
34182324:	d101      	bne.n	3418232a <HAL_RCC_OscConfig+0x28a>
        ((pll1src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
34182326:	05f8      	lsls	r0, r7, #23
34182328:	d4cb      	bmi.n	341822c2 <HAL_RCC_OscConfig+0x222>
3418232a:	f1ba 0f00 	cmp.w	sl, #0
3418232e:	d101      	bne.n	34182334 <HAL_RCC_OscConfig+0x294>
        ((pll2src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
34182330:	05b9      	lsls	r1, r7, #22
34182332:	d4c6      	bmi.n	341822c2 <HAL_RCC_OscConfig+0x222>
34182334:	f1b9 0f00 	cmp.w	r9, #0
34182338:	d101      	bne.n	3418233e <HAL_RCC_OscConfig+0x29e>
        ((pll3src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
3418233a:	057a      	lsls	r2, r7, #21
3418233c:	d4c1      	bmi.n	341822c2 <HAL_RCC_OscConfig+0x222>
3418233e:	f1b8 0f00 	cmp.w	r8, #0
34182342:	d101      	bne.n	34182348 <HAL_RCC_OscConfig+0x2a8>
        ((pll4src == LL_RCC_PLLSOURCE_HSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
34182344:	053b      	lsls	r3, r7, #20
34182346:	d4bc      	bmi.n	341822c2 <HAL_RCC_OscConfig+0x222>
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
34182348:	68e3      	ldr	r3, [r4, #12]
3418234a:	b313      	cbz	r3, 34182392 <HAL_RCC_OscConfig+0x2f2>
        assert_param(IS_RCC_HSI_DIV(pRCC_OscInitStruct->HSIDiv));
3418234c:	6923      	ldr	r3, [r4, #16]
3418234e:	f433 73c0 	bics.w	r3, r3, #384	@ 0x180
34182352:	d004      	beq.n	3418235e <HAL_RCC_OscConfig+0x2be>
34182354:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
34182358:	48ab      	ldr	r0, [pc, #684]	@ (34182608 <HAL_RCC_OscConfig+0x568>)
3418235a:	f7fe fef9 	bl	34181150 <assert_failed>
        assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));
3418235e:	6963      	ldr	r3, [r4, #20]
34182360:	2b7f      	cmp	r3, #127	@ 0x7f
34182362:	d904      	bls.n	3418236e <HAL_RCC_OscConfig+0x2ce>
34182364:	f240 11d7 	movw	r1, #471	@ 0x1d7
34182368:	48a7      	ldr	r0, [pc, #668]	@ (34182608 <HAL_RCC_OscConfig+0x568>)
3418236a:	f7fe fef1 	bl	34181150 <assert_failed>
  WRITE_REG(RCC->CSR, RCC_CSR_HSIONS);
3418236e:	2208      	movs	r2, #8
34182370:	4ba6      	ldr	r3, [pc, #664]	@ (3418260c <HAL_RCC_OscConfig+0x56c>)
34182372:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34182376:	f7ff f98f 	bl	34181698 <HAL_GetTick>
3418237a:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() == 0U)
3418237c:	f7ff fcaa 	bl	34181cd4 <LL_RCC_HSI_IsReady>
34182380:	2800      	cmp	r0, #0
34182382:	d1b3      	bne.n	341822ec <HAL_RCC_OscConfig+0x24c>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
34182384:	f7ff f988 	bl	34181698 <HAL_GetTick>
34182388:	9b01      	ldr	r3, [sp, #4]
3418238a:	1ac0      	subs	r0, r0, r3
3418238c:	2801      	cmp	r0, #1
3418238e:	d9f5      	bls.n	3418237c <HAL_RCC_OscConfig+0x2dc>
34182390:	e75d      	b.n	3418224e <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_HSIONC);
34182392:	2208      	movs	r2, #8
34182394:	4b9e      	ldr	r3, [pc, #632]	@ (34182610 <HAL_RCC_OscConfig+0x570>)
34182396:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
34182398:	f7ff f97e 	bl	34181698 <HAL_GetTick>
3418239c:	9001      	str	r0, [sp, #4]
        while (LL_RCC_HSI_IsReady() != 0U)
3418239e:	f7ff fc99 	bl	34181cd4 <LL_RCC_HSI_IsReady>
341823a2:	2800      	cmp	r0, #0
341823a4:	f43f aeac 	beq.w	34182100 <HAL_RCC_OscConfig+0x60>
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
341823a8:	f7ff f976 	bl	34181698 <HAL_GetTick>
341823ac:	9b01      	ldr	r3, [sp, #4]
341823ae:	1ac0      	subs	r0, r0, r3
341823b0:	2801      	cmp	r0, #1
341823b2:	d9f4      	bls.n	3418239e <HAL_RCC_OscConfig+0x2fe>
341823b4:	e74b      	b.n	3418224e <HAL_RCC_OscConfig+0x1ae>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
341823b6:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
341823ba:	f43f aeb4 	beq.w	34182126 <HAL_RCC_OscConfig+0x86>
341823be:	f1bb 5f80 	cmp.w	fp, #268435456	@ 0x10000000
341823c2:	d102      	bne.n	341823ca <HAL_RCC_OscConfig+0x32a>
        ((pll1src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL1RDY) == RCC_SR_PLL1RDY))) ||
341823c4:	05f9      	lsls	r1, r7, #23
341823c6:	f53f aeae 	bmi.w	34182126 <HAL_RCC_OscConfig+0x86>
341823ca:	f1ba 5f80 	cmp.w	sl, #268435456	@ 0x10000000
341823ce:	d102      	bne.n	341823d6 <HAL_RCC_OscConfig+0x336>
        ((pll2src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL2RDY) == RCC_SR_PLL2RDY))) ||
341823d0:	05ba      	lsls	r2, r7, #22
341823d2:	f53f aea8 	bmi.w	34182126 <HAL_RCC_OscConfig+0x86>
341823d6:	f1b9 5f80 	cmp.w	r9, #268435456	@ 0x10000000
341823da:	d102      	bne.n	341823e2 <HAL_RCC_OscConfig+0x342>
        ((pll3src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL3RDY) == RCC_SR_PLL3RDY))) ||
341823dc:	057b      	lsls	r3, r7, #21
341823de:	f53f aea2 	bmi.w	34182126 <HAL_RCC_OscConfig+0x86>
341823e2:	f1b8 5f80 	cmp.w	r8, #268435456	@ 0x10000000
341823e6:	d102      	bne.n	341823ee <HAL_RCC_OscConfig+0x34e>
        ((pll4src == LL_RCC_PLLSOURCE_MSI) && (((rccsr & RCC_SR_PLL4RDY) == RCC_SR_PLL4RDY))))
341823e8:	053f      	lsls	r7, r7, #20
341823ea:	f53f ae9c 	bmi.w	34182126 <HAL_RCC_OscConfig+0x86>
      if ((pRCC_OscInitStruct->MSIState) != RCC_MSI_OFF)
341823ee:	69e3      	ldr	r3, [r4, #28]
341823f0:	b343      	cbz	r3, 34182444 <HAL_RCC_OscConfig+0x3a4>
        assert_param(IS_RCC_MSI_FREQUENCY(pRCC_OscInitStruct->MSIFrequency));
341823f2:	6a23      	ldr	r3, [r4, #32]
341823f4:	f433 7300 	bics.w	r3, r3, #512	@ 0x200
341823f8:	d004      	beq.n	34182404 <HAL_RCC_OscConfig+0x364>
341823fa:	f44f 7109 	mov.w	r1, #548	@ 0x224
341823fe:	4882      	ldr	r0, [pc, #520]	@ (34182608 <HAL_RCC_OscConfig+0x568>)
34182400:	f7fe fea6 	bl	34181150 <assert_failed>
        assert_param(IS_RCC_MSI_CALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
34182404:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34182406:	2b1f      	cmp	r3, #31
34182408:	d904      	bls.n	34182414 <HAL_RCC_OscConfig+0x374>
3418240a:	f240 2125 	movw	r1, #549	@ 0x225
3418240e:	487e      	ldr	r0, [pc, #504]	@ (34182608 <HAL_RCC_OscConfig+0x568>)
34182410:	f7fe fe9e 	bl	34181150 <assert_failed>
  MODIFY_REG(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL, Value);
34182414:	4a7d      	ldr	r2, [pc, #500]	@ (3418260c <HAL_RCC_OscConfig+0x56c>)
34182416:	6a21      	ldr	r1, [r4, #32]
34182418:	6c53      	ldr	r3, [r2, #68]	@ 0x44
3418241a:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
3418241e:	430b      	orrs	r3, r1
34182420:	6453      	str	r3, [r2, #68]	@ 0x44
  WRITE_REG(RCC->CSR, RCC_CSR_MSIONS);
34182422:	2304      	movs	r3, #4
34182424:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
        tickstart = HAL_GetTick();
34182428:	f7ff f936 	bl	34181698 <HAL_GetTick>
3418242c:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() == 0U)
3418242e:	f7ff fc59 	bl	34181ce4 <LL_RCC_MSI_IsReady>
34182432:	2800      	cmp	r0, #0
34182434:	f47f ae82 	bne.w	3418213c <HAL_RCC_OscConfig+0x9c>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
34182438:	f7ff f92e 	bl	34181698 <HAL_GetTick>
3418243c:	1bc0      	subs	r0, r0, r7
3418243e:	2801      	cmp	r0, #1
34182440:	d9f5      	bls.n	3418242e <HAL_RCC_OscConfig+0x38e>
34182442:	e704      	b.n	3418224e <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_MSIONC);
34182444:	2204      	movs	r2, #4
34182446:	4b72      	ldr	r3, [pc, #456]	@ (34182610 <HAL_RCC_OscConfig+0x570>)
34182448:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
3418244a:	f7ff f925 	bl	34181698 <HAL_GetTick>
3418244e:	4607      	mov	r7, r0
        while (LL_RCC_MSI_IsReady() != 0U)
34182450:	f7ff fc48 	bl	34181ce4 <LL_RCC_MSI_IsReady>
34182454:	2800      	cmp	r0, #0
34182456:	f43f ae79 	beq.w	3418214c <HAL_RCC_OscConfig+0xac>
          if ((HAL_GetTick() - tickstart) > RCC_MSI_TIMEOUT_VALUE)
3418245a:	f7ff f91d 	bl	34181698 <HAL_GetTick>
3418245e:	1bc0      	subs	r0, r0, r7
34182460:	2801      	cmp	r0, #1
34182462:	d9f5      	bls.n	34182450 <HAL_RCC_OscConfig+0x3b0>
34182464:	e6f3      	b.n	3418224e <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));
34182466:	69a3      	ldr	r3, [r4, #24]
34182468:	2b01      	cmp	r3, #1
3418246a:	d904      	bls.n	34182476 <HAL_RCC_OscConfig+0x3d6>
3418246c:	f240 2155 	movw	r1, #597	@ 0x255
34182470:	4865      	ldr	r0, [pc, #404]	@ (34182608 <HAL_RCC_OscConfig+0x568>)
34182472:	f7fe fe6d 	bl	34181150 <assert_failed>
    if ((pRCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
34182476:	69a2      	ldr	r2, [r4, #24]
34182478:	2301      	movs	r3, #1
3418247a:	b18a      	cbz	r2, 341824a0 <HAL_RCC_OscConfig+0x400>
  WRITE_REG(RCC->CSR, RCC_CSR_LSIONS);
3418247c:	f8df 818c 	ldr.w	r8, [pc, #396]	@ 3418260c <HAL_RCC_OscConfig+0x56c>
34182480:	f8c8 3800 	str.w	r3, [r8, #2048]	@ 0x800
      tickstart = HAL_GetTick();
34182484:	f7ff f908 	bl	34181698 <HAL_GetTick>
34182488:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
3418248a:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() == 0U)
3418248e:	07da      	lsls	r2, r3, #31
34182490:	f53f ae60 	bmi.w	34182154 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
34182494:	f7ff f900 	bl	34181698 <HAL_GetTick>
34182498:	1bc0      	subs	r0, r0, r7
3418249a:	2801      	cmp	r0, #1
3418249c:	d9f5      	bls.n	3418248a <HAL_RCC_OscConfig+0x3ea>
3418249e:	e6d6      	b.n	3418224e <HAL_RCC_OscConfig+0x1ae>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
341824a0:	4a5b      	ldr	r2, [pc, #364]	@ (34182610 <HAL_RCC_OscConfig+0x570>)
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
341824a2:	f8df 8168 	ldr.w	r8, [pc, #360]	@ 3418260c <HAL_RCC_OscConfig+0x56c>
  WRITE_REG(RCC->CCR, RCC_CCR_LSIONC);
341824a6:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
341824a8:	f7ff f8f6 	bl	34181698 <HAL_GetTick>
341824ac:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
341824ae:	f8d8 3004 	ldr.w	r3, [r8, #4]
      while (LL_RCC_LSI_IsReady() != 0U)
341824b2:	07db      	lsls	r3, r3, #31
341824b4:	f57f ae4e 	bpl.w	34182154 <HAL_RCC_OscConfig+0xb4>
        if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
341824b8:	f7ff f8ee 	bl	34181698 <HAL_GetTick>
341824bc:	1bc0      	subs	r0, r0, r7
341824be:	2801      	cmp	r0, #1
341824c0:	d9f5      	bls.n	341824ae <HAL_RCC_OscConfig+0x40e>
341824c2:	e6c4      	b.n	3418224e <HAL_RCC_OscConfig+0x1ae>
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));
341824c4:	68a3      	ldr	r3, [r4, #8]
341824c6:	f033 0202 	bics.w	r2, r3, #2
341824ca:	d00a      	beq.n	341824e2 <HAL_RCC_OscConfig+0x442>
341824cc:	f248 0202 	movw	r2, #32770	@ 0x8002
341824d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341824d4:	4293      	cmp	r3, r2
341824d6:	d004      	beq.n	341824e2 <HAL_RCC_OscConfig+0x442>
341824d8:	f44f 7120 	mov.w	r1, #640	@ 0x280
341824dc:	484a      	ldr	r0, [pc, #296]	@ (34182608 <HAL_RCC_OscConfig+0x568>)
341824de:	f7fe fe37 	bl	34181150 <assert_failed>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
341824e2:	68a3      	ldr	r3, [r4, #8]
341824e4:	4f49      	ldr	r7, [pc, #292]	@ (3418260c <HAL_RCC_OscConfig+0x56c>)
341824e6:	2b02      	cmp	r3, #2
341824e8:	d113      	bne.n	34182512 <HAL_RCC_OscConfig+0x472>
341824ea:	f8c7 3800 	str.w	r3, [r7, #2048]	@ 0x800
      tickstart = HAL_GetTick();
341824ee:	f7ff f8d3 	bl	34181698 <HAL_GetTick>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
341824f2:	f241 3888 	movw	r8, #5000	@ 0x1388
      tickstart = HAL_GetTick();
341824f6:	4607      	mov	r7, r0
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
341824f8:	f8df 9110 	ldr.w	r9, [pc, #272]	@ 3418260c <HAL_RCC_OscConfig+0x56c>
341824fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
34182500:	0798      	lsls	r0, r3, #30
34182502:	f53f ae2b 	bmi.w	3418215c <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34182506:	f7ff f8c7 	bl	34181698 <HAL_GetTick>
3418250a:	1bc3      	subs	r3, r0, r7
3418250c:	4543      	cmp	r3, r8
3418250e:	d9f5      	bls.n	341824fc <HAL_RCC_OscConfig+0x45c>
34182510:	e69d      	b.n	3418224e <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
34182512:	b9d3      	cbnz	r3, 3418254a <HAL_RCC_OscConfig+0x4aa>
34182514:	2202      	movs	r2, #2
34182516:	4b3e      	ldr	r3, [pc, #248]	@ (34182610 <HAL_RCC_OscConfig+0x570>)
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34182518:	f241 3988 	movw	r9, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3418251c:	601a      	str	r2, [r3, #0]
3418251e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34182520:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182524:	643b      	str	r3, [r7, #64]	@ 0x40
34182526:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34182528:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
3418252c:	643b      	str	r3, [r7, #64]	@ 0x40
      tickstart = HAL_GetTick();
3418252e:	f7ff f8b3 	bl	34181698 <HAL_GetTick>
34182532:	4680      	mov	r8, r0
34182534:	687b      	ldr	r3, [r7, #4]
34182536:	0799      	lsls	r1, r3, #30
34182538:	f57f ae10 	bpl.w	3418215c <HAL_RCC_OscConfig+0xbc>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
3418253c:	f7ff f8ac 	bl	34181698 <HAL_GetTick>
34182540:	eba0 0308 	sub.w	r3, r0, r8
34182544:	454b      	cmp	r3, r9
34182546:	d9f5      	bls.n	34182534 <HAL_RCC_OscConfig+0x494>
34182548:	e681      	b.n	3418224e <HAL_RCC_OscConfig+0x1ae>
    __HAL_RCC_LSE_CONFIG(pRCC_OscInitStruct->LSEState);
3418254a:	f248 0202 	movw	r2, #32770	@ 0x8002
3418254e:	4293      	cmp	r3, r2
34182550:	d109      	bne.n	34182566 <HAL_RCC_OscConfig+0x4c6>
34182552:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34182554:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34182558:	643b      	str	r3, [r7, #64]	@ 0x40
3418255a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418255c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182560:	643b      	str	r3, [r7, #64]	@ 0x40
34182562:	2302      	movs	r3, #2
34182564:	e7c1      	b.n	341824ea <HAL_RCC_OscConfig+0x44a>
34182566:	4a2b      	ldr	r2, [pc, #172]	@ (34182614 <HAL_RCC_OscConfig+0x574>)
34182568:	4293      	cmp	r3, r2
3418256a:	d107      	bne.n	3418257c <HAL_RCC_OscConfig+0x4dc>
3418256c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418256e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
34182572:	643b      	str	r3, [r7, #64]	@ 0x40
34182574:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34182576:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
3418257a:	e7f1      	b.n	34182560 <HAL_RCC_OscConfig+0x4c0>
3418257c:	2202      	movs	r2, #2
3418257e:	4b24      	ldr	r3, [pc, #144]	@ (34182610 <HAL_RCC_OscConfig+0x570>)
34182580:	601a      	str	r2, [r3, #0]
34182582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
34182584:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34182588:	643b      	str	r3, [r7, #64]	@ 0x40
3418258a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
3418258c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34182590:	643b      	str	r3, [r7, #64]	@ 0x40
    if ((pRCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
34182592:	e7ac      	b.n	341824ee <HAL_RCC_OscConfig+0x44e>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1));
34182594:	2000      	movs	r0, #0
34182596:	f104 0128 	add.w	r1, r4, #40	@ 0x28
3418259a:	f7ff fbb3 	bl	34181d04 <RCC_PLL_IsNewConfig>
3418259e:	4602      	mov	r2, r0
    uint32_t pll1_ready = LL_RCC_PLL1_IsReady();
341825a0:	f7ff fba8 	bl	34181cf4 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
341825a4:	2a01      	cmp	r2, #1
341825a6:	d125      	bne.n	341825f4 <HAL_RCC_OscConfig+0x554>
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC1_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
341825a8:	4b18      	ldr	r3, [pc, #96]	@ (3418260c <HAL_RCC_OscConfig+0x56c>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL1))
341825aa:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
341825ae:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC2_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
341825b2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC6_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
341825b6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL3
  *         @arg @ref LL_RCC_ICCLKSOURCE_PLL4
  */
__STATIC_INLINE uint32_t LL_RCC_IC11_GetSource(void)
{
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
341825ba:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
341825be:	d103      	bne.n	341825c8 <HAL_RCC_OscConfig+0x528>
341825c0:	f017 5f40 	tst.w	r7, #805306368	@ 0x30000000
341825c4:	f43f ad70 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL1) ||
341825c8:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
341825cc:	d10b      	bne.n	341825e6 <HAL_RCC_OscConfig+0x546>
341825ce:	f010 5f40 	tst.w	r0, #805306368	@ 0x30000000
341825d2:	f43f ad69 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
341825d6:	f012 5f40 	tst.w	r2, #805306368	@ 0x30000000
341825da:	f43f ad65 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL1) ||
341825de:	f013 5f40 	tst.w	r3, #805306368	@ 0x30000000
341825e2:	f43f ad61 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL1_CONFIG, &(pRCC_OscInitStruct->PLL1)) != HAL_OK)
341825e6:	2000      	movs	r0, #0
341825e8:	f7ff fbe6 	bl	34181db8 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
341825ec:	2800      	cmp	r0, #0
341825ee:	f43f adc1 	beq.w	34182174 <HAL_RCC_OscConfig+0xd4>
341825f2:	e559      	b.n	341820a8 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL1.PLLState == RCC_PLL_ON) && (pll1_ready == 0U))
341825f4:	2f02      	cmp	r7, #2
341825f6:	f47f adbd 	bne.w	34182174 <HAL_RCC_OscConfig+0xd4>
341825fa:	2800      	cmp	r0, #0
341825fc:	f47f adba 	bne.w	34182174 <HAL_RCC_OscConfig+0xd4>
      if (RCC_PLL_Enable(RCC_PLL1_CONFIG) != HAL_OK)
34182600:	f7ff fbc2 	bl	34181d88 <RCC_PLL_Enable>
34182604:	e7f2      	b.n	341825ec <HAL_RCC_OscConfig+0x54c>
34182606:	bf00      	nop
34182608:	3418cf1b 	.word	0x3418cf1b
3418260c:	56028000 	.word	0x56028000
34182610:	56029000 	.word	0x56029000
34182614:	00018002 	.word	0x00018002
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2));
34182618:	2001      	movs	r0, #1
3418261a:	f104 0144 	add.w	r1, r4, #68	@ 0x44
3418261e:	f7ff fb71 	bl	34181d04 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
34182622:	4b77      	ldr	r3, [pc, #476]	@ (34182800 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34182624:	2801      	cmp	r0, #1
34182626:	685a      	ldr	r2, [r3, #4]
34182628:	d12c      	bne.n	34182684 <HAL_RCC_OscConfig+0x5e4>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL2))
3418262a:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3418262e:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34182632:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34182636:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3418263a:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
3418263e:	d105      	bne.n	3418264c <HAL_RCC_OscConfig+0x5ac>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34182640:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
34182644:	f1b7 5f80 	cmp.w	r7, #268435456	@ 0x10000000
34182648:	f43f ad2e 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL2) ||
3418264c:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34182650:	d111      	bne.n	34182676 <HAL_RCC_OscConfig+0x5d6>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34182652:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34182656:	f1b0 5f80 	cmp.w	r0, #268435456	@ 0x10000000
3418265a:	f43f ad25 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3418265e:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34182662:	f1b2 5f80 	cmp.w	r2, #268435456	@ 0x10000000
34182666:	f43f ad1f 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3418266a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL2) ||
3418266e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34182672:	f43f ad19 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL2_CONFIG, &(pRCC_OscInitStruct->PLL2)) != HAL_OK)
34182676:	2001      	movs	r0, #1
34182678:	f7ff fb9e 	bl	34181db8 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
3418267c:	2800      	cmp	r0, #0
3418267e:	f43f ad85 	beq.w	3418218c <HAL_RCC_OscConfig+0xec>
34182682:	e511      	b.n	341820a8 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL2.PLLState == RCC_PLL_ON) && (pll2_ready == 0U))
34182684:	2f02      	cmp	r7, #2
34182686:	f47f ad81 	bne.w	3418218c <HAL_RCC_OscConfig+0xec>
3418268a:	0592      	lsls	r2, r2, #22
3418268c:	f53f ad7e 	bmi.w	3418218c <HAL_RCC_OscConfig+0xec>
      if (RCC_PLL_Enable(RCC_PLL2_CONFIG) != HAL_OK)
34182690:	2001      	movs	r0, #1
34182692:	f7ff fb79 	bl	34181d88 <RCC_PLL_Enable>
34182696:	e7f1      	b.n	3418267c <HAL_RCC_OscConfig+0x5dc>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3));
34182698:	2002      	movs	r0, #2
3418269a:	f104 0160 	add.w	r1, r4, #96	@ 0x60
3418269e:	f7ff fb31 	bl	34181d04 <RCC_PLL_IsNewConfig>
341826a2:	4602      	mov	r2, r0
    uint32_t pll3_ready = LL_RCC_PLL1_IsReady();
341826a4:	f7ff fb26 	bl	34181cf4 <LL_RCC_PLL1_IsReady>
    if (new_pll_config == 1U)
341826a8:	2a01      	cmp	r2, #1
341826aa:	d12d      	bne.n	34182708 <HAL_RCC_OscConfig+0x668>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
341826ac:	4b54      	ldr	r3, [pc, #336]	@ (34182800 <HAL_RCC_OscConfig+0x760>)
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL3))
341826ae:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
341826b2:	f8d3 70c4 	ldr.w	r7, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
341826b6:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
341826ba:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
341826be:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
341826c2:	d105      	bne.n	341826d0 <HAL_RCC_OscConfig+0x630>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
341826c4:	f007 5740 	and.w	r7, r7, #805306368	@ 0x30000000
341826c8:	f1b7 5f00 	cmp.w	r7, #536870912	@ 0x20000000
341826cc:	f43f acec 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL3) ||
341826d0:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
341826d4:	d111      	bne.n	341826fa <HAL_RCC_OscConfig+0x65a>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
341826d6:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
341826da:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
341826de:	f43f ace3 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
341826e2:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
341826e6:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
341826ea:	f43f acdd 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
341826ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL3) ||
341826f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341826f6:	f43f acd7 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL3_CONFIG, &(pRCC_OscInitStruct->PLL3)) != HAL_OK)
341826fa:	2002      	movs	r0, #2
341826fc:	f7ff fb5c 	bl	34181db8 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34182700:	2800      	cmp	r0, #0
34182702:	f43f ad4f 	beq.w	341821a4 <HAL_RCC_OscConfig+0x104>
34182706:	e4cf      	b.n	341820a8 <HAL_RCC_OscConfig+0x8>
    else if ((pRCC_OscInitStruct->PLL3.PLLState == RCC_PLL_ON) && (pll3_ready == 0U))
34182708:	2f02      	cmp	r7, #2
3418270a:	f47f ad4b 	bne.w	341821a4 <HAL_RCC_OscConfig+0x104>
3418270e:	2800      	cmp	r0, #0
34182710:	f47f ad48 	bne.w	341821a4 <HAL_RCC_OscConfig+0x104>
      if (RCC_PLL_Enable(RCC_PLL3_CONFIG) != HAL_OK)
34182714:	4638      	mov	r0, r7
34182716:	f7ff fb37 	bl	34181d88 <RCC_PLL_Enable>
3418271a:	e7f1      	b.n	34182700 <HAL_RCC_OscConfig+0x660>
    uint32_t new_pll_config = RCC_PLL_IsNewConfig(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4));
3418271c:	2003      	movs	r0, #3
3418271e:	f104 017c 	add.w	r1, r4, #124	@ 0x7c
34182722:	f7ff faef 	bl	34181d04 <RCC_PLL_IsNewConfig>
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
34182726:	4b36      	ldr	r3, [pc, #216]	@ (34182800 <HAL_RCC_OscConfig+0x760>)
    if (new_pll_config == 1U)
34182728:	2801      	cmp	r0, #1
3418272a:	685a      	ldr	r2, [r3, #4]
3418272c:	d12c      	bne.n	34182788 <HAL_RCC_OscConfig+0x6e8>
      if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_IC1) && (ic1src == LL_RCC_ICCLKSOURCE_PLL4))
3418272e:	f5b6 1f40 	cmp.w	r6, #3145728	@ 0x300000
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34182732:	f8d3 40c4 	ldr.w	r4, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34182736:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
3418273a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	@ 0xd8
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3418273e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	@ 0xec
34182742:	d105      	bne.n	34182750 <HAL_RCC_OscConfig+0x6b0>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34182744:	f004 5640 	and.w	r6, r4, #805306368	@ 0x30000000
34182748:	f1b6 5f40 	cmp.w	r6, #805306368	@ 0x30000000
3418274c:	f43f acac 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
      if ((sysclksrc == RCC_SYSCLKSOURCE_STATUS_IC2_IC6_IC11) && ((ic2src == LL_RCC_ICCLKSOURCE_PLL4) ||
34182750:	f1b5 5f40 	cmp.w	r5, #805306368	@ 0x30000000
34182754:	d111      	bne.n	3418277a <HAL_RCC_OscConfig+0x6da>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34182756:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
3418275a:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
3418275e:	f43f aca3 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34182762:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
34182766:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
3418276a:	f43f ac9d 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
3418276e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
                                                                  (ic6src == LL_RCC_ICCLKSOURCE_PLL4) ||
34182772:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182776:	f43f ac97 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
      if (RCC_PLL_Config(RCC_PLL4_CONFIG, &(pRCC_OscInitStruct->PLL4)) != HAL_OK)
3418277a:	2003      	movs	r0, #3
3418277c:	f7ff fb1c 	bl	34181db8 <RCC_PLL_Config>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34182780:	3800      	subs	r0, #0
34182782:	bf18      	it	ne
34182784:	2001      	movne	r0, #1
34182786:	e490      	b.n	341820aa <HAL_RCC_OscConfig+0xa>
    else if ((pRCC_OscInitStruct->PLL4.PLLState == RCC_PLL_ON) && (pll4_ready == 0U))
34182788:	2f02      	cmp	r7, #2
3418278a:	f47f ad17 	bne.w	341821bc <HAL_RCC_OscConfig+0x11c>
3418278e:	0513      	lsls	r3, r2, #20
34182790:	f53f ad14 	bmi.w	341821bc <HAL_RCC_OscConfig+0x11c>
      if (RCC_PLL_Enable(RCC_PLL4_CONFIG) != HAL_OK)
34182794:	2003      	movs	r0, #3
34182796:	f7ff faf7 	bl	34181d88 <RCC_PLL_Enable>
3418279a:	e7f1      	b.n	34182780 <HAL_RCC_OscConfig+0x6e0>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_MSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_MSI) ||
3418279c:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
341827a0:	f43f ac82 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
341827a4:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
341827a8:	f47f ae09 	bne.w	341823be <HAL_RCC_OscConfig+0x31e>
341827ac:	e47c      	b.n	341820a8 <HAL_RCC_OscConfig+0x8>
341827ae:	f5b6 1f80 	cmp.w	r6, #1048576	@ 0x100000
341827b2:	f43f acbb 	beq.w	3418212c <HAL_RCC_OscConfig+0x8c>
341827b6:	f1b5 5f80 	cmp.w	r5, #268435456	@ 0x10000000
341827ba:	f47f ae00 	bne.w	341823be <HAL_RCC_OscConfig+0x31e>
341827be:	e4b5      	b.n	3418212c <HAL_RCC_OscConfig+0x8c>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSI) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI) ||
341827c0:	2e00      	cmp	r6, #0
341827c2:	f43f ac71 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
341827c6:	2d00      	cmp	r5, #0
341827c8:	f47f adaa 	bne.w	34182320 <HAL_RCC_OscConfig+0x280>
341827cc:	e46c      	b.n	341820a8 <HAL_RCC_OscConfig+0x8>
341827ce:	2e00      	cmp	r6, #0
341827d0:	f43f ad7b 	beq.w	341822ca <HAL_RCC_OscConfig+0x22a>
341827d4:	2d00      	cmp	r5, #0
341827d6:	f43f ad78 	beq.w	341822ca <HAL_RCC_OscConfig+0x22a>
341827da:	e5a1      	b.n	34182320 <HAL_RCC_OscConfig+0x280>
    if ((cpuclksrc == RCC_CPUCLKSOURCE_STATUS_HSE) || (sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE) ||
341827dc:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
341827e0:	f43f ac8a 	beq.w	341820f8 <HAL_RCC_OscConfig+0x58>
341827e4:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
341827e8:	f47f ad06 	bne.w	341821f8 <HAL_RCC_OscConfig+0x158>
341827ec:	e484      	b.n	341820f8 <HAL_RCC_OscConfig+0x58>
341827ee:	f5b6 1f00 	cmp.w	r6, #2097152	@ 0x200000
341827f2:	f43f ac59 	beq.w	341820a8 <HAL_RCC_OscConfig+0x8>
341827f6:	f1b5 5f00 	cmp.w	r5, #536870912	@ 0x20000000
341827fa:	f47f acfd 	bne.w	341821f8 <HAL_RCC_OscConfig+0x158>
341827fe:	e453      	b.n	341820a8 <HAL_RCC_OscConfig+0x8>
34182800:	56028000 	.word	0x56028000

34182804 <HAL_RCC_GetCpuClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
34182804:	4b1f      	ldr	r3, [pc, #124]	@ (34182884 <HAL_RCC_GetCpuClockFreq+0x80>)
{
34182806:	b510      	push	{r4, lr}
34182808:	6a1a      	ldr	r2, [r3, #32]
3418280a:	f402 1240 	and.w	r2, r2, #3145728	@ 0x300000
  switch (LL_RCC_GetCpuClkSource())
3418280e:	f5b2 1f00 	cmp.w	r2, #2097152	@ 0x200000
34182812:	d034      	beq.n	3418287e <HAL_RCC_GetCpuClockFreq+0x7a>
34182814:	d806      	bhi.n	34182824 <HAL_RCC_GetCpuClockFreq+0x20>
34182816:	b952      	cbnz	r2, 3418282e <HAL_RCC_GetCpuClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34182818:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418281a:	481b      	ldr	r0, [pc, #108]	@ (34182888 <HAL_RCC_GetCpuClockFreq+0x84>)
3418281c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34182820:	40d8      	lsrs	r0, r3
}
34182822:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetCpuClkSource())
34182824:	f5b2 1f40 	cmp.w	r2, #3145728	@ 0x300000
34182828:	d009      	beq.n	3418283e <HAL_RCC_GetCpuClockFreq+0x3a>
      switch (LL_RCC_IC1_GetSource())
3418282a:	2000      	movs	r0, #0
3418282c:	e7f9      	b.n	34182822 <HAL_RCC_GetCpuClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
3418282e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
34182830:	4816      	ldr	r0, [pc, #88]	@ (3418288c <HAL_RCC_GetCpuClockFreq+0x88>)
34182832:	f413 7f00 	tst.w	r3, #512	@ 0x200
34182836:	4b16      	ldr	r3, [pc, #88]	@ (34182890 <HAL_RCC_GetCpuClockFreq+0x8c>)
34182838:	bf08      	it	eq
3418283a:	4618      	moveq	r0, r3
3418283c:	e7f1      	b.n	34182822 <HAL_RCC_GetCpuClockFreq+0x1e>
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
3418283e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34182842:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34182846:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
3418284a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC1_GetSource())
3418284e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1UL);
34182852:	f100 0401 	add.w	r4, r0, #1
34182856:	d00f      	beq.n	34182878 <HAL_RCC_GetCpuClockFreq+0x74>
34182858:	d805      	bhi.n	34182866 <HAL_RCC_GetCpuClockFreq+0x62>
3418285a:	b953      	cbnz	r3, 34182872 <HAL_RCC_GetCpuClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418285c:	f003 fbec 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34182860:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34182864:	e7dd      	b.n	34182822 <HAL_RCC_GetCpuClockFreq+0x1e>
      switch (LL_RCC_IC1_GetSource())
34182866:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418286a:	d1de      	bne.n	3418282a <HAL_RCC_GetCpuClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418286c:	f003 fca4 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
34182870:	e7f6      	b.n	34182860 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34182872:	f003 fc21 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
34182876:	e7f3      	b.n	34182860 <HAL_RCC_GetCpuClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34182878:	f003 fc5e 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
3418287c:	e7f0      	b.n	34182860 <HAL_RCC_GetCpuClockFreq+0x5c>
  switch (LL_RCC_GetCpuClkSource())
3418287e:	4805      	ldr	r0, [pc, #20]	@ (34182894 <HAL_RCC_GetCpuClockFreq+0x90>)
34182880:	e7cf      	b.n	34182822 <HAL_RCC_GetCpuClockFreq+0x1e>
34182882:	bf00      	nop
34182884:	56028000 	.word	0x56028000
34182888:	03d09000 	.word	0x03d09000
3418288c:	00f42400 	.word	0x00f42400
34182890:	003d0900 	.word	0x003d0900
34182894:	016e3600 	.word	0x016e3600

34182898 <HAL_RCC_ClockConfig>:
{
34182898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (pRCC_ClkInitStruct == NULL)
3418289c:	4604      	mov	r4, r0
3418289e:	b910      	cbnz	r0, 341828a6 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
341828a0:	2001      	movs	r0, #1
}
341828a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  assert_param(IS_RCC_CLOCKTYPE(pRCC_ClkInitStruct->ClockType));
341828a6:	6803      	ldr	r3, [r0, #0]
341828a8:	2b7f      	cmp	r3, #127	@ 0x7f
341828aa:	d904      	bls.n	341828b6 <HAL_RCC_ClockConfig+0x1e>
341828ac:	f240 317e 	movw	r1, #894	@ 0x37e
341828b0:	4893      	ldr	r0, [pc, #588]	@ (34182b00 <HAL_RCC_ClockConfig+0x268>)
341828b2:	f7fe fc4d 	bl	34181150 <assert_failed>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
341828b6:	6823      	ldr	r3, [r4, #0]
341828b8:	071f      	lsls	r7, r3, #28
341828ba:	d513      	bpl.n	341828e4 <HAL_RCC_ClockConfig+0x4c>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
341828bc:	6923      	ldr	r3, [r4, #16]
341828be:	2b07      	cmp	r3, #7
341828c0:	d904      	bls.n	341828cc <HAL_RCC_ClockConfig+0x34>
341828c2:	f240 3185 	movw	r1, #901	@ 0x385
341828c6:	488e      	ldr	r0, [pc, #568]	@ (34182b00 <HAL_RCC_ClockConfig+0x268>)
341828c8:	f7fe fc42 	bl	34181150 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
341828cc:	4a8d      	ldr	r2, [pc, #564]	@ (34182b04 <HAL_RCC_ClockConfig+0x26c>)
341828ce:	6921      	ldr	r1, [r4, #16]
341828d0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
341828d2:	f003 0307 	and.w	r3, r3, #7
341828d6:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
341828d8:	bf81      	itttt	hi
341828da:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
341828dc:	f023 0307 	bichi.w	r3, r3, #7
341828e0:	430b      	orrhi	r3, r1
341828e2:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
341828e4:	6823      	ldr	r3, [r4, #0]
341828e6:	06de      	lsls	r6, r3, #27
341828e8:	d516      	bpl.n	34182918 <HAL_RCC_ClockConfig+0x80>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
341828ea:	6963      	ldr	r3, [r4, #20]
341828ec:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
341828f0:	d006      	beq.n	34182900 <HAL_RCC_ClockConfig+0x68>
341828f2:	2b40      	cmp	r3, #64	@ 0x40
341828f4:	d004      	beq.n	34182900 <HAL_RCC_ClockConfig+0x68>
341828f6:	f240 318f 	movw	r1, #911	@ 0x38f
341828fa:	4881      	ldr	r0, [pc, #516]	@ (34182b00 <HAL_RCC_ClockConfig+0x268>)
341828fc:	f7fe fc28 	bl	34181150 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34182900:	4a80      	ldr	r2, [pc, #512]	@ (34182b04 <HAL_RCC_ClockConfig+0x26c>)
34182902:	6961      	ldr	r1, [r4, #20]
34182904:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34182906:	f003 0370 	and.w	r3, r3, #112	@ 0x70
3418290a:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
3418290c:	bf81      	itttt	hi
3418290e:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34182910:	f023 0370 	bichi.w	r3, r3, #112	@ 0x70
34182914:	430b      	orrhi	r3, r1
34182916:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34182918:	6823      	ldr	r3, [r4, #0]
3418291a:	069d      	lsls	r5, r3, #26
3418291c:	d517      	bpl.n	3418294e <HAL_RCC_ClockConfig+0xb6>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
3418291e:	69a3      	ldr	r3, [r4, #24]
34182920:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34182924:	d007      	beq.n	34182936 <HAL_RCC_ClockConfig+0x9e>
34182926:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
3418292a:	d004      	beq.n	34182936 <HAL_RCC_ClockConfig+0x9e>
3418292c:	f240 3199 	movw	r1, #921	@ 0x399
34182930:	4873      	ldr	r0, [pc, #460]	@ (34182b00 <HAL_RCC_ClockConfig+0x268>)
34182932:	f7fe fc0d 	bl	34181150 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34182936:	4a73      	ldr	r2, [pc, #460]	@ (34182b04 <HAL_RCC_ClockConfig+0x26c>)
34182938:	69a1      	ldr	r1, [r4, #24]
3418293a:	6a53      	ldr	r3, [r2, #36]	@ 0x24
3418293c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34182940:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34182942:	bf81      	itttt	hi
34182944:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
34182946:	f423 43e0 	bichi.w	r3, r3, #28672	@ 0x7000
3418294a:	430b      	orrhi	r3, r1
3418294c:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
3418294e:	6823      	ldr	r3, [r4, #0]
34182950:	0658      	lsls	r0, r3, #25
34182952:	d517      	bpl.n	34182984 <HAL_RCC_ClockConfig+0xec>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34182954:	69e3      	ldr	r3, [r4, #28]
34182956:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
3418295a:	d007      	beq.n	3418296c <HAL_RCC_ClockConfig+0xd4>
3418295c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34182960:	d004      	beq.n	3418296c <HAL_RCC_ClockConfig+0xd4>
34182962:	f240 31a3 	movw	r1, #931	@ 0x3a3
34182966:	4866      	ldr	r0, [pc, #408]	@ (34182b00 <HAL_RCC_ClockConfig+0x268>)
34182968:	f7fe fbf2 	bl	34181150 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE5))
3418296c:	4a65      	ldr	r2, [pc, #404]	@ (34182b04 <HAL_RCC_ClockConfig+0x26c>)
3418296e:	69e1      	ldr	r1, [r4, #28]
34182970:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34182972:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34182976:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34182978:	bf81      	itttt	hi
3418297a:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
3418297c:	f423 23e0 	bichi.w	r3, r3, #458752	@ 0x70000
34182980:	430b      	orrhi	r3, r1
34182982:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34182984:	6823      	ldr	r3, [r4, #0]
34182986:	0759      	lsls	r1, r3, #29
34182988:	d517      	bpl.n	341829ba <HAL_RCC_ClockConfig+0x122>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
3418298a:	68e3      	ldr	r3, [r4, #12]
3418298c:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34182990:	d007      	beq.n	341829a2 <HAL_RCC_ClockConfig+0x10a>
34182992:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34182996:	d004      	beq.n	341829a2 <HAL_RCC_ClockConfig+0x10a>
34182998:	f240 31ad 	movw	r1, #941	@ 0x3ad
3418299c:	4858      	ldr	r0, [pc, #352]	@ (34182b00 <HAL_RCC_ClockConfig+0x268>)
3418299e:	f7fe fbd7 	bl	34181150 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
341829a2:	4a58      	ldr	r2, [pc, #352]	@ (34182b04 <HAL_RCC_ClockConfig+0x26c>)
341829a4:	68e1      	ldr	r1, [r4, #12]
341829a6:	6a53      	ldr	r3, [r2, #36]	@ 0x24
341829a8:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
341829ac:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
341829ae:	bf81      	itttt	hi
341829b0:	6a53      	ldrhi	r3, [r2, #36]	@ 0x24
341829b2:	f423 03e0 	bichi.w	r3, r3, #7340032	@ 0x700000
341829b6:	430b      	orrhi	r3, r1
341829b8:	6253      	strhi	r3, [r2, #36]	@ 0x24
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_CPUCLK) == RCC_CLOCKTYPE_CPUCLK)
341829ba:	6823      	ldr	r3, [r4, #0]
341829bc:	07da      	lsls	r2, r3, #31
341829be:	d52a      	bpl.n	34182a16 <HAL_RCC_ClockConfig+0x17e>
    assert_param(IS_RCC_CPUCLKSOURCE(pRCC_ClkInitStruct->CPUCLKSource));
341829c0:	6863      	ldr	r3, [r4, #4]
341829c2:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
341829c6:	d004      	beq.n	341829d2 <HAL_RCC_ClockConfig+0x13a>
341829c8:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
341829cc:	484c      	ldr	r0, [pc, #304]	@ (34182b00 <HAL_RCC_ClockConfig+0x268>)
341829ce:	f7fe fbbf 	bl	34181150 <assert_failed>
    if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_HSE)
341829d2:	6863      	ldr	r3, [r4, #4]
341829d4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
341829d8:	f040 809a 	bne.w	34182b10 <HAL_RCC_ClockConfig+0x278>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
341829dc:	4b49      	ldr	r3, [pc, #292]	@ (34182b04 <HAL_RCC_ClockConfig+0x26c>)
341829de:	685b      	ldr	r3, [r3, #4]
341829e0:	06db      	lsls	r3, r3, #27
341829e2:	f57f af5d 	bpl.w	341828a0 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
341829e6:	4d47      	ldr	r5, [pc, #284]	@ (34182b04 <HAL_RCC_ClockConfig+0x26c>)
341829e8:	6862      	ldr	r2, [r4, #4]
341829ea:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
341829ec:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_CPUSW, pRCC_ClkInitStruct->CPUCLKSource);
341829f0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
341829f4:	4313      	orrs	r3, r2
341829f6:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
341829f8:	f7fe fe4e 	bl	34181698 <HAL_GetTick>
341829fc:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_CPUSWS));
341829fe:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_CPUCLK_SOURCE() != (pRCC_ClkInitStruct->CPUCLKSource << 4U))
34182a00:	6862      	ldr	r2, [r4, #4]
34182a02:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
34182a06:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34182a0a:	f040 80b7 	bne.w	34182b7c <HAL_RCC_ClockConfig+0x2e4>
    SystemCoreClock = HAL_RCC_GetCpuClockFreq();
34182a0e:	f7ff fef9 	bl	34182804 <HAL_RCC_GetCpuClockFreq>
34182a12:	4b3d      	ldr	r3, [pc, #244]	@ (34182b08 <HAL_RCC_ClockConfig+0x270>)
34182a14:	6018      	str	r0, [r3, #0]
  if ((pRCC_ClkInitStruct->ClockType & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
34182a16:	6823      	ldr	r3, [r4, #0]
34182a18:	079f      	lsls	r7, r3, #30
34182a1a:	f100 80b7 	bmi.w	34182b8c <HAL_RCC_ClockConfig+0x2f4>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
34182a1e:	6823      	ldr	r3, [r4, #0]
34182a20:	075e      	lsls	r6, r3, #29
34182a22:	f100 815c 	bmi.w	34182cde <HAL_RCC_ClockConfig+0x446>
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
34182a26:	6823      	ldr	r3, [r4, #0]
34182a28:	0718      	lsls	r0, r3, #28
34182a2a:	d513      	bpl.n	34182a54 <HAL_RCC_ClockConfig+0x1bc>
    assert_param(IS_RCC_PCLK1(pRCC_ClkInitStruct->APB1CLKDivider));
34182a2c:	6923      	ldr	r3, [r4, #16]
34182a2e:	2b07      	cmp	r3, #7
34182a30:	d904      	bls.n	34182a3c <HAL_RCC_ClockConfig+0x1a4>
34182a32:	f240 4163 	movw	r1, #1123	@ 0x463
34182a36:	4832      	ldr	r0, [pc, #200]	@ (34182b00 <HAL_RCC_ClockConfig+0x268>)
34182a38:	f7fe fb8a 	bl	34181150 <assert_failed>
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
34182a3c:	4a31      	ldr	r2, [pc, #196]	@ (34182b04 <HAL_RCC_ClockConfig+0x26c>)
34182a3e:	6921      	ldr	r1, [r4, #16]
34182a40:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34182a42:	f003 0307 	and.w	r3, r3, #7
34182a46:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, (pRCC_ClkInitStruct->APB1CLKDivider));
34182a48:	bf3f      	itttt	cc
34182a4a:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34182a4c:	f023 0307 	biccc.w	r3, r3, #7
34182a50:	430b      	orrcc	r3, r1
34182a52:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
34182a54:	6823      	ldr	r3, [r4, #0]
34182a56:	06d9      	lsls	r1, r3, #27
34182a58:	d516      	bpl.n	34182a88 <HAL_RCC_ClockConfig+0x1f0>
    assert_param(IS_RCC_PCLK2(pRCC_ClkInitStruct->APB2CLKDivider));
34182a5a:	6963      	ldr	r3, [r4, #20]
34182a5c:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34182a60:	d006      	beq.n	34182a70 <HAL_RCC_ClockConfig+0x1d8>
34182a62:	2b40      	cmp	r3, #64	@ 0x40
34182a64:	d004      	beq.n	34182a70 <HAL_RCC_ClockConfig+0x1d8>
34182a66:	f240 416d 	movw	r1, #1133	@ 0x46d
34182a6a:	4825      	ldr	r0, [pc, #148]	@ (34182b00 <HAL_RCC_ClockConfig+0x268>)
34182a6c:	f7fe fb70 	bl	34181150 <assert_failed>
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE2))
34182a70:	4a24      	ldr	r2, [pc, #144]	@ (34182b04 <HAL_RCC_ClockConfig+0x26c>)
34182a72:	6961      	ldr	r1, [r4, #20]
34182a74:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34182a76:	f003 0370 	and.w	r3, r3, #112	@ 0x70
34182a7a:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, (pRCC_ClkInitStruct->APB2CLKDivider));
34182a7c:	bf3f      	itttt	cc
34182a7e:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34182a80:	f023 0370 	biccc.w	r3, r3, #112	@ 0x70
34182a84:	430b      	orrcc	r3, r1
34182a86:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK4) == RCC_CLOCKTYPE_PCLK4)
34182a88:	6823      	ldr	r3, [r4, #0]
34182a8a:	069a      	lsls	r2, r3, #26
34182a8c:	d517      	bpl.n	34182abe <HAL_RCC_ClockConfig+0x226>
    assert_param(IS_RCC_PCLK4(pRCC_ClkInitStruct->APB4CLKDivider));
34182a8e:	69a3      	ldr	r3, [r4, #24]
34182a90:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34182a94:	d007      	beq.n	34182aa6 <HAL_RCC_ClockConfig+0x20e>
34182a96:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
34182a9a:	d004      	beq.n	34182aa6 <HAL_RCC_ClockConfig+0x20e>
34182a9c:	f240 4177 	movw	r1, #1143	@ 0x477
34182aa0:	4817      	ldr	r0, [pc, #92]	@ (34182b00 <HAL_RCC_ClockConfig+0x268>)
34182aa2:	f7fe fb55 	bl	34181150 <assert_failed>
    if ((pRCC_ClkInitStruct->APB4CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE4))
34182aa6:	4a17      	ldr	r2, [pc, #92]	@ (34182b04 <HAL_RCC_ClockConfig+0x26c>)
34182aa8:	69a1      	ldr	r1, [r4, #24]
34182aaa:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34182aac:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
34182ab0:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE4, (pRCC_ClkInitStruct->APB4CLKDivider));
34182ab2:	bf3f      	itttt	cc
34182ab4:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34182ab6:	f423 43e0 	biccc.w	r3, r3, #28672	@ 0x7000
34182aba:	430b      	orrcc	r3, r1
34182abc:	6253      	strcc	r3, [r2, #36]	@ 0x24
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK5) == RCC_CLOCKTYPE_PCLK5)
34182abe:	6823      	ldr	r3, [r4, #0]
34182ac0:	065b      	lsls	r3, r3, #25
34182ac2:	d517      	bpl.n	34182af4 <HAL_RCC_ClockConfig+0x25c>
    assert_param(IS_RCC_PCLK5(pRCC_ClkInitStruct->APB5CLKDivider));
34182ac4:	69e3      	ldr	r3, [r4, #28]
34182ac6:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34182aca:	d007      	beq.n	34182adc <HAL_RCC_ClockConfig+0x244>
34182acc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34182ad0:	d004      	beq.n	34182adc <HAL_RCC_ClockConfig+0x244>
34182ad2:	f240 4181 	movw	r1, #1153	@ 0x481
34182ad6:	480a      	ldr	r0, [pc, #40]	@ (34182b00 <HAL_RCC_ClockConfig+0x268>)
34182ad8:	f7fe fb3a 	bl	34181150 <assert_failed>
    if ((pRCC_ClkInitStruct->APB5CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE5))
34182adc:	4a09      	ldr	r2, [pc, #36]	@ (34182b04 <HAL_RCC_ClockConfig+0x26c>)
34182ade:	69e1      	ldr	r1, [r4, #28]
34182ae0:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34182ae2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
34182ae6:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE5, (pRCC_ClkInitStruct->APB5CLKDivider));
34182ae8:	bf3f      	itttt	cc
34182aea:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34182aec:	f423 23e0 	biccc.w	r3, r3, #458752	@ 0x70000
34182af0:	430b      	orrcc	r3, r1
34182af2:	6253      	strcc	r3, [r2, #36]	@ 0x24
  return HAL_InitTick(uwTickPrio);
34182af4:	4b05      	ldr	r3, [pc, #20]	@ (34182b0c <HAL_RCC_ClockConfig+0x274>)
}
34182af6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  return HAL_InitTick(uwTickPrio);
34182afa:	6818      	ldr	r0, [r3, #0]
34182afc:	f7fe bd88 	b.w	34181610 <HAL_InitTick>
34182b00:	3418cf1b 	.word	0x3418cf1b
34182b04:	56028000 	.word	0x56028000
34182b08:	341c0000 	.word	0x341c0000
34182b0c:	341c0008 	.word	0x341c0008
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_IC1)
34182b10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
34182b14:	d126      	bne.n	34182b64 <HAL_RCC_ClockConfig+0x2cc>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC1Selection.ClockSelection));
34182b16:	6a23      	ldr	r3, [r4, #32]
34182b18:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34182b1c:	d004      	beq.n	34182b28 <HAL_RCC_ClockConfig+0x290>
34182b1e:	f240 31c7 	movw	r1, #967	@ 0x3c7
34182b22:	487b      	ldr	r0, [pc, #492]	@ (34182d10 <HAL_RCC_ClockConfig+0x478>)
34182b24:	f7fe fb14 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC1Selection.ClockDivider));
34182b28:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34182b2a:	3b01      	subs	r3, #1
34182b2c:	2bff      	cmp	r3, #255	@ 0xff
34182b2e:	d904      	bls.n	34182b3a <HAL_RCC_ClockConfig+0x2a2>
34182b30:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
34182b34:	4876      	ldr	r0, [pc, #472]	@ (34182d10 <HAL_RCC_ClockConfig+0x478>)
34182b36:	f7fe fb0b 	bl	34181150 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC1CFGR, RCC_IC1CFGR_IC1SEL));
34182b3a:	4e76      	ldr	r6, [pc, #472]	@ (34182d14 <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC1_GetSource(), pRCC_ClkInitStruct->IC1Selection.ClockSelection) != 1U)
34182b3c:	6a25      	ldr	r5, [r4, #32]
34182b3e:	f8d6 00c4 	ldr.w	r0, [r6, #196]	@ 0xc4
34182b42:	4629      	mov	r1, r5
34182b44:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34182b48:	f7ff fa52 	bl	34181ff0 <RCC_IC_CheckPLLSources>
34182b4c:	2801      	cmp	r0, #1
34182b4e:	f47f aea7 	bne.w	341828a0 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC1CFGR, pRCC_ClkInitStruct->IC1Selection.ClockSelection | \
34182b52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34182b54:	3b01      	subs	r3, #1
34182b56:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
34182b5a:	f8c6 50c4 	str.w	r5, [r6, #196]	@ 0xc4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC1ENS);
34182b5e:	f8c6 0a40 	str.w	r0, [r6, #2624]	@ 0xa40
}
34182b62:	e740      	b.n	341829e6 <HAL_RCC_ClockConfig+0x14e>
    else if (pRCC_ClkInitStruct->CPUCLKSource == RCC_CPUCLKSOURCE_MSI)
34182b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
34182b68:	d105      	bne.n	34182b76 <HAL_RCC_ClockConfig+0x2de>
      if (LL_RCC_MSI_IsReady() == 0U)
34182b6a:	f7ff f8bb 	bl	34181ce4 <LL_RCC_MSI_IsReady>
      if (LL_RCC_HSI_IsReady() == 0U)
34182b6e:	2800      	cmp	r0, #0
34182b70:	f47f af39 	bne.w	341829e6 <HAL_RCC_ClockConfig+0x14e>
34182b74:	e694      	b.n	341828a0 <HAL_RCC_ClockConfig+0x8>
34182b76:	f7ff f8ad 	bl	34181cd4 <LL_RCC_HSI_IsReady>
34182b7a:	e7f8      	b.n	34182b6e <HAL_RCC_ClockConfig+0x2d6>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34182b7c:	f7fe fd8c 	bl	34181698 <HAL_GetTick>
34182b80:	1b80      	subs	r0, r0, r6
34182b82:	42b8      	cmp	r0, r7
34182b84:	f67f af3b 	bls.w	341829fe <HAL_RCC_ClockConfig+0x166>
        return HAL_TIMEOUT;
34182b88:	2003      	movs	r0, #3
34182b8a:	e68a      	b.n	341828a2 <HAL_RCC_ClockConfig+0xa>
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
34182b8c:	68a3      	ldr	r3, [r4, #8]
34182b8e:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
34182b92:	d004      	beq.n	34182b9e <HAL_RCC_ClockConfig+0x306>
34182b94:	f240 4101 	movw	r1, #1025	@ 0x401
34182b98:	485d      	ldr	r0, [pc, #372]	@ (34182d10 <HAL_RCC_ClockConfig+0x478>)
34182b9a:	f7fe fad9 	bl	34181150 <assert_failed>
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
34182b9e:	68a3      	ldr	r3, [r4, #8]
34182ba0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34182ba4:	d11e      	bne.n	34182be4 <HAL_RCC_ClockConfig+0x34c>
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34182ba6:	4b5b      	ldr	r3, [pc, #364]	@ (34182d14 <HAL_RCC_ClockConfig+0x47c>)
34182ba8:	685b      	ldr	r3, [r3, #4]
34182baa:	06dd      	lsls	r5, r3, #27
34182bac:	f57f ae78 	bpl.w	341828a0 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34182bb0:	4d58      	ldr	r5, [pc, #352]	@ (34182d14 <HAL_RCC_ClockConfig+0x47c>)
34182bb2:	68a2      	ldr	r2, [r4, #8]
34182bb4:	6a2b      	ldr	r3, [r5, #32]
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34182bb6:	f241 3788 	movw	r7, #5000	@ 0x1388
    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SYSSW, pRCC_ClkInitStruct->SYSCLKSource);
34182bba:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34182bbe:	4313      	orrs	r3, r2
34182bc0:	622b      	str	r3, [r5, #32]
    tickstart = HAL_GetTick();
34182bc2:	f7fe fd69 	bl	34181698 <HAL_GetTick>
34182bc6:	4606      	mov	r6, r0
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34182bc8:	6a2b      	ldr	r3, [r5, #32]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (pRCC_ClkInitStruct->SYSCLKSource << 4U))
34182bca:	68a2      	ldr	r2, [r4, #8]
34182bcc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
34182bd0:	ebb3 1f02 	cmp.w	r3, r2, lsl #4
34182bd4:	f43f af23 	beq.w	34182a1e <HAL_RCC_ClockConfig+0x186>
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
34182bd8:	f7fe fd5e 	bl	34181698 <HAL_GetTick>
34182bdc:	1b80      	subs	r0, r0, r6
34182bde:	42b8      	cmp	r0, r7
34182be0:	d9f2      	bls.n	34182bc8 <HAL_RCC_ClockConfig+0x330>
34182be2:	e7d1      	b.n	34182b88 <HAL_RCC_ClockConfig+0x2f0>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_IC2_IC6_IC11)
34182be4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34182be8:	d16f      	bne.n	34182cca <HAL_RCC_ClockConfig+0x432>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC2Selection.ClockSelection));
34182bea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34182bec:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34182bf0:	d004      	beq.n	34182bfc <HAL_RCC_ClockConfig+0x364>
34182bf2:	f44f 6182 	mov.w	r1, #1040	@ 0x410
34182bf6:	4846      	ldr	r0, [pc, #280]	@ (34182d10 <HAL_RCC_ClockConfig+0x478>)
34182bf8:	f7fe faaa 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC2Selection.ClockDivider));
34182bfc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34182bfe:	3b01      	subs	r3, #1
34182c00:	2bff      	cmp	r3, #255	@ 0xff
34182c02:	d904      	bls.n	34182c0e <HAL_RCC_ClockConfig+0x376>
34182c04:	f240 4111 	movw	r1, #1041	@ 0x411
34182c08:	4841      	ldr	r0, [pc, #260]	@ (34182d10 <HAL_RCC_ClockConfig+0x478>)
34182c0a:	f7fe faa1 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC6Selection.ClockSelection));
34182c0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34182c10:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34182c14:	d004      	beq.n	34182c20 <HAL_RCC_ClockConfig+0x388>
34182c16:	f240 4112 	movw	r1, #1042	@ 0x412
34182c1a:	483d      	ldr	r0, [pc, #244]	@ (34182d10 <HAL_RCC_ClockConfig+0x478>)
34182c1c:	f7fe fa98 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC6Selection.ClockDivider));
34182c20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34182c22:	3b01      	subs	r3, #1
34182c24:	2bff      	cmp	r3, #255	@ 0xff
34182c26:	d904      	bls.n	34182c32 <HAL_RCC_ClockConfig+0x39a>
34182c28:	f240 4113 	movw	r1, #1043	@ 0x413
34182c2c:	4838      	ldr	r0, [pc, #224]	@ (34182d10 <HAL_RCC_ClockConfig+0x478>)
34182c2e:	f7fe fa8f 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKSOURCE(pRCC_ClkInitStruct->IC11Selection.ClockSelection));
34182c32:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34182c34:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34182c38:	d004      	beq.n	34182c44 <HAL_RCC_ClockConfig+0x3ac>
34182c3a:	f240 4114 	movw	r1, #1044	@ 0x414
34182c3e:	4834      	ldr	r0, [pc, #208]	@ (34182d10 <HAL_RCC_ClockConfig+0x478>)
34182c40:	f7fe fa86 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(pRCC_ClkInitStruct->IC11Selection.ClockDivider));
34182c44:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34182c46:	3b01      	subs	r3, #1
34182c48:	2bff      	cmp	r3, #255	@ 0xff
34182c4a:	d904      	bls.n	34182c56 <HAL_RCC_ClockConfig+0x3be>
34182c4c:	f240 4115 	movw	r1, #1045	@ 0x415
34182c50:	482f      	ldr	r0, [pc, #188]	@ (34182d10 <HAL_RCC_ClockConfig+0x478>)
34182c52:	f7fe fa7d 	bl	34181150 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34182c56:	4d2f      	ldr	r5, [pc, #188]	@ (34182d14 <HAL_RCC_ClockConfig+0x47c>)
      if (RCC_IC_CheckPLLSources(LL_RCC_IC2_GetSource(), pRCC_ClkInitStruct->IC2Selection.ClockSelection) != 1U)
34182c58:	f8d4 8028 	ldr.w	r8, [r4, #40]	@ 0x28
34182c5c:	f8d5 00c8 	ldr.w	r0, [r5, #200]	@ 0xc8
34182c60:	4641      	mov	r1, r8
34182c62:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34182c66:	f7ff f9c3 	bl	34181ff0 <RCC_IC_CheckPLLSources>
34182c6a:	2801      	cmp	r0, #1
34182c6c:	f47f ae18 	bne.w	341828a0 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC6CFGR, RCC_IC6CFGR_IC6SEL));
34182c70:	f8d5 00d8 	ldr.w	r0, [r5, #216]	@ 0xd8
      if (RCC_IC_CheckPLLSources(LL_RCC_IC6_GetSource(), pRCC_ClkInitStruct->IC6Selection.ClockSelection) != 1U)
34182c74:	6b27      	ldr	r7, [r4, #48]	@ 0x30
34182c76:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34182c7a:	4639      	mov	r1, r7
34182c7c:	f7ff f9b8 	bl	34181ff0 <RCC_IC_CheckPLLSources>
34182c80:	2801      	cmp	r0, #1
34182c82:	f47f ae0d 	bne.w	341828a0 <HAL_RCC_ClockConfig+0x8>
  return (uint32_t)(READ_BIT(RCC->IC11CFGR, RCC_IC11CFGR_IC11SEL));
34182c86:	f8d5 00ec 	ldr.w	r0, [r5, #236]	@ 0xec
      if (RCC_IC_CheckPLLSources(LL_RCC_IC11_GetSource(), pRCC_ClkInitStruct->IC11Selection.ClockSelection) != 1U)
34182c8a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
34182c8c:	f000 5040 	and.w	r0, r0, #805306368	@ 0x30000000
34182c90:	4631      	mov	r1, r6
34182c92:	f7ff f9ad 	bl	34181ff0 <RCC_IC_CheckPLLSources>
34182c96:	2801      	cmp	r0, #1
34182c98:	f47f ae02 	bne.w	341828a0 <HAL_RCC_ClockConfig+0x8>
      WRITE_REG(RCC->IC2CFGR, pRCC_ClkInitStruct->IC2Selection.ClockSelection | \
34182c9c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34182c9e:	3b01      	subs	r3, #1
34182ca0:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
34182ca4:	f8c5 30c8 	str.w	r3, [r5, #200]	@ 0xc8
      WRITE_REG(RCC->IC6CFGR, pRCC_ClkInitStruct->IC6Selection.ClockSelection | \
34182ca8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
34182caa:	3b01      	subs	r3, #1
34182cac:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
34182cb0:	f8c5 70d8 	str.w	r7, [r5, #216]	@ 0xd8
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34182cb4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34182cb6:	3b01      	subs	r3, #1
34182cb8:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34182cbc:	f240 4322 	movw	r3, #1058	@ 0x422
      WRITE_REG(RCC->IC11CFGR, pRCC_ClkInitStruct->IC11Selection.ClockSelection | \
34182cc0:	f8c5 60ec 	str.w	r6, [r5, #236]	@ 0xec
      WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC2ENS | RCC_DIVENSR_IC6ENS | RCC_DIVENSR_IC11ENS);
34182cc4:	f8c5 3a40 	str.w	r3, [r5, #2624]	@ 0xa40
34182cc8:	e772      	b.n	34182bb0 <HAL_RCC_ClockConfig+0x318>
    else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
34182cca:	b92b      	cbnz	r3, 34182cd8 <HAL_RCC_ClockConfig+0x440>
      if (LL_RCC_HSI_IsReady() == 0U)
34182ccc:	f7ff f802 	bl	34181cd4 <LL_RCC_HSI_IsReady>
      if (LL_RCC_MSI_IsReady() == 0U)
34182cd0:	2800      	cmp	r0, #0
34182cd2:	f47f af6d 	bne.w	34182bb0 <HAL_RCC_ClockConfig+0x318>
34182cd6:	e5e3      	b.n	341828a0 <HAL_RCC_ClockConfig+0x8>
34182cd8:	f7ff f804 	bl	34181ce4 <LL_RCC_MSI_IsReady>
34182cdc:	e7f8      	b.n	34182cd0 <HAL_RCC_ClockConfig+0x438>
    assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
34182cde:	68e3      	ldr	r3, [r4, #12]
34182ce0:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
34182ce4:	d007      	beq.n	34182cf6 <HAL_RCC_ClockConfig+0x45e>
34182ce6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
34182cea:	d004      	beq.n	34182cf6 <HAL_RCC_ClockConfig+0x45e>
34182cec:	f44f 618b 	mov.w	r1, #1112	@ 0x458
34182cf0:	4807      	ldr	r0, [pc, #28]	@ (34182d10 <HAL_RCC_ClockConfig+0x478>)
34182cf2:	f7fe fa2d 	bl	34181150 <assert_failed>
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
34182cf6:	4a07      	ldr	r2, [pc, #28]	@ (34182d14 <HAL_RCC_ClockConfig+0x47c>)
34182cf8:	68e1      	ldr	r1, [r4, #12]
34182cfa:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34182cfc:	f403 03e0 	and.w	r3, r3, #7340032	@ 0x700000
34182d00:	4299      	cmp	r1, r3
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
34182d02:	bf3f      	itttt	cc
34182d04:	6a53      	ldrcc	r3, [r2, #36]	@ 0x24
34182d06:	f423 03e0 	biccc.w	r3, r3, #7340032	@ 0x700000
34182d0a:	430b      	orrcc	r3, r1
34182d0c:	6253      	strcc	r3, [r2, #36]	@ 0x24
34182d0e:	e68a      	b.n	34182a26 <HAL_RCC_ClockConfig+0x18e>
34182d10:	3418cf1b 	.word	0x3418cf1b
34182d14:	56028000 	.word	0x56028000

34182d18 <HAL_RCC_GetSysClockFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR1, RCC_CFGR1_SYSSWS));
34182d18:	4b1f      	ldr	r3, [pc, #124]	@ (34182d98 <HAL_RCC_GetSysClockFreq+0x80>)
{
34182d1a:	b510      	push	{r4, lr}
34182d1c:	6a1a      	ldr	r2, [r3, #32]
34182d1e:	f002 5240 	and.w	r2, r2, #805306368	@ 0x30000000
  switch (LL_RCC_GetSysClkSource())
34182d22:	f1b2 5f00 	cmp.w	r2, #536870912	@ 0x20000000
34182d26:	d034      	beq.n	34182d92 <HAL_RCC_GetSysClockFreq+0x7a>
34182d28:	d806      	bhi.n	34182d38 <HAL_RCC_GetSysClockFreq+0x20>
34182d2a:	b952      	cbnz	r2, 34182d42 <HAL_RCC_GetSysClockFreq+0x2a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34182d2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34182d2e:	481b      	ldr	r0, [pc, #108]	@ (34182d9c <HAL_RCC_GetSysClockFreq+0x84>)
34182d30:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34182d34:	40d8      	lsrs	r0, r3
}
34182d36:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSysClkSource())
34182d38:	f1b2 5f40 	cmp.w	r2, #805306368	@ 0x30000000
34182d3c:	d009      	beq.n	34182d52 <HAL_RCC_GetSysClockFreq+0x3a>
      switch (LL_RCC_IC2_GetSource())
34182d3e:	2000      	movs	r0, #0
34182d40:	e7f9      	b.n	34182d36 <HAL_RCC_GetSysClockFreq+0x1e>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34182d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        frequency = MSI_VALUE;
34182d44:	4816      	ldr	r0, [pc, #88]	@ (34182da0 <HAL_RCC_GetSysClockFreq+0x88>)
34182d46:	f413 7f00 	tst.w	r3, #512	@ 0x200
34182d4a:	4b16      	ldr	r3, [pc, #88]	@ (34182da4 <HAL_RCC_GetSysClockFreq+0x8c>)
34182d4c:	bf08      	it	eq
34182d4e:	4618      	moveq	r0, r3
34182d50:	e7f1      	b.n	34182d36 <HAL_RCC_GetSysClockFreq+0x1e>
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34182d52:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34182d56:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34182d5a:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2SEL));
34182d5e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
      switch (LL_RCC_IC2_GetSource())
34182d62:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC2CFGR, RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1UL);
34182d66:	f100 0401 	add.w	r4, r0, #1
34182d6a:	d00f      	beq.n	34182d8c <HAL_RCC_GetSysClockFreq+0x74>
34182d6c:	d805      	bhi.n	34182d7a <HAL_RCC_GetSysClockFreq+0x62>
34182d6e:	b953      	cbnz	r3, 34182d86 <HAL_RCC_GetSysClockFreq+0x6e>
          frequency = HAL_RCCEx_GetPLL1CLKFreq();
34182d70:	f003 f962 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
          frequency = frequency / ic_divider;
34182d74:	fbb0 f0f4 	udiv	r0, r0, r4
          break;
34182d78:	e7dd      	b.n	34182d36 <HAL_RCC_GetSysClockFreq+0x1e>
      switch (LL_RCC_IC2_GetSource())
34182d7a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34182d7e:	d1de      	bne.n	34182d3e <HAL_RCC_GetSysClockFreq+0x26>
          frequency = HAL_RCCEx_GetPLL4CLKFreq();
34182d80:	f003 fa1a 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
34182d84:	e7f6      	b.n	34182d74 <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL2CLKFreq();
34182d86:	f003 f997 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
34182d8a:	e7f3      	b.n	34182d74 <HAL_RCC_GetSysClockFreq+0x5c>
          frequency = HAL_RCCEx_GetPLL3CLKFreq();
34182d8c:	f003 f9d4 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
34182d90:	e7f0      	b.n	34182d74 <HAL_RCC_GetSysClockFreq+0x5c>
  switch (LL_RCC_GetSysClkSource())
34182d92:	4805      	ldr	r0, [pc, #20]	@ (34182da8 <HAL_RCC_GetSysClockFreq+0x90>)
34182d94:	e7cf      	b.n	34182d36 <HAL_RCC_GetSysClockFreq+0x1e>
34182d96:	bf00      	nop
34182d98:	56028000 	.word	0x56028000
34182d9c:	03d09000 	.word	0x03d09000
34182da0:	00f42400 	.word	0x00f42400
34182da4:	003d0900 	.word	0x003d0900
34182da8:	016e3600 	.word	0x016e3600

34182dac <HAL_RCC_GetClockConfig>:
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK | \
34182dac:	237f      	movs	r3, #127	@ 0x7f
  cfgr_value = RCC->CFGR1;
34182dae:	4a1f      	ldr	r2, [pc, #124]	@ (34182e2c <HAL_RCC_GetClockConfig+0x80>)
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_CPUCLK | RCC_CLOCKTYPE_SYSCLK | \
34182db0:	6003      	str	r3, [r0, #0]
  cfgr_value = RCC->CFGR1;
34182db2:	6a13      	ldr	r3, [r2, #32]
  pRCC_ClkInitStruct->CPUCLKSource = (cfgr_value & RCC_CFGR1_CPUSWS) >> 4U;
34182db4:	091b      	lsrs	r3, r3, #4
34182db6:	f403 3140 	and.w	r1, r3, #196608	@ 0x30000
  pRCC_ClkInitStruct->SYSCLKSource = (cfgr_value & RCC_CFGR1_SYSSWS) >> 4U;
34182dba:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
  pRCC_ClkInitStruct->CPUCLKSource = (cfgr_value & RCC_CFGR1_CPUSWS) >> 4U;
34182dbe:	6041      	str	r1, [r0, #4]
  pRCC_ClkInitStruct->SYSCLKSource = (cfgr_value & RCC_CFGR1_SYSSWS) >> 4U;
34182dc0:	6083      	str	r3, [r0, #8]
  cfgr_value = RCC->CFGR2;
34182dc2:	6a53      	ldr	r3, [r2, #36]	@ 0x24
  pRCC_ClkInitStruct->AHBCLKDivider = (cfgr_value & RCC_CFGR2_HPRE);
34182dc4:	f403 01e0 	and.w	r1, r3, #7340032	@ 0x700000
34182dc8:	60c1      	str	r1, [r0, #12]
  pRCC_ClkInitStruct->APB1CLKDivider = (cfgr_value & RCC_CFGR2_PPRE1);
34182dca:	f003 0107 	and.w	r1, r3, #7
34182dce:	6101      	str	r1, [r0, #16]
  pRCC_ClkInitStruct->APB2CLKDivider = (cfgr_value & RCC_CFGR2_PPRE2);
34182dd0:	f003 0170 	and.w	r1, r3, #112	@ 0x70
34182dd4:	6141      	str	r1, [r0, #20]
  pRCC_ClkInitStruct->APB4CLKDivider = (cfgr_value & RCC_CFGR2_PPRE4);
34182dd6:	f403 41e0 	and.w	r1, r3, #28672	@ 0x7000
  pRCC_ClkInitStruct->APB5CLKDivider = (cfgr_value & RCC_CFGR2_PPRE5);
34182dda:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
  pRCC_ClkInitStruct->APB4CLKDivider = (cfgr_value & RCC_CFGR2_PPRE4);
34182dde:	6181      	str	r1, [r0, #24]
  pRCC_ClkInitStruct->APB5CLKDivider = (cfgr_value & RCC_CFGR2_PPRE5);
34182de0:	61c3      	str	r3, [r0, #28]
  cfgr_value = RCC->IC1CFGR;
34182de2:	f8d2 30c4 	ldr.w	r3, [r2, #196]	@ 0xc4
  pRCC_ClkInitStruct->IC1Selection.ClockSelection = cfgr_value & RCC_IC1CFGR_IC1SEL;
34182de6:	f003 5140 	and.w	r1, r3, #805306368	@ 0x30000000
  pRCC_ClkInitStruct->IC1Selection.ClockDivider = ((cfgr_value & RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1U;
34182dea:	f3c3 4307 	ubfx	r3, r3, #16, #8
34182dee:	3301      	adds	r3, #1
  pRCC_ClkInitStruct->IC1Selection.ClockSelection = cfgr_value & RCC_IC1CFGR_IC1SEL;
34182df0:	6201      	str	r1, [r0, #32]
  pRCC_ClkInitStruct->IC1Selection.ClockDivider = ((cfgr_value & RCC_IC1CFGR_IC1INT) >> RCC_IC1CFGR_IC1INT_Pos) + 1U;
34182df2:	6243      	str	r3, [r0, #36]	@ 0x24
  cfgr_value = RCC->IC2CFGR;
34182df4:	f8d2 30c8 	ldr.w	r3, [r2, #200]	@ 0xc8
  pRCC_ClkInitStruct->IC2Selection.ClockSelection = cfgr_value & RCC_IC2CFGR_IC2SEL;
34182df8:	f003 5140 	and.w	r1, r3, #805306368	@ 0x30000000
  pRCC_ClkInitStruct->IC2Selection.ClockDivider = ((cfgr_value & RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1U;
34182dfc:	f3c3 4307 	ubfx	r3, r3, #16, #8
34182e00:	3301      	adds	r3, #1
  pRCC_ClkInitStruct->IC2Selection.ClockSelection = cfgr_value & RCC_IC2CFGR_IC2SEL;
34182e02:	6281      	str	r1, [r0, #40]	@ 0x28
  pRCC_ClkInitStruct->IC2Selection.ClockDivider = ((cfgr_value & RCC_IC2CFGR_IC2INT) >> RCC_IC2CFGR_IC2INT_Pos) + 1U;
34182e04:	62c3      	str	r3, [r0, #44]	@ 0x2c
  cfgr_value = RCC->IC6CFGR;
34182e06:	f8d2 30d8 	ldr.w	r3, [r2, #216]	@ 0xd8
  pRCC_ClkInitStruct->IC6Selection.ClockSelection = cfgr_value & RCC_IC6CFGR_IC6SEL;
34182e0a:	f003 5140 	and.w	r1, r3, #805306368	@ 0x30000000
  pRCC_ClkInitStruct->IC6Selection.ClockDivider = ((cfgr_value & RCC_IC6CFGR_IC6INT) >> RCC_IC6CFGR_IC6INT_Pos) + 1U;
34182e0e:	f3c3 4307 	ubfx	r3, r3, #16, #8
34182e12:	3301      	adds	r3, #1
  pRCC_ClkInitStruct->IC6Selection.ClockSelection = cfgr_value & RCC_IC6CFGR_IC6SEL;
34182e14:	6301      	str	r1, [r0, #48]	@ 0x30
  pRCC_ClkInitStruct->IC6Selection.ClockDivider = ((cfgr_value & RCC_IC6CFGR_IC6INT) >> RCC_IC6CFGR_IC6INT_Pos) + 1U;
34182e16:	6343      	str	r3, [r0, #52]	@ 0x34
  cfgr_value = RCC->IC11CFGR;
34182e18:	f8d2 30ec 	ldr.w	r3, [r2, #236]	@ 0xec
  pRCC_ClkInitStruct->IC11Selection.ClockSelection = cfgr_value & RCC_IC11CFGR_IC11SEL;
34182e1c:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
  pRCC_ClkInitStruct->IC11Selection.ClockDivider = ((cfgr_value & RCC_IC11CFGR_IC11INT) >> RCC_IC11CFGR_IC11INT_Pos) + 1U;
34182e20:	f3c3 4307 	ubfx	r3, r3, #16, #8
34182e24:	3301      	adds	r3, #1
  pRCC_ClkInitStruct->IC11Selection.ClockSelection = cfgr_value & RCC_IC11CFGR_IC11SEL;
34182e26:	6382      	str	r2, [r0, #56]	@ 0x38
  pRCC_ClkInitStruct->IC11Selection.ClockDivider = ((cfgr_value & RCC_IC11CFGR_IC11INT) >> RCC_IC11CFGR_IC11INT_Pos) + 1U;
34182e28:	63c3      	str	r3, [r0, #60]	@ 0x3c
}
34182e2a:	4770      	bx	lr
34182e2c:	56028000 	.word	0x56028000

34182e30 <LL_RCC_HSE_SelectHSEAsDiv2Clock>:
  CLEAR_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34182e30:	4a02      	ldr	r2, [pc, #8]	@ (34182e3c <LL_RCC_HSE_SelectHSEAsDiv2Clock+0xc>)
34182e32:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34182e34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
34182e38:	6553      	str	r3, [r2, #84]	@ 0x54
}
34182e3a:	4770      	bx	lr
34182e3c:	56028000 	.word	0x56028000

34182e40 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>:
  SET_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL);
34182e40:	4a02      	ldr	r2, [pc, #8]	@ (34182e4c <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock+0xc>)
34182e42:	6d53      	ldr	r3, [r2, #84]	@ 0x54
34182e44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
34182e48:	6553      	str	r3, [r2, #84]	@ 0x54
}
34182e4a:	4770      	bx	lr
34182e4c:	56028000 	.word	0x56028000

34182e50 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>:
  return ((READ_BIT(RCC->HSECFGR, RCC_HSECFGR_HSEDIV2SEL) == RCC_HSECFGR_HSEDIV2SEL) ? 1UL : 0UL);
34182e50:	4b02      	ldr	r3, [pc, #8]	@ (34182e5c <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock+0xc>)
34182e52:	6d58      	ldr	r0, [r3, #84]	@ 0x54
}
34182e54:	f3c0 1080 	ubfx	r0, r0, #6, #1
34182e58:	4770      	bx	lr
34182e5a:	bf00      	nop
34182e5c:	56028000 	.word	0x56028000

34182e60 <LL_RCC_HSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSERDY) != 0UL) ? 1UL : 0UL);
34182e60:	4b02      	ldr	r3, [pc, #8]	@ (34182e6c <LL_RCC_HSE_IsReady+0xc>)
34182e62:	6858      	ldr	r0, [r3, #4]
}
34182e64:	f3c0 1000 	ubfx	r0, r0, #4, #1
34182e68:	4770      	bx	lr
34182e6a:	bf00      	nop
34182e6c:	56028000 	.word	0x56028000

34182e70 <LL_RCC_HSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_HSIRDY) != 0UL) ? 1UL : 0UL);
34182e70:	4b02      	ldr	r3, [pc, #8]	@ (34182e7c <LL_RCC_HSI_IsReady+0xc>)
34182e72:	6858      	ldr	r0, [r3, #4]
}
34182e74:	f3c0 00c0 	ubfx	r0, r0, #3, #1
34182e78:	4770      	bx	lr
34182e7a:	bf00      	nop
34182e7c:	56028000 	.word	0x56028000

34182e80 <LL_RCC_MSI_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_MSIRDY) != 0UL) ? 1UL : 0UL);
34182e80:	4b02      	ldr	r3, [pc, #8]	@ (34182e8c <LL_RCC_MSI_IsReady+0xc>)
34182e82:	6858      	ldr	r0, [r3, #4]
}
34182e84:	f3c0 0080 	ubfx	r0, r0, #2, #1
34182e88:	4770      	bx	lr
34182e8a:	bf00      	nop
34182e8c:	56028000 	.word	0x56028000

34182e90 <LL_RCC_LSE_IsReady>:
  return ((READ_BIT(RCC->SR, RCC_SR_LSERDY) != 0UL) ? 1UL : 0UL);
34182e90:	4b02      	ldr	r3, [pc, #8]	@ (34182e9c <LL_RCC_LSE_IsReady+0xc>)
34182e92:	6858      	ldr	r0, [r3, #4]
}
34182e94:	f3c0 0040 	ubfx	r0, r0, #1, #1
34182e98:	4770      	bx	lr
34182e9a:	bf00      	nop
34182e9c:	56028000 	.word	0x56028000

34182ea0 <LL_RCC_SetClockSource>:
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34182ea0:	4907      	ldr	r1, [pc, #28]	@ (34182ec0 <LL_RCC_SetClockSource+0x20>)
{
34182ea2:	b530      	push	{r4, r5, lr}
  volatile uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CCIPR1 + LL_CLKSOURCE_REG(ClkSource));
34182ea4:	b2c4      	uxtb	r4, r0
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
34182ea6:	f3c0 2504 	ubfx	r5, r0, #8, #5
34182eaa:	5863      	ldr	r3, [r4, r1]
34182eac:	0e02      	lsrs	r2, r0, #24
34182eae:	40aa      	lsls	r2, r5
34182eb0:	f3c0 4007 	ubfx	r0, r0, #16, #8
34182eb4:	ea23 0302 	bic.w	r3, r3, r2
34182eb8:	40a8      	lsls	r0, r5
34182eba:	4303      	orrs	r3, r0
34182ebc:	5063      	str	r3, [r4, r1]
}
34182ebe:	bd30      	pop	{r4, r5, pc}
34182ec0:	56028144 	.word	0x56028144

34182ec4 <LL_RCC_GetClockSource>:
  const volatile uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CCIPR1) + LL_CLKSOURCE_REG(Periph)));
34182ec4:	4b05      	ldr	r3, [pc, #20]	@ (34182edc <LL_RCC_GetClockSource+0x18>)
34182ec6:	b2c2      	uxtb	r2, r0
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
34182ec8:	58d1      	ldr	r1, [r2, r3]
34182eca:	f3c0 2204 	ubfx	r2, r0, #8, #5
34182ece:	0e03      	lsrs	r3, r0, #24
34182ed0:	4093      	lsls	r3, r2
34182ed2:	400b      	ands	r3, r1
34182ed4:	40d3      	lsrs	r3, r2
}
34182ed6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
34182eda:	4770      	bx	lr
34182edc:	56028144 	.word	0x56028144

34182ee0 <LL_RCC_IC7_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC7EN) == RCC_DIVENR_IC7EN) ? 1UL : 0UL);
34182ee0:	4b02      	ldr	r3, [pc, #8]	@ (34182eec <LL_RCC_IC7_IsEnabled+0xc>)
34182ee2:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34182ee6:	f3c0 1080 	ubfx	r0, r0, #6, #1
34182eea:	4770      	bx	lr
34182eec:	56028000 	.word	0x56028000

34182ef0 <LL_RCC_IC7_GetDivider>:
  return ((READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7INT) >> RCC_IC7CFGR_IC7INT_Pos) + 1UL);
34182ef0:	4b03      	ldr	r3, [pc, #12]	@ (34182f00 <LL_RCC_IC7_GetDivider+0x10>)
34182ef2:	f8d3 00dc 	ldr.w	r0, [r3, #220]	@ 0xdc
34182ef6:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34182efa:	3001      	adds	r0, #1
34182efc:	4770      	bx	lr
34182efe:	bf00      	nop
34182f00:	56028000 	.word	0x56028000

34182f04 <LL_RCC_IC8_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC8EN) == RCC_DIVENR_IC8EN) ? 1UL : 0UL);
34182f04:	4b02      	ldr	r3, [pc, #8]	@ (34182f10 <LL_RCC_IC8_IsEnabled+0xc>)
34182f06:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34182f0a:	f3c0 10c0 	ubfx	r0, r0, #7, #1
34182f0e:	4770      	bx	lr
34182f10:	56028000 	.word	0x56028000

34182f14 <LL_RCC_IC8_GetDivider>:
  return ((READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8INT) >> RCC_IC8CFGR_IC8INT_Pos) + 1UL);
34182f14:	4b03      	ldr	r3, [pc, #12]	@ (34182f24 <LL_RCC_IC8_GetDivider+0x10>)
34182f16:	f8d3 00e0 	ldr.w	r0, [r3, #224]	@ 0xe0
34182f1a:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34182f1e:	3001      	adds	r0, #1
34182f20:	4770      	bx	lr
34182f22:	bf00      	nop
34182f24:	56028000 	.word	0x56028000

34182f28 <LL_RCC_IC9_IsEnabled>:
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC9EN) == RCC_DIVENR_IC9EN) ? 1UL : 0UL);
34182f28:	4b02      	ldr	r3, [pc, #8]	@ (34182f34 <LL_RCC_IC9_IsEnabled+0xc>)
34182f2a:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34182f2e:	f3c0 2000 	ubfx	r0, r0, #8, #1
34182f32:	4770      	bx	lr
34182f34:	56028000 	.word	0x56028000

34182f38 <LL_RCC_IC9_GetDivider>:
  return ((READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9INT) >> RCC_IC9CFGR_IC9INT_Pos) + 1UL);
34182f38:	4b03      	ldr	r3, [pc, #12]	@ (34182f48 <LL_RCC_IC9_GetDivider+0x10>)
34182f3a:	f8d3 00e4 	ldr.w	r0, [r3, #228]	@ 0xe4
34182f3e:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34182f42:	3001      	adds	r0, #1
34182f44:	4770      	bx	lr
34182f46:	bf00      	nop
34182f48:	56028000 	.word	0x56028000

34182f4c <LL_RCC_IC14_IsEnabled>:
  * @rmtoll DIVENR       IC14EN         LL_RCC_IC14_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC14EN) == RCC_DIVENR_IC14EN) ? 1UL : 0UL);
34182f4c:	4b02      	ldr	r3, [pc, #8]	@ (34182f58 <LL_RCC_IC14_IsEnabled+0xc>)
34182f4e:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34182f52:	f3c0 3040 	ubfx	r0, r0, #13, #1
34182f56:	4770      	bx	lr
34182f58:	56028000 	.word	0x56028000

34182f5c <LL_RCC_IC14_GetDivider>:
  * @rmtoll IC14CFGR      IC14INT        LL_RCC_IC14_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC14_GetDivider(void)
{
  return ((READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14INT) >> RCC_IC14CFGR_IC14INT_Pos) + 1UL);
34182f5c:	4b03      	ldr	r3, [pc, #12]	@ (34182f6c <LL_RCC_IC14_GetDivider+0x10>)
34182f5e:	f8d3 00f8 	ldr.w	r0, [r3, #248]	@ 0xf8
34182f62:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34182f66:	3001      	adds	r0, #1
34182f68:	4770      	bx	lr
34182f6a:	bf00      	nop
34182f6c:	56028000 	.word	0x56028000

34182f70 <LL_RCC_IC15_IsEnabled>:
  * @rmtoll DIVENR       IC15EN         LL_RCC_IC15_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_IsEnabled(void)
{
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC15EN) == RCC_DIVENR_IC15EN) ? 1UL : 0UL);
34182f70:	4b02      	ldr	r3, [pc, #8]	@ (34182f7c <LL_RCC_IC15_IsEnabled+0xc>)
34182f72:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
}
34182f76:	f3c0 3080 	ubfx	r0, r0, #14, #1
34182f7a:	4770      	bx	lr
34182f7c:	56028000 	.word	0x56028000

34182f80 <LL_RCC_IC15_GetDivider>:
  * @rmtoll IC15CFGR      IC15INT        LL_RCC_IC15_GetDivider
  * @retval can be a value between 1 and 256.
  */
__STATIC_INLINE uint32_t LL_RCC_IC15_GetDivider(void)
{
  return ((READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15INT) >> RCC_IC15CFGR_IC15INT_Pos) + 1UL);
34182f80:	4b03      	ldr	r3, [pc, #12]	@ (34182f90 <LL_RCC_IC15_GetDivider+0x10>)
34182f82:	f8d3 00fc 	ldr.w	r0, [r3, #252]	@ 0xfc
34182f86:	f3c0 4007 	ubfx	r0, r0, #16, #8
}
34182f8a:	3001      	adds	r0, #1
34182f8c:	4770      	bx	lr
34182f8e:	bf00      	nop
34182f90:	56028000 	.word	0x56028000

34182f94 <RCCEx_GetHCLKFreq>:
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_HPRE));
34182f94:	4b02      	ldr	r3, [pc, #8]	@ (34182fa0 <RCCEx_GetHCLKFreq+0xc>)
34182f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCCEx_GetHCLKFreq(uint32_t SYSCLK_Frequency)
{
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
34182f98:	f3c3 5302 	ubfx	r3, r3, #20, #3
}
34182f9c:	40d8      	lsrs	r0, r3
34182f9e:	4770      	bx	lr
34182fa0:	56028000 	.word	0x56028000

34182fa4 <RCCEx_GetPLLSourceFreq>:
  */
static uint32_t RCCEx_GetPLLSourceFreq(uint32_t PLLsource)
{
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;

  switch (PLLsource)
34182fa4:	f1b0 5f00 	cmp.w	r0, #536870912	@ 0x20000000
{
34182fa8:	b508      	push	{r3, lr}
  switch (PLLsource)
34182faa:	d01d      	beq.n	34182fe8 <RCCEx_GetPLLSourceFreq+0x44>
34182fac:	d80a      	bhi.n	34182fc4 <RCCEx_GetPLLSourceFreq+0x20>
34182fae:	b970      	cbnz	r0, 34182fce <RCCEx_GetPLLSourceFreq+0x2a>
  {
    case LL_RCC_PLLSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
34182fb0:	f7ff ff5e 	bl	34182e70 <LL_RCC_HSI_IsReady>
34182fb4:	b148      	cbz	r0, 34182fca <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34182fb6:	4b10      	ldr	r3, [pc, #64]	@ (34182ff8 <RCCEx_GetPLLSourceFreq+0x54>)
      {
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34182fb8:	4810      	ldr	r0, [pc, #64]	@ (34182ffc <RCCEx_GetPLLSourceFreq+0x58>)
34182fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34182fbc:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34182fc0:	40d8      	lsrs	r0, r3
34182fc2:	e003      	b.n	34182fcc <RCCEx_GetPLLSourceFreq+0x28>
  switch (PLLsource)
34182fc4:	f1b0 5f40 	cmp.w	r0, #805306368	@ 0x30000000
34182fc8:	d014      	beq.n	34182ff4 <RCCEx_GetPLLSourceFreq+0x50>
  uint32_t pllinputfreq = RCC_PERIPH_FREQUENCY_NO;
34182fca:	2000      	movs	r0, #0
      /* unexpected case */
      break;
  }

  return pllinputfreq;
}
34182fcc:	bd08      	pop	{r3, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
34182fce:	f7ff ff57 	bl	34182e80 <LL_RCC_MSI_IsReady>
34182fd2:	2800      	cmp	r0, #0
34182fd4:	d0f9      	beq.n	34182fca <RCCEx_GetPLLSourceFreq+0x26>
  return (READ_BIT(RCC->MSICFGR, RCC_MSICFGR_MSIFREQSEL));
34182fd6:	4b08      	ldr	r3, [pc, #32]	@ (34182ff8 <RCCEx_GetPLLSourceFreq+0x54>)
          pllinputfreq = MSI_VALUE;
34182fd8:	4809      	ldr	r0, [pc, #36]	@ (34183000 <RCCEx_GetPLLSourceFreq+0x5c>)
34182fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
34182fdc:	f413 7f00 	tst.w	r3, #512	@ 0x200
34182fe0:	4b08      	ldr	r3, [pc, #32]	@ (34183004 <RCCEx_GetPLLSourceFreq+0x60>)
34182fe2:	bf08      	it	eq
34182fe4:	4618      	moveq	r0, r3
34182fe6:	e7f1      	b.n	34182fcc <RCCEx_GetPLLSourceFreq+0x28>
      if (LL_RCC_HSE_IsReady() != 0U)
34182fe8:	f7ff ff3a 	bl	34182e60 <LL_RCC_HSE_IsReady>
34182fec:	2800      	cmp	r0, #0
34182fee:	d0ec      	beq.n	34182fca <RCCEx_GetPLLSourceFreq+0x26>
        pllinputfreq = HSE_VALUE;
34182ff0:	4805      	ldr	r0, [pc, #20]	@ (34183008 <RCCEx_GetPLLSourceFreq+0x64>)
34182ff2:	e7eb      	b.n	34182fcc <RCCEx_GetPLLSourceFreq+0x28>
      pllinputfreq = EXTERNAL_CLOCK_VALUE;
34182ff4:	4805      	ldr	r0, [pc, #20]	@ (3418300c <RCCEx_GetPLLSourceFreq+0x68>)
34182ff6:	e7e9      	b.n	34182fcc <RCCEx_GetPLLSourceFreq+0x28>
34182ff8:	56028000 	.word	0x56028000
34182ffc:	03d09000 	.word	0x03d09000
34183000:	00f42400 	.word	0x00f42400
34183004:	003d0900 	.word	0x003d0900
34183008:	016e3600 	.word	0x016e3600
3418300c:	00bb8000 	.word	0x00bb8000

34183010 <RCCEx_CalcPLLFreq>:
  * @param  P2     VCO output divider P2 between 1 and 7
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCCEx_CalcPLLFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t P1,
                                  uint32_t P2)
{
34183010:	ee07 2a10 	vmov	s14, r2
34183014:	ee06 3a10 	vmov	s12, r3
34183018:	ee07 0a90 	vmov	s15, r0
  float_t freq;

  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
3418301c:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
34183020:	eddf 5a10 	vldr	s11, [pc, #64]	@ 34183064 <RCCEx_CalcPLLFreq+0x54>
34183024:	eeb8 7a47 	vcvt.f32.u32	s14, s14
{
34183028:	ee06 1a90 	vmov	s13, r1
  freq = ((float_t)PLLInputFreq * ((float_t)N + ((float_t)FRACN / (float_t)0x1000000))) / (float_t)M;
3418302c:	eea6 7a25 	vfma.f32	s14, s12, s11
34183030:	eef8 7a67 	vcvt.f32.u32	s15, s15
34183034:	ee67 7a87 	vmul.f32	s15, s15, s14
34183038:	eeb8 7a66 	vcvt.f32.u32	s14, s13
3418303c:	ee87 6a87 	vdiv.f32	s12, s15, s14

  freq = freq / (float_t)P1;
34183040:	eddd 7a00 	vldr	s15, [sp]
34183044:	eef8 7a67 	vcvt.f32.u32	s15, s15
34183048:	eec6 6a27 	vdiv.f32	s13, s12, s15
  freq = freq / (float_t)P2;
3418304c:	eddd 7a01 	vldr	s15, [sp, #4]
34183050:	eef8 7a67 	vcvt.f32.u32	s15, s15
34183054:	ee86 7aa7 	vdiv.f32	s14, s13, s15

  return (uint32_t)freq;
}
34183058:	eefc 7ac7 	vcvt.u32.f32	s15, s14
3418305c:	ee17 0a90 	vmov	r0, s15
34183060:	4770      	bx	lr
34183062:	bf00      	nop
34183064:	33800000 	.word	0x33800000

34183068 <HAL_RCCEx_PeriphCLKConfig>:
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34183068:	e9d0 2300 	ldrd	r2, r3, [r0]
3418306c:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
34183070:	431a      	orrs	r2, r3
{
34183072:	b570      	push	{r4, r5, r6, lr}
34183074:	4604      	mov	r4, r0
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
34183076:	d103      	bne.n	34183080 <HAL_RCCEx_PeriphCLKConfig+0x18>
34183078:	2188      	movs	r1, #136	@ 0x88
3418307a:	4861      	ldr	r0, [pc, #388]	@ (34183200 <HAL_RCCEx_PeriphCLKConfig+0x198>)
3418307c:	f7fe f868 	bl	34181150 <assert_failed>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
34183080:	6823      	ldr	r3, [r4, #0]
34183082:	011a      	lsls	r2, r3, #4
34183084:	f140 808e 	bpl.w	341831a4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
34183088:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
3418308c:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
34183090:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
34183094:	d05a      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34183096:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418309a:	d057      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3418309c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
341830a0:	f5b2 5f98 	cmp.w	r2, #4864	@ 0x1300
341830a4:	d052      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
341830a6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
341830aa:	f5b2 5f0c 	cmp.w	r2, #8960	@ 0x2300
341830ae:	d04d      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
341830b0:	f423 4210 	bic.w	r2, r3, #36864	@ 0x9000
341830b4:	f5b2 4f86 	cmp.w	r2, #17152	@ 0x4300
341830b8:	d048      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
341830ba:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
341830be:	f5b2 4fe6 	cmp.w	r2, #29440	@ 0x7300
341830c2:	d043      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
341830c4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
341830c8:	f5b2 4f03 	cmp.w	r2, #33536	@ 0x8300
341830cc:	d03e      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
341830ce:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
341830d2:	f5b1 4f63 	cmp.w	r1, #58112	@ 0xe300
341830d6:	d039      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
341830d8:	494a      	ldr	r1, [pc, #296]	@ (34183204 <HAL_RCCEx_PeriphCLKConfig+0x19c>)
341830da:	428a      	cmp	r2, r1
341830dc:	d036      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
341830de:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
341830e2:	428a      	cmp	r2, r1
341830e4:	d032      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
341830e6:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
341830ea:	428a      	cmp	r2, r1
341830ec:	d02e      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
341830ee:	f423 3004 	bic.w	r0, r3, #135168	@ 0x21000
341830f2:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
341830f6:	4288      	cmp	r0, r1
341830f8:	d028      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
341830fa:	f423 3000 	bic.w	r0, r3, #131072	@ 0x20000
341830fe:	f501 5140 	add.w	r1, r1, #12288	@ 0x3000
34183102:	4288      	cmp	r0, r1
34183104:	d022      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34183106:	f501 5180 	add.w	r1, r1, #4096	@ 0x1000
3418310a:	428a      	cmp	r2, r1
3418310c:	d01e      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3418310e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34183112:	428a      	cmp	r2, r1
34183114:	d01a      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34183116:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3418311a:	428a      	cmp	r2, r1
3418311c:	d016      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3418311e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34183122:	428a      	cmp	r2, r1
34183124:	d012      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34183126:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3418312a:	428a      	cmp	r2, r1
3418312c:	d00e      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3418312e:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
34183132:	428a      	cmp	r2, r1
34183134:	d00a      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34183136:	f501 4180 	add.w	r1, r1, #16384	@ 0x4000
3418313a:	428a      	cmp	r2, r1
3418313c:	d006      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
3418313e:	4a32      	ldr	r2, [pc, #200]	@ (34183208 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
34183140:	4293      	cmp	r3, r2
34183142:	d003      	beq.n	3418314c <HAL_RCCEx_PeriphCLKConfig+0xe4>
34183144:	218e      	movs	r1, #142	@ 0x8e
34183146:	482e      	ldr	r0, [pc, #184]	@ (34183200 <HAL_RCCEx_PeriphCLKConfig+0x198>)
34183148:	f7fe f802 	bl	34181150 <assert_failed>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
3418314c:	4b2f      	ldr	r3, [pc, #188]	@ (3418320c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
3418314e:	f8d4 1188 	ldr.w	r1, [r4, #392]	@ 0x188
34183152:	f8d3 315c 	ldr.w	r3, [r3, #348]	@ 0x15c
34183156:	f413 7340 	ands.w	r3, r3, #768	@ 0x300
3418315a:	d13b      	bne.n	341831d4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
3418315c:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
34183160:	d108      	bne.n	34183174 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        tickstart = HAL_GetTick();
34183162:	f7fe fa99 	bl	34181698 <HAL_GetTick>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
34183166:	f241 3688 	movw	r6, #5000	@ 0x1388
        tickstart = HAL_GetTick();
3418316a:	4605      	mov	r5, r0
        while (LL_RCC_LSE_IsReady() == 0U)
3418316c:	f7ff fe90 	bl	34182e90 <LL_RCC_LSE_IsReady>
34183170:	2800      	cmp	r0, #0
34183172:	d03d      	beq.n	341831f0 <HAL_RCCEx_PeriphCLKConfig+0x188>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
34183174:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
34183178:	4a24      	ldr	r2, [pc, #144]	@ (3418320c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
3418317a:	f403 7040 	and.w	r0, r3, #768	@ 0x300
3418317e:	f5b0 7f40 	cmp.w	r0, #768	@ 0x300
34183182:	d108      	bne.n	34183196 <HAL_RCCEx_PeriphCLKConfig+0x12e>
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCPRE, Prescaler);
34183184:	f8d2 115c 	ldr.w	r1, [r2, #348]	@ 0x15c
34183188:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3418318c:	f421 317c 	bic.w	r1, r1, #258048	@ 0x3f000
34183190:	430b      	orrs	r3, r1
34183192:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_RTCSEL, Source);
34183196:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
3418319a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
3418319e:	4303      	orrs	r3, r0
341831a0:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
341831a4:	2500      	movs	r5, #0
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
341831a6:	6823      	ldr	r3, [r4, #0]
341831a8:	075e      	lsls	r6, r3, #29
341831aa:	d55f      	bpl.n	3418326c <HAL_RCCEx_PeriphCLKConfig+0x204>
    assert_param(IS_RCC_CKPERCLKSOURCE(PeriphClkInit->CkperClockSelection));
341831ac:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
341831b0:	2b07      	cmp	r3, #7
341831b2:	d903      	bls.n	341831bc <HAL_RCCEx_PeriphCLKConfig+0x154>
341831b4:	21d4      	movs	r1, #212	@ 0xd4
341831b6:	4812      	ldr	r0, [pc, #72]	@ (34183200 <HAL_RCCEx_PeriphCLKConfig+0x198>)
341831b8:	f7fd ffca 	bl	34181150 <assert_failed>
    if (PeriphClkInit->CkperClockSelection == RCC_CLKPCLKSOURCE_IC5)
341831bc:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
341831c0:	3b03      	subs	r3, #3
341831c2:	2b04      	cmp	r3, #4
341831c4:	d848      	bhi.n	34183258 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
341831c6:	e8df f013 	tbh	[pc, r3, lsl #1]
341831ca:	0f27      	.short	0x0f27
341831cc:	0ee10025 	.word	0x0ee10025
341831d0:	0f500f04 	.word	0x0f500f04
    if ((tmpreg != RCC_RTCCLKSOURCE_DISABLE) && (tmpreg != (PeriphClkInit->RTCClockSelection & RCC_CCIPR7_RTCSEL)))
341831d4:	f401 7240 	and.w	r2, r1, #768	@ 0x300
341831d8:	429a      	cmp	r2, r3
341831da:	d0bf      	beq.n	3418315c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      SET_BIT(PWR->DBPCR, PWR_DBPCR_DBP);
341831dc:	4b0c      	ldr	r3, [pc, #48]	@ (34183210 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
341831de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
341831e0:	f042 0201 	orr.w	r2, r2, #1
341831e4:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (READ_BIT(PWR->DBPCR, PWR_DBPCR_DBP) == 0U)
341831e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
341831e8:	07db      	lsls	r3, r3, #31
341831ea:	d4b7      	bmi.n	3418315c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      status = ret;
341831ec:	2501      	movs	r5, #1
341831ee:	e7da      	b.n	341831a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
341831f0:	f7fe fa52 	bl	34181698 <HAL_GetTick>
341831f4:	1b40      	subs	r0, r0, r5
341831f6:	42b0      	cmp	r0, r6
341831f8:	d9b8      	bls.n	3418316c <HAL_RCCEx_PeriphCLKConfig+0x104>
        status = ret;
341831fa:	2503      	movs	r5, #3
341831fc:	e7d3      	b.n	341831a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
341831fe:	bf00      	nop
34183200:	3418cf4f 	.word	0x3418cf4f
34183204:	00010300 	.word	0x00010300
34183208:	0003e300 	.word	0x0003e300
3418320c:	56028000 	.word	0x56028000
34183210:	56024800 	.word	0x56024800
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
34183214:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34183216:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3418321a:	d003      	beq.n	34183224 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
3418321c:	21d9      	movs	r1, #217	@ 0xd9
3418321e:	48bd      	ldr	r0, [pc, #756]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34183220:	f7fd ff96 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34183224:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34183226:	3b01      	subs	r3, #1
34183228:	2bff      	cmp	r3, #255	@ 0xff
3418322a:	d903      	bls.n	34183234 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
3418322c:	21da      	movs	r1, #218	@ 0xda
3418322e:	48b9      	ldr	r0, [pc, #740]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34183230:	f7fd ff8e 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34183234:	4ab8      	ldr	r2, [pc, #736]	@ (34183518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34183236:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34183238:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
3418323c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
3418323e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183242:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183246:	3901      	subs	r1, #1
34183248:	4303      	orrs	r3, r0
3418324a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418324e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34183252:	2310      	movs	r3, #16
  * @rmtoll DIVENSR       IC20ENS        LL_RCC_IC20_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_IC20_Enable(void)
{
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34183254:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PERSEL, ClkSource);
34183258:	4aaf      	ldr	r2, [pc, #700]	@ (34183518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
3418325a:	f8d4 10b8 	ldr.w	r1, [r4, #184]	@ 0xb8
3418325e:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34183262:	f023 0307 	bic.w	r3, r3, #7
34183266:	430b      	orrs	r3, r1
34183268:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI1) == RCC_PERIPHCLK_XSPI1)
3418326c:	6863      	ldr	r3, [r4, #4]
3418326e:	0258      	lsls	r0, r3, #9
34183270:	d539      	bpl.n	341832e6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    assert_param(IS_RCC_XSPI1CLKSOURCE(PeriphClkInit->Xspi1ClockSelection));
34183272:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
34183276:	4aa9      	ldr	r2, [pc, #676]	@ (3418351c <HAL_RCCEx_PeriphCLKConfig+0x4b4>)
34183278:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3418327c:	4293      	cmp	r3, r2
3418327e:	d004      	beq.n	3418328a <HAL_RCCEx_PeriphCLKConfig+0x222>
34183280:	f44f 7192 	mov.w	r1, #292	@ 0x124
34183284:	48a3      	ldr	r0, [pc, #652]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34183286:	f7fd ff63 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC3)
3418328a:	f8d4 30ac 	ldr.w	r3, [r4, #172]	@ 0xac
3418328e:	4aa4      	ldr	r2, [pc, #656]	@ (34183520 <HAL_RCCEx_PeriphCLKConfig+0x4b8>)
34183290:	4293      	cmp	r3, r2
34183292:	f041 8713 	bne.w	341850bc <HAL_RCCEx_PeriphCLKConfig+0x2054>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34183296:	69a3      	ldr	r3, [r4, #24]
34183298:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3418329c:	d004      	beq.n	341832a8 <HAL_RCCEx_PeriphCLKConfig+0x240>
3418329e:	f240 1129 	movw	r1, #297	@ 0x129
341832a2:	489c      	ldr	r0, [pc, #624]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
341832a4:	f7fd ff54 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
341832a8:	69e3      	ldr	r3, [r4, #28]
341832aa:	3b01      	subs	r3, #1
341832ac:	2bff      	cmp	r3, #255	@ 0xff
341832ae:	d904      	bls.n	341832ba <HAL_RCCEx_PeriphCLKConfig+0x252>
341832b0:	f44f 7195 	mov.w	r1, #298	@ 0x12a
341832b4:	4897      	ldr	r0, [pc, #604]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
341832b6:	f7fd ff4b 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
341832ba:	4a97      	ldr	r2, [pc, #604]	@ (34183518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
341832bc:	69e1      	ldr	r1, [r4, #28]
341832be:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
341832c2:	69a0      	ldr	r0, [r4, #24]
341832c4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341832c8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341832cc:	3901      	subs	r1, #1
341832ce:	4303      	orrs	r3, r0
341832d0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341832d4:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
341832d8:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
341832da:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
341832de:	f8d4 00ac 	ldr.w	r0, [r4, #172]	@ 0xac
341832e2:	f7ff fddd 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI2) == RCC_PERIPHCLK_XSPI2)
341832e6:	6863      	ldr	r3, [r4, #4]
341832e8:	0219      	lsls	r1, r3, #8
341832ea:	d539      	bpl.n	34183360 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    assert_param(IS_RCC_XSPI2CLKSOURCE(PeriphClkInit->Xspi2ClockSelection));
341832ec:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
341832f0:	4a8c      	ldr	r2, [pc, #560]	@ (34183524 <HAL_RCCEx_PeriphCLKConfig+0x4bc>)
341832f2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
341832f6:	4293      	cmp	r3, r2
341832f8:	d004      	beq.n	34183304 <HAL_RCCEx_PeriphCLKConfig+0x29c>
341832fa:	f240 1151 	movw	r1, #337	@ 0x151
341832fe:	4885      	ldr	r0, [pc, #532]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34183300:	f7fd ff26 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC3)
34183304:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
34183308:	4a87      	ldr	r2, [pc, #540]	@ (34183528 <HAL_RCCEx_PeriphCLKConfig+0x4c0>)
3418330a:	4293      	cmp	r3, r2
3418330c:	f041 8706 	bne.w	3418511c <HAL_RCCEx_PeriphCLKConfig+0x20b4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
34183310:	69a3      	ldr	r3, [r4, #24]
34183312:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183316:	d004      	beq.n	34183322 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
34183318:	f44f 71ab 	mov.w	r1, #342	@ 0x156
3418331c:	487d      	ldr	r0, [pc, #500]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3418331e:	f7fd ff17 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34183322:	69e3      	ldr	r3, [r4, #28]
34183324:	3b01      	subs	r3, #1
34183326:	2bff      	cmp	r3, #255	@ 0xff
34183328:	d904      	bls.n	34183334 <HAL_RCCEx_PeriphCLKConfig+0x2cc>
3418332a:	f240 1157 	movw	r1, #343	@ 0x157
3418332e:	4879      	ldr	r0, [pc, #484]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34183330:	f7fd ff0e 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34183334:	4a78      	ldr	r2, [pc, #480]	@ (34183518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34183336:	69e1      	ldr	r1, [r4, #28]
34183338:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
3418333c:	69a0      	ldr	r0, [r4, #24]
3418333e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183342:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183346:	3901      	subs	r1, #1
34183348:	4303      	orrs	r3, r0
3418334a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418334e:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34183352:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34183354:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34183358:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
3418335c:	f7ff fda0 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_XSPI3) == RCC_PERIPHCLK_XSPI3)
34183360:	6863      	ldr	r3, [r4, #4]
34183362:	01da      	lsls	r2, r3, #7
34183364:	d539      	bpl.n	341833da <HAL_RCCEx_PeriphCLKConfig+0x372>
    assert_param(IS_RCC_XSPI3CLKSOURCE(PeriphClkInit->Xspi3ClockSelection));
34183366:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
3418336a:	4a70      	ldr	r2, [pc, #448]	@ (3418352c <HAL_RCCEx_PeriphCLKConfig+0x4c4>)
3418336c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34183370:	4293      	cmp	r3, r2
34183372:	d004      	beq.n	3418337e <HAL_RCCEx_PeriphCLKConfig+0x316>
34183374:	f44f 71bf 	mov.w	r1, #382	@ 0x17e
34183378:	4866      	ldr	r0, [pc, #408]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3418337a:	f7fd fee9 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC3)
3418337e:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
34183382:	4a6b      	ldr	r2, [pc, #428]	@ (34183530 <HAL_RCCEx_PeriphCLKConfig+0x4c8>)
34183384:	4293      	cmp	r3, r2
34183386:	f041 86f9 	bne.w	3418517c <HAL_RCCEx_PeriphCLKConfig+0x2114>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
3418338a:	69a3      	ldr	r3, [r4, #24]
3418338c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183390:	d004      	beq.n	3418339c <HAL_RCCEx_PeriphCLKConfig+0x334>
34183392:	f240 1183 	movw	r1, #387	@ 0x183
34183396:	485f      	ldr	r0, [pc, #380]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34183398:	f7fd feda 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
3418339c:	69e3      	ldr	r3, [r4, #28]
3418339e:	3b01      	subs	r3, #1
341833a0:	2bff      	cmp	r3, #255	@ 0xff
341833a2:	d904      	bls.n	341833ae <HAL_RCCEx_PeriphCLKConfig+0x346>
341833a4:	f44f 71c2 	mov.w	r1, #388	@ 0x184
341833a8:	485a      	ldr	r0, [pc, #360]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
341833aa:	f7fd fed1 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
341833ae:	4a5a      	ldr	r2, [pc, #360]	@ (34183518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
341833b0:	69e1      	ldr	r1, [r4, #28]
341833b2:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
341833b6:	69a0      	ldr	r0, [r4, #24]
341833b8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341833bc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341833c0:	3901      	subs	r1, #1
341833c2:	4303      	orrs	r3, r0
341833c4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341833c8:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
341833cc:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
341833ce:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
341833d2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	@ 0xb4
341833d6:	f7ff fd63 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
341833da:	6823      	ldr	r3, [r4, #0]
341833dc:	051b      	lsls	r3, r3, #20
341833de:	d53c      	bpl.n	3418345a <HAL_RCCEx_PeriphCLKConfig+0x3f2>
    assert_param(IS_RCC_FMCCLKSOURCE(PeriphClkInit->FmcClockSelection));
341833e0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
341833e4:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
341833e8:	d004      	beq.n	341833f4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
341833ea:	f240 11ab 	movw	r1, #427	@ 0x1ab
341833ee:	4849      	ldr	r0, [pc, #292]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
341833f0:	f7fd feae 	bl	34181150 <assert_failed>
    if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC3)
341833f4:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
341833f8:	2b20      	cmp	r3, #32
341833fa:	f041 86ff 	bne.w	341851fc <HAL_RCCEx_PeriphCLKConfig+0x2194>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC3].ClockSelection));
341833fe:	69a3      	ldr	r3, [r4, #24]
34183400:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183404:	d004      	beq.n	34183410 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
34183406:	f44f 71d8 	mov.w	r1, #432	@ 0x1b0
3418340a:	4842      	ldr	r0, [pc, #264]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3418340c:	f7fd fea0 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC3].ClockDivider));
34183410:	69e3      	ldr	r3, [r4, #28]
34183412:	3b01      	subs	r3, #1
34183414:	2bff      	cmp	r3, #255	@ 0xff
34183416:	d904      	bls.n	34183422 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
34183418:	f240 11b1 	movw	r1, #433	@ 0x1b1
3418341c:	483d      	ldr	r0, [pc, #244]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3418341e:	f7fd fe97 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL | RCC_IC3CFGR_IC3INT,
34183422:	4a3d      	ldr	r2, [pc, #244]	@ (34183518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34183424:	69e1      	ldr	r1, [r4, #28]
34183426:	f8d2 30cc 	ldr.w	r3, [r2, #204]	@ 0xcc
3418342a:	69a0      	ldr	r0, [r4, #24]
3418342c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183430:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183434:	3901      	subs	r1, #1
34183436:	4303      	orrs	r3, r0
34183438:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418343c:	f8c2 30cc 	str.w	r3, [r2, #204]	@ 0xcc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC3ENS);
34183440:	2304      	movs	r3, #4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34183442:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FMCSEL, ClkSource);
34183446:	4a34      	ldr	r2, [pc, #208]	@ (34183518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
34183448:	f8d4 10a8 	ldr.w	r1, [r4, #168]	@ 0xa8
3418344c:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
34183450:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
34183454:	430b      	orrs	r3, r1
34183456:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
3418345a:	6823      	ldr	r3, [r4, #0]
3418345c:	005e      	lsls	r6, r3, #1
3418345e:	d539      	bpl.n	341834d4 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
34183460:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
34183464:	4a33      	ldr	r2, [pc, #204]	@ (34183534 <HAL_RCCEx_PeriphCLKConfig+0x4cc>)
34183466:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
3418346a:	4293      	cmp	r3, r2
3418346c:	d004      	beq.n	34183478 <HAL_RCCEx_PeriphCLKConfig+0x410>
3418346e:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
34183472:	4828      	ldr	r0, [pc, #160]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34183474:	f7fd fe6c 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC4)
34183478:	f8d4 312c 	ldr.w	r3, [r4, #300]	@ 0x12c
3418347c:	4a2e      	ldr	r2, [pc, #184]	@ (34183538 <HAL_RCCEx_PeriphCLKConfig+0x4d0>)
3418347e:	4293      	cmp	r3, r2
34183480:	f041 86ea 	bne.w	34185258 <HAL_RCCEx_PeriphCLKConfig+0x21f0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34183484:	6a23      	ldr	r3, [r4, #32]
34183486:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3418348a:	d004      	beq.n	34183496 <HAL_RCCEx_PeriphCLKConfig+0x42e>
3418348c:	f240 11dd 	movw	r1, #477	@ 0x1dd
34183490:	4820      	ldr	r0, [pc, #128]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
34183492:	f7fd fe5d 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34183496:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34183498:	3b01      	subs	r3, #1
3418349a:	2bff      	cmp	r3, #255	@ 0xff
3418349c:	d904      	bls.n	341834a8 <HAL_RCCEx_PeriphCLKConfig+0x440>
3418349e:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
341834a2:	481c      	ldr	r0, [pc, #112]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
341834a4:	f7fd fe54 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341834a8:	4a1b      	ldr	r2, [pc, #108]	@ (34183518 <HAL_RCCEx_PeriphCLKConfig+0x4b0>)
341834aa:	6a61      	ldr	r1, [r4, #36]	@ 0x24
341834ac:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
341834b0:	6a20      	ldr	r0, [r4, #32]
341834b2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341834b6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341834ba:	3901      	subs	r1, #1
341834bc:	4303      	orrs	r3, r0
341834be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341834c2:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
341834c6:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
341834c8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
341834cc:	f8d4 012c 	ldr.w	r0, [r4, #300]	@ 0x12c
341834d0:	f7ff fce6 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
341834d4:	6823      	ldr	r3, [r4, #0]
341834d6:	2b00      	cmp	r3, #0
341834d8:	da53      	bge.n	34183582 <HAL_RCCEx_PeriphCLKConfig+0x51a>
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));
341834da:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
341834de:	4a17      	ldr	r2, [pc, #92]	@ (3418353c <HAL_RCCEx_PeriphCLKConfig+0x4d4>)
341834e0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
341834e4:	4293      	cmp	r3, r2
341834e6:	d004      	beq.n	341834f2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
341834e8:	f240 2105 	movw	r1, #517	@ 0x205
341834ec:	4809      	ldr	r0, [pc, #36]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
341834ee:	f7fd fe2f 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC4)
341834f2:	f8d4 3130 	ldr.w	r3, [r4, #304]	@ 0x130
341834f6:	4a12      	ldr	r2, [pc, #72]	@ (34183540 <HAL_RCCEx_PeriphCLKConfig+0x4d8>)
341834f8:	4293      	cmp	r3, r2
341834fa:	f041 86dd 	bne.w	341852b8 <HAL_RCCEx_PeriphCLKConfig+0x2250>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
341834fe:	6a23      	ldr	r3, [r4, #32]
34183500:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183504:	d01e      	beq.n	34183544 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
34183506:	f240 210a 	movw	r1, #522	@ 0x20a
3418350a:	4802      	ldr	r0, [pc, #8]	@ (34183514 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
3418350c:	f7fd fe20 	bl	34181150 <assert_failed>
34183510:	e018      	b.n	34183544 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
34183512:	bf00      	nop
34183514:	3418cf4f 	.word	0x3418cf4f
34183518:	56028000 	.word	0x56028000
3418351c:	03000014 	.word	0x03000014
34183520:	03020014 	.word	0x03020014
34183524:	03000414 	.word	0x03000414
34183528:	03020414 	.word	0x03020414
3418352c:	03000814 	.word	0x03000814
34183530:	03020814 	.word	0x03020814
34183534:	0300001c 	.word	0x0300001c
34183538:	0302001c 	.word	0x0302001c
3418353c:	0300041c 	.word	0x0300041c
34183540:	0302041c 	.word	0x0302041c
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34183544:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34183546:	3b01      	subs	r3, #1
34183548:	2bff      	cmp	r3, #255	@ 0xff
3418354a:	d904      	bls.n	34183556 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
3418354c:	f240 210b 	movw	r1, #523	@ 0x20b
34183550:	48c4      	ldr	r0, [pc, #784]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34183552:	f7fd fdfd 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34183556:	4ac4      	ldr	r2, [pc, #784]	@ (34183868 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34183558:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3418355a:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3418355e:	6a20      	ldr	r0, [r4, #32]
34183560:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183564:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183568:	3901      	subs	r1, #1
3418356a:	4303      	orrs	r3, r0
3418356c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183570:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34183574:	2308      	movs	r3, #8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34183576:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3418357a:	f8d4 0130 	ldr.w	r0, [r4, #304]	@ 0x130
3418357e:	f7ff fc8f 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
34183582:	6823      	ldr	r3, [r4, #0]
34183584:	07d8      	lsls	r0, r3, #31
34183586:	d54f      	bpl.n	34183628 <HAL_RCCEx_PeriphCLKConfig+0x5c0>
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));
34183588:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
3418358c:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
34183590:	d006      	beq.n	341835a0 <HAL_RCCEx_PeriphCLKConfig+0x538>
34183592:	2b40      	cmp	r3, #64	@ 0x40
34183594:	d004      	beq.n	341835a0 <HAL_RCCEx_PeriphCLKConfig+0x538>
34183596:	f240 2132 	movw	r1, #562	@ 0x232
3418359a:	48b2      	ldr	r0, [pc, #712]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
3418359c:	f7fd fdd8 	bl	34181150 <assert_failed>
    assert_param(IS_RCC_ADCDIVIDER(PeriphClkInit->AdcDivider));
341835a0:	f8d4 30c0 	ldr.w	r3, [r4, #192]	@ 0xc0
341835a4:	3b01      	subs	r3, #1
341835a6:	2bff      	cmp	r3, #255	@ 0xff
341835a8:	d904      	bls.n	341835b4 <HAL_RCCEx_PeriphCLKConfig+0x54c>
341835aa:	f240 2133 	movw	r1, #563	@ 0x233
341835ae:	48ad      	ldr	r0, [pc, #692]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
341835b0:	f7fd fdce 	bl	34181150 <assert_failed>
    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC7)
341835b4:	f8d4 30bc 	ldr.w	r3, [r4, #188]	@ 0xbc
341835b8:	2b20      	cmp	r3, #32
341835ba:	f041 86ad 	bne.w	34185318 <HAL_RCCEx_PeriphCLKConfig+0x22b0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
341835be:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
341835c0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341835c4:	d004      	beq.n	341835d0 <HAL_RCCEx_PeriphCLKConfig+0x568>
341835c6:	f44f 710e 	mov.w	r1, #568	@ 0x238
341835ca:	48a6      	ldr	r0, [pc, #664]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
341835cc:	f7fd fdc0 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
341835d0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
341835d2:	3b01      	subs	r3, #1
341835d4:	2bff      	cmp	r3, #255	@ 0xff
341835d6:	d904      	bls.n	341835e2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
341835d8:	f240 2139 	movw	r1, #569	@ 0x239
341835dc:	48a1      	ldr	r0, [pc, #644]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
341835de:	f7fd fdb7 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341835e2:	4aa1      	ldr	r2, [pc, #644]	@ (34183868 <HAL_RCCEx_PeriphCLKConfig+0x800>)
341835e4:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
341835e6:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
341835ea:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
341835ec:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341835f0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341835f4:	3901      	subs	r1, #1
341835f6:	4303      	orrs	r3, r0
341835f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341835fc:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34183600:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34183602:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR1, (RCC_CCIPR1_ADCPRE | RCC_CCIPR1_ADC12SEL), \
34183606:	4998      	ldr	r1, [pc, #608]	@ (34183868 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34183608:	f8d4 20c0 	ldr.w	r2, [r4, #192]	@ 0xc0
3418360c:	f8d1 3144 	ldr.w	r3, [r1, #324]	@ 0x144
34183610:	f8d4 00bc 	ldr.w	r0, [r4, #188]	@ 0xbc
34183614:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
34183618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
3418361c:	3a01      	subs	r2, #1
3418361e:	4303      	orrs	r3, r0
34183620:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
34183624:	f8c1 3144 	str.w	r3, [r1, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
34183628:	6823      	ldr	r3, [r4, #0]
3418362a:	0799      	lsls	r1, r3, #30
3418362c:	d53b      	bpl.n	341836a6 <HAL_RCCEx_PeriphCLKConfig+0x63e>
    assert_param(IS_RCC_ADF1CLKSOURCE(PeriphClkInit->Adf1ClockSelection));
3418362e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
34183632:	2b07      	cmp	r3, #7
34183634:	d904      	bls.n	34183640 <HAL_RCCEx_PeriphCLKConfig+0x5d8>
34183636:	f240 2161 	movw	r1, #609	@ 0x261
3418363a:	488a      	ldr	r0, [pc, #552]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
3418363c:	f7fd fd88 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC7)
34183640:	f8d4 30c4 	ldr.w	r3, [r4, #196]	@ 0xc4
34183644:	2b02      	cmp	r3, #2
34183646:	f041 8695 	bne.w	34185374 <HAL_RCCEx_PeriphCLKConfig+0x230c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
3418364a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3418364c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183650:	d004      	beq.n	3418365c <HAL_RCCEx_PeriphCLKConfig+0x5f4>
34183652:	f240 2166 	movw	r1, #614	@ 0x266
34183656:	4883      	ldr	r0, [pc, #524]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34183658:	f7fd fd7a 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
3418365c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3418365e:	3b01      	subs	r3, #1
34183660:	2bff      	cmp	r3, #255	@ 0xff
34183662:	d904      	bls.n	3418366e <HAL_RCCEx_PeriphCLKConfig+0x606>
34183664:	f240 2167 	movw	r1, #615	@ 0x267
34183668:	487e      	ldr	r0, [pc, #504]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
3418366a:	f7fd fd71 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418366e:	4a7e      	ldr	r2, [pc, #504]	@ (34183868 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34183670:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34183672:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34183676:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34183678:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418367c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183680:	3901      	subs	r1, #1
34183682:	4303      	orrs	r3, r0
34183684:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183688:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
3418368c:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3418368e:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL, ClkSource);
34183692:	4a75      	ldr	r2, [pc, #468]	@ (34183868 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34183694:	f8d4 10c4 	ldr.w	r1, [r4, #196]	@ 0xc4
34183698:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
3418369c:	f023 0307 	bic.w	r3, r3, #7
341836a0:	430b      	orrs	r3, r1
341836a2:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_CSI) == RCC_PERIPHCLK_CSI)
341836a6:	6823      	ldr	r3, [r4, #0]
341836a8:	071a      	lsls	r2, r3, #28
341836aa:	d528      	bpl.n	341836fe <HAL_RCCEx_PeriphCLKConfig+0x696>
    assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC18].ClockSelection));
341836ac:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
341836b0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341836b4:	d004      	beq.n	341836c0 <HAL_RCCEx_PeriphCLKConfig+0x658>
341836b6:	f240 218e 	movw	r1, #654	@ 0x28e
341836ba:	486a      	ldr	r0, [pc, #424]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
341836bc:	f7fd fd48 	bl	34181150 <assert_failed>
    assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC18].ClockDivider));
341836c0:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
341836c4:	3b01      	subs	r3, #1
341836c6:	2bff      	cmp	r3, #255	@ 0xff
341836c8:	d904      	bls.n	341836d4 <HAL_RCCEx_PeriphCLKConfig+0x66c>
341836ca:	f240 218f 	movw	r1, #655	@ 0x28f
341836ce:	4865      	ldr	r0, [pc, #404]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
341836d0:	f7fd fd3e 	bl	34181150 <assert_failed>
    MODIFY_REG(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL | RCC_IC18CFGR_IC18INT,
341836d4:	4a64      	ldr	r2, [pc, #400]	@ (34183868 <HAL_RCCEx_PeriphCLKConfig+0x800>)
341836d6:	f8d4 1094 	ldr.w	r1, [r4, #148]	@ 0x94
341836da:	f8d2 3108 	ldr.w	r3, [r2, #264]	@ 0x108
341836de:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
341836e2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341836e6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341836ea:	3901      	subs	r1, #1
341836ec:	4303      	orrs	r3, r0
341836ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341836f2:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC18ENS);
341836f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
341836fa:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_DCMIPP) == RCC_PERIPHCLK_DCMIPP)
341836fe:	6823      	ldr	r3, [r4, #0]
34183700:	06db      	lsls	r3, r3, #27
34183702:	d542      	bpl.n	3418378a <HAL_RCCEx_PeriphCLKConfig+0x722>
    assert_param(IS_RCC_DCMIPPCLKSOURCE(PeriphClkInit->DcmippClockSelection));
34183704:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
34183708:	f433 1340 	bics.w	r3, r3, #3145728	@ 0x300000
3418370c:	d004      	beq.n	34183718 <HAL_RCCEx_PeriphCLKConfig+0x6b0>
3418370e:	f240 219d 	movw	r1, #669	@ 0x29d
34183712:	4854      	ldr	r0, [pc, #336]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34183714:	f7fd fd1c 	bl	34181150 <assert_failed>
    if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_IC17)
34183718:	f8d4 30c8 	ldr.w	r3, [r4, #200]	@ 0xc8
3418371c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34183720:	f041 8656 	bne.w	341853d0 <HAL_RCCEx_PeriphCLKConfig+0x2368>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC17].ClockSelection));
34183724:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34183728:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3418372c:	d004      	beq.n	34183738 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
3418372e:	f240 21a2 	movw	r1, #674	@ 0x2a2
34183732:	484c      	ldr	r0, [pc, #304]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34183734:	f7fd fd0c 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC17].ClockDivider));
34183738:	f8d4 308c 	ldr.w	r3, [r4, #140]	@ 0x8c
3418373c:	3b01      	subs	r3, #1
3418373e:	2bff      	cmp	r3, #255	@ 0xff
34183740:	d904      	bls.n	3418374c <HAL_RCCEx_PeriphCLKConfig+0x6e4>
34183742:	f240 21a3 	movw	r1, #675	@ 0x2a3
34183746:	4847      	ldr	r0, [pc, #284]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34183748:	f7fd fd02 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL | RCC_IC17CFGR_IC17INT,
3418374c:	4a46      	ldr	r2, [pc, #280]	@ (34183868 <HAL_RCCEx_PeriphCLKConfig+0x800>)
3418374e:	f8d4 108c 	ldr.w	r1, [r4, #140]	@ 0x8c
34183752:	f8d2 3104 	ldr.w	r3, [r2, #260]	@ 0x104
34183756:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
3418375a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418375e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183762:	3901      	subs	r1, #1
34183764:	4303      	orrs	r3, r0
34183766:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418376a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC17ENS);
3418376e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
34183772:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL, ClkSource);
34183776:	4a3c      	ldr	r2, [pc, #240]	@ (34183868 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34183778:	f8d4 10c8 	ldr.w	r1, [r4, #200]	@ 0xc8
3418377c:	f8d2 3144 	ldr.w	r3, [r2, #324]	@ 0x144
34183780:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
34183784:	430b      	orrs	r3, r1
34183786:	f8c2 3144 	str.w	r3, [r2, #324]	@ 0x144
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1) == RCC_PERIPHCLK_ETH1)
3418378a:	6823      	ldr	r3, [r4, #0]
3418378c:	069e      	lsls	r6, r3, #26
3418378e:	d53e      	bpl.n	3418380e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    assert_param(IS_RCC_ETH1CLKSOURCE(PeriphClkInit->Eth1ClockSelection));
34183790:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
34183794:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34183798:	d004      	beq.n	341837a4 <HAL_RCCEx_PeriphCLKConfig+0x73c>
3418379a:	f240 21bd 	movw	r1, #701	@ 0x2bd
3418379e:	4831      	ldr	r0, [pc, #196]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
341837a0:	f7fd fcd6 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_IC12)
341837a4:	f8d4 30cc 	ldr.w	r3, [r4, #204]	@ 0xcc
341837a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
341837ac:	f041 8619 	bne.w	341853e2 <HAL_RCCEx_PeriphCLKConfig+0x237a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC12].ClockSelection));
341837b0:	6e23      	ldr	r3, [r4, #96]	@ 0x60
341837b2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341837b6:	d004      	beq.n	341837c2 <HAL_RCCEx_PeriphCLKConfig+0x75a>
341837b8:	f240 21c2 	movw	r1, #706	@ 0x2c2
341837bc:	4829      	ldr	r0, [pc, #164]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
341837be:	f7fd fcc7 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC12].ClockDivider));
341837c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
341837c4:	3b01      	subs	r3, #1
341837c6:	2bff      	cmp	r3, #255	@ 0xff
341837c8:	d904      	bls.n	341837d4 <HAL_RCCEx_PeriphCLKConfig+0x76c>
341837ca:	f240 21c3 	movw	r1, #707	@ 0x2c3
341837ce:	4825      	ldr	r0, [pc, #148]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
341837d0:	f7fd fcbe 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL | RCC_IC12CFGR_IC12INT,
341837d4:	4a24      	ldr	r2, [pc, #144]	@ (34183868 <HAL_RCCEx_PeriphCLKConfig+0x800>)
341837d6:	6e61      	ldr	r1, [r4, #100]	@ 0x64
341837d8:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
341837dc:	6e20      	ldr	r0, [r4, #96]	@ 0x60
341837de:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341837e2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341837e6:	3901      	subs	r1, #1
341837e8:	4303      	orrs	r3, r0
341837ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341837ee:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC12ENS);
341837f2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
341837f6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL, ClkSource);
341837fa:	4a1b      	ldr	r2, [pc, #108]	@ (34183868 <HAL_RCCEx_PeriphCLKConfig+0x800>)
341837fc:	f8d4 10cc 	ldr.w	r1, [r4, #204]	@ 0xcc
34183800:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34183804:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
34183808:	430b      	orrs	r3, r1
3418380a:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PHY) == RCC_PERIPHCLK_ETH1PHY)
3418380e:	6823      	ldr	r3, [r4, #0]
34183810:	0658      	lsls	r0, r3, #25
34183812:	d516      	bpl.n	34183842 <HAL_RCCEx_PeriphCLKConfig+0x7da>
    assert_param(IS_RCC_ETH1PHYIF(PeriphClkInit->Eth1PhyInterfaceSelection));
34183814:	f8d4 30d0 	ldr.w	r3, [r4, #208]	@ 0xd0
34183818:	f433 3280 	bics.w	r2, r3, #65536	@ 0x10000
3418381c:	d007      	beq.n	3418382e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
3418381e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34183822:	d004      	beq.n	3418382e <HAL_RCCEx_PeriphCLKConfig+0x7c6>
34183824:	f240 21dd 	movw	r1, #733	@ 0x2dd
34183828:	480e      	ldr	r0, [pc, #56]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
3418382a:	f7fd fc91 	bl	34181150 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1SEL, Interface);
3418382e:	4a0e      	ldr	r2, [pc, #56]	@ (34183868 <HAL_RCCEx_PeriphCLKConfig+0x800>)
34183830:	f8d4 10d0 	ldr.w	r1, [r4, #208]	@ 0xd0
34183834:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34183838:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
3418383c:	430b      	orrs	r3, r1
3418383e:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1RX) == RCC_PERIPHCLK_ETH1RX)
34183842:	6823      	ldr	r3, [r4, #0]
34183844:	0619      	lsls	r1, r3, #24
34183846:	d518      	bpl.n	3418387a <HAL_RCCEx_PeriphCLKConfig+0x812>
    assert_param(IS_RCC_ETH1RXCLKSOURCE(PeriphClkInit->Eth1RxClockSelection));
34183848:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
3418384c:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
34183850:	d004      	beq.n	3418385c <HAL_RCCEx_PeriphCLKConfig+0x7f4>
34183852:	f240 21e7 	movw	r1, #743	@ 0x2e7
34183856:	4803      	ldr	r0, [pc, #12]	@ (34183864 <HAL_RCCEx_PeriphCLKConfig+0x7fc>)
34183858:	f7fd fc7a 	bl	34181150 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1REFCLKSEL, ClkSource);
3418385c:	4a02      	ldr	r2, [pc, #8]	@ (34183868 <HAL_RCCEx_PeriphCLKConfig+0x800>)
3418385e:	f8d4 10d4 	ldr.w	r1, [r4, #212]	@ 0xd4
34183862:	e003      	b.n	3418386c <HAL_RCCEx_PeriphCLKConfig+0x804>
34183864:	3418cf4f 	.word	0x3418cf4f
34183868:	56028000 	.word	0x56028000
3418386c:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
34183870:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
34183874:	430b      	orrs	r3, r1
34183876:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1TX) == RCC_PERIPHCLK_ETH1TX)
3418387a:	6823      	ldr	r3, [r4, #0]
3418387c:	05da      	lsls	r2, r3, #23
3418387e:	d513      	bpl.n	341838a8 <HAL_RCCEx_PeriphCLKConfig+0x840>
    assert_param(IS_RCC_ETH1TXCLKSOURCE(PeriphClkInit->Eth1TxClockSelection));
34183880:	f8d4 30d8 	ldr.w	r3, [r4, #216]	@ 0xd8
34183884:	f033 7380 	bics.w	r3, r3, #16777216	@ 0x1000000
34183888:	d004      	beq.n	34183894 <HAL_RCCEx_PeriphCLKConfig+0x82c>
3418388a:	f240 21f1 	movw	r1, #753	@ 0x2f1
3418388e:	48c1      	ldr	r0, [pc, #772]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34183890:	f7fd fc5e 	bl	34181150 <assert_failed>
  MODIFY_REG(RCC->CCIPR2, RCC_CCIPR2_ETH1GTXCLKSEL, ClkSource);
34183894:	4ac0      	ldr	r2, [pc, #768]	@ (34183b98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34183896:	f8d4 10d8 	ldr.w	r1, [r4, #216]	@ 0xd8
3418389a:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
3418389e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
341838a2:	430b      	orrs	r3, r1
341838a4:	f8c2 3148 	str.w	r3, [r2, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_ETH1PTP) == RCC_PERIPHCLK_ETH1PTP)
341838a8:	6823      	ldr	r3, [r4, #0]
341838aa:	059b      	lsls	r3, r3, #22
341838ac:	d54b      	bpl.n	34183946 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    assert_param(IS_RCC_ETH1PTPCLKSOURCE(PeriphClkInit->Eth1PtpClockSelection));
341838ae:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
341838b2:	2b03      	cmp	r3, #3
341838b4:	d904      	bls.n	341838c0 <HAL_RCCEx_PeriphCLKConfig+0x858>
341838b6:	f240 21fb 	movw	r1, #763	@ 0x2fb
341838ba:	48b6      	ldr	r0, [pc, #728]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
341838bc:	f7fd fc48 	bl	34181150 <assert_failed>
    assert_param(IS_RCC_ETH1PTPDIVIDER(PeriphClkInit->Eth1PtpDivider));
341838c0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
341838c4:	3b01      	subs	r3, #1
341838c6:	2b0f      	cmp	r3, #15
341838c8:	d904      	bls.n	341838d4 <HAL_RCCEx_PeriphCLKConfig+0x86c>
341838ca:	f44f 713f 	mov.w	r1, #764	@ 0x2fc
341838ce:	48b1      	ldr	r0, [pc, #708]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
341838d0:	f7fd fc3e 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_IC13)
341838d4:	f8d4 30dc 	ldr.w	r3, [r4, #220]	@ 0xdc
341838d8:	2b02      	cmp	r3, #2
341838da:	f041 858b 	bne.w	341853f4 <HAL_RCCEx_PeriphCLKConfig+0x238c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC13].ClockSelection));
341838de:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
341838e0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341838e4:	d004      	beq.n	341838f0 <HAL_RCCEx_PeriphCLKConfig+0x888>
341838e6:	f240 3101 	movw	r1, #769	@ 0x301
341838ea:	48aa      	ldr	r0, [pc, #680]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
341838ec:	f7fd fc30 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC13].ClockDivider));
341838f0:	6ee3      	ldr	r3, [r4, #108]	@ 0x6c
341838f2:	3b01      	subs	r3, #1
341838f4:	2bff      	cmp	r3, #255	@ 0xff
341838f6:	d904      	bls.n	34183902 <HAL_RCCEx_PeriphCLKConfig+0x89a>
341838f8:	f240 3102 	movw	r1, #770	@ 0x302
341838fc:	48a5      	ldr	r0, [pc, #660]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
341838fe:	f7fd fc27 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL | RCC_IC13CFGR_IC13INT,
34183902:	4aa5      	ldr	r2, [pc, #660]	@ (34183b98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34183904:	6ee1      	ldr	r1, [r4, #108]	@ 0x6c
34183906:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
3418390a:	6ea0      	ldr	r0, [r4, #104]	@ 0x68
3418390c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183910:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183914:	3901      	subs	r1, #1
34183916:	4303      	orrs	r3, r0
34183918:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418391c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC13ENS);
34183920:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
34183924:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    MODIFY_REG(RCC->CCIPR2, (RCC_CCIPR2_ETH1PTPDIV | RCC_CCIPR2_ETH1PTPSEL), \
34183928:	499b      	ldr	r1, [pc, #620]	@ (34183b98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
3418392a:	f8d4 20e0 	ldr.w	r2, [r4, #224]	@ 0xe0
3418392e:	f8d1 3148 	ldr.w	r3, [r1, #328]	@ 0x148
34183932:	f8d4 00dc 	ldr.w	r0, [r4, #220]	@ 0xdc
34183936:	f023 03f3 	bic.w	r3, r3, #243	@ 0xf3
3418393a:	3a01      	subs	r2, #1
3418393c:	4303      	orrs	r3, r0
3418393e:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
34183942:	f8c1 3148 	str.w	r3, [r1, #328]	@ 0x148
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
34183946:	6823      	ldr	r3, [r4, #0]
34183948:	055e      	lsls	r6, r3, #21
3418394a:	d540      	bpl.n	341839ce <HAL_RCCEx_PeriphCLKConfig+0x966>
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
3418394c:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34183950:	2b03      	cmp	r3, #3
34183952:	d904      	bls.n	3418395e <HAL_RCCEx_PeriphCLKConfig+0x8f6>
34183954:	f240 311d 	movw	r1, #797	@ 0x31d
34183958:	488e      	ldr	r0, [pc, #568]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3418395a:	f7fd fbf9 	bl	34181150 <assert_failed>
    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_IC19)
3418395e:	f8d4 30e4 	ldr.w	r3, [r4, #228]	@ 0xe4
34183962:	2b02      	cmp	r3, #2
34183964:	f041 854e 	bne.w	34185404 <HAL_RCCEx_PeriphCLKConfig+0x239c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34183968:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
3418396c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183970:	d004      	beq.n	3418397c <HAL_RCCEx_PeriphCLKConfig+0x914>
34183972:	f240 3122 	movw	r1, #802	@ 0x322
34183976:	4887      	ldr	r0, [pc, #540]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34183978:	f7fd fbea 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3418397c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34183980:	3b01      	subs	r3, #1
34183982:	2bff      	cmp	r3, #255	@ 0xff
34183984:	d904      	bls.n	34183990 <HAL_RCCEx_PeriphCLKConfig+0x928>
34183986:	f240 3123 	movw	r1, #803	@ 0x323
3418398a:	4882      	ldr	r0, [pc, #520]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
3418398c:	f7fd fbe0 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34183990:	4a81      	ldr	r2, [pc, #516]	@ (34183b98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34183992:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34183996:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
3418399a:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
3418399e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341839a2:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341839a6:	3901      	subs	r1, #1
341839a8:	4303      	orrs	r3, r0
341839aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341839ae:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
341839b2:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
341839b6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL, ClkSource);
341839ba:	4a77      	ldr	r2, [pc, #476]	@ (34183b98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
341839bc:	f8d4 10e4 	ldr.w	r1, [r4, #228]	@ 0xe4
341839c0:	f8d2 314c 	ldr.w	r3, [r2, #332]	@ 0x14c
341839c4:	f023 0303 	bic.w	r3, r3, #3
341839c8:	430b      	orrs	r3, r1
341839ca:	f8c2 314c 	str.w	r3, [r2, #332]	@ 0x14c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
341839ce:	6823      	ldr	r3, [r4, #0]
341839d0:	04d8      	lsls	r0, r3, #19
341839d2:	d540      	bpl.n	34183a56 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
341839d4:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
341839d8:	4a70      	ldr	r2, [pc, #448]	@ (34183b9c <HAL_RCCEx_PeriphCLKConfig+0xb34>)
341839da:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
341839de:	4291      	cmp	r1, r2
341839e0:	d00a      	beq.n	341839f8 <HAL_RCCEx_PeriphCLKConfig+0x990>
341839e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
341839e6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
341839ea:	4293      	cmp	r3, r2
341839ec:	d004      	beq.n	341839f8 <HAL_RCCEx_PeriphCLKConfig+0x990>
341839ee:	f240 313d 	movw	r1, #829	@ 0x33d
341839f2:	4868      	ldr	r0, [pc, #416]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
341839f4:	f7fd fbac 	bl	34181150 <assert_failed>
    if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC10)
341839f8:	f8d4 30e8 	ldr.w	r3, [r4, #232]	@ 0xe8
341839fc:	4a68      	ldr	r2, [pc, #416]	@ (34183ba0 <HAL_RCCEx_PeriphCLKConfig+0xb38>)
341839fe:	4293      	cmp	r3, r2
34183a00:	f041 8508 	bne.w	34185414 <HAL_RCCEx_PeriphCLKConfig+0x23ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34183a04:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34183a06:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183a0a:	d004      	beq.n	34183a16 <HAL_RCCEx_PeriphCLKConfig+0x9ae>
34183a0c:	f240 3142 	movw	r1, #834	@ 0x342
34183a10:	4860      	ldr	r0, [pc, #384]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34183a12:	f7fd fb9d 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34183a16:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34183a18:	3b01      	subs	r3, #1
34183a1a:	2bff      	cmp	r3, #255	@ 0xff
34183a1c:	d904      	bls.n	34183a28 <HAL_RCCEx_PeriphCLKConfig+0x9c0>
34183a1e:	f240 3143 	movw	r1, #835	@ 0x343
34183a22:	485c      	ldr	r0, [pc, #368]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34183a24:	f7fd fb94 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34183a28:	4a5b      	ldr	r2, [pc, #364]	@ (34183b98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34183a2a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34183a2c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34183a30:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34183a32:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183a36:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183a3a:	3901      	subs	r1, #1
34183a3c:	4303      	orrs	r3, r0
34183a3e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183a42:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34183a46:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34183a4a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34183a4e:	f8d4 00e8 	ldr.w	r0, [r4, #232]	@ 0xe8
34183a52:	f7ff fa25 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
34183a56:	6823      	ldr	r3, [r4, #0]
34183a58:	0499      	lsls	r1, r3, #18
34183a5a:	d540      	bpl.n	34183ade <HAL_RCCEx_PeriphCLKConfig+0xa76>
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
34183a5c:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34183a60:	4a50      	ldr	r2, [pc, #320]	@ (34183ba4 <HAL_RCCEx_PeriphCLKConfig+0xb3c>)
34183a62:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34183a66:	4291      	cmp	r1, r2
34183a68:	d00a      	beq.n	34183a80 <HAL_RCCEx_PeriphCLKConfig+0xa18>
34183a6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183a6e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34183a72:	4293      	cmp	r3, r2
34183a74:	d004      	beq.n	34183a80 <HAL_RCCEx_PeriphCLKConfig+0xa18>
34183a76:	f240 316a 	movw	r1, #874	@ 0x36a
34183a7a:	4846      	ldr	r0, [pc, #280]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34183a7c:	f7fd fb68 	bl	34181150 <assert_failed>
    if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC10)
34183a80:	f8d4 30ec 	ldr.w	r3, [r4, #236]	@ 0xec
34183a84:	4a48      	ldr	r2, [pc, #288]	@ (34183ba8 <HAL_RCCEx_PeriphCLKConfig+0xb40>)
34183a86:	4293      	cmp	r3, r2
34183a88:	f041 84f5 	bne.w	34185476 <HAL_RCCEx_PeriphCLKConfig+0x240e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34183a8c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34183a8e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183a92:	d004      	beq.n	34183a9e <HAL_RCCEx_PeriphCLKConfig+0xa36>
34183a94:	f240 316f 	movw	r1, #879	@ 0x36f
34183a98:	483e      	ldr	r0, [pc, #248]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34183a9a:	f7fd fb59 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34183a9e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34183aa0:	3b01      	subs	r3, #1
34183aa2:	2bff      	cmp	r3, #255	@ 0xff
34183aa4:	d904      	bls.n	34183ab0 <HAL_RCCEx_PeriphCLKConfig+0xa48>
34183aa6:	f44f 715c 	mov.w	r1, #880	@ 0x370
34183aaa:	483a      	ldr	r0, [pc, #232]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34183aac:	f7fd fb50 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34183ab0:	4a39      	ldr	r2, [pc, #228]	@ (34183b98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34183ab2:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34183ab4:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34183ab8:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34183aba:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183abe:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183ac2:	3901      	subs	r1, #1
34183ac4:	4303      	orrs	r3, r0
34183ac6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183aca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34183ace:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34183ad2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34183ad6:	f8d4 00ec 	ldr.w	r0, [r4, #236]	@ 0xec
34183ada:	f7ff f9e1 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
34183ade:	6823      	ldr	r3, [r4, #0]
34183ae0:	045a      	lsls	r2, r3, #17
34183ae2:	d540      	bpl.n	34183b66 <HAL_RCCEx_PeriphCLKConfig+0xafe>
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
34183ae4:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34183ae8:	4a30      	ldr	r2, [pc, #192]	@ (34183bac <HAL_RCCEx_PeriphCLKConfig+0xb44>)
34183aea:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34183aee:	4291      	cmp	r1, r2
34183af0:	d00a      	beq.n	34183b08 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34183af2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183af6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34183afa:	4293      	cmp	r3, r2
34183afc:	d004      	beq.n	34183b08 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
34183afe:	f240 3197 	movw	r1, #919	@ 0x397
34183b02:	4824      	ldr	r0, [pc, #144]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34183b04:	f7fd fb24 	bl	34181150 <assert_failed>
    if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC10)
34183b08:	f8d4 30f0 	ldr.w	r3, [r4, #240]	@ 0xf0
34183b0c:	4a28      	ldr	r2, [pc, #160]	@ (34183bb0 <HAL_RCCEx_PeriphCLKConfig+0xb48>)
34183b0e:	4293      	cmp	r3, r2
34183b10:	f041 84f6 	bne.w	34185500 <HAL_RCCEx_PeriphCLKConfig+0x2498>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34183b14:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34183b16:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183b1a:	d004      	beq.n	34183b26 <HAL_RCCEx_PeriphCLKConfig+0xabe>
34183b1c:	f44f 7167 	mov.w	r1, #924	@ 0x39c
34183b20:	481c      	ldr	r0, [pc, #112]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34183b22:	f7fd fb15 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34183b26:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34183b28:	3b01      	subs	r3, #1
34183b2a:	2bff      	cmp	r3, #255	@ 0xff
34183b2c:	d904      	bls.n	34183b38 <HAL_RCCEx_PeriphCLKConfig+0xad0>
34183b2e:	f240 319d 	movw	r1, #925	@ 0x39d
34183b32:	4818      	ldr	r0, [pc, #96]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34183b34:	f7fd fb0c 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34183b38:	4a17      	ldr	r2, [pc, #92]	@ (34183b98 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
34183b3a:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34183b3c:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34183b40:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34183b42:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183b46:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183b4a:	3901      	subs	r1, #1
34183b4c:	4303      	orrs	r3, r0
34183b4e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183b52:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34183b56:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34183b5a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34183b5e:	f8d4 00f0 	ldr.w	r0, [r4, #240]	@ 0xf0
34183b62:	f7ff f99d 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
34183b66:	6823      	ldr	r3, [r4, #0]
34183b68:	041b      	lsls	r3, r3, #16
34183b6a:	d554      	bpl.n	34183c16 <HAL_RCCEx_PeriphCLKConfig+0xbae>
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));
34183b6c:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34183b70:	4a10      	ldr	r2, [pc, #64]	@ (34183bb4 <HAL_RCCEx_PeriphCLKConfig+0xb4c>)
34183b72:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34183b76:	4291      	cmp	r1, r2
34183b78:	d01e      	beq.n	34183bb8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34183b7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183b7e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34183b82:	4293      	cmp	r3, r2
34183b84:	d018      	beq.n	34183bb8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34183b86:	f44f 7171 	mov.w	r1, #964	@ 0x3c4
34183b8a:	4802      	ldr	r0, [pc, #8]	@ (34183b94 <HAL_RCCEx_PeriphCLKConfig+0xb2c>)
34183b8c:	f7fd fae0 	bl	34181150 <assert_failed>
34183b90:	e012      	b.n	34183bb8 <HAL_RCCEx_PeriphCLKConfig+0xb50>
34183b92:	bf00      	nop
34183b94:	3418cf4f 	.word	0x3418cf4f
34183b98:	56028000 	.word	0x56028000
34183b9c:	0700000c 	.word	0x0700000c
34183ba0:	0702000c 	.word	0x0702000c
34183ba4:	0700040c 	.word	0x0700040c
34183ba8:	0702040c 	.word	0x0702040c
34183bac:	0700080c 	.word	0x0700080c
34183bb0:	0702080c 	.word	0x0702080c
34183bb4:	07000c0c 	.word	0x07000c0c
    if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC10)
34183bb8:	f8d4 30f4 	ldr.w	r3, [r4, #244]	@ 0xf4
34183bbc:	4abd      	ldr	r2, [pc, #756]	@ (34183eb4 <HAL_RCCEx_PeriphCLKConfig+0xe4c>)
34183bbe:	4293      	cmp	r3, r2
34183bc0:	f041 84cf 	bne.w	34185562 <HAL_RCCEx_PeriphCLKConfig+0x24fa>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34183bc4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34183bc6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183bca:	d004      	beq.n	34183bd6 <HAL_RCCEx_PeriphCLKConfig+0xb6e>
34183bcc:	f240 31c9 	movw	r1, #969	@ 0x3c9
34183bd0:	48b9      	ldr	r0, [pc, #740]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183bd2:	f7fd fabd 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34183bd6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34183bd8:	3b01      	subs	r3, #1
34183bda:	2bff      	cmp	r3, #255	@ 0xff
34183bdc:	d904      	bls.n	34183be8 <HAL_RCCEx_PeriphCLKConfig+0xb80>
34183bde:	f240 31ca 	movw	r1, #970	@ 0x3ca
34183be2:	48b5      	ldr	r0, [pc, #724]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183be4:	f7fd fab4 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34183be8:	4ab4      	ldr	r2, [pc, #720]	@ (34183ebc <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34183bea:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34183bec:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34183bf0:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34183bf2:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183bf6:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183bfa:	3901      	subs	r1, #1
34183bfc:	4303      	orrs	r3, r0
34183bfe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183c02:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34183c06:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34183c0a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34183c0e:	f8d4 00f4 	ldr.w	r0, [r4, #244]	@ 0xf4
34183c12:	f7ff f945 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C1) == RCC_PERIPHCLK_I3C1)
34183c16:	6823      	ldr	r3, [r4, #0]
34183c18:	03de      	lsls	r6, r3, #15
34183c1a:	d540      	bpl.n	34183c9e <HAL_RCCEx_PeriphCLKConfig+0xc36>
    assert_param(IS_RCC_I3C1CLKSOURCE(PeriphClkInit->I3c1ClockSelection));
34183c1c:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34183c20:	4aa7      	ldr	r2, [pc, #668]	@ (34183ec0 <HAL_RCCEx_PeriphCLKConfig+0xe58>)
34183c22:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34183c26:	4291      	cmp	r1, r2
34183c28:	d00a      	beq.n	34183c40 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34183c2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183c2e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34183c32:	4293      	cmp	r3, r2
34183c34:	d004      	beq.n	34183c40 <HAL_RCCEx_PeriphCLKConfig+0xbd8>
34183c36:	f240 31f1 	movw	r1, #1009	@ 0x3f1
34183c3a:	489f      	ldr	r0, [pc, #636]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183c3c:	f7fd fa88 	bl	34181150 <assert_failed>
    if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC10)
34183c40:	f8d4 30f8 	ldr.w	r3, [r4, #248]	@ 0xf8
34183c44:	4a9f      	ldr	r2, [pc, #636]	@ (34183ec4 <HAL_RCCEx_PeriphCLKConfig+0xe5c>)
34183c46:	4293      	cmp	r3, r2
34183c48:	f041 84bc 	bne.w	341855c4 <HAL_RCCEx_PeriphCLKConfig+0x255c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34183c4c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34183c4e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183c52:	d004      	beq.n	34183c5e <HAL_RCCEx_PeriphCLKConfig+0xbf6>
34183c54:	f240 31f6 	movw	r1, #1014	@ 0x3f6
34183c58:	4897      	ldr	r0, [pc, #604]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183c5a:	f7fd fa79 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34183c5e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34183c60:	3b01      	subs	r3, #1
34183c62:	2bff      	cmp	r3, #255	@ 0xff
34183c64:	d904      	bls.n	34183c70 <HAL_RCCEx_PeriphCLKConfig+0xc08>
34183c66:	f240 31f7 	movw	r1, #1015	@ 0x3f7
34183c6a:	4893      	ldr	r0, [pc, #588]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183c6c:	f7fd fa70 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34183c70:	4a92      	ldr	r2, [pc, #584]	@ (34183ebc <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34183c72:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34183c74:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34183c78:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34183c7a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183c7e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183c82:	3901      	subs	r1, #1
34183c84:	4303      	orrs	r3, r0
34183c86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183c8a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34183c8e:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34183c92:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34183c96:	f8d4 00f8 	ldr.w	r0, [r4, #248]	@ 0xf8
34183c9a:	f7ff f901 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_I3C2) == RCC_PERIPHCLK_I3C2)
34183c9e:	6823      	ldr	r3, [r4, #0]
34183ca0:	0398      	lsls	r0, r3, #14
34183ca2:	d540      	bpl.n	34183d26 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    assert_param(IS_RCC_I3C2CLKSOURCE(PeriphClkInit->I3c2ClockSelection));
34183ca4:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34183ca8:	4a87      	ldr	r2, [pc, #540]	@ (34183ec8 <HAL_RCCEx_PeriphCLKConfig+0xe60>)
34183caa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34183cae:	4291      	cmp	r1, r2
34183cb0:	d00a      	beq.n	34183cc8 <HAL_RCCEx_PeriphCLKConfig+0xc60>
34183cb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183cb6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34183cba:	4293      	cmp	r3, r2
34183cbc:	d004      	beq.n	34183cc8 <HAL_RCCEx_PeriphCLKConfig+0xc60>
34183cbe:	f240 411e 	movw	r1, #1054	@ 0x41e
34183cc2:	487d      	ldr	r0, [pc, #500]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183cc4:	f7fd fa44 	bl	34181150 <assert_failed>
    if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC10)
34183cc8:	f8d4 30fc 	ldr.w	r3, [r4, #252]	@ 0xfc
34183ccc:	4a7f      	ldr	r2, [pc, #508]	@ (34183ecc <HAL_RCCEx_PeriphCLKConfig+0xe64>)
34183cce:	4293      	cmp	r3, r2
34183cd0:	f041 84a9 	bne.w	34185626 <HAL_RCCEx_PeriphCLKConfig+0x25be>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34183cd4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34183cd6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183cda:	d004      	beq.n	34183ce6 <HAL_RCCEx_PeriphCLKConfig+0xc7e>
34183cdc:	f240 4123 	movw	r1, #1059	@ 0x423
34183ce0:	4875      	ldr	r0, [pc, #468]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183ce2:	f7fd fa35 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34183ce6:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34183ce8:	3b01      	subs	r3, #1
34183cea:	2bff      	cmp	r3, #255	@ 0xff
34183cec:	d904      	bls.n	34183cf8 <HAL_RCCEx_PeriphCLKConfig+0xc90>
34183cee:	f240 4124 	movw	r1, #1060	@ 0x424
34183cf2:	4871      	ldr	r0, [pc, #452]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183cf4:	f7fd fa2c 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34183cf8:	4a70      	ldr	r2, [pc, #448]	@ (34183ebc <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34183cfa:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34183cfc:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34183d00:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34183d02:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183d06:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183d0a:	3901      	subs	r1, #1
34183d0c:	4303      	orrs	r3, r0
34183d0e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183d12:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34183d16:	f44f 7300 	mov.w	r3, #512	@ 0x200
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34183d1a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34183d1e:	f8d4 00fc 	ldr.w	r0, [r4, #252]	@ 0xfc
34183d22:	f7ff f8bd 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
34183d26:	6823      	ldr	r3, [r4, #0]
34183d28:	0359      	lsls	r1, r3, #13
34183d2a:	d540      	bpl.n	34183dae <HAL_RCCEx_PeriphCLKConfig+0xd46>
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
34183d2c:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34183d30:	4a67      	ldr	r2, [pc, #412]	@ (34183ed0 <HAL_RCCEx_PeriphCLKConfig+0xe68>)
34183d32:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34183d36:	4291      	cmp	r1, r2
34183d38:	d00a      	beq.n	34183d50 <HAL_RCCEx_PeriphCLKConfig+0xce8>
34183d3a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183d3e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34183d42:	4293      	cmp	r3, r2
34183d44:	d004      	beq.n	34183d50 <HAL_RCCEx_PeriphCLKConfig+0xce8>
34183d46:	f240 414b 	movw	r1, #1099	@ 0x44b
34183d4a:	485b      	ldr	r0, [pc, #364]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183d4c:	f7fd fa00 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_IC15)
34183d50:	f8d4 3100 	ldr.w	r3, [r4, #256]	@ 0x100
34183d54:	4a5f      	ldr	r2, [pc, #380]	@ (34183ed4 <HAL_RCCEx_PeriphCLKConfig+0xe6c>)
34183d56:	4293      	cmp	r3, r2
34183d58:	f041 8496 	bne.w	34185688 <HAL_RCCEx_PeriphCLKConfig+0x2620>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34183d5c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34183d5e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183d62:	d004      	beq.n	34183d6e <HAL_RCCEx_PeriphCLKConfig+0xd06>
34183d64:	f44f 618a 	mov.w	r1, #1104	@ 0x450
34183d68:	4853      	ldr	r0, [pc, #332]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183d6a:	f7fd f9f1 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34183d6e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34183d70:	3b01      	subs	r3, #1
34183d72:	2bff      	cmp	r3, #255	@ 0xff
34183d74:	d904      	bls.n	34183d80 <HAL_RCCEx_PeriphCLKConfig+0xd18>
34183d76:	f240 4151 	movw	r1, #1105	@ 0x451
34183d7a:	484f      	ldr	r0, [pc, #316]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183d7c:	f7fd f9e8 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34183d80:	4a4e      	ldr	r2, [pc, #312]	@ (34183ebc <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34183d82:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34183d84:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34183d88:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34183d8a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183d8e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183d92:	3901      	subs	r1, #1
34183d94:	4303      	orrs	r3, r0
34183d96:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183d9a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34183d9e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34183da2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34183da6:	f8d4 0100 	ldr.w	r0, [r4, #256]	@ 0x100
34183daa:	f7ff f879 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
34183dae:	6823      	ldr	r3, [r4, #0]
34183db0:	031a      	lsls	r2, r3, #12
34183db2:	d540      	bpl.n	34183e36 <HAL_RCCEx_PeriphCLKConfig+0xdce>
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
34183db4:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34183db8:	4a47      	ldr	r2, [pc, #284]	@ (34183ed8 <HAL_RCCEx_PeriphCLKConfig+0xe70>)
34183dba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34183dbe:	4291      	cmp	r1, r2
34183dc0:	d00a      	beq.n	34183dd8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
34183dc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183dc6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34183dca:	4293      	cmp	r3, r2
34183dcc:	d004      	beq.n	34183dd8 <HAL_RCCEx_PeriphCLKConfig+0xd70>
34183dce:	f240 416b 	movw	r1, #1131	@ 0x46b
34183dd2:	4839      	ldr	r0, [pc, #228]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183dd4:	f7fd f9bc 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_IC15)
34183dd8:	f8d4 3104 	ldr.w	r3, [r4, #260]	@ 0x104
34183ddc:	4a3f      	ldr	r2, [pc, #252]	@ (34183edc <HAL_RCCEx_PeriphCLKConfig+0xe74>)
34183dde:	4293      	cmp	r3, r2
34183de0:	f041 845b 	bne.w	3418569a <HAL_RCCEx_PeriphCLKConfig+0x2632>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34183de4:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34183de6:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183dea:	d004      	beq.n	34183df6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
34183dec:	f44f 618e 	mov.w	r1, #1136	@ 0x470
34183df0:	4831      	ldr	r0, [pc, #196]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183df2:	f7fd f9ad 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34183df6:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34183df8:	3b01      	subs	r3, #1
34183dfa:	2bff      	cmp	r3, #255	@ 0xff
34183dfc:	d904      	bls.n	34183e08 <HAL_RCCEx_PeriphCLKConfig+0xda0>
34183dfe:	f240 4171 	movw	r1, #1137	@ 0x471
34183e02:	482d      	ldr	r0, [pc, #180]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183e04:	f7fd f9a4 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34183e08:	4a2c      	ldr	r2, [pc, #176]	@ (34183ebc <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34183e0a:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34183e0c:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34183e10:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34183e12:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183e16:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183e1a:	3901      	subs	r1, #1
34183e1c:	4303      	orrs	r3, r0
34183e1e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183e22:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34183e26:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34183e2a:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34183e2e:	f8d4 0104 	ldr.w	r0, [r4, #260]	@ 0x104
34183e32:	f7ff f835 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM3) == RCC_PERIPHCLK_LPTIM3)
34183e36:	6823      	ldr	r3, [r4, #0]
34183e38:	02db      	lsls	r3, r3, #11
34183e3a:	d55b      	bpl.n	34183ef4 <HAL_RCCEx_PeriphCLKConfig+0xe8c>
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));
34183e3c:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
34183e40:	4a27      	ldr	r2, [pc, #156]	@ (34183ee0 <HAL_RCCEx_PeriphCLKConfig+0xe78>)
34183e42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34183e46:	4291      	cmp	r1, r2
34183e48:	d00a      	beq.n	34183e60 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
34183e4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183e4e:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34183e52:	4293      	cmp	r3, r2
34183e54:	d004      	beq.n	34183e60 <HAL_RCCEx_PeriphCLKConfig+0xdf8>
34183e56:	f240 418b 	movw	r1, #1163	@ 0x48b
34183e5a:	4817      	ldr	r0, [pc, #92]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183e5c:	f7fd f978 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_IC15)
34183e60:	f8d4 3108 	ldr.w	r3, [r4, #264]	@ 0x108
34183e64:	4a1f      	ldr	r2, [pc, #124]	@ (34183ee4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
34183e66:	4293      	cmp	r3, r2
34183e68:	f041 8420 	bne.w	341856ac <HAL_RCCEx_PeriphCLKConfig+0x2644>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34183e6c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34183e6e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183e72:	d004      	beq.n	34183e7e <HAL_RCCEx_PeriphCLKConfig+0xe16>
34183e74:	f44f 6192 	mov.w	r1, #1168	@ 0x490
34183e78:	480f      	ldr	r0, [pc, #60]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183e7a:	f7fd f969 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34183e7e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34183e80:	3b01      	subs	r3, #1
34183e82:	2bff      	cmp	r3, #255	@ 0xff
34183e84:	d904      	bls.n	34183e90 <HAL_RCCEx_PeriphCLKConfig+0xe28>
34183e86:	f240 4191 	movw	r1, #1169	@ 0x491
34183e8a:	480b      	ldr	r0, [pc, #44]	@ (34183eb8 <HAL_RCCEx_PeriphCLKConfig+0xe50>)
34183e8c:	f7fd f960 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34183e90:	4a0a      	ldr	r2, [pc, #40]	@ (34183ebc <HAL_RCCEx_PeriphCLKConfig+0xe54>)
34183e92:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34183e94:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34183e98:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34183e9a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183e9e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183ea2:	3901      	subs	r1, #1
34183ea4:	4303      	orrs	r3, r0
34183ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183eaa:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34183eae:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34183eb2:	e019      	b.n	34183ee8 <HAL_RCCEx_PeriphCLKConfig+0xe80>
34183eb4:	07020c0c 	.word	0x07020c0c
34183eb8:	3418cf4f 	.word	0x3418cf4f
34183ebc:	56028000 	.word	0x56028000
34183ec0:	0700100c 	.word	0x0700100c
34183ec4:	0702100c 	.word	0x0702100c
34183ec8:	0700140c 	.word	0x0700140c
34183ecc:	0702140c 	.word	0x0702140c
34183ed0:	0700082c 	.word	0x0700082c
34183ed4:	0702082c 	.word	0x0702082c
34183ed8:	07000c2c 	.word	0x07000c2c
34183edc:	07020c2c 	.word	0x07020c2c
34183ee0:	0700102c 	.word	0x0700102c
34183ee4:	0702102c 	.word	0x0702102c
34183ee8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34183eec:	f8d4 0108 	ldr.w	r0, [r4, #264]	@ 0x108
34183ef0:	f7fe ffd6 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM4) == RCC_PERIPHCLK_LPTIM4)
34183ef4:	6823      	ldr	r3, [r4, #0]
34183ef6:	029e      	lsls	r6, r3, #10
34183ef8:	d540      	bpl.n	34183f7c <HAL_RCCEx_PeriphCLKConfig+0xf14>
    assert_param(IS_RCC_LPTIM4CLKSOURCE(PeriphClkInit->Lptim4ClockSelection));
34183efa:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
34183efe:	4ac2      	ldr	r2, [pc, #776]	@ (34184208 <HAL_RCCEx_PeriphCLKConfig+0x11a0>)
34183f00:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34183f04:	4291      	cmp	r1, r2
34183f06:	d00a      	beq.n	34183f1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
34183f08:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183f0c:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34183f10:	4293      	cmp	r3, r2
34183f12:	d004      	beq.n	34183f1e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
34183f14:	f240 41ab 	movw	r1, #1195	@ 0x4ab
34183f18:	48bc      	ldr	r0, [pc, #752]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34183f1a:	f7fd f919 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_IC15)
34183f1e:	f8d4 310c 	ldr.w	r3, [r4, #268]	@ 0x10c
34183f22:	4abb      	ldr	r2, [pc, #748]	@ (34184210 <HAL_RCCEx_PeriphCLKConfig+0x11a8>)
34183f24:	4293      	cmp	r3, r2
34183f26:	f041 83ca 	bne.w	341856be <HAL_RCCEx_PeriphCLKConfig+0x2656>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34183f2a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34183f2c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183f30:	d004      	beq.n	34183f3c <HAL_RCCEx_PeriphCLKConfig+0xed4>
34183f32:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
34183f36:	48b5      	ldr	r0, [pc, #724]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34183f38:	f7fd f90a 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34183f3c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34183f3e:	3b01      	subs	r3, #1
34183f40:	2bff      	cmp	r3, #255	@ 0xff
34183f42:	d904      	bls.n	34183f4e <HAL_RCCEx_PeriphCLKConfig+0xee6>
34183f44:	f240 41b1 	movw	r1, #1201	@ 0x4b1
34183f48:	48b0      	ldr	r0, [pc, #704]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34183f4a:	f7fd f901 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34183f4e:	4ab1      	ldr	r2, [pc, #708]	@ (34184214 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34183f50:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34183f52:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34183f56:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34183f58:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183f5c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183f60:	3901      	subs	r1, #1
34183f62:	4303      	orrs	r3, r0
34183f64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183f68:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34183f6c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34183f70:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34183f74:	f8d4 010c 	ldr.w	r0, [r4, #268]	@ 0x10c
34183f78:	f7fe ff92 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPTIM5) == RCC_PERIPHCLK_LPTIM5)
34183f7c:	6823      	ldr	r3, [r4, #0]
34183f7e:	0258      	lsls	r0, r3, #9
34183f80:	d540      	bpl.n	34184004 <HAL_RCCEx_PeriphCLKConfig+0xf9c>
    assert_param(IS_RCC_LPTIM5CLKSOURCE(PeriphClkInit->Lptim5ClockSelection));
34183f82:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
34183f86:	4aa4      	ldr	r2, [pc, #656]	@ (34184218 <HAL_RCCEx_PeriphCLKConfig+0x11b0>)
34183f88:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34183f8c:	4291      	cmp	r1, r2
34183f8e:	d00a      	beq.n	34183fa6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
34183f90:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34183f94:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34183f98:	4293      	cmp	r3, r2
34183f9a:	d004      	beq.n	34183fa6 <HAL_RCCEx_PeriphCLKConfig+0xf3e>
34183f9c:	f240 41cb 	movw	r1, #1227	@ 0x4cb
34183fa0:	489a      	ldr	r0, [pc, #616]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34183fa2:	f7fd f8d5 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_IC15)
34183fa6:	f8d4 3110 	ldr.w	r3, [r4, #272]	@ 0x110
34183faa:	4a9c      	ldr	r2, [pc, #624]	@ (3418421c <HAL_RCCEx_PeriphCLKConfig+0x11b4>)
34183fac:	4293      	cmp	r3, r2
34183fae:	f041 838f 	bne.w	341856d0 <HAL_RCCEx_PeriphCLKConfig+0x2668>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34183fb2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34183fb4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34183fb8:	d004      	beq.n	34183fc4 <HAL_RCCEx_PeriphCLKConfig+0xf5c>
34183fba:	f44f 619a 	mov.w	r1, #1232	@ 0x4d0
34183fbe:	4893      	ldr	r0, [pc, #588]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34183fc0:	f7fd f8c6 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34183fc4:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34183fc6:	3b01      	subs	r3, #1
34183fc8:	2bff      	cmp	r3, #255	@ 0xff
34183fca:	d904      	bls.n	34183fd6 <HAL_RCCEx_PeriphCLKConfig+0xf6e>
34183fcc:	f240 41d1 	movw	r1, #1233	@ 0x4d1
34183fd0:	488e      	ldr	r0, [pc, #568]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34183fd2:	f7fd f8bd 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34183fd6:	4a8f      	ldr	r2, [pc, #572]	@ (34184214 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34183fd8:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34183fda:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34183fde:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34183fe0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34183fe4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34183fe8:	3901      	subs	r1, #1
34183fea:	4303      	orrs	r3, r0
34183fec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34183ff0:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34183ff4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34183ff8:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34183ffc:	f8d4 0110 	ldr.w	r0, [r4, #272]	@ 0x110
34184000:	f7fe ff4e 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
34184004:	6823      	ldr	r3, [r4, #0]
34184006:	0219      	lsls	r1, r3, #8
34184008:	d546      	bpl.n	34184098 <HAL_RCCEx_PeriphCLKConfig+0x1030>
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
3418400a:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
3418400e:	f433 7240 	bics.w	r2, r3, #768	@ 0x300
34184012:	d00c      	beq.n	3418402e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34184014:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
34184018:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
3418401c:	d007      	beq.n	3418402e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
3418401e:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34184022:	d004      	beq.n	3418402e <HAL_RCCEx_PeriphCLKConfig+0xfc6>
34184024:	f240 41eb 	movw	r1, #1259	@ 0x4eb
34184028:	4878      	ldr	r0, [pc, #480]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3418402a:	f7fd f891 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC9)
3418402e:	f8d4 3114 	ldr.w	r3, [r4, #276]	@ 0x114
34184032:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34184036:	f041 8354 	bne.w	341856e2 <HAL_RCCEx_PeriphCLKConfig+0x267a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3418403a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3418403c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184040:	d004      	beq.n	3418404c <HAL_RCCEx_PeriphCLKConfig+0xfe4>
34184042:	f44f 619e 	mov.w	r1, #1264	@ 0x4f0
34184046:	4871      	ldr	r0, [pc, #452]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34184048:	f7fd f882 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3418404c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3418404e:	3b01      	subs	r3, #1
34184050:	2bff      	cmp	r3, #255	@ 0xff
34184052:	d904      	bls.n	3418405e <HAL_RCCEx_PeriphCLKConfig+0xff6>
34184054:	f240 41f1 	movw	r1, #1265	@ 0x4f1
34184058:	486c      	ldr	r0, [pc, #432]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3418405a:	f7fd f879 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418405e:	4a6d      	ldr	r2, [pc, #436]	@ (34184214 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34184060:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34184062:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34184066:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34184068:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418406c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184070:	3901      	subs	r1, #1
34184072:	4303      	orrs	r3, r0
34184074:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184078:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
3418407c:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34184080:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL, ClkSource);
34184084:	4a63      	ldr	r2, [pc, #396]	@ (34184214 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34184086:	f8d4 1114 	ldr.w	r1, [r4, #276]	@ 0x114
3418408a:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
3418408e:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
34184092:	430b      	orrs	r3, r1
34184094:	f8c2 3178 	str.w	r3, [r2, #376]	@ 0x178
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
34184098:	6823      	ldr	r3, [r4, #0]
3418409a:	01da      	lsls	r2, r3, #7
3418409c:	d542      	bpl.n	34184124 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));
3418409e:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
341840a2:	f033 7340 	bics.w	r3, r3, #50331648	@ 0x3000000
341840a6:	d004      	beq.n	341840b2 <HAL_RCCEx_PeriphCLKConfig+0x104a>
341840a8:	f44f 61a3 	mov.w	r1, #1304	@ 0x518
341840ac:	4857      	ldr	r0, [pc, #348]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
341840ae:	f7fd f84f 	bl	34181150 <assert_failed>
    if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_IC16)
341840b2:	f8d4 3118 	ldr.w	r3, [r4, #280]	@ 0x118
341840b6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
341840ba:	f041 8343 	bne.w	34185744 <HAL_RCCEx_PeriphCLKConfig+0x26dc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC16].ClockSelection));
341840be:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
341840c2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341840c6:	d004      	beq.n	341840d2 <HAL_RCCEx_PeriphCLKConfig+0x106a>
341840c8:	f240 511d 	movw	r1, #1309	@ 0x51d
341840cc:	484f      	ldr	r0, [pc, #316]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
341840ce:	f7fd f83f 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC16].ClockDivider));
341840d2:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
341840d6:	3b01      	subs	r3, #1
341840d8:	2bff      	cmp	r3, #255	@ 0xff
341840da:	d904      	bls.n	341840e6 <HAL_RCCEx_PeriphCLKConfig+0x107e>
341840dc:	f240 511e 	movw	r1, #1310	@ 0x51e
341840e0:	484a      	ldr	r0, [pc, #296]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
341840e2:	f7fd f835 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL | RCC_IC16CFGR_IC16INT,
341840e6:	4a4b      	ldr	r2, [pc, #300]	@ (34184214 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
341840e8:	f8d4 1084 	ldr.w	r1, [r4, #132]	@ 0x84
341840ec:	f8d2 3100 	ldr.w	r3, [r2, #256]	@ 0x100
341840f0:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
341840f4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341840f8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341840fc:	3901      	subs	r1, #1
341840fe:	4303      	orrs	r3, r0
34184100:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184104:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC16ENS);
34184108:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
3418410c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL, ClkSource);
34184110:	4a40      	ldr	r2, [pc, #256]	@ (34184214 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34184112:	f8d4 1118 	ldr.w	r1, [r4, #280]	@ 0x118
34184116:	f8d2 3150 	ldr.w	r3, [r2, #336]	@ 0x150
3418411a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
3418411e:	430b      	orrs	r3, r1
34184120:	f8c2 3150 	str.w	r3, [r2, #336]	@ 0x150
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
34184124:	6823      	ldr	r3, [r4, #0]
34184126:	019b      	lsls	r3, r3, #6
34184128:	d540      	bpl.n	341841ac <HAL_RCCEx_PeriphCLKConfig+0x1144>
    assert_param(IS_RCC_MDF1CLKSOURCE(PeriphClkInit->Mdf1ClockSelection));
3418412a:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
3418412e:	f433 3340 	bics.w	r3, r3, #196608	@ 0x30000
34184132:	d007      	beq.n	34184144 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
34184134:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
34184138:	d004      	beq.n	34184144 <HAL_RCCEx_PeriphCLKConfig+0x10dc>
3418413a:	f44f 61a7 	mov.w	r1, #1336	@ 0x538
3418413e:	4833      	ldr	r0, [pc, #204]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34184140:	f7fd f806 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC7)
34184144:	f8d4 311c 	ldr.w	r3, [r4, #284]	@ 0x11c
34184148:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
3418414c:	f041 8303 	bne.w	34185756 <HAL_RCCEx_PeriphCLKConfig+0x26ee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34184150:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34184152:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184156:	d004      	beq.n	34184162 <HAL_RCCEx_PeriphCLKConfig+0x10fa>
34184158:	f240 513d 	movw	r1, #1341	@ 0x53d
3418415c:	482b      	ldr	r0, [pc, #172]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
3418415e:	f7fc fff7 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34184162:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34184164:	3b01      	subs	r3, #1
34184166:	2bff      	cmp	r3, #255	@ 0xff
34184168:	d904      	bls.n	34184174 <HAL_RCCEx_PeriphCLKConfig+0x110c>
3418416a:	f240 513e 	movw	r1, #1342	@ 0x53e
3418416e:	4827      	ldr	r0, [pc, #156]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
34184170:	f7fc ffee 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34184174:	4a27      	ldr	r2, [pc, #156]	@ (34184214 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
34184176:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
34184178:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
3418417c:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
3418417e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184182:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184186:	3901      	subs	r1, #1
34184188:	4303      	orrs	r3, r0
3418418a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418418e:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34184192:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34184194:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL, ClkSource);
34184198:	4a1e      	ldr	r2, [pc, #120]	@ (34184214 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
3418419a:	f8d4 111c 	ldr.w	r1, [r4, #284]	@ 0x11c
3418419e:	f8d2 3154 	ldr.w	r3, [r2, #340]	@ 0x154
341841a2:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
341841a6:	430b      	orrs	r3, r1
341841a8:	f8c2 3154 	str.w	r3, [r2, #340]	@ 0x154
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PSSI) == RCC_PERIPHCLK_PSSI)
341841ac:	6823      	ldr	r3, [r4, #0]
341841ae:	015e      	lsls	r6, r3, #5
341841b0:	d54e      	bpl.n	34184250 <HAL_RCCEx_PeriphCLKConfig+0x11e8>
    assert_param(IS_RCC_PSSICLKSOURCE(PeriphClkInit->PssiClockSelection));
341841b2:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
341841b6:	f033 0330 	bics.w	r3, r3, #48	@ 0x30
341841ba:	d004      	beq.n	341841c6 <HAL_RCCEx_PeriphCLKConfig+0x115e>
341841bc:	f240 5165 	movw	r1, #1381	@ 0x565
341841c0:	4812      	ldr	r0, [pc, #72]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
341841c2:	f7fc ffc5 	bl	34181150 <assert_failed>
    if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_IC20)
341841c6:	f8d4 3120 	ldr.w	r3, [r4, #288]	@ 0x120
341841ca:	2b20      	cmp	r3, #32
341841cc:	f041 82f3 	bne.w	341857b6 <HAL_RCCEx_PeriphCLKConfig+0x274e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
341841d0:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
341841d4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341841d8:	d004      	beq.n	341841e4 <HAL_RCCEx_PeriphCLKConfig+0x117c>
341841da:	f240 516a 	movw	r1, #1386	@ 0x56a
341841de:	480b      	ldr	r0, [pc, #44]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
341841e0:	f7fc ffb6 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
341841e4:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
341841e8:	3b01      	subs	r3, #1
341841ea:	2bff      	cmp	r3, #255	@ 0xff
341841ec:	d904      	bls.n	341841f8 <HAL_RCCEx_PeriphCLKConfig+0x1190>
341841ee:	f240 516b 	movw	r1, #1387	@ 0x56b
341841f2:	4806      	ldr	r0, [pc, #24]	@ (3418420c <HAL_RCCEx_PeriphCLKConfig+0x11a4>)
341841f4:	f7fc ffac 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
341841f8:	4a06      	ldr	r2, [pc, #24]	@ (34184214 <HAL_RCCEx_PeriphCLKConfig+0x11ac>)
341841fa:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
341841fe:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
34184202:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
34184206:	e00b      	b.n	34184220 <HAL_RCCEx_PeriphCLKConfig+0x11b8>
34184208:	0700142c 	.word	0x0700142c
3418420c:	3418cf4f 	.word	0x3418cf4f
34184210:	0702142c 	.word	0x0702142c
34184214:	56028000 	.word	0x56028000
34184218:	0700182c 	.word	0x0700182c
3418421c:	0702182c 	.word	0x0702182c
34184220:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184224:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184228:	3901      	subs	r1, #1
3418422a:	4303      	orrs	r3, r0
3418422c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184230:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
34184234:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
34184238:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR7, RCC_CCIPR7_PSSISEL, ClkSource);
3418423c:	4abc      	ldr	r2, [pc, #752]	@ (34184530 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3418423e:	f8d4 1120 	ldr.w	r1, [r4, #288]	@ 0x120
34184242:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34184246:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
3418424a:	430b      	orrs	r3, r1
3418424c:	f8c2 315c 	str.w	r3, [r2, #348]	@ 0x15c
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
34184250:	6823      	ldr	r3, [r4, #0]
34184252:	00d8      	lsls	r0, r3, #3
34184254:	d53d      	bpl.n	341842d2 <HAL_RCCEx_PeriphCLKConfig+0x126a>
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
34184256:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
3418425a:	4ab6      	ldr	r2, [pc, #728]	@ (34184534 <HAL_RCCEx_PeriphCLKConfig+0x14cc>)
3418425c:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
34184260:	4293      	cmp	r3, r2
34184262:	d008      	beq.n	34184276 <HAL_RCCEx_PeriphCLKConfig+0x120e>
34184264:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34184268:	4293      	cmp	r3, r2
3418426a:	d004      	beq.n	34184276 <HAL_RCCEx_PeriphCLKConfig+0x120e>
3418426c:	f240 5185 	movw	r1, #1413	@ 0x585
34184270:	48b1      	ldr	r0, [pc, #708]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34184272:	f7fc ff6d 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC7)
34184276:	f8d4 3124 	ldr.w	r3, [r4, #292]	@ 0x124
3418427a:	4ab0      	ldr	r2, [pc, #704]	@ (3418453c <HAL_RCCEx_PeriphCLKConfig+0x14d4>)
3418427c:	4293      	cmp	r3, r2
3418427e:	f041 82c1 	bne.w	34185804 <HAL_RCCEx_PeriphCLKConfig+0x279c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34184282:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34184284:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184288:	d004      	beq.n	34184294 <HAL_RCCEx_PeriphCLKConfig+0x122c>
3418428a:	f240 518a 	movw	r1, #1418	@ 0x58a
3418428e:	48aa      	ldr	r0, [pc, #680]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34184290:	f7fc ff5e 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34184294:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34184296:	3b01      	subs	r3, #1
34184298:	2bff      	cmp	r3, #255	@ 0xff
3418429a:	d904      	bls.n	341842a6 <HAL_RCCEx_PeriphCLKConfig+0x123e>
3418429c:	f240 518b 	movw	r1, #1419	@ 0x58b
341842a0:	48a5      	ldr	r0, [pc, #660]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
341842a2:	f7fc ff55 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
341842a6:	4aa2      	ldr	r2, [pc, #648]	@ (34184530 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
341842a8:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
341842aa:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
341842ae:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
341842b0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341842b4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341842b8:	3901      	subs	r1, #1
341842ba:	4303      	orrs	r3, r0
341842bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341842c0:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
341842c4:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
341842c6:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
341842ca:	f8d4 0124 	ldr.w	r0, [r4, #292]	@ 0x124
341842ce:	f7fe fde7 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2)
341842d2:	6823      	ldr	r3, [r4, #0]
341842d4:	0099      	lsls	r1, r3, #2
341842d6:	d53d      	bpl.n	34184354 <HAL_RCCEx_PeriphCLKConfig+0x12ec>
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));
341842d8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
341842dc:	4a98      	ldr	r2, [pc, #608]	@ (34184540 <HAL_RCCEx_PeriphCLKConfig+0x14d8>)
341842de:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
341842e2:	4293      	cmp	r3, r2
341842e4:	d008      	beq.n	341842f8 <HAL_RCCEx_PeriphCLKConfig+0x1290>
341842e6:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
341842ea:	4293      	cmp	r3, r2
341842ec:	d004      	beq.n	341842f8 <HAL_RCCEx_PeriphCLKConfig+0x1290>
341842ee:	f240 51b2 	movw	r1, #1458	@ 0x5b2
341842f2:	4891      	ldr	r0, [pc, #580]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
341842f4:	f7fc ff2c 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC7)
341842f8:	f8d4 3128 	ldr.w	r3, [r4, #296]	@ 0x128
341842fc:	4a91      	ldr	r2, [pc, #580]	@ (34184544 <HAL_RCCEx_PeriphCLKConfig+0x14dc>)
341842fe:	4293      	cmp	r3, r2
34184300:	f041 82b0 	bne.w	34185864 <HAL_RCCEx_PeriphCLKConfig+0x27fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34184304:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34184306:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3418430a:	d004      	beq.n	34184316 <HAL_RCCEx_PeriphCLKConfig+0x12ae>
3418430c:	f240 51b7 	movw	r1, #1463	@ 0x5b7
34184310:	4889      	ldr	r0, [pc, #548]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34184312:	f7fc ff1d 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34184316:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
34184318:	3b01      	subs	r3, #1
3418431a:	2bff      	cmp	r3, #255	@ 0xff
3418431c:	d904      	bls.n	34184328 <HAL_RCCEx_PeriphCLKConfig+0x12c0>
3418431e:	f44f 61b7 	mov.w	r1, #1464	@ 0x5b8
34184322:	4885      	ldr	r0, [pc, #532]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34184324:	f7fc ff14 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
34184328:	4a81      	ldr	r2, [pc, #516]	@ (34184530 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3418432a:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3418432c:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
34184330:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
34184332:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184336:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418433a:	3901      	subs	r1, #1
3418433c:	4303      	orrs	r3, r0
3418433e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184342:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
34184346:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34184348:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
3418434c:	f8d4 0128 	ldr.w	r0, [r4, #296]	@ 0x128
34184350:	f7fe fda6 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPDIFRX1) == RCC_PERIPHCLK_SPDIFRX1)
34184354:	6863      	ldr	r3, [r4, #4]
34184356:	07da      	lsls	r2, r3, #31
34184358:	d53b      	bpl.n	341843d2 <HAL_RCCEx_PeriphCLKConfig+0x136a>
    assert_param(IS_RCC_SPDIFRX1CLKSOURCE(PeriphClkInit->Spdifrx1ClockSelection));
3418435a:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
3418435e:	2b06      	cmp	r3, #6
34184360:	d904      	bls.n	3418436c <HAL_RCCEx_PeriphCLKConfig+0x1304>
34184362:	f240 51df 	movw	r1, #1503	@ 0x5df
34184366:	4874      	ldr	r0, [pc, #464]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34184368:	f7fc fef2 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC7)
3418436c:	f8d4 314c 	ldr.w	r3, [r4, #332]	@ 0x14c
34184370:	2b02      	cmp	r3, #2
34184372:	f041 82a7 	bne.w	341858c4 <HAL_RCCEx_PeriphCLKConfig+0x285c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC7].ClockSelection));
34184376:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
34184378:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3418437c:	d004      	beq.n	34184388 <HAL_RCCEx_PeriphCLKConfig+0x1320>
3418437e:	f240 51e4 	movw	r1, #1508	@ 0x5e4
34184382:	486d      	ldr	r0, [pc, #436]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34184384:	f7fc fee4 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC7].ClockDivider));
34184388:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
3418438a:	3b01      	subs	r3, #1
3418438c:	2bff      	cmp	r3, #255	@ 0xff
3418438e:	d904      	bls.n	3418439a <HAL_RCCEx_PeriphCLKConfig+0x1332>
34184390:	f240 51e5 	movw	r1, #1509	@ 0x5e5
34184394:	4868      	ldr	r0, [pc, #416]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34184396:	f7fc fedb 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL | RCC_IC7CFGR_IC7INT,
3418439a:	4a65      	ldr	r2, [pc, #404]	@ (34184530 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
3418439c:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
3418439e:	f8d2 30dc 	ldr.w	r3, [r2, #220]	@ 0xdc
341843a2:	6ba0      	ldr	r0, [r4, #56]	@ 0x38
341843a4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341843a8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341843ac:	3901      	subs	r1, #1
341843ae:	4303      	orrs	r3, r0
341843b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341843b4:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC7ENS);
341843b8:	2340      	movs	r3, #64	@ 0x40
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
341843ba:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  MODIFY_REG(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL, ClkSource);
341843be:	4a5c      	ldr	r2, [pc, #368]	@ (34184530 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
341843c0:	f8d4 114c 	ldr.w	r1, [r4, #332]	@ 0x14c
341843c4:	f8d2 3164 	ldr.w	r3, [r2, #356]	@ 0x164
341843c8:	f023 0307 	bic.w	r3, r3, #7
341843cc:	430b      	orrs	r3, r1
341843ce:	f8c2 3164 	str.w	r3, [r2, #356]	@ 0x164
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
341843d2:	6863      	ldr	r3, [r4, #4]
341843d4:	079b      	lsls	r3, r3, #30
341843d6:	d543      	bpl.n	34184460 <HAL_RCCEx_PeriphCLKConfig+0x13f8>
    assert_param(IS_RCC_SPI1CLKSOURCE(PeriphClkInit->Spi1ClockSelection));
341843d8:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
341843dc:	4a5a      	ldr	r2, [pc, #360]	@ (34184548 <HAL_RCCEx_PeriphCLKConfig+0x14e0>)
341843de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
341843e2:	4291      	cmp	r1, r2
341843e4:	d00e      	beq.n	34184404 <HAL_RCCEx_PeriphCLKConfig+0x139c>
341843e6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
341843ea:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
341843ee:	4291      	cmp	r1, r2
341843f0:	d008      	beq.n	34184404 <HAL_RCCEx_PeriphCLKConfig+0x139c>
341843f2:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
341843f6:	4293      	cmp	r3, r2
341843f8:	d004      	beq.n	34184404 <HAL_RCCEx_PeriphCLKConfig+0x139c>
341843fa:	f240 610c 	movw	r1, #1548	@ 0x60c
341843fe:	484e      	ldr	r0, [pc, #312]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34184400:	f7fc fea6 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC8)
34184404:	f8d4 3134 	ldr.w	r3, [r4, #308]	@ 0x134
34184408:	4a50      	ldr	r2, [pc, #320]	@ (3418454c <HAL_RCCEx_PeriphCLKConfig+0x14e4>)
3418440a:	4293      	cmp	r3, r2
3418440c:	f041 8288 	bne.w	34185920 <HAL_RCCEx_PeriphCLKConfig+0x28b8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34184410:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34184412:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184416:	d004      	beq.n	34184422 <HAL_RCCEx_PeriphCLKConfig+0x13ba>
34184418:	f240 6111 	movw	r1, #1553	@ 0x611
3418441c:	4846      	ldr	r0, [pc, #280]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3418441e:	f7fc fe97 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34184422:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34184424:	3b01      	subs	r3, #1
34184426:	2bff      	cmp	r3, #255	@ 0xff
34184428:	d904      	bls.n	34184434 <HAL_RCCEx_PeriphCLKConfig+0x13cc>
3418442a:	f240 6112 	movw	r1, #1554	@ 0x612
3418442e:	4842      	ldr	r0, [pc, #264]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
34184430:	f7fc fe8e 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34184434:	4a3e      	ldr	r2, [pc, #248]	@ (34184530 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
34184436:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34184438:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3418443c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3418443e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184442:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184446:	3901      	subs	r1, #1
34184448:	4303      	orrs	r3, r0
3418444a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418444e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34184452:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34184454:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34184458:	f8d4 0134 	ldr.w	r0, [r4, #308]	@ 0x134
3418445c:	f7fe fd20 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
34184460:	6863      	ldr	r3, [r4, #4]
34184462:	075e      	lsls	r6, r3, #29
34184464:	d543      	bpl.n	341844ee <HAL_RCCEx_PeriphCLKConfig+0x1486>
    assert_param(IS_RCC_SPI2CLKSOURCE(PeriphClkInit->Spi2ClockSelection));
34184466:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
3418446a:	4a39      	ldr	r2, [pc, #228]	@ (34184550 <HAL_RCCEx_PeriphCLKConfig+0x14e8>)
3418446c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34184470:	4291      	cmp	r1, r2
34184472:	d00e      	beq.n	34184492 <HAL_RCCEx_PeriphCLKConfig+0x142a>
34184474:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184478:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3418447c:	4291      	cmp	r1, r2
3418447e:	d008      	beq.n	34184492 <HAL_RCCEx_PeriphCLKConfig+0x142a>
34184480:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34184484:	4293      	cmp	r3, r2
34184486:	d004      	beq.n	34184492 <HAL_RCCEx_PeriphCLKConfig+0x142a>
34184488:	f240 6139 	movw	r1, #1593	@ 0x639
3418448c:	482a      	ldr	r0, [pc, #168]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3418448e:	f7fc fe5f 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC8)
34184492:	f8d4 3138 	ldr.w	r3, [r4, #312]	@ 0x138
34184496:	4a2f      	ldr	r2, [pc, #188]	@ (34184554 <HAL_RCCEx_PeriphCLKConfig+0x14ec>)
34184498:	4293      	cmp	r3, r2
3418449a:	f041 8272 	bne.w	34185982 <HAL_RCCEx_PeriphCLKConfig+0x291a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3418449e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
341844a0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341844a4:	d004      	beq.n	341844b0 <HAL_RCCEx_PeriphCLKConfig+0x1448>
341844a6:	f240 613e 	movw	r1, #1598	@ 0x63e
341844aa:	4823      	ldr	r0, [pc, #140]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
341844ac:	f7fc fe50 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
341844b0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
341844b2:	3b01      	subs	r3, #1
341844b4:	2bff      	cmp	r3, #255	@ 0xff
341844b6:	d904      	bls.n	341844c2 <HAL_RCCEx_PeriphCLKConfig+0x145a>
341844b8:	f240 613f 	movw	r1, #1599	@ 0x63f
341844bc:	481e      	ldr	r0, [pc, #120]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
341844be:	f7fc fe47 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341844c2:	4a1b      	ldr	r2, [pc, #108]	@ (34184530 <HAL_RCCEx_PeriphCLKConfig+0x14c8>)
341844c4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
341844c6:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
341844ca:	6c20      	ldr	r0, [r4, #64]	@ 0x40
341844cc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341844d0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341844d4:	3901      	subs	r1, #1
341844d6:	4303      	orrs	r3, r0
341844d8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341844dc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
341844e0:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
341844e2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
341844e6:	f8d4 0138 	ldr.w	r0, [r4, #312]	@ 0x138
341844ea:	f7fe fcd9 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
341844ee:	6863      	ldr	r3, [r4, #4]
341844f0:	0718      	lsls	r0, r3, #28
341844f2:	d55d      	bpl.n	341845b0 <HAL_RCCEx_PeriphCLKConfig+0x1548>
    assert_param(IS_RCC_SPI3CLKSOURCE(PeriphClkInit->Spi3ClockSelection));
341844f4:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
341844f8:	4a17      	ldr	r2, [pc, #92]	@ (34184558 <HAL_RCCEx_PeriphCLKConfig+0x14f0>)
341844fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
341844fe:	4291      	cmp	r1, r2
34184500:	d00e      	beq.n	34184520 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34184502:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184506:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3418450a:	4291      	cmp	r1, r2
3418450c:	d008      	beq.n	34184520 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
3418450e:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34184512:	4293      	cmp	r3, r2
34184514:	d004      	beq.n	34184520 <HAL_RCCEx_PeriphCLKConfig+0x14b8>
34184516:	f240 6166 	movw	r1, #1638	@ 0x666
3418451a:	4807      	ldr	r0, [pc, #28]	@ (34184538 <HAL_RCCEx_PeriphCLKConfig+0x14d0>)
3418451c:	f7fc fe18 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC8)
34184520:	f8d4 313c 	ldr.w	r3, [r4, #316]	@ 0x13c
34184524:	4a0d      	ldr	r2, [pc, #52]	@ (3418455c <HAL_RCCEx_PeriphCLKConfig+0x14f4>)
34184526:	4293      	cmp	r3, r2
34184528:	f041 825c 	bne.w	341859e4 <HAL_RCCEx_PeriphCLKConfig+0x297c>
3418452c:	e018      	b.n	34184560 <HAL_RCCEx_PeriphCLKConfig+0x14f8>
3418452e:	bf00      	nop
34184530:	56028000 	.word	0x56028000
34184534:	07001418 	.word	0x07001418
34184538:	3418cf4f 	.word	0x3418cf4f
3418453c:	07021418 	.word	0x07021418
34184540:	07001818 	.word	0x07001818
34184544:	07021818 	.word	0x07021818
34184548:	07000420 	.word	0x07000420
3418454c:	07020420 	.word	0x07020420
34184550:	07000820 	.word	0x07000820
34184554:	07020820 	.word	0x07020820
34184558:	07000c20 	.word	0x07000c20
3418455c:	07020c20 	.word	0x07020c20
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34184560:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34184562:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184566:	d004      	beq.n	34184572 <HAL_RCCEx_PeriphCLKConfig+0x150a>
34184568:	f240 616b 	movw	r1, #1643	@ 0x66b
3418456c:	48bb      	ldr	r0, [pc, #748]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3418456e:	f7fc fdef 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34184572:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34184574:	3b01      	subs	r3, #1
34184576:	2bff      	cmp	r3, #255	@ 0xff
34184578:	d904      	bls.n	34184584 <HAL_RCCEx_PeriphCLKConfig+0x151c>
3418457a:	f240 616c 	movw	r1, #1644	@ 0x66c
3418457e:	48b7      	ldr	r0, [pc, #732]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
34184580:	f7fc fde6 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34184584:	4ab6      	ldr	r2, [pc, #728]	@ (34184860 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34184586:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34184588:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3418458c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3418458e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184592:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184596:	3901      	subs	r1, #1
34184598:	4303      	orrs	r3, r0
3418459a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418459e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
341845a2:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
341845a4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
341845a8:	f8d4 013c 	ldr.w	r0, [r4, #316]	@ 0x13c
341845ac:	f7fe fc78 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI4) == RCC_PERIPHCLK_SPI4)
341845b0:	6863      	ldr	r3, [r4, #4]
341845b2:	06d9      	lsls	r1, r3, #27
341845b4:	d544      	bpl.n	34184640 <HAL_RCCEx_PeriphCLKConfig+0x15d8>
    assert_param(IS_RCC_SPI4CLKSOURCE(PeriphClkInit->Spi4ClockSelection));
341845b6:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
341845ba:	4aaa      	ldr	r2, [pc, #680]	@ (34184864 <HAL_RCCEx_PeriphCLKConfig+0x17fc>)
341845bc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
341845c0:	4291      	cmp	r1, r2
341845c2:	d00e      	beq.n	341845e2 <HAL_RCCEx_PeriphCLKConfig+0x157a>
341845c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
341845c8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
341845cc:	4291      	cmp	r1, r2
341845ce:	d008      	beq.n	341845e2 <HAL_RCCEx_PeriphCLKConfig+0x157a>
341845d0:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
341845d4:	4293      	cmp	r3, r2
341845d6:	d004      	beq.n	341845e2 <HAL_RCCEx_PeriphCLKConfig+0x157a>
341845d8:	f240 6193 	movw	r1, #1683	@ 0x693
341845dc:	489f      	ldr	r0, [pc, #636]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
341845de:	f7fc fdb7 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC9)
341845e2:	f8d4 3140 	ldr.w	r3, [r4, #320]	@ 0x140
341845e6:	4aa0      	ldr	r2, [pc, #640]	@ (34184868 <HAL_RCCEx_PeriphCLKConfig+0x1800>)
341845e8:	4293      	cmp	r3, r2
341845ea:	f041 822c 	bne.w	34185a46 <HAL_RCCEx_PeriphCLKConfig+0x29de>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
341845ee:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
341845f0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341845f4:	d004      	beq.n	34184600 <HAL_RCCEx_PeriphCLKConfig+0x1598>
341845f6:	f44f 61d3 	mov.w	r1, #1688	@ 0x698
341845fa:	4898      	ldr	r0, [pc, #608]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
341845fc:	f7fc fda8 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34184600:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34184602:	3b01      	subs	r3, #1
34184604:	2bff      	cmp	r3, #255	@ 0xff
34184606:	d904      	bls.n	34184612 <HAL_RCCEx_PeriphCLKConfig+0x15aa>
34184608:	f240 6199 	movw	r1, #1689	@ 0x699
3418460c:	4893      	ldr	r0, [pc, #588]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3418460e:	f7fc fd9f 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34184612:	4a93      	ldr	r2, [pc, #588]	@ (34184860 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34184614:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34184616:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3418461a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3418461c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184620:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184624:	3901      	subs	r1, #1
34184626:	4303      	orrs	r3, r0
34184628:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418462c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34184630:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34184634:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34184638:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
3418463c:	f7fe fc30 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI5) == RCC_PERIPHCLK_SPI5)
34184640:	6863      	ldr	r3, [r4, #4]
34184642:	069a      	lsls	r2, r3, #26
34184644:	d544      	bpl.n	341846d0 <HAL_RCCEx_PeriphCLKConfig+0x1668>
    assert_param(IS_RCC_SPI5CLKSOURCE(PeriphClkInit->Spi5ClockSelection));
34184646:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
3418464a:	4a88      	ldr	r2, [pc, #544]	@ (3418486c <HAL_RCCEx_PeriphCLKConfig+0x1804>)
3418464c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34184650:	4291      	cmp	r1, r2
34184652:	d00e      	beq.n	34184672 <HAL_RCCEx_PeriphCLKConfig+0x160a>
34184654:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184658:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3418465c:	4291      	cmp	r1, r2
3418465e:	d008      	beq.n	34184672 <HAL_RCCEx_PeriphCLKConfig+0x160a>
34184660:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34184664:	4293      	cmp	r3, r2
34184666:	d004      	beq.n	34184672 <HAL_RCCEx_PeriphCLKConfig+0x160a>
34184668:	f44f 61d8 	mov.w	r1, #1728	@ 0x6c0
3418466c:	487b      	ldr	r0, [pc, #492]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3418466e:	f7fc fd6f 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC9)
34184672:	f8d4 3144 	ldr.w	r3, [r4, #324]	@ 0x144
34184676:	4a7e      	ldr	r2, [pc, #504]	@ (34184870 <HAL_RCCEx_PeriphCLKConfig+0x1808>)
34184678:	4293      	cmp	r3, r2
3418467a:	f041 8231 	bne.w	34185ae0 <HAL_RCCEx_PeriphCLKConfig+0x2a78>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3418467e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34184680:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184684:	d004      	beq.n	34184690 <HAL_RCCEx_PeriphCLKConfig+0x1628>
34184686:	f240 61c5 	movw	r1, #1733	@ 0x6c5
3418468a:	4874      	ldr	r0, [pc, #464]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3418468c:	f7fc fd60 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34184690:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34184692:	3b01      	subs	r3, #1
34184694:	2bff      	cmp	r3, #255	@ 0xff
34184696:	d904      	bls.n	341846a2 <HAL_RCCEx_PeriphCLKConfig+0x163a>
34184698:	f240 61c6 	movw	r1, #1734	@ 0x6c6
3418469c:	486f      	ldr	r0, [pc, #444]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3418469e:	f7fc fd57 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341846a2:	4a6f      	ldr	r2, [pc, #444]	@ (34184860 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
341846a4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
341846a6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
341846aa:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
341846ac:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341846b0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341846b4:	3901      	subs	r1, #1
341846b6:	4303      	orrs	r3, r0
341846b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341846bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
341846c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
341846c4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
341846c8:	f8d4 0144 	ldr.w	r0, [r4, #324]	@ 0x144
341846cc:	f7fe fbe8 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
341846d0:	6863      	ldr	r3, [r4, #4]
341846d2:	065b      	lsls	r3, r3, #25
341846d4:	d543      	bpl.n	3418475e <HAL_RCCEx_PeriphCLKConfig+0x16f6>
    assert_param(IS_RCC_SPI6CLKSOURCE(PeriphClkInit->Spi6ClockSelection));
341846d6:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
341846da:	4a66      	ldr	r2, [pc, #408]	@ (34184874 <HAL_RCCEx_PeriphCLKConfig+0x180c>)
341846dc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
341846e0:	4291      	cmp	r1, r2
341846e2:	d00e      	beq.n	34184702 <HAL_RCCEx_PeriphCLKConfig+0x169a>
341846e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
341846e8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
341846ec:	4291      	cmp	r1, r2
341846ee:	d008      	beq.n	34184702 <HAL_RCCEx_PeriphCLKConfig+0x169a>
341846f0:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
341846f4:	4293      	cmp	r3, r2
341846f6:	d004      	beq.n	34184702 <HAL_RCCEx_PeriphCLKConfig+0x169a>
341846f8:	f240 61ed 	movw	r1, #1773	@ 0x6ed
341846fc:	4857      	ldr	r0, [pc, #348]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
341846fe:	f7fc fd27 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC8)
34184702:	f8d4 3148 	ldr.w	r3, [r4, #328]	@ 0x148
34184706:	4a5c      	ldr	r2, [pc, #368]	@ (34184878 <HAL_RCCEx_PeriphCLKConfig+0x1810>)
34184708:	4293      	cmp	r3, r2
3418470a:	f041 821a 	bne.w	34185b42 <HAL_RCCEx_PeriphCLKConfig+0x2ada>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3418470e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
34184710:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184714:	d004      	beq.n	34184720 <HAL_RCCEx_PeriphCLKConfig+0x16b8>
34184716:	f240 61f2 	movw	r1, #1778	@ 0x6f2
3418471a:	4850      	ldr	r0, [pc, #320]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3418471c:	f7fc fd18 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
34184720:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34184722:	3b01      	subs	r3, #1
34184724:	2bff      	cmp	r3, #255	@ 0xff
34184726:	d904      	bls.n	34184732 <HAL_RCCEx_PeriphCLKConfig+0x16ca>
34184728:	f240 61f3 	movw	r1, #1779	@ 0x6f3
3418472c:	484b      	ldr	r0, [pc, #300]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3418472e:	f7fc fd0f 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34184732:	4a4b      	ldr	r2, [pc, #300]	@ (34184860 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34184734:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34184736:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
3418473a:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3418473c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184740:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184744:	3901      	subs	r1, #1
34184746:	4303      	orrs	r3, r0
34184748:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418474c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
34184750:	2380      	movs	r3, #128	@ 0x80
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34184752:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34184756:	f8d4 0148 	ldr.w	r0, [r4, #328]	@ 0x148
3418475a:	f7fe fba1 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
3418475e:	6863      	ldr	r3, [r4, #4]
34184760:	05de      	lsls	r6, r3, #23
34184762:	d544      	bpl.n	341847ee <HAL_RCCEx_PeriphCLKConfig+0x1786>
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
34184764:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34184768:	4a44      	ldr	r2, [pc, #272]	@ (3418487c <HAL_RCCEx_PeriphCLKConfig+0x1814>)
3418476a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
3418476e:	4291      	cmp	r1, r2
34184770:	d00e      	beq.n	34184790 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34184772:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184776:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3418477a:	4291      	cmp	r1, r2
3418477c:	d008      	beq.n	34184790 <HAL_RCCEx_PeriphCLKConfig+0x1728>
3418477e:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34184782:	4293      	cmp	r3, r2
34184784:	d004      	beq.n	34184790 <HAL_RCCEx_PeriphCLKConfig+0x1728>
34184786:	f240 711a 	movw	r1, #1818	@ 0x71a
3418478a:	4834      	ldr	r0, [pc, #208]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3418478c:	f7fc fce0 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC9)
34184790:	f8d4 3150 	ldr.w	r3, [r4, #336]	@ 0x150
34184794:	4a3a      	ldr	r2, [pc, #232]	@ (34184880 <HAL_RCCEx_PeriphCLKConfig+0x1818>)
34184796:	4293      	cmp	r3, r2
34184798:	f041 8204 	bne.w	34185ba4 <HAL_RCCEx_PeriphCLKConfig+0x2b3c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3418479c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3418479e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341847a2:	d004      	beq.n	341847ae <HAL_RCCEx_PeriphCLKConfig+0x1746>
341847a4:	f240 711f 	movw	r1, #1823	@ 0x71f
341847a8:	482c      	ldr	r0, [pc, #176]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
341847aa:	f7fc fcd1 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
341847ae:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
341847b0:	3b01      	subs	r3, #1
341847b2:	2bff      	cmp	r3, #255	@ 0xff
341847b4:	d904      	bls.n	341847c0 <HAL_RCCEx_PeriphCLKConfig+0x1758>
341847b6:	f44f 61e4 	mov.w	r1, #1824	@ 0x720
341847ba:	4828      	ldr	r0, [pc, #160]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
341847bc:	f7fc fcc8 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341847c0:	4a27      	ldr	r2, [pc, #156]	@ (34184860 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
341847c2:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
341847c4:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
341847c8:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
341847ca:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341847ce:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341847d2:	3901      	subs	r1, #1
341847d4:	4303      	orrs	r3, r0
341847d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341847da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
341847de:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
341847e2:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
341847e6:	f8d4 0150 	ldr.w	r0, [r4, #336]	@ 0x150
341847ea:	f7fe fb59 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
341847ee:	6863      	ldr	r3, [r4, #4]
341847f0:	0598      	lsls	r0, r3, #22
341847f2:	d55d      	bpl.n	341848b0 <HAL_RCCEx_PeriphCLKConfig+0x1848>
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
341847f4:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
341847f8:	4a22      	ldr	r2, [pc, #136]	@ (34184884 <HAL_RCCEx_PeriphCLKConfig+0x181c>)
341847fa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
341847fe:	4291      	cmp	r1, r2
34184800:	d00e      	beq.n	34184820 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34184802:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184806:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3418480a:	4291      	cmp	r1, r2
3418480c:	d008      	beq.n	34184820 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
3418480e:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34184812:	4293      	cmp	r3, r2
34184814:	d004      	beq.n	34184820 <HAL_RCCEx_PeriphCLKConfig+0x17b8>
34184816:	f240 7147 	movw	r1, #1863	@ 0x747
3418481a:	4810      	ldr	r0, [pc, #64]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3418481c:	f7fc fc98 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC9)
34184820:	f8d4 3154 	ldr.w	r3, [r4, #340]	@ 0x154
34184824:	4a18      	ldr	r2, [pc, #96]	@ (34184888 <HAL_RCCEx_PeriphCLKConfig+0x1820>)
34184826:	4293      	cmp	r3, r2
34184828:	f041 81ed 	bne.w	34185c06 <HAL_RCCEx_PeriphCLKConfig+0x2b9e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3418482c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3418482e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184832:	d004      	beq.n	3418483e <HAL_RCCEx_PeriphCLKConfig+0x17d6>
34184834:	f240 714c 	movw	r1, #1868	@ 0x74c
34184838:	4808      	ldr	r0, [pc, #32]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3418483a:	f7fc fc89 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3418483e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34184840:	3b01      	subs	r3, #1
34184842:	2bff      	cmp	r3, #255	@ 0xff
34184844:	d904      	bls.n	34184850 <HAL_RCCEx_PeriphCLKConfig+0x17e8>
34184846:	f240 714d 	movw	r1, #1869	@ 0x74d
3418484a:	4804      	ldr	r0, [pc, #16]	@ (3418485c <HAL_RCCEx_PeriphCLKConfig+0x17f4>)
3418484c:	f7fc fc80 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34184850:	4a03      	ldr	r2, [pc, #12]	@ (34184860 <HAL_RCCEx_PeriphCLKConfig+0x17f8>)
34184852:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34184854:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34184858:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3418485a:	e017      	b.n	3418488c <HAL_RCCEx_PeriphCLKConfig+0x1824>
3418485c:	3418cf4f 	.word	0x3418cf4f
34184860:	56028000 	.word	0x56028000
34184864:	07001020 	.word	0x07001020
34184868:	07021020 	.word	0x07021020
3418486c:	07001420 	.word	0x07001420
34184870:	07021420 	.word	0x07021420
34184874:	07001820 	.word	0x07001820
34184878:	07021820 	.word	0x07021820
3418487c:	07000030 	.word	0x07000030
34184880:	07020030 	.word	0x07020030
34184884:	07000430 	.word	0x07000430
34184888:	07020430 	.word	0x07020430
3418488c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184890:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184894:	3901      	subs	r1, #1
34184896:	4303      	orrs	r3, r0
34184898:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418489c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
341848a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
341848a4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
341848a8:	f8d4 0154 	ldr.w	r0, [r4, #340]	@ 0x154
341848ac:	f7fe faf8 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
341848b0:	6863      	ldr	r3, [r4, #4]
341848b2:	0559      	lsls	r1, r3, #21
341848b4:	d544      	bpl.n	34184940 <HAL_RCCEx_PeriphCLKConfig+0x18d8>
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
341848b6:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
341848ba:	4abc      	ldr	r2, [pc, #752]	@ (34184bac <HAL_RCCEx_PeriphCLKConfig+0x1b44>)
341848bc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
341848c0:	4291      	cmp	r1, r2
341848c2:	d00e      	beq.n	341848e2 <HAL_RCCEx_PeriphCLKConfig+0x187a>
341848c4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
341848c8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
341848cc:	4291      	cmp	r1, r2
341848ce:	d008      	beq.n	341848e2 <HAL_RCCEx_PeriphCLKConfig+0x187a>
341848d0:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
341848d4:	4293      	cmp	r3, r2
341848d6:	d004      	beq.n	341848e2 <HAL_RCCEx_PeriphCLKConfig+0x187a>
341848d8:	f240 7174 	movw	r1, #1908	@ 0x774
341848dc:	48b4      	ldr	r0, [pc, #720]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
341848de:	f7fc fc37 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC9)
341848e2:	f8d4 3158 	ldr.w	r3, [r4, #344]	@ 0x158
341848e6:	4ab3      	ldr	r2, [pc, #716]	@ (34184bb4 <HAL_RCCEx_PeriphCLKConfig+0x1b4c>)
341848e8:	4293      	cmp	r3, r2
341848ea:	f041 81bd 	bne.w	34185c68 <HAL_RCCEx_PeriphCLKConfig+0x2c00>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
341848ee:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
341848f0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341848f4:	d004      	beq.n	34184900 <HAL_RCCEx_PeriphCLKConfig+0x1898>
341848f6:	f240 7179 	movw	r1, #1913	@ 0x779
341848fa:	48ad      	ldr	r0, [pc, #692]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
341848fc:	f7fc fc28 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34184900:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34184902:	3b01      	subs	r3, #1
34184904:	2bff      	cmp	r3, #255	@ 0xff
34184906:	d904      	bls.n	34184912 <HAL_RCCEx_PeriphCLKConfig+0x18aa>
34184908:	f240 717a 	movw	r1, #1914	@ 0x77a
3418490c:	48a8      	ldr	r0, [pc, #672]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3418490e:	f7fc fc1f 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34184912:	4aa9      	ldr	r2, [pc, #676]	@ (34184bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34184914:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34184916:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
3418491a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
3418491c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184920:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184924:	3901      	subs	r1, #1
34184926:	4303      	orrs	r3, r0
34184928:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418492c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34184930:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34184934:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34184938:	f8d4 0158 	ldr.w	r0, [r4, #344]	@ 0x158
3418493c:	f7fe fab0 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
34184940:	6863      	ldr	r3, [r4, #4]
34184942:	051a      	lsls	r2, r3, #20
34184944:	d544      	bpl.n	341849d0 <HAL_RCCEx_PeriphCLKConfig+0x1968>
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
34184946:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
3418494a:	4a9c      	ldr	r2, [pc, #624]	@ (34184bbc <HAL_RCCEx_PeriphCLKConfig+0x1b54>)
3418494c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34184950:	4291      	cmp	r1, r2
34184952:	d00e      	beq.n	34184972 <HAL_RCCEx_PeriphCLKConfig+0x190a>
34184954:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184958:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
3418495c:	4291      	cmp	r1, r2
3418495e:	d008      	beq.n	34184972 <HAL_RCCEx_PeriphCLKConfig+0x190a>
34184960:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34184964:	4293      	cmp	r3, r2
34184966:	d004      	beq.n	34184972 <HAL_RCCEx_PeriphCLKConfig+0x190a>
34184968:	f240 71a1 	movw	r1, #1953	@ 0x7a1
3418496c:	4890      	ldr	r0, [pc, #576]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3418496e:	f7fc fbef 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC9)
34184972:	f8d4 315c 	ldr.w	r3, [r4, #348]	@ 0x15c
34184976:	4a92      	ldr	r2, [pc, #584]	@ (34184bc0 <HAL_RCCEx_PeriphCLKConfig+0x1b58>)
34184978:	4293      	cmp	r3, r2
3418497a:	f041 81a6 	bne.w	34185cca <HAL_RCCEx_PeriphCLKConfig+0x2c62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
3418497e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34184980:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184984:	d004      	beq.n	34184990 <HAL_RCCEx_PeriphCLKConfig+0x1928>
34184986:	f240 71a6 	movw	r1, #1958	@ 0x7a6
3418498a:	4889      	ldr	r0, [pc, #548]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3418498c:	f7fc fbe0 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34184990:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34184992:	3b01      	subs	r3, #1
34184994:	2bff      	cmp	r3, #255	@ 0xff
34184996:	d904      	bls.n	341849a2 <HAL_RCCEx_PeriphCLKConfig+0x193a>
34184998:	f240 71a7 	movw	r1, #1959	@ 0x7a7
3418499c:	4884      	ldr	r0, [pc, #528]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
3418499e:	f7fc fbd7 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341849a2:	4a85      	ldr	r2, [pc, #532]	@ (34184bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
341849a4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
341849a6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
341849aa:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
341849ac:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341849b0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341849b4:	3901      	subs	r1, #1
341849b6:	4303      	orrs	r3, r0
341849b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341849bc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
341849c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
341849c4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
341849c8:	f8d4 015c 	ldr.w	r0, [r4, #348]	@ 0x15c
341849cc:	f7fe fa68 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
341849d0:	6863      	ldr	r3, [r4, #4]
341849d2:	04db      	lsls	r3, r3, #19
341849d4:	d544      	bpl.n	34184a60 <HAL_RCCEx_PeriphCLKConfig+0x19f8>
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
341849d6:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
341849da:	4a7a      	ldr	r2, [pc, #488]	@ (34184bc4 <HAL_RCCEx_PeriphCLKConfig+0x1b5c>)
341849dc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
341849e0:	4291      	cmp	r1, r2
341849e2:	d00e      	beq.n	34184a02 <HAL_RCCEx_PeriphCLKConfig+0x199a>
341849e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
341849e8:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
341849ec:	4291      	cmp	r1, r2
341849ee:	d008      	beq.n	34184a02 <HAL_RCCEx_PeriphCLKConfig+0x199a>
341849f0:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
341849f4:	4293      	cmp	r3, r2
341849f6:	d004      	beq.n	34184a02 <HAL_RCCEx_PeriphCLKConfig+0x199a>
341849f8:	f240 71ce 	movw	r1, #1998	@ 0x7ce
341849fc:	486c      	ldr	r0, [pc, #432]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
341849fe:	f7fc fba7 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC9)
34184a02:	f8d4 3160 	ldr.w	r3, [r4, #352]	@ 0x160
34184a06:	4a70      	ldr	r2, [pc, #448]	@ (34184bc8 <HAL_RCCEx_PeriphCLKConfig+0x1b60>)
34184a08:	4293      	cmp	r3, r2
34184a0a:	f041 818f 	bne.w	34185d2c <HAL_RCCEx_PeriphCLKConfig+0x2cc4>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34184a0e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34184a10:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184a14:	d004      	beq.n	34184a20 <HAL_RCCEx_PeriphCLKConfig+0x19b8>
34184a16:	f240 71d3 	movw	r1, #2003	@ 0x7d3
34184a1a:	4865      	ldr	r0, [pc, #404]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34184a1c:	f7fc fb98 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34184a20:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34184a22:	3b01      	subs	r3, #1
34184a24:	2bff      	cmp	r3, #255	@ 0xff
34184a26:	d904      	bls.n	34184a32 <HAL_RCCEx_PeriphCLKConfig+0x19ca>
34184a28:	f240 71d4 	movw	r1, #2004	@ 0x7d4
34184a2c:	4860      	ldr	r0, [pc, #384]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34184a2e:	f7fc fb8f 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34184a32:	4a61      	ldr	r2, [pc, #388]	@ (34184bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34184a34:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34184a36:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34184a3a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34184a3c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184a40:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184a44:	3901      	subs	r1, #1
34184a46:	4303      	orrs	r3, r0
34184a48:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184a4c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34184a50:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34184a54:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34184a58:	f8d4 0160 	ldr.w	r0, [r4, #352]	@ 0x160
34184a5c:	f7fe fa20 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
34184a60:	6863      	ldr	r3, [r4, #4]
34184a62:	049e      	lsls	r6, r3, #18
34184a64:	d544      	bpl.n	34184af0 <HAL_RCCEx_PeriphCLKConfig+0x1a88>
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));
34184a66:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34184a6a:	4a58      	ldr	r2, [pc, #352]	@ (34184bcc <HAL_RCCEx_PeriphCLKConfig+0x1b64>)
34184a6c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34184a70:	4291      	cmp	r1, r2
34184a72:	d00e      	beq.n	34184a92 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34184a74:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184a78:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34184a7c:	4291      	cmp	r1, r2
34184a7e:	d008      	beq.n	34184a92 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34184a80:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34184a84:	4293      	cmp	r3, r2
34184a86:	d004      	beq.n	34184a92 <HAL_RCCEx_PeriphCLKConfig+0x1a2a>
34184a88:	f240 71fb 	movw	r1, #2043	@ 0x7fb
34184a8c:	4848      	ldr	r0, [pc, #288]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34184a8e:	f7fc fb5f 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC9)
34184a92:	f8d4 3164 	ldr.w	r3, [r4, #356]	@ 0x164
34184a96:	4a4e      	ldr	r2, [pc, #312]	@ (34184bd0 <HAL_RCCEx_PeriphCLKConfig+0x1b68>)
34184a98:	4293      	cmp	r3, r2
34184a9a:	f041 8199 	bne.w	34185dd0 <HAL_RCCEx_PeriphCLKConfig+0x2d68>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34184a9e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34184aa0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184aa4:	d004      	beq.n	34184ab0 <HAL_RCCEx_PeriphCLKConfig+0x1a48>
34184aa6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
34184aaa:	4841      	ldr	r0, [pc, #260]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34184aac:	f7fc fb50 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34184ab0:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34184ab2:	3b01      	subs	r3, #1
34184ab4:	2bff      	cmp	r3, #255	@ 0xff
34184ab6:	d904      	bls.n	34184ac2 <HAL_RCCEx_PeriphCLKConfig+0x1a5a>
34184ab8:	f640 0101 	movw	r1, #2049	@ 0x801
34184abc:	483c      	ldr	r0, [pc, #240]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34184abe:	f7fc fb47 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34184ac2:	4a3d      	ldr	r2, [pc, #244]	@ (34184bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34184ac4:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34184ac6:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34184aca:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34184acc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184ad0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184ad4:	3901      	subs	r1, #1
34184ad6:	4303      	orrs	r3, r0
34184ad8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184adc:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34184ae0:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34184ae4:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34184ae8:	f8d4 0164 	ldr.w	r0, [r4, #356]	@ 0x164
34184aec:	f7fe f9d8 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
34184af0:	6863      	ldr	r3, [r4, #4]
34184af2:	0458      	lsls	r0, r3, #17
34184af4:	d544      	bpl.n	34184b80 <HAL_RCCEx_PeriphCLKConfig+0x1b18>
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));
34184af6:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34184afa:	4a36      	ldr	r2, [pc, #216]	@ (34184bd4 <HAL_RCCEx_PeriphCLKConfig+0x1b6c>)
34184afc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34184b00:	4291      	cmp	r1, r2
34184b02:	d00e      	beq.n	34184b22 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34184b04:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184b08:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34184b0c:	4291      	cmp	r1, r2
34184b0e:	d008      	beq.n	34184b22 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34184b10:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34184b14:	4293      	cmp	r3, r2
34184b16:	d004      	beq.n	34184b22 <HAL_RCCEx_PeriphCLKConfig+0x1aba>
34184b18:	f640 0128 	movw	r1, #2088	@ 0x828
34184b1c:	4824      	ldr	r0, [pc, #144]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34184b1e:	f7fc fb17 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC9)
34184b22:	f8d4 3168 	ldr.w	r3, [r4, #360]	@ 0x168
34184b26:	4a2c      	ldr	r2, [pc, #176]	@ (34184bd8 <HAL_RCCEx_PeriphCLKConfig+0x1b70>)
34184b28:	4293      	cmp	r3, r2
34184b2a:	f041 8182 	bne.w	34185e32 <HAL_RCCEx_PeriphCLKConfig+0x2dca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34184b2e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34184b30:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184b34:	d004      	beq.n	34184b40 <HAL_RCCEx_PeriphCLKConfig+0x1ad8>
34184b36:	f640 012d 	movw	r1, #2093	@ 0x82d
34184b3a:	481d      	ldr	r0, [pc, #116]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34184b3c:	f7fc fb08 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34184b40:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34184b42:	3b01      	subs	r3, #1
34184b44:	2bff      	cmp	r3, #255	@ 0xff
34184b46:	d904      	bls.n	34184b52 <HAL_RCCEx_PeriphCLKConfig+0x1aea>
34184b48:	f640 012e 	movw	r1, #2094	@ 0x82e
34184b4c:	4818      	ldr	r0, [pc, #96]	@ (34184bb0 <HAL_RCCEx_PeriphCLKConfig+0x1b48>)
34184b4e:	f7fc faff 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34184b52:	4a19      	ldr	r2, [pc, #100]	@ (34184bb8 <HAL_RCCEx_PeriphCLKConfig+0x1b50>)
34184b54:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34184b56:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34184b5a:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34184b5c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184b60:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184b64:	3901      	subs	r1, #1
34184b66:	4303      	orrs	r3, r0
34184b68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184b6c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34184b70:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34184b74:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34184b78:	f8d4 0168 	ldr.w	r0, [r4, #360]	@ 0x168
34184b7c:	f7fe f990 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
34184b80:	6863      	ldr	r3, [r4, #4]
34184b82:	0419      	lsls	r1, r3, #16
34184b84:	d560      	bpl.n	34184c48 <HAL_RCCEx_PeriphCLKConfig+0x1be0>
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));
34184b86:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34184b8a:	4a14      	ldr	r2, [pc, #80]	@ (34184bdc <HAL_RCCEx_PeriphCLKConfig+0x1b74>)
34184b8c:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34184b90:	4291      	cmp	r1, r2
34184b92:	d02a      	beq.n	34184bea <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34184b94:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184b98:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34184b9c:	4291      	cmp	r1, r2
34184b9e:	d024      	beq.n	34184bea <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34184ba0:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34184ba4:	4293      	cmp	r3, r2
34184ba6:	d020      	beq.n	34184bea <HAL_RCCEx_PeriphCLKConfig+0x1b82>
34184ba8:	e01a      	b.n	34184be0 <HAL_RCCEx_PeriphCLKConfig+0x1b78>
34184baa:	bf00      	nop
34184bac:	07000830 	.word	0x07000830
34184bb0:	3418cf4f 	.word	0x3418cf4f
34184bb4:	07020830 	.word	0x07020830
34184bb8:	56028000 	.word	0x56028000
34184bbc:	07000c30 	.word	0x07000c30
34184bc0:	07020c30 	.word	0x07020c30
34184bc4:	07001030 	.word	0x07001030
34184bc8:	07021030 	.word	0x07021030
34184bcc:	07001430 	.word	0x07001430
34184bd0:	07021430 	.word	0x07021430
34184bd4:	07001830 	.word	0x07001830
34184bd8:	07021830 	.word	0x07021830
34184bdc:	07001c30 	.word	0x07001c30
34184be0:	f640 0155 	movw	r1, #2133	@ 0x855
34184be4:	48bb      	ldr	r0, [pc, #748]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184be6:	f7fc fab3 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC9)
34184bea:	f8d4 316c 	ldr.w	r3, [r4, #364]	@ 0x16c
34184bee:	4aba      	ldr	r2, [pc, #744]	@ (34184ed8 <HAL_RCCEx_PeriphCLKConfig+0x1e70>)
34184bf0:	4293      	cmp	r3, r2
34184bf2:	f041 814f 	bne.w	34185e94 <HAL_RCCEx_PeriphCLKConfig+0x2e2c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34184bf6:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34184bf8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184bfc:	d004      	beq.n	34184c08 <HAL_RCCEx_PeriphCLKConfig+0x1ba0>
34184bfe:	f640 015a 	movw	r1, #2138	@ 0x85a
34184c02:	48b4      	ldr	r0, [pc, #720]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184c04:	f7fc faa4 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34184c08:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34184c0a:	3b01      	subs	r3, #1
34184c0c:	2bff      	cmp	r3, #255	@ 0xff
34184c0e:	d904      	bls.n	34184c1a <HAL_RCCEx_PeriphCLKConfig+0x1bb2>
34184c10:	f640 015b 	movw	r1, #2139	@ 0x85b
34184c14:	48af      	ldr	r0, [pc, #700]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184c16:	f7fc fa9b 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34184c1a:	4ab0      	ldr	r2, [pc, #704]	@ (34184edc <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34184c1c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34184c1e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34184c22:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34184c24:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184c28:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184c2c:	3901      	subs	r1, #1
34184c2e:	4303      	orrs	r3, r0
34184c30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184c34:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34184c38:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34184c3c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34184c40:	f8d4 016c 	ldr.w	r0, [r4, #364]	@ 0x16c
34184c44:	f7fe f92c 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_UART9) == RCC_PERIPHCLK_UART9)
34184c48:	6863      	ldr	r3, [r4, #4]
34184c4a:	03da      	lsls	r2, r3, #15
34184c4c:	d544      	bpl.n	34184cd8 <HAL_RCCEx_PeriphCLKConfig+0x1c70>
    assert_param(IS_RCC_UART9CLKSOURCE(PeriphClkInit->Uart9ClockSelection));
34184c4e:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34184c52:	4aa3      	ldr	r2, [pc, #652]	@ (34184ee0 <HAL_RCCEx_PeriphCLKConfig+0x1e78>)
34184c54:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34184c58:	4291      	cmp	r1, r2
34184c5a:	d00e      	beq.n	34184c7a <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34184c5c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184c60:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34184c64:	4291      	cmp	r1, r2
34184c66:	d008      	beq.n	34184c7a <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34184c68:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34184c6c:	4293      	cmp	r3, r2
34184c6e:	d004      	beq.n	34184c7a <HAL_RCCEx_PeriphCLKConfig+0x1c12>
34184c70:	f640 0182 	movw	r1, #2178	@ 0x882
34184c74:	4897      	ldr	r0, [pc, #604]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184c76:	f7fc fa6b 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC9)
34184c7a:	f8d4 3170 	ldr.w	r3, [r4, #368]	@ 0x170
34184c7e:	4a99      	ldr	r2, [pc, #612]	@ (34184ee4 <HAL_RCCEx_PeriphCLKConfig+0x1e7c>)
34184c80:	4293      	cmp	r3, r2
34184c82:	f041 8138 	bne.w	34185ef6 <HAL_RCCEx_PeriphCLKConfig+0x2e8e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34184c86:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34184c88:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184c8c:	d004      	beq.n	34184c98 <HAL_RCCEx_PeriphCLKConfig+0x1c30>
34184c8e:	f640 0187 	movw	r1, #2183	@ 0x887
34184c92:	4890      	ldr	r0, [pc, #576]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184c94:	f7fc fa5c 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34184c98:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34184c9a:	3b01      	subs	r3, #1
34184c9c:	2bff      	cmp	r3, #255	@ 0xff
34184c9e:	d904      	bls.n	34184caa <HAL_RCCEx_PeriphCLKConfig+0x1c42>
34184ca0:	f640 0188 	movw	r1, #2184	@ 0x888
34184ca4:	488b      	ldr	r0, [pc, #556]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184ca6:	f7fc fa53 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34184caa:	4a8c      	ldr	r2, [pc, #560]	@ (34184edc <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34184cac:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34184cae:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34184cb2:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34184cb4:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184cb8:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184cbc:	3901      	subs	r1, #1
34184cbe:	4303      	orrs	r3, r0
34184cc0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184cc4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34184cc8:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34184ccc:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34184cd0:	f8d4 0170 	ldr.w	r0, [r4, #368]	@ 0x170
34184cd4:	f7fe f8e4 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USART10) == RCC_PERIPHCLK_USART10)
34184cd8:	6863      	ldr	r3, [r4, #4]
34184cda:	039b      	lsls	r3, r3, #14
34184cdc:	d544      	bpl.n	34184d68 <HAL_RCCEx_PeriphCLKConfig+0x1d00>
    assert_param(IS_RCC_USART10CLKSOURCE(PeriphClkInit->Usart10ClockSelection));
34184cde:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34184ce2:	4a81      	ldr	r2, [pc, #516]	@ (34184ee8 <HAL_RCCEx_PeriphCLKConfig+0x1e80>)
34184ce4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34184ce8:	4291      	cmp	r1, r2
34184cea:	d00e      	beq.n	34184d0a <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34184cec:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184cf0:	f502 2280 	add.w	r2, r2, #262144	@ 0x40000
34184cf4:	4291      	cmp	r1, r2
34184cf6:	d008      	beq.n	34184d0a <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34184cf8:	f502 3200 	add.w	r2, r2, #131072	@ 0x20000
34184cfc:	4293      	cmp	r3, r2
34184cfe:	d004      	beq.n	34184d0a <HAL_RCCEx_PeriphCLKConfig+0x1ca2>
34184d00:	f640 01af 	movw	r1, #2223	@ 0x8af
34184d04:	4873      	ldr	r0, [pc, #460]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184d06:	f7fc fa23 	bl	34181150 <assert_failed>
    if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC9)
34184d0a:	f8d4 3174 	ldr.w	r3, [r4, #372]	@ 0x174
34184d0e:	4a77      	ldr	r2, [pc, #476]	@ (34184eec <HAL_RCCEx_PeriphCLKConfig+0x1e84>)
34184d10:	4293      	cmp	r3, r2
34184d12:	f041 8121 	bne.w	34185f58 <HAL_RCCEx_PeriphCLKConfig+0x2ef0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34184d16:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34184d18:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184d1c:	d004      	beq.n	34184d28 <HAL_RCCEx_PeriphCLKConfig+0x1cc0>
34184d1e:	f640 01b4 	movw	r1, #2228	@ 0x8b4
34184d22:	486c      	ldr	r0, [pc, #432]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184d24:	f7fc fa14 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34184d28:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34184d2a:	3b01      	subs	r3, #1
34184d2c:	2bff      	cmp	r3, #255	@ 0xff
34184d2e:	d904      	bls.n	34184d3a <HAL_RCCEx_PeriphCLKConfig+0x1cd2>
34184d30:	f640 01b5 	movw	r1, #2229	@ 0x8b5
34184d34:	4867      	ldr	r0, [pc, #412]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184d36:	f7fc fa0b 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34184d3a:	4a68      	ldr	r2, [pc, #416]	@ (34184edc <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34184d3c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34184d3e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34184d42:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34184d44:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184d48:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184d4c:	3901      	subs	r1, #1
34184d4e:	4303      	orrs	r3, r0
34184d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184d54:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34184d58:	f44f 7380 	mov.w	r3, #256	@ 0x100
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34184d5c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
  LL_RCC_SetClockSource(ClkSource);
34184d60:	f8d4 0174 	ldr.w	r0, [r4, #372]	@ 0x174
34184d64:	f7fe f89c 	bl	34182ea0 <LL_RCC_SetClockSource>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY1) == RCC_PERIPHCLK_USBPHY1)
34184d68:	6863      	ldr	r3, [r4, #4]
34184d6a:	035e      	lsls	r6, r3, #13
34184d6c:	d51e      	bpl.n	34184dac <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    assert_param(IS_RCC_USBPHY1CLKSOURCE(PeriphClkInit->UsbPhy1ClockSelection));
34184d6e:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34184d72:	4a5f      	ldr	r2, [pc, #380]	@ (34184ef0 <HAL_RCCEx_PeriphCLKConfig+0x1e88>)
34184d74:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184d78:	4291      	cmp	r1, r2
34184d7a:	d00a      	beq.n	34184d92 <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34184d7c:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34184d80:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34184d84:	4293      	cmp	r3, r2
34184d86:	d004      	beq.n	34184d92 <HAL_RCCEx_PeriphCLKConfig+0x1d2a>
34184d88:	f640 01dc 	movw	r1, #2268	@ 0x8dc
34184d8c:	4851      	ldr	r0, [pc, #324]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184d8e:	f7fc f9df 	bl	34181150 <assert_failed>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34184d92:	f8d4 0178 	ldr.w	r0, [r4, #376]	@ 0x178
  LL_RCC_SetClockSource(ClkSource);
34184d96:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34184d9a:	f7fe f881 	bl	34182ea0 <LL_RCC_SetClockSource>
34184d9e:	f8d4 3178 	ldr.w	r3, [r4, #376]	@ 0x178
34184da2:	2b00      	cmp	r3, #0
34184da4:	f281 8109 	bge.w	34185fba <HAL_RCCEx_PeriphCLKConfig+0x2f52>
34184da8:	f7fe f84a 	bl	34182e40 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBPHY2) == RCC_PERIPHCLK_USBPHY2)
34184dac:	6863      	ldr	r3, [r4, #4]
34184dae:	02d8      	lsls	r0, r3, #11
34184db0:	d51e      	bpl.n	34184df0 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    assert_param(IS_RCC_USBPHY2CLKSOURCE(PeriphClkInit->UsbPhy2ClockSelection));
34184db2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
34184db6:	4a4f      	ldr	r2, [pc, #316]	@ (34184ef4 <HAL_RCCEx_PeriphCLKConfig+0x1e8c>)
34184db8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
34184dbc:	4291      	cmp	r1, r2
34184dbe:	d00a      	beq.n	34184dd6 <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
34184dc0:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34184dc4:	f502 3280 	add.w	r2, r2, #65536	@ 0x10000
34184dc8:	4293      	cmp	r3, r2
34184dca:	d004      	beq.n	34184dd6 <HAL_RCCEx_PeriphCLKConfig+0x1d6e>
34184dcc:	f640 01e6 	movw	r1, #2278	@ 0x8e6
34184dd0:	4840      	ldr	r0, [pc, #256]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184dd2:	f7fc f9bd 	bl	34181150 <assert_failed>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34184dd6:	f8d4 0180 	ldr.w	r0, [r4, #384]	@ 0x180
34184dda:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34184dde:	f7fe f85f 	bl	34182ea0 <LL_RCC_SetClockSource>
34184de2:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
34184de6:	2b00      	cmp	r3, #0
34184de8:	f281 80eb 	bge.w	34185fc2 <HAL_RCCEx_PeriphCLKConfig+0x2f5a>
34184dec:	f7fe f828 	bl	34182e40 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS1) == RCC_PERIPHCLK_USBOTGHS1)
34184df0:	6863      	ldr	r3, [r4, #4]
34184df2:	0319      	lsls	r1, r3, #12
34184df4:	d549      	bpl.n	34184e8a <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    assert_param(IS_RCC_USBOTGHS1CLKSOURCE(PeriphClkInit->UsbOtgHs1ClockSelection));
34184df6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34184dfa:	4a3f      	ldr	r2, [pc, #252]	@ (34184ef8 <HAL_RCCEx_PeriphCLKConfig+0x1e90>)
34184dfc:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34184e00:	4291      	cmp	r1, r2
34184e02:	d00a      	beq.n	34184e1a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
34184e04:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34184e08:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34184e0c:	4293      	cmp	r3, r2
34184e0e:	d004      	beq.n	34184e1a <HAL_RCCEx_PeriphCLKConfig+0x1db2>
34184e10:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
34184e14:	482f      	ldr	r0, [pc, #188]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184e16:	f7fc f99b 	bl	34181150 <assert_failed>
    if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_IC15)
34184e1a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34184e1e:	4a37      	ldr	r2, [pc, #220]	@ (34184efc <HAL_RCCEx_PeriphCLKConfig+0x1e94>)
34184e20:	4293      	cmp	r3, r2
34184e22:	f041 80d2 	bne.w	34185fca <HAL_RCCEx_PeriphCLKConfig+0x2f62>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34184e26:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34184e28:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184e2c:	d004      	beq.n	34184e38 <HAL_RCCEx_PeriphCLKConfig+0x1dd0>
34184e2e:	f640 01f5 	movw	r1, #2293	@ 0x8f5
34184e32:	4828      	ldr	r0, [pc, #160]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184e34:	f7fc f98c 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34184e38:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34184e3a:	3b01      	subs	r3, #1
34184e3c:	2bff      	cmp	r3, #255	@ 0xff
34184e3e:	d904      	bls.n	34184e4a <HAL_RCCEx_PeriphCLKConfig+0x1de2>
34184e40:	f640 01f6 	movw	r1, #2294	@ 0x8f6
34184e44:	4823      	ldr	r0, [pc, #140]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184e46:	f7fc f983 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34184e4a:	4a24      	ldr	r2, [pc, #144]	@ (34184edc <HAL_RCCEx_PeriphCLKConfig+0x1e74>)
34184e4c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34184e4e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34184e52:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34184e54:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184e58:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184e5c:	3901      	subs	r1, #1
34184e5e:	4303      	orrs	r3, r0
34184e60:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184e64:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34184e68:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34184e6c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34184e70:	f8d4 017c 	ldr.w	r0, [r4, #380]	@ 0x17c
  LL_RCC_SetClockSource(ClkSource);
34184e74:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34184e78:	f7fe f812 	bl	34182ea0 <LL_RCC_SetClockSource>
34184e7c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34184e80:	2b00      	cmp	r3, #0
34184e82:	f281 80ab 	bge.w	34185fdc <HAL_RCCEx_PeriphCLKConfig+0x2f74>
34184e86:	f7fd ffdb 	bl	34182e40 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_USBOTGHS2) == RCC_PERIPHCLK_USBOTGHS2)
34184e8a:	6863      	ldr	r3, [r4, #4]
34184e8c:	029a      	lsls	r2, r3, #10
34184e8e:	d564      	bpl.n	34184f5a <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
    assert_param(IS_RCC_USBOTGHS2CLKSOURCE(PeriphClkInit->UsbOtgHs2ClockSelection));
34184e90:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34184e94:	4a1a      	ldr	r2, [pc, #104]	@ (34184f00 <HAL_RCCEx_PeriphCLKConfig+0x1e98>)
34184e96:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
34184e9a:	4291      	cmp	r1, r2
34184e9c:	d00a      	beq.n	34184eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
34184e9e:	f102 4200 	add.w	r2, r2, #2147483648	@ 0x80000000
34184ea2:	f502 3240 	add.w	r2, r2, #196608	@ 0x30000
34184ea6:	4293      	cmp	r3, r2
34184ea8:	d004      	beq.n	34184eb4 <HAL_RCCEx_PeriphCLKConfig+0x1e4c>
34184eaa:	f44f 6111 	mov.w	r1, #2320	@ 0x910
34184eae:	4809      	ldr	r0, [pc, #36]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184eb0:	f7fc f94e 	bl	34181150 <assert_failed>
    if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_IC15)
34184eb4:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34184eb8:	4a12      	ldr	r2, [pc, #72]	@ (34184f04 <HAL_RCCEx_PeriphCLKConfig+0x1e9c>)
34184eba:	4293      	cmp	r3, r2
34184ebc:	f041 8092 	bne.w	34185fe4 <HAL_RCCEx_PeriphCLKConfig+0x2f7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34184ec0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34184ec2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184ec6:	d01f      	beq.n	34184f08 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
34184ec8:	f640 1115 	movw	r1, #2325	@ 0x915
34184ecc:	4801      	ldr	r0, [pc, #4]	@ (34184ed4 <HAL_RCCEx_PeriphCLKConfig+0x1e6c>)
34184ece:	f7fc f93f 	bl	34181150 <assert_failed>
34184ed2:	e019      	b.n	34184f08 <HAL_RCCEx_PeriphCLKConfig+0x1ea0>
34184ed4:	3418cf4f 	.word	0x3418cf4f
34184ed8:	07021c30 	.word	0x07021c30
34184edc:	56028000 	.word	0x56028000
34184ee0:	07000034 	.word	0x07000034
34184ee4:	07020034 	.word	0x07020034
34184ee8:	07000434 	.word	0x07000434
34184eec:	07020434 	.word	0x07020434
34184ef0:	01001014 	.word	0x01001014
34184ef4:	01001814 	.word	0x01001814
34184ef8:	03000c14 	.word	0x03000c14
34184efc:	03020c14 	.word	0x03020c14
34184f00:	03001414 	.word	0x03001414
34184f04:	03021414 	.word	0x03021414
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34184f08:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34184f0a:	3b01      	subs	r3, #1
34184f0c:	2bff      	cmp	r3, #255	@ 0xff
34184f0e:	d904      	bls.n	34184f1a <HAL_RCCEx_PeriphCLKConfig+0x1eb2>
34184f10:	f640 1116 	movw	r1, #2326	@ 0x916
34184f14:	48b1      	ldr	r0, [pc, #708]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34184f16:	f7fc f91b 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34184f1a:	4ab1      	ldr	r2, [pc, #708]	@ (341851e0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34184f1c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34184f1e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34184f22:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34184f24:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184f28:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184f2c:	3901      	subs	r1, #1
34184f2e:	4303      	orrs	r3, r0
34184f30:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184f34:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34184f38:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34184f3c:	f8c2 3a40 	str.w	r3, [r2, #2624]	@ 0xa40
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34184f40:	f8d4 0184 	ldr.w	r0, [r4, #388]	@ 0x184
  LL_RCC_SetClockSource(ClkSource);
34184f44:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
34184f48:	f7fd ffaa 	bl	34182ea0 <LL_RCC_SetClockSource>
34184f4c:	f8d4 3184 	ldr.w	r3, [r4, #388]	@ 0x184
34184f50:	2b00      	cmp	r3, #0
34184f52:	f281 8050 	bge.w	34185ff6 <HAL_RCCEx_PeriphCLKConfig+0x2f8e>
34184f56:	f7fd ff73 	bl	34182e40 <LL_RCC_HSE_SelectHSEDiv2AsDiv2Clock>
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
34184f5a:	6863      	ldr	r3, [r4, #4]
34184f5c:	061b      	lsls	r3, r3, #24
34184f5e:	d511      	bpl.n	34184f84 <HAL_RCCEx_PeriphCLKConfig+0x1f1c>
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));
34184f60:	f8d4 318c 	ldr.w	r3, [r4, #396]	@ 0x18c
34184f64:	2b03      	cmp	r3, #3
34184f66:	d904      	bls.n	34184f72 <HAL_RCCEx_PeriphCLKConfig+0x1f0a>
34184f68:	f44f 6113 	mov.w	r1, #2352	@ 0x930
34184f6c:	489b      	ldr	r0, [pc, #620]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34184f6e:	f7fc f8ef 	bl	34181150 <assert_failed>
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_TIMPRE, Prescaler << RCC_CFGR2_TIMPRE_Pos);
34184f72:	4a9b      	ldr	r2, [pc, #620]	@ (341851e0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34184f74:	f8d4 118c 	ldr.w	r1, [r4, #396]	@ 0x18c
34184f78:	6a53      	ldr	r3, [r2, #36]	@ 0x24
34184f7a:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
34184f7e:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
34184f82:	6253      	str	r3, [r2, #36]	@ 0x24
}
34184f84:	1e28      	subs	r0, r5, #0
34184f86:	bf18      	it	ne
34184f88:	2001      	movne	r0, #1
34184f8a:	bd70      	pop	{r4, r5, r6, pc}
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC10].ClockSelection));
34184f8c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
34184f8e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184f92:	d003      	beq.n	34184f9c <HAL_RCCEx_PeriphCLKConfig+0x1f34>
34184f94:	21e6      	movs	r1, #230	@ 0xe6
34184f96:	4891      	ldr	r0, [pc, #580]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34184f98:	f7fc f8da 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC10].ClockDivider));
34184f9c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
34184f9e:	3b01      	subs	r3, #1
34184fa0:	2bff      	cmp	r3, #255	@ 0xff
34184fa2:	d903      	bls.n	34184fac <HAL_RCCEx_PeriphCLKConfig+0x1f44>
34184fa4:	21e7      	movs	r1, #231	@ 0xe7
34184fa6:	488d      	ldr	r0, [pc, #564]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34184fa8:	f7fc f8d2 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL | RCC_IC10CFGR_IC10INT,
34184fac:	4a8c      	ldr	r2, [pc, #560]	@ (341851e0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34184fae:	6d61      	ldr	r1, [r4, #84]	@ 0x54
34184fb0:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
34184fb4:	6d20      	ldr	r0, [r4, #80]	@ 0x50
34184fb6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34184fba:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34184fbe:	3901      	subs	r1, #1
34184fc0:	4303      	orrs	r3, r0
34184fc2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34184fc6:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC10ENS);
34184fca:	f44f 7300 	mov.w	r3, #512	@ 0x200
34184fce:	f7fe b941 	b.w	34183254 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34184fd2:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34184fd4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34184fd8:	d003      	beq.n	34184fe2 <HAL_RCCEx_PeriphCLKConfig+0x1f7a>
34184fda:	21f3      	movs	r1, #243	@ 0xf3
34184fdc:	487f      	ldr	r0, [pc, #508]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34184fde:	f7fc f8b7 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34184fe2:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34184fe4:	3b01      	subs	r3, #1
34184fe6:	2bff      	cmp	r3, #255	@ 0xff
34184fe8:	d903      	bls.n	34184ff2 <HAL_RCCEx_PeriphCLKConfig+0x1f8a>
34184fea:	21f4      	movs	r1, #244	@ 0xf4
34184fec:	487b      	ldr	r0, [pc, #492]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34184fee:	f7fc f8af 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34184ff2:	4a7b      	ldr	r2, [pc, #492]	@ (341851e0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34184ff4:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34184ff6:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34184ffa:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34184ffc:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185000:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185004:	3901      	subs	r1, #1
34185006:	4303      	orrs	r3, r0
34185008:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418500c:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34185010:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34185014:	f7fe b91e 	b.w	34183254 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC19].ClockSelection));
34185018:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
3418501c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185020:	d004      	beq.n	3418502c <HAL_RCCEx_PeriphCLKConfig+0x1fc4>
34185022:	f44f 7180 	mov.w	r1, #256	@ 0x100
34185026:	486d      	ldr	r0, [pc, #436]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34185028:	f7fc f892 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC19].ClockDivider));
3418502c:	f8d4 309c 	ldr.w	r3, [r4, #156]	@ 0x9c
34185030:	3b01      	subs	r3, #1
34185032:	2bff      	cmp	r3, #255	@ 0xff
34185034:	d904      	bls.n	34185040 <HAL_RCCEx_PeriphCLKConfig+0x1fd8>
34185036:	f240 1101 	movw	r1, #257	@ 0x101
3418503a:	4868      	ldr	r0, [pc, #416]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3418503c:	f7fc f888 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL | RCC_IC19CFGR_IC19INT,
34185040:	4a67      	ldr	r2, [pc, #412]	@ (341851e0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34185042:	f8d4 109c 	ldr.w	r1, [r4, #156]	@ 0x9c
34185046:	f8d2 310c 	ldr.w	r3, [r2, #268]	@ 0x10c
3418504a:	f8d4 0098 	ldr.w	r0, [r4, #152]	@ 0x98
3418504e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185052:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185056:	3901      	subs	r1, #1
34185058:	4303      	orrs	r3, r0
3418505a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418505e:	f8c2 310c 	str.w	r3, [r2, #268]	@ 0x10c
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC19ENS);
34185062:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
34185066:	f7fe b8f5 	b.w	34183254 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC20].ClockSelection));
3418506a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
3418506e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185072:	d004      	beq.n	3418507e <HAL_RCCEx_PeriphCLKConfig+0x2016>
34185074:	f240 110d 	movw	r1, #269	@ 0x10d
34185078:	4858      	ldr	r0, [pc, #352]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3418507a:	f7fc f869 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC20].ClockDivider));
3418507e:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
34185082:	3b01      	subs	r3, #1
34185084:	2bff      	cmp	r3, #255	@ 0xff
34185086:	d904      	bls.n	34185092 <HAL_RCCEx_PeriphCLKConfig+0x202a>
34185088:	f44f 7187 	mov.w	r1, #270	@ 0x10e
3418508c:	4853      	ldr	r0, [pc, #332]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
3418508e:	f7fc f85f 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL | RCC_IC20CFGR_IC20INT,
34185092:	4a53      	ldr	r2, [pc, #332]	@ (341851e0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34185094:	f8d4 10a4 	ldr.w	r1, [r4, #164]	@ 0xa4
34185098:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
3418509c:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
341850a0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341850a4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341850a8:	3901      	subs	r1, #1
341850aa:	4303      	orrs	r3, r0
341850ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341850b0:	f8c2 3110 	str.w	r3, [r2, #272]	@ 0x110
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC20ENS);
341850b4:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
341850b8:	f7fe b8cc 	b.w	34183254 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_IC4)
341850bc:	4a49      	ldr	r2, [pc, #292]	@ (341851e4 <HAL_RCCEx_PeriphCLKConfig+0x217c>)
341850be:	4293      	cmp	r3, r2
341850c0:	d123      	bne.n	3418510a <HAL_RCCEx_PeriphCLKConfig+0x20a2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
341850c2:	6a23      	ldr	r3, [r4, #32]
341850c4:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341850c8:	d004      	beq.n	341850d4 <HAL_RCCEx_PeriphCLKConfig+0x206c>
341850ca:	f44f 719b 	mov.w	r1, #310	@ 0x136
341850ce:	4843      	ldr	r0, [pc, #268]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
341850d0:	f7fc f83e 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
341850d4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
341850d6:	3b01      	subs	r3, #1
341850d8:	2bff      	cmp	r3, #255	@ 0xff
341850da:	d904      	bls.n	341850e6 <HAL_RCCEx_PeriphCLKConfig+0x207e>
341850dc:	f240 1137 	movw	r1, #311	@ 0x137
341850e0:	483e      	ldr	r0, [pc, #248]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
341850e2:	f7fc f835 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341850e6:	4a3e      	ldr	r2, [pc, #248]	@ (341851e0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
341850e8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
341850ea:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
341850ee:	6a20      	ldr	r0, [r4, #32]
341850f0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341850f4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341850f8:	3901      	subs	r1, #1
341850fa:	4303      	orrs	r3, r0
341850fc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185100:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34185104:	2308      	movs	r3, #8
34185106:	f7fe b8e8 	b.w	341832da <HAL_RCCEx_PeriphCLKConfig+0x272>
    else if (PeriphClkInit->Xspi1ClockSelection == RCC_XSPI1CLKSOURCE_CLKP)
3418510a:	4a37      	ldr	r2, [pc, #220]	@ (341851e8 <HAL_RCCEx_PeriphCLKConfig+0x2180>)
3418510c:	4293      	cmp	r3, r2
  * @rmtoll MISCENSR      PERENS        LL_RCC_CLKP_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_CLKP_Enable(void)
{
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3418510e:	bf02      	ittt	eq
34185110:	2240      	moveq	r2, #64	@ 0x40
34185112:	4b33      	ldreq	r3, [pc, #204]	@ (341851e0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34185114:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185118:	f7fe b8e1 	b.w	341832de <HAL_RCCEx_PeriphCLKConfig+0x276>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_IC4)
3418511c:	4a33      	ldr	r2, [pc, #204]	@ (341851ec <HAL_RCCEx_PeriphCLKConfig+0x2184>)
3418511e:	4293      	cmp	r3, r2
34185120:	d123      	bne.n	3418516a <HAL_RCCEx_PeriphCLKConfig+0x2102>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34185122:	6a23      	ldr	r3, [r4, #32]
34185124:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185128:	d004      	beq.n	34185134 <HAL_RCCEx_PeriphCLKConfig+0x20cc>
3418512a:	f240 1163 	movw	r1, #355	@ 0x163
3418512e:	482b      	ldr	r0, [pc, #172]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34185130:	f7fc f80e 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34185134:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34185136:	3b01      	subs	r3, #1
34185138:	2bff      	cmp	r3, #255	@ 0xff
3418513a:	d904      	bls.n	34185146 <HAL_RCCEx_PeriphCLKConfig+0x20de>
3418513c:	f44f 71b2 	mov.w	r1, #356	@ 0x164
34185140:	4826      	ldr	r0, [pc, #152]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34185142:	f7fc f805 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34185146:	4a26      	ldr	r2, [pc, #152]	@ (341851e0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34185148:	6a61      	ldr	r1, [r4, #36]	@ 0x24
3418514a:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3418514e:	6a20      	ldr	r0, [r4, #32]
34185150:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185154:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185158:	3901      	subs	r1, #1
3418515a:	4303      	orrs	r3, r0
3418515c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185160:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34185164:	2308      	movs	r3, #8
34185166:	f7fe b8f5 	b.w	34183354 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
    else if (PeriphClkInit->Xspi2ClockSelection == RCC_XSPI2CLKSOURCE_CLKP)
3418516a:	4a21      	ldr	r2, [pc, #132]	@ (341851f0 <HAL_RCCEx_PeriphCLKConfig+0x2188>)
3418516c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3418516e:	bf02      	ittt	eq
34185170:	2240      	moveq	r2, #64	@ 0x40
34185172:	4b1b      	ldreq	r3, [pc, #108]	@ (341851e0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
34185174:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185178:	f7fe b8ee 	b.w	34183358 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_IC4)
3418517c:	4a1d      	ldr	r2, [pc, #116]	@ (341851f4 <HAL_RCCEx_PeriphCLKConfig+0x218c>)
3418517e:	4293      	cmp	r3, r2
34185180:	d123      	bne.n	341851ca <HAL_RCCEx_PeriphCLKConfig+0x2162>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34185182:	6a23      	ldr	r3, [r4, #32]
34185184:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185188:	d004      	beq.n	34185194 <HAL_RCCEx_PeriphCLKConfig+0x212c>
3418518a:	f44f 71c8 	mov.w	r1, #400	@ 0x190
3418518e:	4813      	ldr	r0, [pc, #76]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
34185190:	f7fb ffde 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34185194:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34185196:	3b01      	subs	r3, #1
34185198:	2bff      	cmp	r3, #255	@ 0xff
3418519a:	d904      	bls.n	341851a6 <HAL_RCCEx_PeriphCLKConfig+0x213e>
3418519c:	f240 1191 	movw	r1, #401	@ 0x191
341851a0:	480e      	ldr	r0, [pc, #56]	@ (341851dc <HAL_RCCEx_PeriphCLKConfig+0x2174>)
341851a2:	f7fb ffd5 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
341851a6:	4a0e      	ldr	r2, [pc, #56]	@ (341851e0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
341851a8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
341851aa:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
341851ae:	6a20      	ldr	r0, [r4, #32]
341851b0:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341851b4:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341851b8:	3901      	subs	r1, #1
341851ba:	4303      	orrs	r3, r0
341851bc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341851c0:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
341851c4:	2308      	movs	r3, #8
341851c6:	f7fe b902 	b.w	341833ce <HAL_RCCEx_PeriphCLKConfig+0x366>
    else if (PeriphClkInit->Xspi3ClockSelection == RCC_XSPI3CLKSOURCE_CLKP)
341851ca:	4a0b      	ldr	r2, [pc, #44]	@ (341851f8 <HAL_RCCEx_PeriphCLKConfig+0x2190>)
341851cc:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341851ce:	bf02      	ittt	eq
341851d0:	2240      	moveq	r2, #64	@ 0x40
341851d2:	4b03      	ldreq	r3, [pc, #12]	@ (341851e0 <HAL_RCCEx_PeriphCLKConfig+0x2178>)
341851d4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341851d8:	f7fe b8fb 	b.w	341833d2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
341851dc:	3418cf4f 	.word	0x3418cf4f
341851e0:	56028000 	.word	0x56028000
341851e4:	03030014 	.word	0x03030014
341851e8:	03010014 	.word	0x03010014
341851ec:	03030414 	.word	0x03030414
341851f0:	03010414 	.word	0x03010414
341851f4:	03030814 	.word	0x03030814
341851f8:	03010814 	.word	0x03010814
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_IC4)
341851fc:	2b30      	cmp	r3, #48	@ 0x30
341851fe:	d123      	bne.n	34185248 <HAL_RCCEx_PeriphCLKConfig+0x21e0>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC4].ClockSelection));
34185200:	6a23      	ldr	r3, [r4, #32]
34185202:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185206:	d004      	beq.n	34185212 <HAL_RCCEx_PeriphCLKConfig+0x21aa>
34185208:	f240 11bd 	movw	r1, #445	@ 0x1bd
3418520c:	48b2      	ldr	r0, [pc, #712]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3418520e:	f7fb ff9f 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC4].ClockDivider));
34185212:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34185214:	3b01      	subs	r3, #1
34185216:	2bff      	cmp	r3, #255	@ 0xff
34185218:	d904      	bls.n	34185224 <HAL_RCCEx_PeriphCLKConfig+0x21bc>
3418521a:	f44f 71df 	mov.w	r1, #446	@ 0x1be
3418521e:	48ae      	ldr	r0, [pc, #696]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34185220:	f7fb ff96 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL | RCC_IC4CFGR_IC4INT,
34185224:	4aad      	ldr	r2, [pc, #692]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34185226:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34185228:	f8d2 30d0 	ldr.w	r3, [r2, #208]	@ 0xd0
3418522c:	6a20      	ldr	r0, [r4, #32]
3418522e:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185232:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185236:	3901      	subs	r1, #1
34185238:	4303      	orrs	r3, r0
3418523a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418523e:	f8c2 30d0 	str.w	r3, [r2, #208]	@ 0xd0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC4ENS);
34185242:	2308      	movs	r3, #8
34185244:	f7fe b8fd 	b.w	34183442 <HAL_RCCEx_PeriphCLKConfig+0x3da>
    else if (PeriphClkInit->FmcClockSelection == RCC_FMCCLKSOURCE_CLKP)
34185248:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3418524a:	bf02      	ittt	eq
3418524c:	2240      	moveq	r2, #64	@ 0x40
3418524e:	4ba3      	ldreq	r3, [pc, #652]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34185250:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185254:	f7fe b8f7 	b.w	34183446 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_IC5)
34185258:	4aa1      	ldr	r2, [pc, #644]	@ (341854e0 <HAL_RCCEx_PeriphCLKConfig+0x2478>)
3418525a:	4293      	cmp	r3, r2
3418525c:	d123      	bne.n	341852a6 <HAL_RCCEx_PeriphCLKConfig+0x223e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
3418525e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34185260:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185264:	d004      	beq.n	34185270 <HAL_RCCEx_PeriphCLKConfig+0x2208>
34185266:	f44f 71f5 	mov.w	r1, #490	@ 0x1ea
3418526a:	489b      	ldr	r0, [pc, #620]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3418526c:	f7fb ff70 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
34185270:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34185272:	3b01      	subs	r3, #1
34185274:	2bff      	cmp	r3, #255	@ 0xff
34185276:	d904      	bls.n	34185282 <HAL_RCCEx_PeriphCLKConfig+0x221a>
34185278:	f240 11eb 	movw	r1, #491	@ 0x1eb
3418527c:	4896      	ldr	r0, [pc, #600]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3418527e:	f7fb ff67 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
34185282:	4a96      	ldr	r2, [pc, #600]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34185284:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34185286:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
3418528a:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
3418528c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185290:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185294:	3901      	subs	r1, #1
34185296:	4303      	orrs	r3, r0
34185298:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418529c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
341852a0:	2310      	movs	r3, #16
341852a2:	f7fe b911 	b.w	341834c8 <HAL_RCCEx_PeriphCLKConfig+0x460>
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_CLKP)
341852a6:	4a8f      	ldr	r2, [pc, #572]	@ (341854e4 <HAL_RCCEx_PeriphCLKConfig+0x247c>)
341852a8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341852aa:	bf02      	ittt	eq
341852ac:	2240      	moveq	r2, #64	@ 0x40
341852ae:	4b8b      	ldreq	r3, [pc, #556]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
341852b0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341852b4:	f7fe b90a 	b.w	341834cc <HAL_RCCEx_PeriphCLKConfig+0x464>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_IC5)
341852b8:	4a8b      	ldr	r2, [pc, #556]	@ (341854e8 <HAL_RCCEx_PeriphCLKConfig+0x2480>)
341852ba:	4293      	cmp	r3, r2
341852bc:	d123      	bne.n	34185306 <HAL_RCCEx_PeriphCLKConfig+0x229e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC5].ClockSelection));
341852be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
341852c0:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341852c4:	d004      	beq.n	341852d0 <HAL_RCCEx_PeriphCLKConfig+0x2268>
341852c6:	f240 2117 	movw	r1, #535	@ 0x217
341852ca:	4883      	ldr	r0, [pc, #524]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
341852cc:	f7fb ff40 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC5].ClockDivider));
341852d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
341852d2:	3b01      	subs	r3, #1
341852d4:	2bff      	cmp	r3, #255	@ 0xff
341852d6:	d904      	bls.n	341852e2 <HAL_RCCEx_PeriphCLKConfig+0x227a>
341852d8:	f44f 7106 	mov.w	r1, #536	@ 0x218
341852dc:	487e      	ldr	r0, [pc, #504]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
341852de:	f7fb ff37 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL | RCC_IC5CFGR_IC5INT,
341852e2:	4a7e      	ldr	r2, [pc, #504]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
341852e4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
341852e6:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
341852ea:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
341852ec:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341852f0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341852f4:	3901      	subs	r1, #1
341852f6:	4303      	orrs	r3, r0
341852f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341852fc:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC5ENS);
34185300:	2310      	movs	r3, #16
34185302:	f7fe b938 	b.w	34183576 <HAL_RCCEx_PeriphCLKConfig+0x50e>
    else if (PeriphClkInit->Sdmmc2ClockSelection == RCC_SDMMC2CLKSOURCE_CLKP)
34185306:	4a79      	ldr	r2, [pc, #484]	@ (341854ec <HAL_RCCEx_PeriphCLKConfig+0x2484>)
34185308:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3418530a:	bf02      	ittt	eq
3418530c:	2240      	moveq	r2, #64	@ 0x40
3418530e:	4b73      	ldreq	r3, [pc, #460]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34185310:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185314:	f7fe b931 	b.w	3418357a <HAL_RCCEx_PeriphCLKConfig+0x512>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_IC8)
34185318:	2b30      	cmp	r3, #48	@ 0x30
3418531a:	d123      	bne.n	34185364 <HAL_RCCEx_PeriphCLKConfig+0x22fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3418531c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3418531e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185322:	d004      	beq.n	3418532e <HAL_RCCEx_PeriphCLKConfig+0x22c6>
34185324:	f240 2145 	movw	r1, #581	@ 0x245
34185328:	486b      	ldr	r0, [pc, #428]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3418532a:	f7fb ff11 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3418532e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34185330:	3b01      	subs	r3, #1
34185332:	2bff      	cmp	r3, #255	@ 0xff
34185334:	d904      	bls.n	34185340 <HAL_RCCEx_PeriphCLKConfig+0x22d8>
34185336:	f240 2146 	movw	r1, #582	@ 0x246
3418533a:	4867      	ldr	r0, [pc, #412]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3418533c:	f7fb ff08 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34185340:	4a66      	ldr	r2, [pc, #408]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34185342:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34185344:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34185348:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3418534a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418534e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185352:	3901      	subs	r1, #1
34185354:	4303      	orrs	r3, r0
34185356:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418535a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3418535e:	2380      	movs	r3, #128	@ 0x80
34185360:	f7fe b94f 	b.w	34183602 <HAL_RCCEx_PeriphCLKConfig+0x59a>
    else if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_CLKP)
34185364:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185366:	bf02      	ittt	eq
34185368:	2240      	moveq	r2, #64	@ 0x40
3418536a:	4b5c      	ldreq	r3, [pc, #368]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3418536c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185370:	f7fe b949 	b.w	34183606 <HAL_RCCEx_PeriphCLKConfig+0x59e>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_IC8)
34185374:	2b03      	cmp	r3, #3
34185376:	d123      	bne.n	341853c0 <HAL_RCCEx_PeriphCLKConfig+0x2358>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
34185378:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3418537a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3418537e:	d004      	beq.n	3418538a <HAL_RCCEx_PeriphCLKConfig+0x2322>
34185380:	f240 2173 	movw	r1, #627	@ 0x273
34185384:	4854      	ldr	r0, [pc, #336]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34185386:	f7fb fee3 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3418538a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3418538c:	3b01      	subs	r3, #1
3418538e:	2bff      	cmp	r3, #255	@ 0xff
34185390:	d904      	bls.n	3418539c <HAL_RCCEx_PeriphCLKConfig+0x2334>
34185392:	f44f 711d 	mov.w	r1, #628	@ 0x274
34185396:	4850      	ldr	r0, [pc, #320]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34185398:	f7fb feda 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418539c:	4a4f      	ldr	r2, [pc, #316]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3418539e:	6c61      	ldr	r1, [r4, #68]	@ 0x44
341853a0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
341853a4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
341853a6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341853aa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341853ae:	3901      	subs	r1, #1
341853b0:	4303      	orrs	r3, r0
341853b2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341853b6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
341853ba:	2380      	movs	r3, #128	@ 0x80
341853bc:	f7fe b967 	b.w	3418368e <HAL_RCCEx_PeriphCLKConfig+0x626>
    else if (PeriphClkInit->Adf1ClockSelection == RCC_ADF1CLKSOURCE_CLKP)
341853c0:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341853c2:	bf02      	ittt	eq
341853c4:	2240      	moveq	r2, #64	@ 0x40
341853c6:	4b45      	ldreq	r3, [pc, #276]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
341853c8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341853cc:	f7fe b961 	b.w	34183692 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    else if (PeriphClkInit->DcmippClockSelection == RCC_DCMIPPCLKSOURCE_CLKP)
341853d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341853d4:	bf02      	ittt	eq
341853d6:	2240      	moveq	r2, #64	@ 0x40
341853d8:	4b40      	ldreq	r3, [pc, #256]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
341853da:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341853de:	f7fe b9ca 	b.w	34183776 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    else if (PeriphClkInit->Eth1ClockSelection == RCC_ETH1CLKSOURCE_CLKP)
341853e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341853e6:	bf02      	ittt	eq
341853e8:	2240      	moveq	r2, #64	@ 0x40
341853ea:	4b3c      	ldreq	r3, [pc, #240]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
341853ec:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341853f0:	f7fe ba03 	b.w	341837fa <HAL_RCCEx_PeriphCLKConfig+0x792>
    else if (PeriphClkInit->Eth1PtpClockSelection == RCC_ETH1PTPCLKSOURCE_CLKP)
341853f4:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341853f6:	bf02      	ittt	eq
341853f8:	2240      	moveq	r2, #64	@ 0x40
341853fa:	4b38      	ldreq	r3, [pc, #224]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
341853fc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185400:	f7fe ba92 	b.w	34183928 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
    else if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_CLKP)
34185404:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185406:	bf02      	ittt	eq
34185408:	2240      	moveq	r2, #64	@ 0x40
3418540a:	4b34      	ldreq	r3, [pc, #208]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3418540c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185410:	f7fe bad3 	b.w	341839ba <HAL_RCCEx_PeriphCLKConfig+0x952>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_IC15)
34185414:	4a36      	ldr	r2, [pc, #216]	@ (341854f0 <HAL_RCCEx_PeriphCLKConfig+0x2488>)
34185416:	4293      	cmp	r3, r2
34185418:	d124      	bne.n	34185464 <HAL_RCCEx_PeriphCLKConfig+0x23fc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3418541a:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3418541c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185420:	d004      	beq.n	3418542c <HAL_RCCEx_PeriphCLKConfig+0x23c4>
34185422:	f240 314f 	movw	r1, #847	@ 0x34f
34185426:	482c      	ldr	r0, [pc, #176]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
34185428:	f7fb fe92 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3418542c:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3418542e:	3b01      	subs	r3, #1
34185430:	2bff      	cmp	r3, #255	@ 0xff
34185432:	d904      	bls.n	3418543e <HAL_RCCEx_PeriphCLKConfig+0x23d6>
34185434:	f44f 7154 	mov.w	r1, #848	@ 0x350
34185438:	4827      	ldr	r0, [pc, #156]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3418543a:	f7fb fe89 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418543e:	4a27      	ldr	r2, [pc, #156]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
34185440:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34185442:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34185446:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34185448:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418544c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185450:	3901      	subs	r1, #1
34185452:	4303      	orrs	r3, r0
34185454:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185458:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3418545c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34185460:	f7fe baf3 	b.w	34183a4a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
    else if (PeriphClkInit->I2c1ClockSelection == RCC_I2C1CLKSOURCE_CLKP)
34185464:	4a23      	ldr	r2, [pc, #140]	@ (341854f4 <HAL_RCCEx_PeriphCLKConfig+0x248c>)
34185466:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185468:	bf02      	ittt	eq
3418546a:	2240      	moveq	r2, #64	@ 0x40
3418546c:	4b1b      	ldreq	r3, [pc, #108]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
3418546e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185472:	f7fe baec 	b.w	34183a4e <HAL_RCCEx_PeriphCLKConfig+0x9e6>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_IC15)
34185476:	4a20      	ldr	r2, [pc, #128]	@ (341854f8 <HAL_RCCEx_PeriphCLKConfig+0x2490>)
34185478:	4293      	cmp	r3, r2
3418547a:	d124      	bne.n	341854c6 <HAL_RCCEx_PeriphCLKConfig+0x245e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3418547c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3418547e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185482:	d004      	beq.n	3418548e <HAL_RCCEx_PeriphCLKConfig+0x2426>
34185484:	f44f 715f 	mov.w	r1, #892	@ 0x37c
34185488:	4813      	ldr	r0, [pc, #76]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3418548a:	f7fb fe61 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3418548e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34185490:	3b01      	subs	r3, #1
34185492:	2bff      	cmp	r3, #255	@ 0xff
34185494:	d904      	bls.n	341854a0 <HAL_RCCEx_PeriphCLKConfig+0x2438>
34185496:	f240 317d 	movw	r1, #893	@ 0x37d
3418549a:	480f      	ldr	r0, [pc, #60]	@ (341854d8 <HAL_RCCEx_PeriphCLKConfig+0x2470>)
3418549c:	f7fb fe58 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341854a0:	4a0e      	ldr	r2, [pc, #56]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
341854a2:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
341854a4:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
341854a8:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
341854aa:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341854ae:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341854b2:	3901      	subs	r1, #1
341854b4:	4303      	orrs	r3, r0
341854b6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341854ba:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
341854be:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
341854c2:	f7fe bb06 	b.w	34183ad2 <HAL_RCCEx_PeriphCLKConfig+0xa6a>
    else if (PeriphClkInit->I2c2ClockSelection == RCC_I2C2CLKSOURCE_CLKP)
341854c6:	4a0d      	ldr	r2, [pc, #52]	@ (341854fc <HAL_RCCEx_PeriphCLKConfig+0x2494>)
341854c8:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341854ca:	bf02      	ittt	eq
341854cc:	2240      	moveq	r2, #64	@ 0x40
341854ce:	4b03      	ldreq	r3, [pc, #12]	@ (341854dc <HAL_RCCEx_PeriphCLKConfig+0x2474>)
341854d0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341854d4:	f7fe baff 	b.w	34183ad6 <HAL_RCCEx_PeriphCLKConfig+0xa6e>
341854d8:	3418cf4f 	.word	0x3418cf4f
341854dc:	56028000 	.word	0x56028000
341854e0:	0303001c 	.word	0x0303001c
341854e4:	0301001c 	.word	0x0301001c
341854e8:	0303041c 	.word	0x0303041c
341854ec:	0301041c 	.word	0x0301041c
341854f0:	0703000c 	.word	0x0703000c
341854f4:	0701000c 	.word	0x0701000c
341854f8:	0703040c 	.word	0x0703040c
341854fc:	0701040c 	.word	0x0701040c
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_IC15)
34185500:	4ab1      	ldr	r2, [pc, #708]	@ (341857c8 <HAL_RCCEx_PeriphCLKConfig+0x2760>)
34185502:	4293      	cmp	r3, r2
34185504:	d124      	bne.n	34185550 <HAL_RCCEx_PeriphCLKConfig+0x24e8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34185506:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
34185508:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3418550c:	d004      	beq.n	34185518 <HAL_RCCEx_PeriphCLKConfig+0x24b0>
3418550e:	f240 31a9 	movw	r1, #937	@ 0x3a9
34185512:	48ae      	ldr	r0, [pc, #696]	@ (341857cc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34185514:	f7fb fe1c 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
34185518:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3418551a:	3b01      	subs	r3, #1
3418551c:	2bff      	cmp	r3, #255	@ 0xff
3418551e:	d904      	bls.n	3418552a <HAL_RCCEx_PeriphCLKConfig+0x24c2>
34185520:	f240 31aa 	movw	r1, #938	@ 0x3aa
34185524:	48a9      	ldr	r0, [pc, #676]	@ (341857cc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34185526:	f7fb fe13 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418552a:	4aa9      	ldr	r2, [pc, #676]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3418552c:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
3418552e:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34185532:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34185534:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185538:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418553c:	3901      	subs	r1, #1
3418553e:	4303      	orrs	r3, r0
34185540:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185544:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
34185548:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
3418554c:	f7fe bb05 	b.w	34183b5a <HAL_RCCEx_PeriphCLKConfig+0xaf2>
    else if (PeriphClkInit->I2c3ClockSelection == RCC_I2C3CLKSOURCE_CLKP)
34185550:	4aa0      	ldr	r2, [pc, #640]	@ (341857d4 <HAL_RCCEx_PeriphCLKConfig+0x276c>)
34185552:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185554:	bf02      	ittt	eq
34185556:	2240      	moveq	r2, #64	@ 0x40
34185558:	4b9d      	ldreq	r3, [pc, #628]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3418555a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3418555e:	f7fe bafe 	b.w	34183b5e <HAL_RCCEx_PeriphCLKConfig+0xaf6>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_IC15)
34185562:	4a9d      	ldr	r2, [pc, #628]	@ (341857d8 <HAL_RCCEx_PeriphCLKConfig+0x2770>)
34185564:	4293      	cmp	r3, r2
34185566:	d124      	bne.n	341855b2 <HAL_RCCEx_PeriphCLKConfig+0x254a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
34185568:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3418556a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3418556e:	d004      	beq.n	3418557a <HAL_RCCEx_PeriphCLKConfig+0x2512>
34185570:	f240 31d6 	movw	r1, #982	@ 0x3d6
34185574:	4895      	ldr	r0, [pc, #596]	@ (341857cc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34185576:	f7fb fdeb 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3418557a:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
3418557c:	3b01      	subs	r3, #1
3418557e:	2bff      	cmp	r3, #255	@ 0xff
34185580:	d904      	bls.n	3418558c <HAL_RCCEx_PeriphCLKConfig+0x2524>
34185582:	f240 31d7 	movw	r1, #983	@ 0x3d7
34185586:	4891      	ldr	r0, [pc, #580]	@ (341857cc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34185588:	f7fb fde2 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
3418558c:	4a90      	ldr	r2, [pc, #576]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3418558e:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34185590:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34185594:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
34185596:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418559a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418559e:	3901      	subs	r1, #1
341855a0:	4303      	orrs	r3, r0
341855a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341855a6:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
341855aa:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
341855ae:	f7fe bb2c 	b.w	34183c0a <HAL_RCCEx_PeriphCLKConfig+0xba2>
    else if (PeriphClkInit->I2c4ClockSelection == RCC_I2C4CLKSOURCE_CLKP)
341855b2:	4a8a      	ldr	r2, [pc, #552]	@ (341857dc <HAL_RCCEx_PeriphCLKConfig+0x2774>)
341855b4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341855b6:	bf02      	ittt	eq
341855b8:	2240      	moveq	r2, #64	@ 0x40
341855ba:	4b85      	ldreq	r3, [pc, #532]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
341855bc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341855c0:	f7fe bb25 	b.w	34183c0e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_IC15)
341855c4:	4a86      	ldr	r2, [pc, #536]	@ (341857e0 <HAL_RCCEx_PeriphCLKConfig+0x2778>)
341855c6:	4293      	cmp	r3, r2
341855c8:	d124      	bne.n	34185614 <HAL_RCCEx_PeriphCLKConfig+0x25ac>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
341855ca:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
341855cc:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341855d0:	d004      	beq.n	341855dc <HAL_RCCEx_PeriphCLKConfig+0x2574>
341855d2:	f240 4103 	movw	r1, #1027	@ 0x403
341855d6:	487d      	ldr	r0, [pc, #500]	@ (341857cc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
341855d8:	f7fb fdba 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
341855dc:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
341855de:	3b01      	subs	r3, #1
341855e0:	2bff      	cmp	r3, #255	@ 0xff
341855e2:	d904      	bls.n	341855ee <HAL_RCCEx_PeriphCLKConfig+0x2586>
341855e4:	f240 4104 	movw	r1, #1028	@ 0x404
341855e8:	4878      	ldr	r0, [pc, #480]	@ (341857cc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
341855ea:	f7fb fdb1 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
341855ee:	4a78      	ldr	r2, [pc, #480]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
341855f0:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
341855f2:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
341855f6:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
341855f8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341855fc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185600:	3901      	subs	r1, #1
34185602:	4303      	orrs	r3, r0
34185604:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185608:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3418560c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34185610:	f7fe bb3f 	b.w	34183c92 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
    else if (PeriphClkInit->I3c1ClockSelection == RCC_I3C1CLKSOURCE_CLKP)
34185614:	4a73      	ldr	r2, [pc, #460]	@ (341857e4 <HAL_RCCEx_PeriphCLKConfig+0x277c>)
34185616:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185618:	bf02      	ittt	eq
3418561a:	2240      	moveq	r2, #64	@ 0x40
3418561c:	4b6c      	ldreq	r3, [pc, #432]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3418561e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185622:	f7fe bb38 	b.w	34183c96 <HAL_RCCEx_PeriphCLKConfig+0xc2e>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_IC15)
34185626:	4a70      	ldr	r2, [pc, #448]	@ (341857e8 <HAL_RCCEx_PeriphCLKConfig+0x2780>)
34185628:	4293      	cmp	r3, r2
3418562a:	d124      	bne.n	34185676 <HAL_RCCEx_PeriphCLKConfig+0x260e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC15].ClockSelection));
3418562c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
3418562e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185632:	d004      	beq.n	3418563e <HAL_RCCEx_PeriphCLKConfig+0x25d6>
34185634:	f44f 6186 	mov.w	r1, #1072	@ 0x430
34185638:	4864      	ldr	r0, [pc, #400]	@ (341857cc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3418563a:	f7fb fd89 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC15].ClockDivider));
3418563e:	6fe3      	ldr	r3, [r4, #124]	@ 0x7c
34185640:	3b01      	subs	r3, #1
34185642:	2bff      	cmp	r3, #255	@ 0xff
34185644:	d904      	bls.n	34185650 <HAL_RCCEx_PeriphCLKConfig+0x25e8>
34185646:	f240 4131 	movw	r1, #1073	@ 0x431
3418564a:	4860      	ldr	r0, [pc, #384]	@ (341857cc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3418564c:	f7fb fd80 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL | RCC_IC15CFGR_IC15INT,
34185650:	4a5f      	ldr	r2, [pc, #380]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34185652:	6fe1      	ldr	r1, [r4, #124]	@ 0x7c
34185654:	f8d2 30fc 	ldr.w	r3, [r2, #252]	@ 0xfc
34185658:	6fa0      	ldr	r0, [r4, #120]	@ 0x78
3418565a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418565e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185662:	3901      	subs	r1, #1
34185664:	4303      	orrs	r3, r0
34185666:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418566a:	f8c2 30fc 	str.w	r3, [r2, #252]	@ 0xfc
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC15ENS);
3418566e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
34185672:	f7fe bb52 	b.w	34183d1a <HAL_RCCEx_PeriphCLKConfig+0xcb2>
    else if (PeriphClkInit->I3c2ClockSelection == RCC_I3C2CLKSOURCE_CLKP)
34185676:	4a5d      	ldr	r2, [pc, #372]	@ (341857ec <HAL_RCCEx_PeriphCLKConfig+0x2784>)
34185678:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3418567a:	bf02      	ittt	eq
3418567c:	2240      	moveq	r2, #64	@ 0x40
3418567e:	4b54      	ldreq	r3, [pc, #336]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34185680:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185684:	f7fe bb4b 	b.w	34183d1e <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    else if (PeriphClkInit->Lptim1ClockSelection == RCC_LPTIM1CLKSOURCE_CLKP)
34185688:	4a59      	ldr	r2, [pc, #356]	@ (341857f0 <HAL_RCCEx_PeriphCLKConfig+0x2788>)
3418568a:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3418568c:	bf02      	ittt	eq
3418568e:	2240      	moveq	r2, #64	@ 0x40
34185690:	4b4f      	ldreq	r3, [pc, #316]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34185692:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185696:	f7fe bb86 	b.w	34183da6 <HAL_RCCEx_PeriphCLKConfig+0xd3e>
    else if (PeriphClkInit->Lptim2ClockSelection == RCC_LPTIM2CLKSOURCE_CLKP)
3418569a:	4a56      	ldr	r2, [pc, #344]	@ (341857f4 <HAL_RCCEx_PeriphCLKConfig+0x278c>)
3418569c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
3418569e:	bf02      	ittt	eq
341856a0:	2240      	moveq	r2, #64	@ 0x40
341856a2:	4b4b      	ldreq	r3, [pc, #300]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
341856a4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341856a8:	f7fe bbc1 	b.w	34183e2e <HAL_RCCEx_PeriphCLKConfig+0xdc6>
    else if (PeriphClkInit->Lptim3ClockSelection == RCC_LPTIM3CLKSOURCE_CLKP)
341856ac:	4a52      	ldr	r2, [pc, #328]	@ (341857f8 <HAL_RCCEx_PeriphCLKConfig+0x2790>)
341856ae:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341856b0:	bf02      	ittt	eq
341856b2:	2240      	moveq	r2, #64	@ 0x40
341856b4:	4b46      	ldreq	r3, [pc, #280]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
341856b6:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341856ba:	f7fe bc17 	b.w	34183eec <HAL_RCCEx_PeriphCLKConfig+0xe84>
    else if (PeriphClkInit->Lptim4ClockSelection == RCC_LPTIM4CLKSOURCE_CLKP)
341856be:	4a4f      	ldr	r2, [pc, #316]	@ (341857fc <HAL_RCCEx_PeriphCLKConfig+0x2794>)
341856c0:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341856c2:	bf02      	ittt	eq
341856c4:	2240      	moveq	r2, #64	@ 0x40
341856c6:	4b42      	ldreq	r3, [pc, #264]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
341856c8:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341856cc:	f7fe bc52 	b.w	34183f74 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
    else if (PeriphClkInit->Lptim5ClockSelection == RCC_LPTIM5CLKSOURCE_CLKP)
341856d0:	4a4b      	ldr	r2, [pc, #300]	@ (34185800 <HAL_RCCEx_PeriphCLKConfig+0x2798>)
341856d2:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341856d4:	bf02      	ittt	eq
341856d6:	2240      	moveq	r2, #64	@ 0x40
341856d8:	4b3d      	ldreq	r3, [pc, #244]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
341856da:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341856de:	f7fe bc8d 	b.w	34183ffc <HAL_RCCEx_PeriphCLKConfig+0xf94>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_IC14)
341856e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
341856e6:	d124      	bne.n	34185732 <HAL_RCCEx_PeriphCLKConfig+0x26ca>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
341856e8:	6f23      	ldr	r3, [r4, #112]	@ 0x70
341856ea:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341856ee:	d004      	beq.n	341856fa <HAL_RCCEx_PeriphCLKConfig+0x2692>
341856f0:	f240 41fd 	movw	r1, #1277	@ 0x4fd
341856f4:	4835      	ldr	r0, [pc, #212]	@ (341857cc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
341856f6:	f7fb fd2b 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
341856fa:	6f63      	ldr	r3, [r4, #116]	@ 0x74
341856fc:	3b01      	subs	r3, #1
341856fe:	2bff      	cmp	r3, #255	@ 0xff
34185700:	d904      	bls.n	3418570c <HAL_RCCEx_PeriphCLKConfig+0x26a4>
34185702:	f240 41fe 	movw	r1, #1278	@ 0x4fe
34185706:	4831      	ldr	r0, [pc, #196]	@ (341857cc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
34185708:	f7fb fd22 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
3418570c:	4a30      	ldr	r2, [pc, #192]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3418570e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185710:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185714:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185716:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418571a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418571e:	3901      	subs	r1, #1
34185720:	4303      	orrs	r3, r0
34185722:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185726:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
3418572a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
3418572e:	f7fe bca7 	b.w	34184080 <HAL_RCCEx_PeriphCLKConfig+0x1018>
    else if (PeriphClkInit->Lpuart1ClockSelection == RCC_LPUART1CLKSOURCE_CLKP)
34185732:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185736:	bf02      	ittt	eq
34185738:	2240      	moveq	r2, #64	@ 0x40
3418573a:	4b25      	ldreq	r3, [pc, #148]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3418573c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185740:	f7fe bca0 	b.w	34184084 <HAL_RCCEx_PeriphCLKConfig+0x101c>
    else if (PeriphClkInit->LtdcClockSelection == RCC_LTDCCLKSOURCE_CLKP)
34185744:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185748:	bf02      	ittt	eq
3418574a:	2240      	moveq	r2, #64	@ 0x40
3418574c:	4b20      	ldreq	r3, [pc, #128]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
3418574e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185752:	f7fe bcdd 	b.w	34184110 <HAL_RCCEx_PeriphCLKConfig+0x10a8>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_IC8)
34185756:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
3418575a:	d123      	bne.n	341857a4 <HAL_RCCEx_PeriphCLKConfig+0x273c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3418575c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3418575e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185762:	d004      	beq.n	3418576e <HAL_RCCEx_PeriphCLKConfig+0x2706>
34185764:	f240 514a 	movw	r1, #1354	@ 0x54a
34185768:	4818      	ldr	r0, [pc, #96]	@ (341857cc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3418576a:	f7fb fcf1 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3418576e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
34185770:	3b01      	subs	r3, #1
34185772:	2bff      	cmp	r3, #255	@ 0xff
34185774:	d904      	bls.n	34185780 <HAL_RCCEx_PeriphCLKConfig+0x2718>
34185776:	f240 514b 	movw	r1, #1355	@ 0x54b
3418577a:	4814      	ldr	r0, [pc, #80]	@ (341857cc <HAL_RCCEx_PeriphCLKConfig+0x2764>)
3418577c:	f7fb fce8 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
34185780:	4a13      	ldr	r2, [pc, #76]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
34185782:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34185784:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34185788:	6c20      	ldr	r0, [r4, #64]	@ 0x40
3418578a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418578e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185792:	3901      	subs	r1, #1
34185794:	4303      	orrs	r3, r0
34185796:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
3418579a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3418579e:	2380      	movs	r3, #128	@ 0x80
341857a0:	f7fe bcf8 	b.w	34184194 <HAL_RCCEx_PeriphCLKConfig+0x112c>
    else if (PeriphClkInit->Mdf1ClockSelection == RCC_MDF1CLKSOURCE_CLKP)
341857a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341857a8:	bf02      	ittt	eq
341857aa:	2240      	moveq	r2, #64	@ 0x40
341857ac:	4b08      	ldreq	r3, [pc, #32]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
341857ae:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341857b2:	f7fe bcf1 	b.w	34184198 <HAL_RCCEx_PeriphCLKConfig+0x1130>
    else if (PeriphClkInit->PssiClockSelection == RCC_PSSICLKSOURCE_CLKP)
341857b6:	2b10      	cmp	r3, #16
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341857b8:	bf02      	ittt	eq
341857ba:	2240      	moveq	r2, #64	@ 0x40
341857bc:	4b04      	ldreq	r3, [pc, #16]	@ (341857d0 <HAL_RCCEx_PeriphCLKConfig+0x2768>)
341857be:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341857c2:	f7fe bd3b 	b.w	3418423c <HAL_RCCEx_PeriphCLKConfig+0x11d4>
341857c6:	bf00      	nop
341857c8:	0703080c 	.word	0x0703080c
341857cc:	3418cf4f 	.word	0x3418cf4f
341857d0:	56028000 	.word	0x56028000
341857d4:	0701080c 	.word	0x0701080c
341857d8:	07030c0c 	.word	0x07030c0c
341857dc:	07010c0c 	.word	0x07010c0c
341857e0:	0703100c 	.word	0x0703100c
341857e4:	0701100c 	.word	0x0701100c
341857e8:	0703140c 	.word	0x0703140c
341857ec:	0701140c 	.word	0x0701140c
341857f0:	0701082c 	.word	0x0701082c
341857f4:	07010c2c 	.word	0x07010c2c
341857f8:	0701102c 	.word	0x0701102c
341857fc:	0701142c 	.word	0x0701142c
34185800:	0701182c 	.word	0x0701182c
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_IC8)
34185804:	4aa8      	ldr	r2, [pc, #672]	@ (34185aa8 <HAL_RCCEx_PeriphCLKConfig+0x2a40>)
34185806:	4293      	cmp	r3, r2
34185808:	d123      	bne.n	34185852 <HAL_RCCEx_PeriphCLKConfig+0x27ea>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3418580a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3418580c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185810:	d004      	beq.n	3418581c <HAL_RCCEx_PeriphCLKConfig+0x27b4>
34185812:	f240 5197 	movw	r1, #1431	@ 0x597
34185816:	48a5      	ldr	r0, [pc, #660]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34185818:	f7fb fc9a 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3418581c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3418581e:	3b01      	subs	r3, #1
34185820:	2bff      	cmp	r3, #255	@ 0xff
34185822:	d904      	bls.n	3418582e <HAL_RCCEx_PeriphCLKConfig+0x27c6>
34185824:	f44f 61b3 	mov.w	r1, #1432	@ 0x598
34185828:	48a0      	ldr	r0, [pc, #640]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3418582a:	f7fb fc91 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418582e:	4aa0      	ldr	r2, [pc, #640]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34185830:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34185832:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34185836:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34185838:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418583c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185840:	3901      	subs	r1, #1
34185842:	4303      	orrs	r3, r0
34185844:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185848:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3418584c:	2380      	movs	r3, #128	@ 0x80
3418584e:	f7fe bd3a 	b.w	341842c6 <HAL_RCCEx_PeriphCLKConfig+0x125e>
    else if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_CLKP)
34185852:	4a98      	ldr	r2, [pc, #608]	@ (34185ab4 <HAL_RCCEx_PeriphCLKConfig+0x2a4c>)
34185854:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185856:	bf02      	ittt	eq
34185858:	2240      	moveq	r2, #64	@ 0x40
3418585a:	4b95      	ldreq	r3, [pc, #596]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
3418585c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185860:	f7fe bd33 	b.w	341842ca <HAL_RCCEx_PeriphCLKConfig+0x1262>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_IC8)
34185864:	4a94      	ldr	r2, [pc, #592]	@ (34185ab8 <HAL_RCCEx_PeriphCLKConfig+0x2a50>)
34185866:	4293      	cmp	r3, r2
34185868:	d123      	bne.n	341858b2 <HAL_RCCEx_PeriphCLKConfig+0x284a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
3418586a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3418586c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185870:	d004      	beq.n	3418587c <HAL_RCCEx_PeriphCLKConfig+0x2814>
34185872:	f240 51c4 	movw	r1, #1476	@ 0x5c4
34185876:	488d      	ldr	r0, [pc, #564]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34185878:	f7fb fc6a 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
3418587c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
3418587e:	3b01      	subs	r3, #1
34185880:	2bff      	cmp	r3, #255	@ 0xff
34185882:	d904      	bls.n	3418588e <HAL_RCCEx_PeriphCLKConfig+0x2826>
34185884:	f240 51c5 	movw	r1, #1477	@ 0x5c5
34185888:	4888      	ldr	r0, [pc, #544]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
3418588a:	f7fb fc61 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
3418588e:	4a88      	ldr	r2, [pc, #544]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34185890:	6c61      	ldr	r1, [r4, #68]	@ 0x44
34185892:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
34185896:	6c20      	ldr	r0, [r4, #64]	@ 0x40
34185898:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
3418589c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341858a0:	3901      	subs	r1, #1
341858a2:	4303      	orrs	r3, r0
341858a4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341858a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
341858ac:	2380      	movs	r3, #128	@ 0x80
341858ae:	f7fe bd4b 	b.w	34184348 <HAL_RCCEx_PeriphCLKConfig+0x12e0>
    else if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_CLKP)
341858b2:	4a82      	ldr	r2, [pc, #520]	@ (34185abc <HAL_RCCEx_PeriphCLKConfig+0x2a54>)
341858b4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341858b6:	bf02      	ittt	eq
341858b8:	2240      	moveq	r2, #64	@ 0x40
341858ba:	4b7d      	ldreq	r3, [pc, #500]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
341858bc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341858c0:	f7fe bd44 	b.w	3418434c <HAL_RCCEx_PeriphCLKConfig+0x12e4>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_IC8)
341858c4:	2b03      	cmp	r3, #3
341858c6:	d123      	bne.n	34185910 <HAL_RCCEx_PeriphCLKConfig+0x28a8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC8].ClockSelection));
341858c8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
341858ca:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341858ce:	d004      	beq.n	341858da <HAL_RCCEx_PeriphCLKConfig+0x2872>
341858d0:	f240 51f1 	movw	r1, #1521	@ 0x5f1
341858d4:	4875      	ldr	r0, [pc, #468]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
341858d6:	f7fb fc3b 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC8].ClockDivider));
341858da:	6c63      	ldr	r3, [r4, #68]	@ 0x44
341858dc:	3b01      	subs	r3, #1
341858de:	2bff      	cmp	r3, #255	@ 0xff
341858e0:	d904      	bls.n	341858ec <HAL_RCCEx_PeriphCLKConfig+0x2884>
341858e2:	f240 51f2 	movw	r1, #1522	@ 0x5f2
341858e6:	4871      	ldr	r0, [pc, #452]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
341858e8:	f7fb fc32 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL | RCC_IC8CFGR_IC8INT,
341858ec:	4a70      	ldr	r2, [pc, #448]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
341858ee:	6c61      	ldr	r1, [r4, #68]	@ 0x44
341858f0:	f8d2 30e0 	ldr.w	r3, [r2, #224]	@ 0xe0
341858f4:	6c20      	ldr	r0, [r4, #64]	@ 0x40
341858f6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341858fa:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341858fe:	3901      	subs	r1, #1
34185900:	4303      	orrs	r3, r0
34185902:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185906:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC8ENS);
3418590a:	2380      	movs	r3, #128	@ 0x80
3418590c:	f7fe bd55 	b.w	341843ba <HAL_RCCEx_PeriphCLKConfig+0x1352>
    else if (PeriphClkInit->Spdifrx1ClockSelection == RCC_SPDIFRX1CLKSOURCE_CLKP)
34185910:	2b01      	cmp	r3, #1
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185912:	bf02      	ittt	eq
34185914:	2240      	moveq	r2, #64	@ 0x40
34185916:	4b66      	ldreq	r3, [pc, #408]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34185918:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3418591c:	f7fe bd4f 	b.w	341843be <HAL_RCCEx_PeriphCLKConfig+0x1356>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_IC9)
34185920:	4a67      	ldr	r2, [pc, #412]	@ (34185ac0 <HAL_RCCEx_PeriphCLKConfig+0x2a58>)
34185922:	4293      	cmp	r3, r2
34185924:	d124      	bne.n	34185970 <HAL_RCCEx_PeriphCLKConfig+0x2908>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34185926:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34185928:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3418592c:	d004      	beq.n	34185938 <HAL_RCCEx_PeriphCLKConfig+0x28d0>
3418592e:	f240 611e 	movw	r1, #1566	@ 0x61e
34185932:	485e      	ldr	r0, [pc, #376]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34185934:	f7fb fc0c 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34185938:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3418593a:	3b01      	subs	r3, #1
3418593c:	2bff      	cmp	r3, #255	@ 0xff
3418593e:	d904      	bls.n	3418594a <HAL_RCCEx_PeriphCLKConfig+0x28e2>
34185940:	f240 611f 	movw	r1, #1567	@ 0x61f
34185944:	4859      	ldr	r0, [pc, #356]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34185946:	f7fb fc03 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
3418594a:	4a59      	ldr	r2, [pc, #356]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
3418594c:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3418594e:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34185952:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34185954:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185958:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
3418595c:	3901      	subs	r1, #1
3418595e:	4303      	orrs	r3, r0
34185960:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185964:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34185968:	f44f 7380 	mov.w	r3, #256	@ 0x100
3418596c:	f7fe bd72 	b.w	34184454 <HAL_RCCEx_PeriphCLKConfig+0x13ec>
    else if (PeriphClkInit->Spi1ClockSelection == RCC_SPI1CLKSOURCE_CLKP)
34185970:	4a54      	ldr	r2, [pc, #336]	@ (34185ac4 <HAL_RCCEx_PeriphCLKConfig+0x2a5c>)
34185972:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185974:	bf02      	ittt	eq
34185976:	2240      	moveq	r2, #64	@ 0x40
34185978:	4b4d      	ldreq	r3, [pc, #308]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
3418597a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
3418597e:	f7fe bd6b 	b.w	34184458 <HAL_RCCEx_PeriphCLKConfig+0x13f0>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_IC9)
34185982:	4a51      	ldr	r2, [pc, #324]	@ (34185ac8 <HAL_RCCEx_PeriphCLKConfig+0x2a60>)
34185984:	4293      	cmp	r3, r2
34185986:	d124      	bne.n	341859d2 <HAL_RCCEx_PeriphCLKConfig+0x296a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34185988:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
3418598a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
3418598e:	d004      	beq.n	3418599a <HAL_RCCEx_PeriphCLKConfig+0x2932>
34185990:	f240 614b 	movw	r1, #1611	@ 0x64b
34185994:	4845      	ldr	r0, [pc, #276]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34185996:	f7fb fbdb 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
3418599a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
3418599c:	3b01      	subs	r3, #1
3418599e:	2bff      	cmp	r3, #255	@ 0xff
341859a0:	d904      	bls.n	341859ac <HAL_RCCEx_PeriphCLKConfig+0x2944>
341859a2:	f240 614c 	movw	r1, #1612	@ 0x64c
341859a6:	4841      	ldr	r0, [pc, #260]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
341859a8:	f7fb fbd2 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
341859ac:	4a40      	ldr	r2, [pc, #256]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
341859ae:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
341859b0:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
341859b4:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
341859b6:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
341859ba:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
341859be:	3901      	subs	r1, #1
341859c0:	4303      	orrs	r3, r0
341859c2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
341859c6:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
341859ca:	f44f 7380 	mov.w	r3, #256	@ 0x100
341859ce:	f7fe bd88 	b.w	341844e2 <HAL_RCCEx_PeriphCLKConfig+0x147a>
    else if (PeriphClkInit->Spi2ClockSelection == RCC_SPI2CLKSOURCE_CLKP)
341859d2:	4a3e      	ldr	r2, [pc, #248]	@ (34185acc <HAL_RCCEx_PeriphCLKConfig+0x2a64>)
341859d4:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
341859d6:	bf02      	ittt	eq
341859d8:	2240      	moveq	r2, #64	@ 0x40
341859da:	4b35      	ldreq	r3, [pc, #212]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
341859dc:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
341859e0:	f7fe bd81 	b.w	341844e6 <HAL_RCCEx_PeriphCLKConfig+0x147e>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_IC9)
341859e4:	4a3a      	ldr	r2, [pc, #232]	@ (34185ad0 <HAL_RCCEx_PeriphCLKConfig+0x2a68>)
341859e6:	4293      	cmp	r3, r2
341859e8:	d124      	bne.n	34185a34 <HAL_RCCEx_PeriphCLKConfig+0x29cc>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
341859ea:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
341859ec:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
341859f0:	d004      	beq.n	341859fc <HAL_RCCEx_PeriphCLKConfig+0x2994>
341859f2:	f44f 61cf 	mov.w	r1, #1656	@ 0x678
341859f6:	482d      	ldr	r0, [pc, #180]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
341859f8:	f7fb fbaa 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
341859fc:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
341859fe:	3b01      	subs	r3, #1
34185a00:	2bff      	cmp	r3, #255	@ 0xff
34185a02:	d904      	bls.n	34185a0e <HAL_RCCEx_PeriphCLKConfig+0x29a6>
34185a04:	f240 6179 	movw	r1, #1657	@ 0x679
34185a08:	4828      	ldr	r0, [pc, #160]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34185a0a:	f7fb fba1 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34185a0e:	4a28      	ldr	r2, [pc, #160]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34185a10:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34185a12:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34185a16:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34185a18:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185a1c:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185a20:	3901      	subs	r1, #1
34185a22:	4303      	orrs	r3, r0
34185a24:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185a28:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34185a2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
34185a30:	f7fe bdb8 	b.w	341845a4 <HAL_RCCEx_PeriphCLKConfig+0x153c>
    else if (PeriphClkInit->Spi3ClockSelection == RCC_SPI3CLKSOURCE_CLKP)
34185a34:	4a27      	ldr	r2, [pc, #156]	@ (34185ad4 <HAL_RCCEx_PeriphCLKConfig+0x2a6c>)
34185a36:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185a38:	bf02      	ittt	eq
34185a3a:	2240      	moveq	r2, #64	@ 0x40
34185a3c:	4b1c      	ldreq	r3, [pc, #112]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34185a3e:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185a42:	f7fe bdb1 	b.w	341845a8 <HAL_RCCEx_PeriphCLKConfig+0x1540>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_IC14)
34185a46:	4a24      	ldr	r2, [pc, #144]	@ (34185ad8 <HAL_RCCEx_PeriphCLKConfig+0x2a70>)
34185a48:	4293      	cmp	r3, r2
34185a4a:	d124      	bne.n	34185a96 <HAL_RCCEx_PeriphCLKConfig+0x2a2e>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34185a4c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34185a4e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185a52:	d004      	beq.n	34185a5e <HAL_RCCEx_PeriphCLKConfig+0x29f6>
34185a54:	f240 61a5 	movw	r1, #1701	@ 0x6a5
34185a58:	4814      	ldr	r0, [pc, #80]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34185a5a:	f7fb fb79 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34185a5e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34185a60:	3b01      	subs	r3, #1
34185a62:	2bff      	cmp	r3, #255	@ 0xff
34185a64:	d904      	bls.n	34185a70 <HAL_RCCEx_PeriphCLKConfig+0x2a08>
34185a66:	f240 61a6 	movw	r1, #1702	@ 0x6a6
34185a6a:	4810      	ldr	r0, [pc, #64]	@ (34185aac <HAL_RCCEx_PeriphCLKConfig+0x2a44>)
34185a6c:	f7fb fb70 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185a70:	4a0f      	ldr	r2, [pc, #60]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34185a72:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185a74:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185a78:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185a7a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185a7e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185a82:	3901      	subs	r1, #1
34185a84:	4303      	orrs	r3, r0
34185a86:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185a8a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185a8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34185a92:	f7fe bdcf 	b.w	34184634 <HAL_RCCEx_PeriphCLKConfig+0x15cc>
    else if (PeriphClkInit->Spi4ClockSelection == RCC_SPI4CLKSOURCE_CLKP)
34185a96:	4a11      	ldr	r2, [pc, #68]	@ (34185adc <HAL_RCCEx_PeriphCLKConfig+0x2a74>)
34185a98:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185a9a:	bf02      	ittt	eq
34185a9c:	2240      	moveq	r2, #64	@ 0x40
34185a9e:	4b04      	ldreq	r3, [pc, #16]	@ (34185ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a48>)
34185aa0:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185aa4:	f7fe bdc8 	b.w	34184638 <HAL_RCCEx_PeriphCLKConfig+0x15d0>
34185aa8:	07031418 	.word	0x07031418
34185aac:	3418cf4f 	.word	0x3418cf4f
34185ab0:	56028000 	.word	0x56028000
34185ab4:	07011418 	.word	0x07011418
34185ab8:	07031818 	.word	0x07031818
34185abc:	07011818 	.word	0x07011818
34185ac0:	07030420 	.word	0x07030420
34185ac4:	07010420 	.word	0x07010420
34185ac8:	07030820 	.word	0x07030820
34185acc:	07010820 	.word	0x07010820
34185ad0:	07030c20 	.word	0x07030c20
34185ad4:	07010c20 	.word	0x07010c20
34185ad8:	07031020 	.word	0x07031020
34185adc:	07011020 	.word	0x07011020
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_IC14)
34185ae0:	4aab      	ldr	r2, [pc, #684]	@ (34185d90 <HAL_RCCEx_PeriphCLKConfig+0x2d28>)
34185ae2:	4293      	cmp	r3, r2
34185ae4:	d124      	bne.n	34185b30 <HAL_RCCEx_PeriphCLKConfig+0x2ac8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34185ae6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34185ae8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185aec:	d004      	beq.n	34185af8 <HAL_RCCEx_PeriphCLKConfig+0x2a90>
34185aee:	f240 61d2 	movw	r1, #1746	@ 0x6d2
34185af2:	48a8      	ldr	r0, [pc, #672]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185af4:	f7fb fb2c 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34185af8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34185afa:	3b01      	subs	r3, #1
34185afc:	2bff      	cmp	r3, #255	@ 0xff
34185afe:	d904      	bls.n	34185b0a <HAL_RCCEx_PeriphCLKConfig+0x2aa2>
34185b00:	f240 61d3 	movw	r1, #1747	@ 0x6d3
34185b04:	48a3      	ldr	r0, [pc, #652]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185b06:	f7fb fb23 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185b0a:	4aa3      	ldr	r2, [pc, #652]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185b0c:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185b0e:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185b12:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185b14:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185b18:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185b1c:	3901      	subs	r1, #1
34185b1e:	4303      	orrs	r3, r0
34185b20:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185b24:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185b28:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34185b2c:	f7fe bdca 	b.w	341846c4 <HAL_RCCEx_PeriphCLKConfig+0x165c>
    else if (PeriphClkInit->Spi5ClockSelection == RCC_SPI5CLKSOURCE_CLKP)
34185b30:	4a9a      	ldr	r2, [pc, #616]	@ (34185d9c <HAL_RCCEx_PeriphCLKConfig+0x2d34>)
34185b32:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185b34:	bf02      	ittt	eq
34185b36:	2240      	moveq	r2, #64	@ 0x40
34185b38:	4b97      	ldreq	r3, [pc, #604]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185b3a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185b3e:	f7fe bdc3 	b.w	341846c8 <HAL_RCCEx_PeriphCLKConfig+0x1660>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_IC9)
34185b42:	4a97      	ldr	r2, [pc, #604]	@ (34185da0 <HAL_RCCEx_PeriphCLKConfig+0x2d38>)
34185b44:	4293      	cmp	r3, r2
34185b46:	d124      	bne.n	34185b92 <HAL_RCCEx_PeriphCLKConfig+0x2b2a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC9].ClockSelection));
34185b48:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
34185b4a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185b4e:	d004      	beq.n	34185b5a <HAL_RCCEx_PeriphCLKConfig+0x2af2>
34185b50:	f240 61ff 	movw	r1, #1791	@ 0x6ff
34185b54:	488f      	ldr	r0, [pc, #572]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185b56:	f7fb fafb 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC9].ClockDivider));
34185b5a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
34185b5c:	3b01      	subs	r3, #1
34185b5e:	2bff      	cmp	r3, #255	@ 0xff
34185b60:	d904      	bls.n	34185b6c <HAL_RCCEx_PeriphCLKConfig+0x2b04>
34185b62:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
34185b66:	488b      	ldr	r0, [pc, #556]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185b68:	f7fb faf2 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL | RCC_IC9CFGR_IC9INT,
34185b6c:	4a8a      	ldr	r2, [pc, #552]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185b6e:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
34185b70:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
34185b74:	6ca0      	ldr	r0, [r4, #72]	@ 0x48
34185b76:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185b7a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185b7e:	3901      	subs	r1, #1
34185b80:	4303      	orrs	r3, r0
34185b82:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185b86:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC9ENS);
34185b8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
34185b8e:	f7fe bde0 	b.w	34184752 <HAL_RCCEx_PeriphCLKConfig+0x16ea>
    else if (PeriphClkInit->Spi6ClockSelection == RCC_SPI6CLKSOURCE_CLKP)
34185b92:	4a84      	ldr	r2, [pc, #528]	@ (34185da4 <HAL_RCCEx_PeriphCLKConfig+0x2d3c>)
34185b94:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185b96:	bf02      	ittt	eq
34185b98:	2240      	moveq	r2, #64	@ 0x40
34185b9a:	4b7f      	ldreq	r3, [pc, #508]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185b9c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185ba0:	f7fe bdd9 	b.w	34184756 <HAL_RCCEx_PeriphCLKConfig+0x16ee>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_IC14)
34185ba4:	4a80      	ldr	r2, [pc, #512]	@ (34185da8 <HAL_RCCEx_PeriphCLKConfig+0x2d40>)
34185ba6:	4293      	cmp	r3, r2
34185ba8:	d124      	bne.n	34185bf4 <HAL_RCCEx_PeriphCLKConfig+0x2b8c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34185baa:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34185bac:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185bb0:	d004      	beq.n	34185bbc <HAL_RCCEx_PeriphCLKConfig+0x2b54>
34185bb2:	f240 712c 	movw	r1, #1836	@ 0x72c
34185bb6:	4877      	ldr	r0, [pc, #476]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185bb8:	f7fb faca 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34185bbc:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34185bbe:	3b01      	subs	r3, #1
34185bc0:	2bff      	cmp	r3, #255	@ 0xff
34185bc2:	d904      	bls.n	34185bce <HAL_RCCEx_PeriphCLKConfig+0x2b66>
34185bc4:	f240 712d 	movw	r1, #1837	@ 0x72d
34185bc8:	4872      	ldr	r0, [pc, #456]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185bca:	f7fb fac1 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185bce:	4a72      	ldr	r2, [pc, #456]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185bd0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185bd2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185bd6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185bd8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185bdc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185be0:	3901      	subs	r1, #1
34185be2:	4303      	orrs	r3, r0
34185be4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185be8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185bec:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34185bf0:	f7fe bdf7 	b.w	341847e2 <HAL_RCCEx_PeriphCLKConfig+0x177a>
    else if (PeriphClkInit->Usart1ClockSelection == RCC_USART1CLKSOURCE_CLKP)
34185bf4:	4a6d      	ldr	r2, [pc, #436]	@ (34185dac <HAL_RCCEx_PeriphCLKConfig+0x2d44>)
34185bf6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185bf8:	bf02      	ittt	eq
34185bfa:	2240      	moveq	r2, #64	@ 0x40
34185bfc:	4b66      	ldreq	r3, [pc, #408]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185bfe:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185c02:	f7fe bdf0 	b.w	341847e6 <HAL_RCCEx_PeriphCLKConfig+0x177e>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_IC14)
34185c06:	4a6a      	ldr	r2, [pc, #424]	@ (34185db0 <HAL_RCCEx_PeriphCLKConfig+0x2d48>)
34185c08:	4293      	cmp	r3, r2
34185c0a:	d124      	bne.n	34185c56 <HAL_RCCEx_PeriphCLKConfig+0x2bee>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34185c0c:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34185c0e:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185c12:	d004      	beq.n	34185c1e <HAL_RCCEx_PeriphCLKConfig+0x2bb6>
34185c14:	f240 7159 	movw	r1, #1881	@ 0x759
34185c18:	485e      	ldr	r0, [pc, #376]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185c1a:	f7fb fa99 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34185c1e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34185c20:	3b01      	subs	r3, #1
34185c22:	2bff      	cmp	r3, #255	@ 0xff
34185c24:	d904      	bls.n	34185c30 <HAL_RCCEx_PeriphCLKConfig+0x2bc8>
34185c26:	f240 715a 	movw	r1, #1882	@ 0x75a
34185c2a:	485a      	ldr	r0, [pc, #360]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185c2c:	f7fb fa90 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185c30:	4a59      	ldr	r2, [pc, #356]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185c32:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185c34:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185c38:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185c3a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185c3e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185c42:	3901      	subs	r1, #1
34185c44:	4303      	orrs	r3, r0
34185c46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185c4a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185c4e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34185c52:	f7fe be27 	b.w	341848a4 <HAL_RCCEx_PeriphCLKConfig+0x183c>
    else if (PeriphClkInit->Usart2ClockSelection == RCC_USART2CLKSOURCE_CLKP)
34185c56:	4a57      	ldr	r2, [pc, #348]	@ (34185db4 <HAL_RCCEx_PeriphCLKConfig+0x2d4c>)
34185c58:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185c5a:	bf02      	ittt	eq
34185c5c:	2240      	moveq	r2, #64	@ 0x40
34185c5e:	4b4e      	ldreq	r3, [pc, #312]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185c60:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185c64:	f7fe be20 	b.w	341848a8 <HAL_RCCEx_PeriphCLKConfig+0x1840>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_IC14)
34185c68:	4a53      	ldr	r2, [pc, #332]	@ (34185db8 <HAL_RCCEx_PeriphCLKConfig+0x2d50>)
34185c6a:	4293      	cmp	r3, r2
34185c6c:	d124      	bne.n	34185cb8 <HAL_RCCEx_PeriphCLKConfig+0x2c50>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34185c6e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34185c70:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185c74:	d004      	beq.n	34185c80 <HAL_RCCEx_PeriphCLKConfig+0x2c18>
34185c76:	f240 7186 	movw	r1, #1926	@ 0x786
34185c7a:	4846      	ldr	r0, [pc, #280]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185c7c:	f7fb fa68 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34185c80:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34185c82:	3b01      	subs	r3, #1
34185c84:	2bff      	cmp	r3, #255	@ 0xff
34185c86:	d904      	bls.n	34185c92 <HAL_RCCEx_PeriphCLKConfig+0x2c2a>
34185c88:	f240 7187 	movw	r1, #1927	@ 0x787
34185c8c:	4841      	ldr	r0, [pc, #260]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185c8e:	f7fb fa5f 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185c92:	4a41      	ldr	r2, [pc, #260]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185c94:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185c96:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185c9a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185c9c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185ca0:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185ca4:	3901      	subs	r1, #1
34185ca6:	4303      	orrs	r3, r0
34185ca8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185cac:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185cb0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34185cb4:	f7fe be3e 	b.w	34184934 <HAL_RCCEx_PeriphCLKConfig+0x18cc>
    else if (PeriphClkInit->Usart3ClockSelection == RCC_USART3CLKSOURCE_CLKP)
34185cb8:	4a40      	ldr	r2, [pc, #256]	@ (34185dbc <HAL_RCCEx_PeriphCLKConfig+0x2d54>)
34185cba:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185cbc:	bf02      	ittt	eq
34185cbe:	2240      	moveq	r2, #64	@ 0x40
34185cc0:	4b35      	ldreq	r3, [pc, #212]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185cc2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185cc6:	f7fe be37 	b.w	34184938 <HAL_RCCEx_PeriphCLKConfig+0x18d0>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_IC14)
34185cca:	4a3d      	ldr	r2, [pc, #244]	@ (34185dc0 <HAL_RCCEx_PeriphCLKConfig+0x2d58>)
34185ccc:	4293      	cmp	r3, r2
34185cce:	d124      	bne.n	34185d1a <HAL_RCCEx_PeriphCLKConfig+0x2cb2>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34185cd0:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34185cd2:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185cd6:	d004      	beq.n	34185ce2 <HAL_RCCEx_PeriphCLKConfig+0x2c7a>
34185cd8:	f240 71b3 	movw	r1, #1971	@ 0x7b3
34185cdc:	482d      	ldr	r0, [pc, #180]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185cde:	f7fb fa37 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34185ce2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34185ce4:	3b01      	subs	r3, #1
34185ce6:	2bff      	cmp	r3, #255	@ 0xff
34185ce8:	d904      	bls.n	34185cf4 <HAL_RCCEx_PeriphCLKConfig+0x2c8c>
34185cea:	f240 71b4 	movw	r1, #1972	@ 0x7b4
34185cee:	4829      	ldr	r0, [pc, #164]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185cf0:	f7fb fa2e 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185cf4:	4a28      	ldr	r2, [pc, #160]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185cf6:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185cf8:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185cfc:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185cfe:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185d02:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185d06:	3901      	subs	r1, #1
34185d08:	4303      	orrs	r3, r0
34185d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185d0e:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185d12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34185d16:	f7fe be55 	b.w	341849c4 <HAL_RCCEx_PeriphCLKConfig+0x195c>
    else if (PeriphClkInit->Uart4ClockSelection == RCC_UART4CLKSOURCE_CLKP)
34185d1a:	4a2a      	ldr	r2, [pc, #168]	@ (34185dc4 <HAL_RCCEx_PeriphCLKConfig+0x2d5c>)
34185d1c:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185d1e:	bf02      	ittt	eq
34185d20:	2240      	moveq	r2, #64	@ 0x40
34185d22:	4b1d      	ldreq	r3, [pc, #116]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185d24:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185d28:	f7fe be4e 	b.w	341849c8 <HAL_RCCEx_PeriphCLKConfig+0x1960>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_IC14)
34185d2c:	4a26      	ldr	r2, [pc, #152]	@ (34185dc8 <HAL_RCCEx_PeriphCLKConfig+0x2d60>)
34185d2e:	4293      	cmp	r3, r2
34185d30:	d124      	bne.n	34185d7c <HAL_RCCEx_PeriphCLKConfig+0x2d14>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34185d32:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34185d34:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185d38:	d004      	beq.n	34185d44 <HAL_RCCEx_PeriphCLKConfig+0x2cdc>
34185d3a:	f44f 61fc 	mov.w	r1, #2016	@ 0x7e0
34185d3e:	4815      	ldr	r0, [pc, #84]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185d40:	f7fb fa06 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34185d44:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34185d46:	3b01      	subs	r3, #1
34185d48:	2bff      	cmp	r3, #255	@ 0xff
34185d4a:	d904      	bls.n	34185d56 <HAL_RCCEx_PeriphCLKConfig+0x2cee>
34185d4c:	f240 71e1 	movw	r1, #2017	@ 0x7e1
34185d50:	4810      	ldr	r0, [pc, #64]	@ (34185d94 <HAL_RCCEx_PeriphCLKConfig+0x2d2c>)
34185d52:	f7fb f9fd 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185d56:	4a10      	ldr	r2, [pc, #64]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185d58:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185d5a:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185d5e:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185d60:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185d64:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185d68:	3901      	subs	r1, #1
34185d6a:	4303      	orrs	r3, r0
34185d6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185d70:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185d74:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34185d78:	f7fe be6c 	b.w	34184a54 <HAL_RCCEx_PeriphCLKConfig+0x19ec>
    else if (PeriphClkInit->Uart5ClockSelection == RCC_UART5CLKSOURCE_CLKP)
34185d7c:	4a13      	ldr	r2, [pc, #76]	@ (34185dcc <HAL_RCCEx_PeriphCLKConfig+0x2d64>)
34185d7e:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185d80:	bf02      	ittt	eq
34185d82:	2240      	moveq	r2, #64	@ 0x40
34185d84:	4b04      	ldreq	r3, [pc, #16]	@ (34185d98 <HAL_RCCEx_PeriphCLKConfig+0x2d30>)
34185d86:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185d8a:	f7fe be65 	b.w	34184a58 <HAL_RCCEx_PeriphCLKConfig+0x19f0>
34185d8e:	bf00      	nop
34185d90:	07031420 	.word	0x07031420
34185d94:	3418cf4f 	.word	0x3418cf4f
34185d98:	56028000 	.word	0x56028000
34185d9c:	07011420 	.word	0x07011420
34185da0:	07031820 	.word	0x07031820
34185da4:	07011820 	.word	0x07011820
34185da8:	07030030 	.word	0x07030030
34185dac:	07010030 	.word	0x07010030
34185db0:	07030430 	.word	0x07030430
34185db4:	07010430 	.word	0x07010430
34185db8:	07030830 	.word	0x07030830
34185dbc:	07010830 	.word	0x07010830
34185dc0:	07030c30 	.word	0x07030c30
34185dc4:	07010c30 	.word	0x07010c30
34185dc8:	07031030 	.word	0x07031030
34185dcc:	07011030 	.word	0x07011030
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_IC14)
34185dd0:	4a8b      	ldr	r2, [pc, #556]	@ (34186000 <HAL_RCCEx_PeriphCLKConfig+0x2f98>)
34185dd2:	4293      	cmp	r3, r2
34185dd4:	d124      	bne.n	34185e20 <HAL_RCCEx_PeriphCLKConfig+0x2db8>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34185dd6:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34185dd8:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185ddc:	d004      	beq.n	34185de8 <HAL_RCCEx_PeriphCLKConfig+0x2d80>
34185dde:	f640 010d 	movw	r1, #2061	@ 0x80d
34185de2:	4888      	ldr	r0, [pc, #544]	@ (34186004 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34185de4:	f7fb f9b4 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34185de8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34185dea:	3b01      	subs	r3, #1
34185dec:	2bff      	cmp	r3, #255	@ 0xff
34185dee:	d904      	bls.n	34185dfa <HAL_RCCEx_PeriphCLKConfig+0x2d92>
34185df0:	f640 010e 	movw	r1, #2062	@ 0x80e
34185df4:	4883      	ldr	r0, [pc, #524]	@ (34186004 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34185df6:	f7fb f9ab 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185dfa:	4a83      	ldr	r2, [pc, #524]	@ (34186008 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34185dfc:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185dfe:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185e02:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185e04:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185e08:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185e0c:	3901      	subs	r1, #1
34185e0e:	4303      	orrs	r3, r0
34185e10:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185e14:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185e18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34185e1c:	f7fe be62 	b.w	34184ae4 <HAL_RCCEx_PeriphCLKConfig+0x1a7c>
    else if (PeriphClkInit->Usart6ClockSelection == RCC_USART6CLKSOURCE_CLKP)
34185e20:	4a7a      	ldr	r2, [pc, #488]	@ (3418600c <HAL_RCCEx_PeriphCLKConfig+0x2fa4>)
34185e22:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185e24:	bf02      	ittt	eq
34185e26:	2240      	moveq	r2, #64	@ 0x40
34185e28:	4b77      	ldreq	r3, [pc, #476]	@ (34186008 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34185e2a:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185e2e:	f7fe be5b 	b.w	34184ae8 <HAL_RCCEx_PeriphCLKConfig+0x1a80>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_IC14)
34185e32:	4a77      	ldr	r2, [pc, #476]	@ (34186010 <HAL_RCCEx_PeriphCLKConfig+0x2fa8>)
34185e34:	4293      	cmp	r3, r2
34185e36:	d124      	bne.n	34185e82 <HAL_RCCEx_PeriphCLKConfig+0x2e1a>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34185e38:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34185e3a:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185e3e:	d004      	beq.n	34185e4a <HAL_RCCEx_PeriphCLKConfig+0x2de2>
34185e40:	f640 013a 	movw	r1, #2106	@ 0x83a
34185e44:	486f      	ldr	r0, [pc, #444]	@ (34186004 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34185e46:	f7fb f983 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34185e4a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34185e4c:	3b01      	subs	r3, #1
34185e4e:	2bff      	cmp	r3, #255	@ 0xff
34185e50:	d904      	bls.n	34185e5c <HAL_RCCEx_PeriphCLKConfig+0x2df4>
34185e52:	f640 013b 	movw	r1, #2107	@ 0x83b
34185e56:	486b      	ldr	r0, [pc, #428]	@ (34186004 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34185e58:	f7fb f97a 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185e5c:	4a6a      	ldr	r2, [pc, #424]	@ (34186008 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34185e5e:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185e60:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185e64:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185e66:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185e6a:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185e6e:	3901      	subs	r1, #1
34185e70:	4303      	orrs	r3, r0
34185e72:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185e76:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185e7a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34185e7e:	f7fe be79 	b.w	34184b74 <HAL_RCCEx_PeriphCLKConfig+0x1b0c>
    else if (PeriphClkInit->Uart7ClockSelection == RCC_UART7CLKSOURCE_CLKP)
34185e82:	4a64      	ldr	r2, [pc, #400]	@ (34186014 <HAL_RCCEx_PeriphCLKConfig+0x2fac>)
34185e84:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185e86:	bf02      	ittt	eq
34185e88:	2240      	moveq	r2, #64	@ 0x40
34185e8a:	4b5f      	ldreq	r3, [pc, #380]	@ (34186008 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34185e8c:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185e90:	f7fe be72 	b.w	34184b78 <HAL_RCCEx_PeriphCLKConfig+0x1b10>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_IC14)
34185e94:	4a60      	ldr	r2, [pc, #384]	@ (34186018 <HAL_RCCEx_PeriphCLKConfig+0x2fb0>)
34185e96:	4293      	cmp	r3, r2
34185e98:	d124      	bne.n	34185ee4 <HAL_RCCEx_PeriphCLKConfig+0x2e7c>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34185e9a:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34185e9c:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185ea0:	d004      	beq.n	34185eac <HAL_RCCEx_PeriphCLKConfig+0x2e44>
34185ea2:	f640 0167 	movw	r1, #2151	@ 0x867
34185ea6:	4857      	ldr	r0, [pc, #348]	@ (34186004 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34185ea8:	f7fb f952 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34185eac:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34185eae:	3b01      	subs	r3, #1
34185eb0:	2bff      	cmp	r3, #255	@ 0xff
34185eb2:	d904      	bls.n	34185ebe <HAL_RCCEx_PeriphCLKConfig+0x2e56>
34185eb4:	f640 0168 	movw	r1, #2152	@ 0x868
34185eb8:	4852      	ldr	r0, [pc, #328]	@ (34186004 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34185eba:	f7fb f949 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185ebe:	4a52      	ldr	r2, [pc, #328]	@ (34186008 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34185ec0:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185ec2:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185ec6:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185ec8:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185ecc:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185ed0:	3901      	subs	r1, #1
34185ed2:	4303      	orrs	r3, r0
34185ed4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185ed8:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185edc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34185ee0:	f7fe beac 	b.w	34184c3c <HAL_RCCEx_PeriphCLKConfig+0x1bd4>
    else if (PeriphClkInit->Uart8ClockSelection == RCC_UART8CLKSOURCE_CLKP)
34185ee4:	4a4d      	ldr	r2, [pc, #308]	@ (3418601c <HAL_RCCEx_PeriphCLKConfig+0x2fb4>)
34185ee6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185ee8:	bf02      	ittt	eq
34185eea:	2240      	moveq	r2, #64	@ 0x40
34185eec:	4b46      	ldreq	r3, [pc, #280]	@ (34186008 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34185eee:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185ef2:	f7fe bea5 	b.w	34184c40 <HAL_RCCEx_PeriphCLKConfig+0x1bd8>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_IC14)
34185ef6:	4a4a      	ldr	r2, [pc, #296]	@ (34186020 <HAL_RCCEx_PeriphCLKConfig+0x2fb8>)
34185ef8:	4293      	cmp	r3, r2
34185efa:	d124      	bne.n	34185f46 <HAL_RCCEx_PeriphCLKConfig+0x2ede>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34185efc:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34185efe:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185f02:	d004      	beq.n	34185f0e <HAL_RCCEx_PeriphCLKConfig+0x2ea6>
34185f04:	f640 0194 	movw	r1, #2196	@ 0x894
34185f08:	483e      	ldr	r0, [pc, #248]	@ (34186004 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34185f0a:	f7fb f921 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34185f0e:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34185f10:	3b01      	subs	r3, #1
34185f12:	2bff      	cmp	r3, #255	@ 0xff
34185f14:	d904      	bls.n	34185f20 <HAL_RCCEx_PeriphCLKConfig+0x2eb8>
34185f16:	f640 0195 	movw	r1, #2197	@ 0x895
34185f1a:	483a      	ldr	r0, [pc, #232]	@ (34186004 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34185f1c:	f7fb f918 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185f20:	4a39      	ldr	r2, [pc, #228]	@ (34186008 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34185f22:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185f24:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185f28:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185f2a:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185f2e:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185f32:	3901      	subs	r1, #1
34185f34:	4303      	orrs	r3, r0
34185f36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185f3a:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185f3e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34185f42:	f7fe bec3 	b.w	34184ccc <HAL_RCCEx_PeriphCLKConfig+0x1c64>
    else if (PeriphClkInit->Uart9ClockSelection == RCC_UART9CLKSOURCE_CLKP)
34185f46:	4a37      	ldr	r2, [pc, #220]	@ (34186024 <HAL_RCCEx_PeriphCLKConfig+0x2fbc>)
34185f48:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185f4a:	bf02      	ittt	eq
34185f4c:	2240      	moveq	r2, #64	@ 0x40
34185f4e:	4b2e      	ldreq	r3, [pc, #184]	@ (34186008 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34185f50:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185f54:	f7fe bebc 	b.w	34184cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c68>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_IC14)
34185f58:	4a33      	ldr	r2, [pc, #204]	@ (34186028 <HAL_RCCEx_PeriphCLKConfig+0x2fc0>)
34185f5a:	4293      	cmp	r3, r2
34185f5c:	d124      	bne.n	34185fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f40>
      assert_param(IS_RCC_ICCLKSOURCE(PeriphClkInit->ICSelection[RCC_IC14].ClockSelection));
34185f5e:	6f23      	ldr	r3, [r4, #112]	@ 0x70
34185f60:	f033 5340 	bics.w	r3, r3, #805306368	@ 0x30000000
34185f64:	d004      	beq.n	34185f70 <HAL_RCCEx_PeriphCLKConfig+0x2f08>
34185f66:	f640 01c1 	movw	r1, #2241	@ 0x8c1
34185f6a:	4826      	ldr	r0, [pc, #152]	@ (34186004 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34185f6c:	f7fb f8f0 	bl	34181150 <assert_failed>
      assert_param(IS_RCC_ICCLKDIVIDER(PeriphClkInit->ICSelection[RCC_IC14].ClockDivider));
34185f70:	6f63      	ldr	r3, [r4, #116]	@ 0x74
34185f72:	3b01      	subs	r3, #1
34185f74:	2bff      	cmp	r3, #255	@ 0xff
34185f76:	d904      	bls.n	34185f82 <HAL_RCCEx_PeriphCLKConfig+0x2f1a>
34185f78:	f640 01c2 	movw	r1, #2242	@ 0x8c2
34185f7c:	4821      	ldr	r0, [pc, #132]	@ (34186004 <HAL_RCCEx_PeriphCLKConfig+0x2f9c>)
34185f7e:	f7fb f8e7 	bl	34181150 <assert_failed>
      MODIFY_REG(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL | RCC_IC14CFGR_IC14INT,
34185f82:	4a21      	ldr	r2, [pc, #132]	@ (34186008 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34185f84:	6f61      	ldr	r1, [r4, #116]	@ 0x74
34185f86:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34185f8a:	6f20      	ldr	r0, [r4, #112]	@ 0x70
34185f8c:	f023 5343 	bic.w	r3, r3, #817889280	@ 0x30c00000
34185f90:	f423 137c 	bic.w	r3, r3, #4128768	@ 0x3f0000
34185f94:	3901      	subs	r1, #1
34185f96:	4303      	orrs	r3, r0
34185f98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
34185f9c:	f8c2 30f8 	str.w	r3, [r2, #248]	@ 0xf8
  WRITE_REG(RCC->DIVENSR, RCC_DIVENSR_IC14ENS);
34185fa0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
34185fa4:	f7fe beda 	b.w	34184d5c <HAL_RCCEx_PeriphCLKConfig+0x1cf4>
    else if (PeriphClkInit->Usart10ClockSelection == RCC_USART10CLKSOURCE_CLKP)
34185fa8:	4a20      	ldr	r2, [pc, #128]	@ (3418602c <HAL_RCCEx_PeriphCLKConfig+0x2fc4>)
34185faa:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185fac:	bf02      	ittt	eq
34185fae:	2240      	moveq	r2, #64	@ 0x40
34185fb0:	4b15      	ldreq	r3, [pc, #84]	@ (34186008 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34185fb2:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185fb6:	f7fe bed3 	b.w	34184d60 <HAL_RCCEx_PeriphCLKConfig+0x1cf8>
    __HAL_RCC_USBPHY1_CONFIG(PeriphClkInit->UsbPhy1ClockSelection);
34185fba:	f7fc ff39 	bl	34182e30 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34185fbe:	f7fe bef5 	b.w	34184dac <HAL_RCCEx_PeriphCLKConfig+0x1d44>
    __HAL_RCC_USBPHY2_CONFIG(PeriphClkInit->UsbPhy2ClockSelection);
34185fc2:	f7fc ff35 	bl	34182e30 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34185fc6:	f7fe bf13 	b.w	34184df0 <HAL_RCCEx_PeriphCLKConfig+0x1d88>
    else if (PeriphClkInit->UsbOtgHs1ClockSelection == RCC_USBOTGHS1CLKSOURCE_CLKP)
34185fca:	4a19      	ldr	r2, [pc, #100]	@ (34186030 <HAL_RCCEx_PeriphCLKConfig+0x2fc8>)
34185fcc:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185fce:	bf02      	ittt	eq
34185fd0:	2240      	moveq	r2, #64	@ 0x40
34185fd2:	4b0d      	ldreq	r3, [pc, #52]	@ (34186008 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34185fd4:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185fd8:	f7fe bf4a 	b.w	34184e70 <HAL_RCCEx_PeriphCLKConfig+0x1e08>
    __HAL_RCC_USBOTGHS1_CONFIG(PeriphClkInit->UsbOtgHs1ClockSelection);
34185fdc:	f7fc ff28 	bl	34182e30 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34185fe0:	f7fe bf53 	b.w	34184e8a <HAL_RCCEx_PeriphCLKConfig+0x1e22>
    else if (PeriphClkInit->UsbOtgHs2ClockSelection == RCC_USBOTGHS2CLKSOURCE_CLKP)
34185fe4:	4a13      	ldr	r2, [pc, #76]	@ (34186034 <HAL_RCCEx_PeriphCLKConfig+0x2fcc>)
34185fe6:	4293      	cmp	r3, r2
  WRITE_REG(RCC->MISCENSR, RCC_MISCENSR_PERENS);
34185fe8:	bf02      	ittt	eq
34185fea:	2240      	moveq	r2, #64	@ 0x40
34185fec:	4b06      	ldreq	r3, [pc, #24]	@ (34186008 <HAL_RCCEx_PeriphCLKConfig+0x2fa0>)
34185fee:	f8c3 2a48 	streq.w	r2, [r3, #2632]	@ 0xa48
}
34185ff2:	f7fe bfa5 	b.w	34184f40 <HAL_RCCEx_PeriphCLKConfig+0x1ed8>
    __HAL_RCC_USBOTGHS2_CONFIG(PeriphClkInit->UsbOtgHs2ClockSelection);
34185ff6:	f7fc ff1b 	bl	34182e30 <LL_RCC_HSE_SelectHSEAsDiv2Clock>
34185ffa:	f7fe bfae 	b.w	34184f5a <HAL_RCCEx_PeriphCLKConfig+0x1ef2>
34185ffe:	bf00      	nop
34186000:	07031430 	.word	0x07031430
34186004:	3418cf4f 	.word	0x3418cf4f
34186008:	56028000 	.word	0x56028000
3418600c:	07011430 	.word	0x07011430
34186010:	07031830 	.word	0x07031830
34186014:	07011830 	.word	0x07011830
34186018:	07031c30 	.word	0x07031c30
3418601c:	07011c30 	.word	0x07011c30
34186020:	07030034 	.word	0x07030034
34186024:	07010034 	.word	0x07010034
34186028:	07030434 	.word	0x07030434
3418602c:	07010434 	.word	0x07010434
34186030:	03010c14 	.word	0x03010c14
34186034:	03011414 	.word	0x03011414

34186038 <HAL_RCCEx_GetPLL1CLKFreq>:
{
34186038:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL1RDY) == (RCC_SR_PLL1RDY)) ? 1UL : 0UL);
3418603a:	4c1e      	ldr	r4, [pc, #120]	@ (341860b4 <HAL_RCCEx_GetPLL1CLKFreq+0x7c>)
3418603c:	6863      	ldr	r3, [r4, #4]
3418603e:	05d9      	lsls	r1, r3, #23
34186040:	d506      	bpl.n	34186050 <HAL_RCCEx_GetPLL1CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIVEN) == RCC_PLL1CFGR3_PLL1PDIVEN) ? 1UL : 0UL);
34186042:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34186046:	005a      	lsls	r2, r3, #1
34186048:	d40f      	bmi.n	3418606a <HAL_RCCEx_GetPLL1CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418604a:	2000      	movs	r0, #0
}
3418604c:	b003      	add	sp, #12
3418604e:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1BYP) == RCC_PLL1CFGR1_PLL1BYP) ? 1UL : 0UL);
34186050:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
34186054:	011b      	lsls	r3, r3, #4
34186056:	d5f8      	bpl.n	3418604a <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1SEL));
34186058:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3418605c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34186060:	b003      	add	sp, #12
34186062:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
34186066:	f7fc bf9d 	b.w	34182fa4 <RCCEx_GetPLLSourceFreq>
3418606a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL1_GetSource());
3418606e:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
34186072:	f7fc ff97 	bl	34182fa4 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34186076:	2800      	cmp	r0, #0
34186078:	d0e7      	beq.n	3418604a <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVM) >> RCC_PLL1CFGR1_PLL1DIVM_Pos);
3418607a:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
        if (divm != 0U)
3418607e:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34186082:	f3c3 5105 	ubfx	r1, r3, #20, #6
34186086:	d0e0      	beq.n	3418604a <HAL_RCCEx_GetPLL1CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL1CFGR1, RCC_PLL1CFGR1_PLL1DIVN) >> RCC_PLL1CFGR1_PLL1DIVN_Pos));
34186088:	f8d4 2080 	ldr.w	r2, [r4, #128]	@ 0x80
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR2, RCC_PLL1CFGR2_PLL1DIVNFRAC) >> RCC_PLL1CFGR2_PLL1DIVNFRAC_Pos);
3418608c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34186090:	f8d4 5088 	ldr.w	r5, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
34186094:	f8d4 4088 	ldr.w	r4, [r4, #136]	@ 0x88
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV1) >> RCC_PLL1CFGR3_PLL1PDIV1_Pos);
34186098:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL1CFGR3, RCC_PLL1CFGR3_PLL1PDIV2) >> RCC_PLL1CFGR3_PLL1PDIV2_Pos);
3418609c:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL1_GetN(), LL_RCC_PLL1_GetFRACN(), \
341860a0:	9401      	str	r4, [sp, #4]
341860a2:	9500      	str	r5, [sp, #0]
341860a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341860a8:	f3c2 220b 	ubfx	r2, r2, #8, #12
341860ac:	f7fc ffb0 	bl	34183010 <RCCEx_CalcPLLFreq>
341860b0:	e7cc      	b.n	3418604c <HAL_RCCEx_GetPLL1CLKFreq+0x14>
341860b2:	bf00      	nop
341860b4:	56028000 	.word	0x56028000

341860b8 <HAL_RCCEx_GetPLL2CLKFreq>:
{
341860b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL2RDY) == (RCC_SR_PLL2RDY)) ? 1UL : 0UL);
341860ba:	4c1e      	ldr	r4, [pc, #120]	@ (34186134 <HAL_RCCEx_GetPLL2CLKFreq+0x7c>)
341860bc:	6863      	ldr	r3, [r4, #4]
341860be:	0599      	lsls	r1, r3, #22
341860c0:	d506      	bpl.n	341860d0 <HAL_RCCEx_GetPLL2CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIVEN) == RCC_PLL2CFGR3_PLL2PDIVEN) ? 1UL : 0UL);
341860c2:	f8d4 3098 	ldr.w	r3, [r4, #152]	@ 0x98
341860c6:	005a      	lsls	r2, r3, #1
341860c8:	d40f      	bmi.n	341860ea <HAL_RCCEx_GetPLL2CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
341860ca:	2000      	movs	r0, #0
}
341860cc:	b003      	add	sp, #12
341860ce:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2BYP) == RCC_PLL2CFGR1_PLL2BYP) ? 1UL : 0UL);
341860d0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
341860d4:	011b      	lsls	r3, r3, #4
341860d6:	d5f8      	bpl.n	341860ca <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2SEL));
341860d8:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
341860dc:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
341860e0:	b003      	add	sp, #12
341860e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
341860e6:	f7fc bf5d 	b.w	34182fa4 <RCCEx_GetPLLSourceFreq>
341860ea:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL2_GetSource());
341860ee:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
341860f2:	f7fc ff57 	bl	34182fa4 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
341860f6:	2800      	cmp	r0, #0
341860f8:	d0e7      	beq.n	341860ca <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVM) >> RCC_PLL2CFGR1_PLL2DIVM_Pos);
341860fa:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
        if (divm != 0U)
341860fe:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34186102:	f3c3 5105 	ubfx	r1, r3, #20, #6
34186106:	d0e0      	beq.n	341860ca <HAL_RCCEx_GetPLL2CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL2CFGR1, RCC_PLL2CFGR1_PLL2DIVN) >> RCC_PLL2CFGR1_PLL2DIVN_Pos));
34186108:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR2, RCC_PLL2CFGR2_PLL2DIVNFRAC) >> RCC_PLL2CFGR2_PLL2DIVNFRAC_Pos);
3418610c:	f8d4 3094 	ldr.w	r3, [r4, #148]	@ 0x94
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34186110:	f8d4 5098 	ldr.w	r5, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
34186114:	f8d4 4098 	ldr.w	r4, [r4, #152]	@ 0x98
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV1) >> RCC_PLL2CFGR3_PLL2PDIV1_Pos);
34186118:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL2CFGR3, RCC_PLL2CFGR3_PLL2PDIV2) >> RCC_PLL2CFGR3_PLL2PDIV2_Pos);
3418611c:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL2_GetN(), LL_RCC_PLL2_GetFRACN(), \
34186120:	9401      	str	r4, [sp, #4]
34186122:	9500      	str	r5, [sp, #0]
34186124:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34186128:	f3c2 220b 	ubfx	r2, r2, #8, #12
3418612c:	f7fc ff70 	bl	34183010 <RCCEx_CalcPLLFreq>
34186130:	e7cc      	b.n	341860cc <HAL_RCCEx_GetPLL2CLKFreq+0x14>
34186132:	bf00      	nop
34186134:	56028000 	.word	0x56028000

34186138 <HAL_RCCEx_GetPLL3CLKFreq>:
{
34186138:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL3RDY) == (RCC_SR_PLL3RDY)) ? 1UL : 0UL);
3418613a:	4c1e      	ldr	r4, [pc, #120]	@ (341861b4 <HAL_RCCEx_GetPLL3CLKFreq+0x7c>)
3418613c:	6863      	ldr	r3, [r4, #4]
3418613e:	0559      	lsls	r1, r3, #21
34186140:	d506      	bpl.n	34186150 <HAL_RCCEx_GetPLL3CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIVEN) == RCC_PLL3CFGR3_PLL3PDIVEN) ? 1UL : 0UL);
34186142:	f8d4 30a8 	ldr.w	r3, [r4, #168]	@ 0xa8
34186146:	005a      	lsls	r2, r3, #1
34186148:	d40f      	bmi.n	3418616a <HAL_RCCEx_GetPLL3CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
3418614a:	2000      	movs	r0, #0
}
3418614c:	b003      	add	sp, #12
3418614e:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3BYP) == RCC_PLL3CFGR1_PLL3BYP) ? 1UL : 0UL);
34186150:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
34186154:	011b      	lsls	r3, r3, #4
34186156:	d5f8      	bpl.n	3418614a <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3SEL));
34186158:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418615c:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
34186160:	b003      	add	sp, #12
34186162:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
34186166:	f7fc bf1d 	b.w	34182fa4 <RCCEx_GetPLLSourceFreq>
3418616a:	f8d4 00a0 	ldr.w	r0, [r4, #160]	@ 0xa0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL3_GetSource());
3418616e:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
34186172:	f7fc ff17 	bl	34182fa4 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
34186176:	2800      	cmp	r0, #0
34186178:	d0e7      	beq.n	3418614a <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVM) >> RCC_PLL3CFGR1_PLL3DIVM_Pos);
3418617a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	@ 0xa0
        if (divm != 0U)
3418617e:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34186182:	f3c3 5105 	ubfx	r1, r3, #20, #6
34186186:	d0e0      	beq.n	3418614a <HAL_RCCEx_GetPLL3CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL3CFGR1, RCC_PLL3CFGR1_PLL3DIVN) >> RCC_PLL3CFGR1_PLL3DIVN_Pos));
34186188:	f8d4 20a0 	ldr.w	r2, [r4, #160]	@ 0xa0
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR2, RCC_PLL3CFGR2_PLL3DIVNFRAC) >> RCC_PLL3CFGR2_PLL3DIVNFRAC_Pos);
3418618c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34186190:	f8d4 50a8 	ldr.w	r5, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
34186194:	f8d4 40a8 	ldr.w	r4, [r4, #168]	@ 0xa8
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV1) >> RCC_PLL3CFGR3_PLL3PDIV1_Pos);
34186198:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL3CFGR3, RCC_PLL3CFGR3_PLL3PDIV2) >> RCC_PLL3CFGR3_PLL3PDIV2_Pos);
3418619c:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL3_GetN(), LL_RCC_PLL3_GetFRACN(), \
341861a0:	9401      	str	r4, [sp, #4]
341861a2:	9500      	str	r5, [sp, #0]
341861a4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
341861a8:	f3c2 220b 	ubfx	r2, r2, #8, #12
341861ac:	f7fc ff30 	bl	34183010 <RCCEx_CalcPLLFreq>
341861b0:	e7cc      	b.n	3418614c <HAL_RCCEx_GetPLL3CLKFreq+0x14>
341861b2:	bf00      	nop
341861b4:	56028000 	.word	0x56028000

341861b8 <HAL_RCCEx_GetPLL4CLKFreq>:
{
341861b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  return ((READ_BIT(RCC->SR, RCC_SR_PLL4RDY) == (RCC_SR_PLL4RDY)) ? 1UL : 0UL);
341861ba:	4c1e      	ldr	r4, [pc, #120]	@ (34186234 <HAL_RCCEx_GetPLL4CLKFreq+0x7c>)
341861bc:	6863      	ldr	r3, [r4, #4]
341861be:	0519      	lsls	r1, r3, #20
341861c0:	d506      	bpl.n	341861d0 <HAL_RCCEx_GetPLL4CLKFreq+0x18>
  return ((READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIVEN) == RCC_PLL4CFGR3_PLL4PDIVEN) ? 1UL : 0UL);
341861c2:	f8d4 30b8 	ldr.w	r3, [r4, #184]	@ 0xb8
341861c6:	005a      	lsls	r2, r3, #1
341861c8:	d40f      	bmi.n	341861ea <HAL_RCCEx_GetPLL4CLKFreq+0x32>
  uint32_t plloutputfreq = RCC_PERIPH_FREQUENCY_NO;
341861ca:	2000      	movs	r0, #0
}
341861cc:	b003      	add	sp, #12
341861ce:	bd30      	pop	{r4, r5, pc}
  return ((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4BYP) == RCC_PLL4CFGR1_PLL4BYP) ? 1UL : 0UL);
341861d0:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
341861d4:	011b      	lsls	r3, r3, #4
341861d6:	d5f8      	bpl.n	341861ca <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4SEL));
341861d8:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
341861dc:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
}
341861e0:	b003      	add	sp, #12
341861e2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    plloutputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
341861e6:	f7fc bedd 	b.w	34182fa4 <RCCEx_GetPLLSourceFreq>
341861ea:	f8d4 00b0 	ldr.w	r0, [r4, #176]	@ 0xb0
      uint32_t pllinputfreq = RCCEx_GetPLLSourceFreq(LL_RCC_PLL4_GetSource());
341861ee:	f000 40e0 	and.w	r0, r0, #1879048192	@ 0x70000000
341861f2:	f7fc fed7 	bl	34182fa4 <RCCEx_GetPLLSourceFreq>
      if (pllinputfreq != RCC_PERIPH_FREQUENCY_NO)
341861f6:	2800      	cmp	r0, #0
341861f8:	d0e7      	beq.n	341861ca <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVM) >> RCC_PLL4CFGR1_PLL4DIVM_Pos);
341861fa:	f8d4 30b0 	ldr.w	r3, [r4, #176]	@ 0xb0
        if (divm != 0U)
341861fe:	f013 7f7c 	tst.w	r3, #66060288	@ 0x3f00000
34186202:	f3c3 5105 	ubfx	r1, r3, #20, #6
34186206:	d0e0      	beq.n	341861ca <HAL_RCCEx_GetPLL4CLKFreq+0x12>
  return (uint32_t)((READ_BIT(RCC->PLL4CFGR1, RCC_PLL4CFGR1_PLL4DIVN) >> RCC_PLL4CFGR1_PLL4DIVN_Pos));
34186208:	f8d4 20b0 	ldr.w	r2, [r4, #176]	@ 0xb0
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR2, RCC_PLL4CFGR2_PLL4DIVNFRAC) >> RCC_PLL4CFGR2_PLL4DIVNFRAC_Pos);
3418620c:	f8d4 30b4 	ldr.w	r3, [r4, #180]	@ 0xb4
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34186210:	f8d4 50b8 	ldr.w	r5, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
34186214:	f8d4 40b8 	ldr.w	r4, [r4, #184]	@ 0xb8
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV1) >> RCC_PLL4CFGR3_PLL4PDIV1_Pos);
34186218:	f3c5 65c2 	ubfx	r5, r5, #27, #3
  return (uint32_t)(READ_BIT(RCC->PLL4CFGR3, RCC_PLL4CFGR3_PLL4PDIV2) >> RCC_PLL4CFGR3_PLL4PDIV2_Pos);
3418621c:	f3c4 6402 	ubfx	r4, r4, #24, #3
          plloutputfreq = RCCEx_CalcPLLFreq(pllinputfreq, divm, LL_RCC_PLL4_GetN(), LL_RCC_PLL4_GetFRACN(), \
34186220:	9401      	str	r4, [sp, #4]
34186222:	9500      	str	r5, [sp, #0]
34186224:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
34186228:	f3c2 220b 	ubfx	r2, r2, #8, #12
3418622c:	f7fc fef0 	bl	34183010 <RCCEx_CalcPLLFreq>
34186230:	e7cc      	b.n	341861cc <HAL_RCCEx_GetPLL4CLKFreq+0x14>
34186232:	bf00      	nop
34186234:	56028000 	.word	0x56028000

34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>:
  * @rmtoll MISCENR       PEREN         LL_RCC_CLKP_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_CLKP_IsEnabled(void)
{
  return ((READ_BIT(RCC->MISCENR, RCC_MISCENR_PEREN) == RCC_MISCENR_PEREN) ? 1UL : 0UL);
34186238:	4b3e      	ldr	r3, [pc, #248]	@ (34186334 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
  * @param  CLKPxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_CLKP_Clock_Source
  * @retval CLKP clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetCLKPCLKFreq(uint32_t CLKPxSource)
3418623a:	b510      	push	{r4, lr}
3418623c:	f8d3 2248 	ldr.w	r2, [r3, #584]	@ 0x248
34186240:	0652      	lsls	r2, r2, #25
34186242:	d56b      	bpl.n	3418631c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PERSEL));
34186244:	f8d3 215c 	ldr.w	r2, [r3, #348]	@ 0x15c
34186248:	f002 0207 	and.w	r2, r2, #7
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  if (LL_RCC_CLKP_IsEnabled() == 1U)
  {
    switch (LL_RCC_GetCLKPClockSource(CLKPxSource))
3418624c:	3a01      	subs	r2, #1
3418624e:	2a06      	cmp	r2, #6
34186250:	d805      	bhi.n	3418625e <RCCEx_GetCLKPCLKFreq.constprop.0+0x26>
34186252:	e8df f002 	tbb	[pc, r2]
34186256:	150f      	.short	0x150f
34186258:	3e321b48 	.word	0x3e321b48
3418625c:	54          	.byte	0x54
3418625d:	00          	.byte	0x00
    {
      case LL_RCC_CLKP_CLKSOURCE_HSI:
        if (LL_RCC_HSI_IsReady() != 0U)
3418625e:	f7fc fe07 	bl	34182e70 <LL_RCC_HSI_IsReady>
34186262:	2800      	cmp	r0, #0
34186264:	d05a      	beq.n	3418631c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34186266:	4b33      	ldr	r3, [pc, #204]	@ (34186334 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
        {
          clkp_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34186268:	4833      	ldr	r0, [pc, #204]	@ (34186338 <RCCEx_GetCLKPCLKFreq.constprop.0+0x100>)
3418626a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
3418626c:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34186270:	40d8      	lsrs	r0, r3
34186272:	e054      	b.n	3418631e <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_MSI:
        if (LL_RCC_MSI_IsReady() != 0U)
34186274:	f7fc fe04 	bl	34182e80 <LL_RCC_MSI_IsReady>
34186278:	2800      	cmp	r0, #0
3418627a:	d04f      	beq.n	3418631c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = MSI_VALUE;
3418627c:	482f      	ldr	r0, [pc, #188]	@ (3418633c <RCCEx_GetCLKPCLKFreq.constprop.0+0x104>)
3418627e:	e04e      	b.n	3418631e <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
        }
        break;

      case LL_RCC_CLKP_CLKSOURCE_HSE:
        if (LL_RCC_HSE_IsReady() != 0U)
34186280:	f7fc fdee 	bl	34182e60 <LL_RCC_HSE_IsReady>
34186284:	2800      	cmp	r0, #0
34186286:	d049      	beq.n	3418631c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
        {
          clkp_frequency = HSE_VALUE;
34186288:	482d      	ldr	r0, [pc, #180]	@ (34186340 <RCCEx_GetCLKPCLKFreq.constprop.0+0x108>)
        /* Unexpected case */
        break;
    }
  }

  return clkp_frequency;
3418628a:	e048      	b.n	3418631e <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
3418628c:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34186290:	06d4      	lsls	r4, r2, #27
34186292:	d543      	bpl.n	3418631c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34186294:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34186298:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
3418629c:	f3c0 4007 	ubfx	r0, r0, #16, #8
341862a0:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
341862a2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
          switch (LL_RCC_IC20_GetSource())
341862a6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341862aa:	d03c      	beq.n	34186326 <RCCEx_GetCLKPCLKFreq.constprop.0+0xee>
341862ac:	d833      	bhi.n	34186316 <RCCEx_GetCLKPCLKFreq.constprop.0+0xde>
341862ae:	bbbb      	cbnz	r3, 34186320 <RCCEx_GetCLKPCLKFreq.constprop.0+0xe8>
              clkp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341862b0:	f7ff fec2 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
              clkp_frequency = clkp_frequency / ic_divider;
341862b4:	fbb0 f0f4 	udiv	r0, r0, r4
              break;
341862b8:	e031      	b.n	3418631e <RCCEx_GetCLKPCLKFreq.constprop.0+0xe6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
341862ba:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
341862be:	0590      	lsls	r0, r2, #22
341862c0:	d52c      	bpl.n	3418631c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
341862c2:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
341862c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
341862ca:	f3c0 4007 	ubfx	r0, r0, #16, #8
341862ce:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
341862d0:	e7e7      	b.n	341862a2 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
        if (LL_RCC_IC15_IsEnabled() != 0U)
341862d2:	f7fc fe4d 	bl	34182f70 <LL_RCC_IC15_IsEnabled>
341862d6:	b308      	cbz	r0, 3418631c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
          ic_divider = LL_RCC_IC15_GetDivider();
341862d8:	f7fc fe52 	bl	34182f80 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
341862dc:	4b15      	ldr	r3, [pc, #84]	@ (34186334 <RCCEx_GetCLKPCLKFreq.constprop.0+0xfc>)
341862de:	4604      	mov	r4, r0
341862e0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
341862e4:	e7dd      	b.n	341862a2 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
341862e6:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
341862ea:	0351      	lsls	r1, r2, #13
341862ec:	d516      	bpl.n	3418631c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
341862ee:	f8d3 010c 	ldr.w	r0, [r3, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
341862f2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
341862f6:	f3c0 4007 	ubfx	r0, r0, #16, #8
341862fa:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
341862fc:	e7d1      	b.n	341862a2 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
341862fe:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34186302:	0312      	lsls	r2, r2, #12
34186304:	d50a      	bpl.n	3418631c <RCCEx_GetCLKPCLKFreq.constprop.0+0xe4>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34186306:	f8d3 0110 	ldr.w	r0, [r3, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3418630a:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
3418630e:	f3c0 4007 	ubfx	r0, r0, #16, #8
34186312:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34186314:	e7c5      	b.n	341862a2 <RCCEx_GetCLKPCLKFreq.constprop.0+0x6a>
          switch (LL_RCC_IC20_GetSource())
34186316:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418631a:	d007      	beq.n	3418632c <RCCEx_GetCLKPCLKFreq.constprop.0+0xf4>
  uint32_t clkp_frequency = RCC_PERIPH_FREQUENCY_NO;
3418631c:	2000      	movs	r0, #0
}
3418631e:	bd10      	pop	{r4, pc}
              clkp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34186320:	f7ff feca 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
34186324:	e7c6      	b.n	341862b4 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34186326:	f7ff ff07 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
3418632a:	e7c3      	b.n	341862b4 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
              clkp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418632c:	f7ff ff44 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
34186330:	e7c0      	b.n	341862b4 <RCCEx_GetCLKPCLKFreq.constprop.0+0x7c>
34186332:	bf00      	nop
34186334:	56028000 	.word	0x56028000
34186338:	03d09000 	.word	0x03d09000
3418633c:	003d0900 	.word	0x003d0900
34186340:	016e3600 	.word	0x016e3600

34186344 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>:
  * @param  SPDIFRXxSource This parameter can be one of the following values:
  *         @arg @ref RCCEx_SPDIFRX1_Clock_Source
  * @retval SPDIF clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
static uint32_t RCCEx_GetSPDIFRXCLKFreq(uint32_t SPDIFRXxSource)
34186344:	b538      	push	{r3, r4, r5, lr}
  return (uint32_t)(READ_BIT(RCC->CCIPR9, RCC_CCIPR9_SPDIFRX1SEL));
34186346:	4d2b      	ldr	r5, [pc, #172]	@ (341863f4 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb0>)
34186348:	f8d5 3164 	ldr.w	r3, [r5, #356]	@ 0x164
3418634c:	f003 0307 	and.w	r3, r3, #7
{
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
34186350:	2b06      	cmp	r3, #6
34186352:	d835      	bhi.n	341863c0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
34186354:	e8df f003 	tbb	[pc, r3]
34186358:	28110d04 	.word	0x28110d04
3418635c:	3c45      	.short	0x3c45
3418635e:	4b          	.byte	0x4b
3418635f:	00          	.byte	0x00
  {
    case LL_RCC_SPDIFRX1_CLKSOURCE_PCLK1:
      spdifrx_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34186360:	f7fc fcda 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
34186364:	f7fc fe16 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34186368:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
3418636a:	f003 0307 	and.w	r3, r3, #7
      break;

    case LL_RCC_SPDIFRX1_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
      {
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418636e:	40d8      	lsrs	r0, r3
34186370:	e027      	b.n	341863c2 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      /* Unexpected case */
      break;
  }

  return spdifrx_frequency;
}
34186372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      spdifrx_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34186376:	f7ff bf5f 	b.w	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC7_IsEnabled() != 0U)
3418637a:	f7fc fdb1 	bl	34182ee0 <LL_RCC_IC7_IsEnabled>
3418637e:	b1f8      	cbz	r0, 341863c0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC7_GetDivider();
34186380:	f7fc fdb6 	bl	34182ef0 <LL_RCC_IC7_GetDivider>
34186384:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34186386:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
3418638a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
3418638e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34186392:	d017      	beq.n	341863c4 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x80>
34186394:	d811      	bhi.n	341863ba <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x76>
34186396:	b913      	cbnz	r3, 3418639e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5a>
            spdifrx_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34186398:	f7ff fe4e 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
3418639c:	e001      	b.n	341863a2 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418639e:	f7ff fe8b 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
            spdifrx_frequency = spdifrx_frequency / ic_divider;
341863a2:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
341863a6:	e00c      	b.n	341863c2 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
      if (LL_RCC_IC8_IsEnabled() != 0U)
341863a8:	f7fc fdac 	bl	34182f04 <LL_RCC_IC8_IsEnabled>
341863ac:	b140      	cbz	r0, 341863c0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        ic_divider = LL_RCC_IC8_GetDivider();
341863ae:	f7fc fdb1 	bl	34182f14 <LL_RCC_IC8_GetDivider>
341863b2:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
341863b6:	4604      	mov	r4, r0
341863b8:	e7e7      	b.n	3418638a <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x46>
        switch (LL_RCC_IC8_GetSource())
341863ba:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341863be:	d004      	beq.n	341863ca <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x86>
  uint32_t spdifrx_frequency = RCC_PERIPH_FREQUENCY_NO;
341863c0:	2000      	movs	r0, #0
}
341863c2:	bd38      	pop	{r3, r4, r5, pc}
            spdifrx_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341863c4:	f7ff feb8 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
341863c8:	e7eb      	b.n	341863a2 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
            spdifrx_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341863ca:	f7ff fef5 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
341863ce:	e7e8      	b.n	341863a2 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x5e>
      if (LL_RCC_HSI_IsReady() != 0U)
341863d0:	f7fc fd4e 	bl	34182e70 <LL_RCC_HSI_IsReady>
341863d4:	2800      	cmp	r0, #0
341863d6:	d0f3      	beq.n	341863c0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
341863d8:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        spdifrx_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341863da:	4807      	ldr	r0, [pc, #28]	@ (341863f8 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb4>)
341863dc:	f3c3 13c1 	ubfx	r3, r3, #7, #2
341863e0:	e7c5      	b.n	3418636e <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x2a>
      if (LL_RCC_MSI_IsReady() != 0U)
341863e2:	f7fc fd4d 	bl	34182e80 <LL_RCC_MSI_IsReady>
341863e6:	2800      	cmp	r0, #0
341863e8:	d0ea      	beq.n	341863c0 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7c>
        spdifrx_frequency = MSI_VALUE;
341863ea:	4804      	ldr	r0, [pc, #16]	@ (341863fc <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xb8>)
341863ec:	e7e9      	b.n	341863c2 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
  switch (LL_RCC_GetSPDIFRXClockSource(SPDIFRXxSource))
341863ee:	4804      	ldr	r0, [pc, #16]	@ (34186400 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0xbc>)
  return spdifrx_frequency;
341863f0:	e7e7      	b.n	341863c2 <RCCEx_GetSPDIFRXCLKFreq.constprop.0+0x7e>
341863f2:	bf00      	nop
341863f4:	56028000 	.word	0x56028000
341863f8:	03d09000 	.word	0x03d09000
341863fc:	003d0900 	.word	0x003d0900
34186400:	00bb8000 	.word	0x00bb8000

34186404 <RCCEx_GetXSPICLKFreq>:
  * @retval XSPI clock frequency (in Hz)
  *         - @ref  RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */

static uint32_t RCCEx_GetXSPICLKFreq(uint32_t XSPIxSource)
{
34186404:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34186406:	f7fc fd5d 	bl	34182ec4 <LL_RCC_GetClockSource>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
  uint32_t ic_divider;

  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3418640a:	4b36      	ldr	r3, [pc, #216]	@ (341864e4 <RCCEx_GetXSPICLKFreq+0xe0>)
3418640c:	4298      	cmp	r0, r3
3418640e:	d028      	beq.n	34186462 <RCCEx_GetXSPICLKFreq+0x5e>
34186410:	d81b      	bhi.n	3418644a <RCCEx_GetXSPICLKFreq+0x46>
34186412:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186416:	4298      	cmp	r0, r3
34186418:	d013      	beq.n	34186442 <RCCEx_GetXSPICLKFreq+0x3e>
3418641a:	d80b      	bhi.n	34186434 <RCCEx_GetXSPICLKFreq+0x30>
3418641c:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34186420:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186424:	429a      	cmp	r2, r3
34186426:	d04a      	beq.n	341864be <RCCEx_GetXSPICLKFreq+0xba>
34186428:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
3418642c:	4298      	cmp	r0, r3
3418642e:	d046      	beq.n	341864be <RCCEx_GetXSPICLKFreq+0xba>
  uint32_t xspi_frequency = RCC_PERIPH_FREQUENCY_NO;
34186430:	2000      	movs	r0, #0
      /* Nothing to do */
      break;
  }

  return xspi_frequency;
}
34186432:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34186434:	4b2c      	ldr	r3, [pc, #176]	@ (341864e8 <RCCEx_GetXSPICLKFreq+0xe4>)
34186436:	4298      	cmp	r0, r3
34186438:	d003      	beq.n	34186442 <RCCEx_GetXSPICLKFreq+0x3e>
3418643a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3418643e:	4298      	cmp	r0, r3
34186440:	d1f6      	bne.n	34186430 <RCCEx_GetXSPICLKFreq+0x2c>
}
34186442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34186446:	f7ff bef7 	b.w	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
3418644a:	4b28      	ldr	r3, [pc, #160]	@ (341864ec <RCCEx_GetXSPICLKFreq+0xe8>)
3418644c:	4298      	cmp	r0, r3
3418644e:	d028      	beq.n	341864a2 <RCCEx_GetXSPICLKFreq+0x9e>
34186450:	d820      	bhi.n	34186494 <RCCEx_GetXSPICLKFreq+0x90>
34186452:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34186456:	4298      	cmp	r0, r3
34186458:	d003      	beq.n	34186462 <RCCEx_GetXSPICLKFreq+0x5e>
3418645a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3418645e:	4298      	cmp	r0, r3
34186460:	d1e6      	bne.n	34186430 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
34186462:	4b23      	ldr	r3, [pc, #140]	@ (341864f0 <RCCEx_GetXSPICLKFreq+0xec>)
34186464:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34186468:	f010 0004 	ands.w	r0, r0, #4
3418646c:	d0e1      	beq.n	34186432 <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
3418646e:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34186472:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34186476:	f3c0 4007 	ubfx	r0, r0, #16, #8
3418647a:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
3418647c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC4_GetSource())
34186480:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34186484:	d02a      	beq.n	341864dc <RCCEx_GetXSPICLKFreq+0xd8>
34186486:	d820      	bhi.n	341864ca <RCCEx_GetXSPICLKFreq+0xc6>
34186488:	bb2b      	cbnz	r3, 341864d6 <RCCEx_GetXSPICLKFreq+0xd2>
            xspi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418648a:	f7ff fdd5 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
            xspi_frequency = xspi_frequency / ic_divider;
3418648e:	fbb0 f0f4 	udiv	r0, r0, r4
  return xspi_frequency;
34186492:	e7ce      	b.n	34186432 <RCCEx_GetXSPICLKFreq+0x2e>
  switch (LL_RCC_GetXSPIClockSource(XSPIxSource))
34186494:	4b17      	ldr	r3, [pc, #92]	@ (341864f4 <RCCEx_GetXSPICLKFreq+0xf0>)
34186496:	4298      	cmp	r0, r3
34186498:	d003      	beq.n	341864a2 <RCCEx_GetXSPICLKFreq+0x9e>
3418649a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3418649e:	4298      	cmp	r0, r3
341864a0:	d1c6      	bne.n	34186430 <RCCEx_GetXSPICLKFreq+0x2c>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
341864a2:	4b13      	ldr	r3, [pc, #76]	@ (341864f0 <RCCEx_GetXSPICLKFreq+0xec>)
341864a4:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
341864a8:	f010 0008 	ands.w	r0, r0, #8
341864ac:	d0c1      	beq.n	34186432 <RCCEx_GetXSPICLKFreq+0x2e>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
341864ae:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
341864b2:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
341864b6:	f3c0 4007 	ubfx	r0, r0, #16, #8
341864ba:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
341864bc:	e7de      	b.n	3418647c <RCCEx_GetXSPICLKFreq+0x78>
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
341864be:	f7fc fc2b 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
}
341864c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      xspi_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
341864c6:	f7fc bd65 	b.w	34182f94 <RCCEx_GetHCLKFreq>
        switch (LL_RCC_IC4_GetSource())
341864ca:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341864ce:	d1af      	bne.n	34186430 <RCCEx_GetXSPICLKFreq+0x2c>
            xspi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341864d0:	f7ff fe72 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
341864d4:	e7db      	b.n	3418648e <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341864d6:	f7ff fdef 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
341864da:	e7d8      	b.n	3418648e <RCCEx_GetXSPICLKFreq+0x8a>
            xspi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341864dc:	f7ff fe2c 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
341864e0:	e7d5      	b.n	3418648e <RCCEx_GetXSPICLKFreq+0x8a>
341864e2:	bf00      	nop
341864e4:	03020014 	.word	0x03020014
341864e8:	03010414 	.word	0x03010414
341864ec:	03030014 	.word	0x03030014
341864f0:	56028000 	.word	0x56028000
341864f4:	03030414 	.word	0x03030414

341864f8 <RCCEx_GetOTGPHYCLKFreq>:
{
341864f8:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
341864fa:	f7fc fce3 	bl	34182ec4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
341864fe:	4b2b      	ldr	r3, [pc, #172]	@ (341865ac <RCCEx_GetOTGPHYCLKFreq+0xb4>)
34186500:	4298      	cmp	r0, r3
34186502:	d021      	beq.n	34186548 <RCCEx_GetOTGPHYCLKFreq+0x50>
34186504:	d815      	bhi.n	34186532 <RCCEx_GetOTGPHYCLKFreq+0x3a>
34186506:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
3418650a:	4298      	cmp	r0, r3
3418650c:	d00d      	beq.n	3418652a <RCCEx_GetOTGPHYCLKFreq+0x32>
3418650e:	d809      	bhi.n	34186524 <RCCEx_GetOTGPHYCLKFreq+0x2c>
34186510:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186514:	4298      	cmp	r0, r3
34186516:	d02d      	beq.n	34186574 <RCCEx_GetOTGPHYCLKFreq+0x7c>
34186518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
3418651c:	4298      	cmp	r0, r3
3418651e:	d029      	beq.n	34186574 <RCCEx_GetOTGPHYCLKFreq+0x7c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
34186520:	2000      	movs	r0, #0
}
34186522:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34186524:	4b22      	ldr	r3, [pc, #136]	@ (341865b0 <RCCEx_GetOTGPHYCLKFreq+0xb8>)
34186526:	4298      	cmp	r0, r3
34186528:	d1fa      	bne.n	34186520 <RCCEx_GetOTGPHYCLKFreq+0x28>
}
3418652a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usb_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418652e:	f7ff be83 	b.w	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxSource))
34186532:	4b20      	ldr	r3, [pc, #128]	@ (341865b4 <RCCEx_GetOTGPHYCLKFreq+0xbc>)
34186534:	4298      	cmp	r0, r3
34186536:	d023      	beq.n	34186580 <RCCEx_GetOTGPHYCLKFreq+0x88>
34186538:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
3418653c:	4298      	cmp	r0, r3
3418653e:	d01f      	beq.n	34186580 <RCCEx_GetOTGPHYCLKFreq+0x88>
34186540:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186544:	4298      	cmp	r0, r3
34186546:	d1eb      	bne.n	34186520 <RCCEx_GetOTGPHYCLKFreq+0x28>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34186548:	f7fc fd12 	bl	34182f70 <LL_RCC_IC15_IsEnabled>
3418654c:	2800      	cmp	r0, #0
3418654e:	d0e7      	beq.n	34186520 <RCCEx_GetOTGPHYCLKFreq+0x28>
        uint32_t ic_divider = LL_RCC_IC15_GetDivider();
34186550:	f7fc fd16 	bl	34182f80 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34186554:	4b18      	ldr	r3, [pc, #96]	@ (341865b8 <RCCEx_GetOTGPHYCLKFreq+0xc0>)
34186556:	4604      	mov	r4, r0
34186558:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418655c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34186560:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34186564:	d01f      	beq.n	341865a6 <RCCEx_GetOTGPHYCLKFreq+0xae>
34186566:	d815      	bhi.n	34186594 <RCCEx_GetOTGPHYCLKFreq+0x9c>
34186568:	b9d3      	cbnz	r3, 341865a0 <RCCEx_GetOTGPHYCLKFreq+0xa8>
            usb_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418656a:	f7ff fd65 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
            usb_frequency = usb_frequency / ic_divider;
3418656e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34186572:	e7d6      	b.n	34186522 <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34186574:	f7fc fc74 	bl	34182e60 <LL_RCC_HSE_IsReady>
34186578:	2800      	cmp	r0, #0
3418657a:	d0d1      	beq.n	34186520 <RCCEx_GetOTGPHYCLKFreq+0x28>
        usb_frequency = HSE_VALUE / 2U;
3418657c:	480f      	ldr	r0, [pc, #60]	@ (341865bc <RCCEx_GetOTGPHYCLKFreq+0xc4>)
3418657e:	e7d0      	b.n	34186522 <RCCEx_GetOTGPHYCLKFreq+0x2a>
      if (LL_RCC_HSE_IsReady() != 0U)
34186580:	f7fc fc6e 	bl	34182e60 <LL_RCC_HSE_IsReady>
34186584:	2800      	cmp	r0, #0
34186586:	d0cb      	beq.n	34186520 <RCCEx_GetOTGPHYCLKFreq+0x28>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
34186588:	f7fc fc62 	bl	34182e50 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
3418658c:	2800      	cmp	r0, #0
3418658e:	d1f5      	bne.n	3418657c <RCCEx_GetOTGPHYCLKFreq+0x84>
          usb_frequency = HSE_VALUE;
34186590:	480b      	ldr	r0, [pc, #44]	@ (341865c0 <RCCEx_GetOTGPHYCLKFreq+0xc8>)
  return usb_frequency;
34186592:	e7c6      	b.n	34186522 <RCCEx_GetOTGPHYCLKFreq+0x2a>
        switch (LL_RCC_IC15_GetSource())
34186594:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34186598:	d1c2      	bne.n	34186520 <RCCEx_GetOTGPHYCLKFreq+0x28>
            usb_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418659a:	f7ff fe0d 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
3418659e:	e7e6      	b.n	3418656e <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341865a0:	f7ff fd8a 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
341865a4:	e7e3      	b.n	3418656e <RCCEx_GetOTGPHYCLKFreq+0x76>
            usb_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341865a6:	f7ff fdc7 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
341865aa:	e7e0      	b.n	3418656e <RCCEx_GetOTGPHYCLKFreq+0x76>
341865ac:	03020c14 	.word	0x03020c14
341865b0:	03011414 	.word	0x03011414
341865b4:	03030c14 	.word	0x03030c14
341865b8:	56028000 	.word	0x56028000
341865bc:	00b71b00 	.word	0x00b71b00
341865c0:	016e3600 	.word	0x016e3600

341865c4 <RCCEx_GetOTGPHYCKREFCLKFreq>:
{
341865c4:	b508      	push	{r3, lr}
  return LL_RCC_GetClockSource(Periph);
341865c6:	f7fc fc7d 	bl	34182ec4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
341865ca:	4b11      	ldr	r3, [pc, #68]	@ (34186610 <RCCEx_GetOTGPHYCKREFCLKFreq+0x4c>)
341865cc:	4298      	cmp	r0, r3
341865ce:	d01c      	beq.n	3418660a <RCCEx_GetOTGPHYCKREFCLKFreq+0x46>
341865d0:	d805      	bhi.n	341865de <RCCEx_GetOTGPHYCKREFCLKFreq+0x1a>
341865d2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
341865d6:	4298      	cmp	r0, r3
341865d8:	d012      	beq.n	34186600 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3c>
  uint32_t usb_frequency = RCC_PERIPH_FREQUENCY_NO;
341865da:	2000      	movs	r0, #0
}
341865dc:	bd08      	pop	{r3, pc}
  switch (LL_RCC_GetUSBClockSource(OTGPHYxCKREFSource))
341865de:	4b0d      	ldr	r3, [pc, #52]	@ (34186614 <RCCEx_GetOTGPHYCKREFCLKFreq+0x50>)
341865e0:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
341865e4:	4298      	cmp	r0, r3
341865e6:	d1f8      	bne.n	341865da <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
      if (LL_RCC_HSE_IsReady() != 0U)
341865e8:	f7fc fc3a 	bl	34182e60 <LL_RCC_HSE_IsReady>
341865ec:	2800      	cmp	r0, #0
341865ee:	d0f4      	beq.n	341865da <RCCEx_GetOTGPHYCKREFCLKFreq+0x16>
        if (LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock() == 0UL)
341865f0:	f7fc fc2e 	bl	34182e50 <LL_RCC_HSE_IsSelectedHSEDiv2AsDiv2Clock>
          usb_frequency = HSE_VALUE;
341865f4:	4b08      	ldr	r3, [pc, #32]	@ (34186618 <RCCEx_GetOTGPHYCKREFCLKFreq+0x54>)
341865f6:	2800      	cmp	r0, #0
341865f8:	4808      	ldr	r0, [pc, #32]	@ (3418661c <RCCEx_GetOTGPHYCKREFCLKFreq+0x58>)
341865fa:	bf08      	it	eq
341865fc:	4618      	moveq	r0, r3
341865fe:	e7ed      	b.n	341865dc <RCCEx_GetOTGPHYCKREFCLKFreq+0x18>
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34186600:	4807      	ldr	r0, [pc, #28]	@ (34186620 <RCCEx_GetOTGPHYCKREFCLKFreq+0x5c>)
}
34186602:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
      usb_frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34186606:	f7ff bf77 	b.w	341864f8 <RCCEx_GetOTGPHYCLKFreq>
3418660a:	4806      	ldr	r0, [pc, #24]	@ (34186624 <RCCEx_GetOTGPHYCKREFCLKFreq+0x60>)
3418660c:	e7f9      	b.n	34186602 <RCCEx_GetOTGPHYCKREFCLKFreq+0x3e>
3418660e:	bf00      	nop
34186610:	01001814 	.word	0x01001814
34186614:	01011014 	.word	0x01011014
34186618:	016e3600 	.word	0x016e3600
3418661c:	00b71b00 	.word	0x00b71b00
34186620:	03000c14 	.word	0x03000c14
34186624:	03001414 	.word	0x03001414

34186628 <RCCEx_GetUSARTCLKFreq>:
{
34186628:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3418662a:	f7fc fc4b 	bl	34182ec4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3418662e:	4b6f      	ldr	r3, [pc, #444]	@ (341867ec <RCCEx_GetUSARTCLKFreq+0x1c4>)
34186630:	4298      	cmp	r0, r3
34186632:	d039      	beq.n	341866a8 <RCCEx_GetUSARTCLKFreq+0x80>
34186634:	d852      	bhi.n	341866dc <RCCEx_GetUSARTCLKFreq+0xb4>
34186636:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
3418663a:	4298      	cmp	r0, r3
3418663c:	f000 80b5 	beq.w	341867aa <RCCEx_GetUSARTCLKFreq+0x182>
34186640:	d813      	bhi.n	3418666a <RCCEx_GetUSARTCLKFreq+0x42>
34186642:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34186646:	4298      	cmp	r0, r3
34186648:	f000 80af 	beq.w	341867aa <RCCEx_GetUSARTCLKFreq+0x182>
3418664c:	d80b      	bhi.n	34186666 <RCCEx_GetUSARTCLKFreq+0x3e>
3418664e:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34186652:	4298      	cmp	r0, r3
34186654:	f000 80a9 	beq.w	341867aa <RCCEx_GetUSARTCLKFreq+0x182>
34186658:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3418665c:	4298      	cmp	r0, r3
3418665e:	f000 80ae 	beq.w	341867be <RCCEx_GetUSARTCLKFreq+0x196>
  uint32_t usart_frequency = RCC_PERIPH_FREQUENCY_NO;
34186662:	2000      	movs	r0, #0
}
34186664:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34186666:	4b62      	ldr	r3, [pc, #392]	@ (341867f0 <RCCEx_GetUSARTCLKFreq+0x1c8>)
34186668:	e7f8      	b.n	3418665c <RCCEx_GetUSARTCLKFreq+0x34>
3418666a:	4b62      	ldr	r3, [pc, #392]	@ (341867f4 <RCCEx_GetUSARTCLKFreq+0x1cc>)
3418666c:	4298      	cmp	r0, r3
3418666e:	d00c      	beq.n	3418668a <RCCEx_GetUSARTCLKFreq+0x62>
34186670:	d80f      	bhi.n	34186692 <RCCEx_GetUSARTCLKFreq+0x6a>
34186672:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34186676:	4298      	cmp	r0, r3
34186678:	d007      	beq.n	3418668a <RCCEx_GetUSARTCLKFreq+0x62>
3418667a:	bf8e      	itee	hi
3418667c:	4b5e      	ldrhi	r3, [pc, #376]	@ (341867f8 <RCCEx_GetUSARTCLKFreq+0x1d0>)
3418667e:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
34186682:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
34186686:	4298      	cmp	r0, r3
34186688:	d1eb      	bne.n	34186662 <RCCEx_GetUSARTCLKFreq+0x3a>
}
3418668a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      usart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418668e:	f7ff bdd3 	b.w	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
34186692:	4b5a      	ldr	r3, [pc, #360]	@ (341867fc <RCCEx_GetUSARTCLKFreq+0x1d4>)
34186694:	4298      	cmp	r0, r3
34186696:	d007      	beq.n	341866a8 <RCCEx_GetUSARTCLKFreq+0x80>
34186698:	bf8e      	itee	hi
3418669a:	4b59      	ldrhi	r3, [pc, #356]	@ (34186800 <RCCEx_GetUSARTCLKFreq+0x1d8>)
3418669c:	f420 6080 	bicls.w	r0, r0, #1024	@ 0x400
341866a0:	f2a3 4304 	subwls	r3, r3, #1028	@ 0x404
341866a4:	4298      	cmp	r0, r3
341866a6:	d1dc      	bne.n	34186662 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC9_IsEnabled() != 0U)
341866a8:	f7fc fc3e 	bl	34182f28 <LL_RCC_IC9_IsEnabled>
341866ac:	2800      	cmp	r0, #0
341866ae:	d0d8      	beq.n	34186662 <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC9_GetDivider();
341866b0:	f7fc fc42 	bl	34182f38 <LL_RCC_IC9_GetDivider>
341866b4:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
341866b6:	4b53      	ldr	r3, [pc, #332]	@ (34186804 <RCCEx_GetUSARTCLKFreq+0x1dc>)
341866b8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
341866bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
341866c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341866c4:	f000 808e 	beq.w	341867e4 <RCCEx_GetUSARTCLKFreq+0x1bc>
341866c8:	f200 8082 	bhi.w	341867d0 <RCCEx_GetUSARTCLKFreq+0x1a8>
341866cc:	2b00      	cmp	r3, #0
341866ce:	f040 8086 	bne.w	341867de <RCCEx_GetUSARTCLKFreq+0x1b6>
            usart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341866d2:	f7ff fcb1 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
            usart_frequency = usart_frequency / ic_divider;
341866d6:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
341866da:	e7c3      	b.n	34186664 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
341866dc:	4b4a      	ldr	r3, [pc, #296]	@ (34186808 <RCCEx_GetUSARTCLKFreq+0x1e0>)
341866de:	4298      	cmp	r0, r3
341866e0:	d045      	beq.n	3418676e <RCCEx_GetUSARTCLKFreq+0x146>
341866e2:	d833      	bhi.n	3418674c <RCCEx_GetUSARTCLKFreq+0x124>
341866e4:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
341866e8:	4298      	cmp	r0, r3
341866ea:	d028      	beq.n	3418673e <RCCEx_GetUSARTCLKFreq+0x116>
341866ec:	d81c      	bhi.n	34186728 <RCCEx_GetUSARTCLKFreq+0x100>
341866ee:	f5a3 437b 	sub.w	r3, r3, #64256	@ 0xfb00
341866f2:	3bfc      	subs	r3, #252	@ 0xfc
341866f4:	4298      	cmp	r0, r3
341866f6:	d006      	beq.n	34186706 <RCCEx_GetUSARTCLKFreq+0xde>
341866f8:	d810      	bhi.n	3418671c <RCCEx_GetUSARTCLKFreq+0xf4>
341866fa:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
341866fe:	f2a3 4304 	subw	r3, r3, #1028	@ 0x404
34186702:	4298      	cmp	r0, r3
34186704:	d1ad      	bne.n	34186662 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34186706:	f7fc fc21 	bl	34182f4c <LL_RCC_IC14_IsEnabled>
3418670a:	2800      	cmp	r0, #0
3418670c:	d0a9      	beq.n	34186662 <RCCEx_GetUSARTCLKFreq+0x3a>
        ic_divider = LL_RCC_IC14_GetDivider();
3418670e:	f7fc fc25 	bl	34182f5c <LL_RCC_IC14_GetDivider>
34186712:	4b3c      	ldr	r3, [pc, #240]	@ (34186804 <RCCEx_GetUSARTCLKFreq+0x1dc>)
34186714:	4604      	mov	r4, r0
34186716:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
3418671a:	e7cf      	b.n	341866bc <RCCEx_GetUSARTCLKFreq+0x94>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3418671c:	4b3b      	ldr	r3, [pc, #236]	@ (3418680c <RCCEx_GetUSARTCLKFreq+0x1e4>)
3418671e:	4298      	cmp	r0, r3
34186720:	d0f1      	beq.n	34186706 <RCCEx_GetUSARTCLKFreq+0xde>
34186722:	f503 6340 	add.w	r3, r3, #3072	@ 0xc00
34186726:	e7ec      	b.n	34186702 <RCCEx_GetUSARTCLKFreq+0xda>
34186728:	4b39      	ldr	r3, [pc, #228]	@ (34186810 <RCCEx_GetUSARTCLKFreq+0x1e8>)
3418672a:	4298      	cmp	r0, r3
3418672c:	d007      	beq.n	3418673e <RCCEx_GetUSARTCLKFreq+0x116>
3418672e:	bf8e      	itee	hi
34186730:	4b38      	ldrhi	r3, [pc, #224]	@ (34186814 <RCCEx_GetUSARTCLKFreq+0x1ec>)
34186732:	f020 0004 	bicls.w	r0, r0, #4
34186736:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
3418673a:	4298      	cmp	r0, r3
3418673c:	d191      	bne.n	34186662 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_LSE_IsReady() != 0U)
3418673e:	f7fc fba7 	bl	34182e90 <LL_RCC_LSE_IsReady>
34186742:	3800      	subs	r0, #0
34186744:	bf18      	it	ne
34186746:	2001      	movne	r0, #1
34186748:	03c0      	lsls	r0, r0, #15
3418674a:	e78b      	b.n	34186664 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3418674c:	4b32      	ldr	r3, [pc, #200]	@ (34186818 <RCCEx_GetUSARTCLKFreq+0x1f0>)
3418674e:	4298      	cmp	r0, r3
34186750:	d020      	beq.n	34186794 <RCCEx_GetUSARTCLKFreq+0x16c>
34186752:	d813      	bhi.n	3418677c <RCCEx_GetUSARTCLKFreq+0x154>
34186754:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34186758:	4298      	cmp	r0, r3
3418675a:	d008      	beq.n	3418676e <RCCEx_GetUSARTCLKFreq+0x146>
3418675c:	bf8e      	itee	hi
3418675e:	4b2f      	ldrhi	r3, [pc, #188]	@ (3418681c <RCCEx_GetUSARTCLKFreq+0x1f4>)
34186760:	f020 0004 	bicls.w	r0, r0, #4
34186764:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
34186768:	4298      	cmp	r0, r3
3418676a:	f47f af7a 	bne.w	34186662 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_MSI_IsReady() != 0U)
3418676e:	f7fc fb87 	bl	34182e80 <LL_RCC_MSI_IsReady>
34186772:	2800      	cmp	r0, #0
34186774:	f43f af75 	beq.w	34186662 <RCCEx_GetUSARTCLKFreq+0x3a>
        usart_frequency = MSI_VALUE;
34186778:	4829      	ldr	r0, [pc, #164]	@ (34186820 <RCCEx_GetUSARTCLKFreq+0x1f8>)
  return usart_frequency;
3418677a:	e773      	b.n	34186664 <RCCEx_GetUSARTCLKFreq+0x3c>
  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
3418677c:	4b29      	ldr	r3, [pc, #164]	@ (34186824 <RCCEx_GetUSARTCLKFreq+0x1fc>)
3418677e:	4298      	cmp	r0, r3
34186780:	d008      	beq.n	34186794 <RCCEx_GetUSARTCLKFreq+0x16c>
34186782:	bf8e      	itee	hi
34186784:	4b28      	ldrhi	r3, [pc, #160]	@ (34186828 <RCCEx_GetUSARTCLKFreq+0x200>)
34186786:	f020 0004 	bicls.w	r0, r0, #4
3418678a:	f5a3 6380 	subls.w	r3, r3, #1024	@ 0x400
3418678e:	4298      	cmp	r0, r3
34186790:	f47f af67 	bne.w	34186662 <RCCEx_GetUSARTCLKFreq+0x3a>
      if (LL_RCC_HSI_IsReady() != 0U)
34186794:	f7fc fb6c 	bl	34182e70 <LL_RCC_HSI_IsReady>
34186798:	2800      	cmp	r0, #0
3418679a:	f43f af62 	beq.w	34186662 <RCCEx_GetUSARTCLKFreq+0x3a>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3418679e:	4b19      	ldr	r3, [pc, #100]	@ (34186804 <RCCEx_GetUSARTCLKFreq+0x1dc>)
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341867a0:	4822      	ldr	r0, [pc, #136]	@ (3418682c <RCCEx_GetUSARTCLKFreq+0x204>)
341867a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341867a4:	f3c3 13c1 	ubfx	r3, r3, #7, #2
341867a8:	e007      	b.n	341867ba <RCCEx_GetUSARTCLKFreq+0x192>
      usart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341867aa:	f7fc fab5 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
341867ae:	f7fc fbf1 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
341867b2:	4b14      	ldr	r3, [pc, #80]	@ (34186804 <RCCEx_GetUSARTCLKFreq+0x1dc>)
341867b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
341867b6:	f3c3 1302 	ubfx	r3, r3, #4, #3
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341867ba:	40d8      	lsrs	r0, r3
341867bc:	e752      	b.n	34186664 <RCCEx_GetUSARTCLKFreq+0x3c>
      usart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341867be:	f7fc faab 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
341867c2:	f7fc fbe7 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
341867c6:	4b0f      	ldr	r3, [pc, #60]	@ (34186804 <RCCEx_GetUSARTCLKFreq+0x1dc>)
341867c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341867ca:	f003 0307 	and.w	r3, r3, #7
341867ce:	e7f4      	b.n	341867ba <RCCEx_GetUSARTCLKFreq+0x192>
        switch (LL_RCC_IC14_GetSource())
341867d0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341867d4:	f47f af45 	bne.w	34186662 <RCCEx_GetUSARTCLKFreq+0x3a>
            usart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341867d8:	f7ff fcee 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
341867dc:	e77b      	b.n	341866d6 <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341867de:	f7ff fc6b 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
341867e2:	e778      	b.n	341866d6 <RCCEx_GetUSARTCLKFreq+0xae>
            usart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341867e4:	f7ff fca8 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
341867e8:	e775      	b.n	341866d6 <RCCEx_GetUSARTCLKFreq+0xae>
341867ea:	bf00      	nop
341867ec:	07021430 	.word	0x07021430
341867f0:	07000830 	.word	0x07000830
341867f4:	07011430 	.word	0x07011430
341867f8:	07010830 	.word	0x07010830
341867fc:	07020434 	.word	0x07020434
34186800:	07020830 	.word	0x07020830
34186804:	56028000 	.word	0x56028000
34186808:	07050030 	.word	0x07050030
3418680c:	07030830 	.word	0x07030830
34186810:	07040830 	.word	0x07040830
34186814:	07041430 	.word	0x07041430
34186818:	07060030 	.word	0x07060030
3418681c:	07051430 	.word	0x07051430
34186820:	003d0900 	.word	0x003d0900
34186824:	07060830 	.word	0x07060830
34186828:	07061430 	.word	0x07061430
3418682c:	03d09000 	.word	0x03d09000

34186830 <RCCEx_GetUARTCLKFreq>:
{
34186830:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34186832:	f7fc fb47 	bl	34182ec4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34186836:	4b77      	ldr	r3, [pc, #476]	@ (34186a14 <RCCEx_GetUARTCLKFreq+0x1e4>)
34186838:	4298      	cmp	r0, r3
3418683a:	d03e      	beq.n	341868ba <RCCEx_GetUARTCLKFreq+0x8a>
3418683c:	d859      	bhi.n	341868f2 <RCCEx_GetUARTCLKFreq+0xc2>
3418683e:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34186842:	4298      	cmp	r0, r3
34186844:	f000 80c6 	beq.w	341869d4 <RCCEx_GetUARTCLKFreq+0x1a4>
34186848:	d814      	bhi.n	34186874 <RCCEx_GetUARTCLKFreq+0x44>
3418684a:	4b73      	ldr	r3, [pc, #460]	@ (34186a18 <RCCEx_GetUARTCLKFreq+0x1e8>)
3418684c:	4298      	cmp	r0, r3
3418684e:	f000 80cb 	beq.w	341869e8 <RCCEx_GetUARTCLKFreq+0x1b8>
34186852:	3b01      	subs	r3, #1
34186854:	4298      	cmp	r0, r3
34186856:	d90b      	bls.n	34186870 <RCCEx_GetUARTCLKFreq+0x40>
34186858:	f420 6200 	bic.w	r2, r0, #2048	@ 0x800
3418685c:	f603 73fd 	addw	r3, r3, #4093	@ 0xffd
34186860:	429a      	cmp	r2, r3
34186862:	f000 80b7 	beq.w	341869d4 <RCCEx_GetUARTCLKFreq+0x1a4>
34186866:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
3418686a:	4298      	cmp	r0, r3
3418686c:	f000 80b2 	beq.w	341869d4 <RCCEx_GetUARTCLKFreq+0x1a4>
  uint32_t uart_frequency = RCC_PERIPH_FREQUENCY_NO;
34186870:	2000      	movs	r0, #0
}
34186872:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34186874:	4b69      	ldr	r3, [pc, #420]	@ (34186a1c <RCCEx_GetUARTCLKFreq+0x1ec>)
34186876:	4298      	cmp	r0, r3
34186878:	d00d      	beq.n	34186896 <RCCEx_GetUARTCLKFreq+0x66>
3418687a:	d812      	bhi.n	341868a2 <RCCEx_GetUARTCLKFreq+0x72>
3418687c:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34186880:	4298      	cmp	r0, r3
34186882:	d008      	beq.n	34186896 <RCCEx_GetUARTCLKFreq+0x66>
34186884:	d80b      	bhi.n	3418689e <RCCEx_GetUARTCLKFreq+0x6e>
34186886:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
3418688a:	4298      	cmp	r0, r3
3418688c:	d003      	beq.n	34186896 <RCCEx_GetUARTCLKFreq+0x66>
3418688e:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
34186892:	4298      	cmp	r0, r3
34186894:	d1ec      	bne.n	34186870 <RCCEx_GetUARTCLKFreq+0x40>
}
34186896:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      uart_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418689a:	f7ff bccd 	b.w	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3418689e:	4b60      	ldr	r3, [pc, #384]	@ (34186a20 <RCCEx_GetUARTCLKFreq+0x1f0>)
341868a0:	e7f7      	b.n	34186892 <RCCEx_GetUARTCLKFreq+0x62>
341868a2:	4b60      	ldr	r3, [pc, #384]	@ (34186a24 <RCCEx_GetUARTCLKFreq+0x1f4>)
341868a4:	4298      	cmp	r0, r3
341868a6:	d008      	beq.n	341868ba <RCCEx_GetUARTCLKFreq+0x8a>
341868a8:	d821      	bhi.n	341868ee <RCCEx_GetUARTCLKFreq+0xbe>
341868aa:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
341868ae:	4298      	cmp	r0, r3
341868b0:	d003      	beq.n	341868ba <RCCEx_GetUARTCLKFreq+0x8a>
341868b2:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
341868b6:	4298      	cmp	r0, r3
341868b8:	d1da      	bne.n	34186870 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC9_IsEnabled() != 0U)
341868ba:	f7fc fb35 	bl	34182f28 <LL_RCC_IC9_IsEnabled>
341868be:	2800      	cmp	r0, #0
341868c0:	d0d6      	beq.n	34186870 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC9_GetDivider();
341868c2:	f7fc fb39 	bl	34182f38 <LL_RCC_IC9_GetDivider>
341868c6:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
341868c8:	4b57      	ldr	r3, [pc, #348]	@ (34186a28 <RCCEx_GetUARTCLKFreq+0x1f8>)
341868ca:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
341868ce:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
341868d2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
341868d6:	f000 809a 	beq.w	34186a0e <RCCEx_GetUARTCLKFreq+0x1de>
341868da:	f200 808e 	bhi.w	341869fa <RCCEx_GetUARTCLKFreq+0x1ca>
341868de:	2b00      	cmp	r3, #0
341868e0:	f040 8092 	bne.w	34186a08 <RCCEx_GetUARTCLKFreq+0x1d8>
            uart_frequency = HAL_RCCEx_GetPLL1CLKFreq();
341868e4:	f7ff fba8 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
            uart_frequency = uart_frequency / ic_divider;
341868e8:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
341868ec:	e7c1      	b.n	34186872 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
341868ee:	4b4f      	ldr	r3, [pc, #316]	@ (34186a2c <RCCEx_GetUARTCLKFreq+0x1fc>)
341868f0:	e7e1      	b.n	341868b6 <RCCEx_GetUARTCLKFreq+0x86>
341868f2:	4b4f      	ldr	r3, [pc, #316]	@ (34186a30 <RCCEx_GetUARTCLKFreq+0x200>)
341868f4:	4298      	cmp	r0, r3
341868f6:	d04a      	beq.n	3418698e <RCCEx_GetUARTCLKFreq+0x15e>
341868f8:	d836      	bhi.n	34186968 <RCCEx_GetUARTCLKFreq+0x138>
341868fa:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
341868fe:	4298      	cmp	r0, r3
34186900:	d029      	beq.n	34186956 <RCCEx_GetUARTCLKFreq+0x126>
34186902:	d81c      	bhi.n	3418693e <RCCEx_GetUARTCLKFreq+0x10e>
34186904:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34186908:	3b04      	subs	r3, #4
3418690a:	4298      	cmp	r0, r3
3418690c:	d008      	beq.n	34186920 <RCCEx_GetUARTCLKFreq+0xf0>
3418690e:	d812      	bhi.n	34186936 <RCCEx_GetUARTCLKFreq+0x106>
34186910:	f6a3 73fc 	subw	r3, r3, #4092	@ 0xffc
34186914:	4298      	cmp	r0, r3
34186916:	d003      	beq.n	34186920 <RCCEx_GetUARTCLKFreq+0xf0>
34186918:	f603 33fc 	addw	r3, r3, #3068	@ 0xbfc
3418691c:	4298      	cmp	r0, r3
3418691e:	d1a7      	bne.n	34186870 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34186920:	f7fc fb14 	bl	34182f4c <LL_RCC_IC14_IsEnabled>
34186924:	2800      	cmp	r0, #0
34186926:	d0a3      	beq.n	34186870 <RCCEx_GetUARTCLKFreq+0x40>
        ic_divider = LL_RCC_IC14_GetDivider();
34186928:	f7fc fb18 	bl	34182f5c <LL_RCC_IC14_GetDivider>
3418692c:	4b3e      	ldr	r3, [pc, #248]	@ (34186a28 <RCCEx_GetUARTCLKFreq+0x1f8>)
3418692e:	4604      	mov	r4, r0
34186930:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186934:	e7cb      	b.n	341868ce <RCCEx_GetUARTCLKFreq+0x9e>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34186936:	4b3f      	ldr	r3, [pc, #252]	@ (34186a34 <RCCEx_GetUARTCLKFreq+0x204>)
34186938:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3418693c:	e7ee      	b.n	3418691c <RCCEx_GetUARTCLKFreq+0xec>
3418693e:	4b3e      	ldr	r3, [pc, #248]	@ (34186a38 <RCCEx_GetUARTCLKFreq+0x208>)
34186940:	4298      	cmp	r0, r3
34186942:	d008      	beq.n	34186956 <RCCEx_GetUARTCLKFreq+0x126>
34186944:	d80e      	bhi.n	34186964 <RCCEx_GetUARTCLKFreq+0x134>
34186946:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
3418694a:	4298      	cmp	r0, r3
3418694c:	d003      	beq.n	34186956 <RCCEx_GetUARTCLKFreq+0x126>
3418694e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34186952:	4298      	cmp	r0, r3
34186954:	d18c      	bne.n	34186870 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_LSE_IsReady() != 0U)
34186956:	f7fc fa9b 	bl	34182e90 <LL_RCC_LSE_IsReady>
3418695a:	3800      	subs	r0, #0
3418695c:	bf18      	it	ne
3418695e:	2001      	movne	r0, #1
34186960:	03c0      	lsls	r0, r0, #15
34186962:	e786      	b.n	34186872 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
34186964:	4b35      	ldr	r3, [pc, #212]	@ (34186a3c <RCCEx_GetUARTCLKFreq+0x20c>)
34186966:	e7f4      	b.n	34186952 <RCCEx_GetUARTCLKFreq+0x122>
34186968:	4b35      	ldr	r3, [pc, #212]	@ (34186a40 <RCCEx_GetUARTCLKFreq+0x210>)
3418696a:	4298      	cmp	r0, r3
3418696c:	d025      	beq.n	341869ba <RCCEx_GetUARTCLKFreq+0x18a>
3418696e:	d817      	bhi.n	341869a0 <RCCEx_GetUARTCLKFreq+0x170>
34186970:	f5a3 4368 	sub.w	r3, r3, #59392	@ 0xe800
34186974:	3b04      	subs	r3, #4
34186976:	4298      	cmp	r0, r3
34186978:	d009      	beq.n	3418698e <RCCEx_GetUARTCLKFreq+0x15e>
3418697a:	d80f      	bhi.n	3418699c <RCCEx_GetUARTCLKFreq+0x16c>
3418697c:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34186980:	4298      	cmp	r0, r3
34186982:	d004      	beq.n	3418698e <RCCEx_GetUARTCLKFreq+0x15e>
34186984:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34186988:	4298      	cmp	r0, r3
3418698a:	f47f af71 	bne.w	34186870 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_MSI_IsReady() != 0U)
3418698e:	f7fc fa77 	bl	34182e80 <LL_RCC_MSI_IsReady>
34186992:	2800      	cmp	r0, #0
34186994:	f43f af6c 	beq.w	34186870 <RCCEx_GetUARTCLKFreq+0x40>
        uart_frequency = MSI_VALUE;
34186998:	482a      	ldr	r0, [pc, #168]	@ (34186a44 <RCCEx_GetUARTCLKFreq+0x214>)
  return uart_frequency;
3418699a:	e76a      	b.n	34186872 <RCCEx_GetUARTCLKFreq+0x42>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
3418699c:	4b2a      	ldr	r3, [pc, #168]	@ (34186a48 <RCCEx_GetUARTCLKFreq+0x218>)
3418699e:	e7f3      	b.n	34186988 <RCCEx_GetUARTCLKFreq+0x158>
341869a0:	4b2a      	ldr	r3, [pc, #168]	@ (34186a4c <RCCEx_GetUARTCLKFreq+0x21c>)
341869a2:	4298      	cmp	r0, r3
341869a4:	d009      	beq.n	341869ba <RCCEx_GetUARTCLKFreq+0x18a>
341869a6:	d813      	bhi.n	341869d0 <RCCEx_GetUARTCLKFreq+0x1a0>
341869a8:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
341869ac:	4298      	cmp	r0, r3
341869ae:	d004      	beq.n	341869ba <RCCEx_GetUARTCLKFreq+0x18a>
341869b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
341869b4:	4298      	cmp	r0, r3
341869b6:	f47f af5b 	bne.w	34186870 <RCCEx_GetUARTCLKFreq+0x40>
      if (LL_RCC_HSI_IsReady() != 0U)
341869ba:	f7fc fa59 	bl	34182e70 <LL_RCC_HSI_IsReady>
341869be:	2800      	cmp	r0, #0
341869c0:	f43f af56 	beq.w	34186870 <RCCEx_GetUARTCLKFreq+0x40>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
341869c4:	4b18      	ldr	r3, [pc, #96]	@ (34186a28 <RCCEx_GetUARTCLKFreq+0x1f8>)
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341869c6:	4822      	ldr	r0, [pc, #136]	@ (34186a50 <RCCEx_GetUARTCLKFreq+0x220>)
341869c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
341869ca:	f3c3 13c1 	ubfx	r3, r3, #7, #2
341869ce:	e009      	b.n	341869e4 <RCCEx_GetUARTCLKFreq+0x1b4>
  switch (LL_RCC_GetUARTClockSource(UARTxSource))
341869d0:	4b20      	ldr	r3, [pc, #128]	@ (34186a54 <RCCEx_GetUARTCLKFreq+0x224>)
341869d2:	e7ef      	b.n	341869b4 <RCCEx_GetUARTCLKFreq+0x184>
      uart_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341869d4:	f7fc f9a0 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
341869d8:	f7fc fadc 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
341869dc:	4b12      	ldr	r3, [pc, #72]	@ (34186a28 <RCCEx_GetUARTCLKFreq+0x1f8>)
341869de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341869e0:	f003 0307 	and.w	r3, r3, #7
        uart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
341869e4:	40d8      	lsrs	r0, r3
341869e6:	e744      	b.n	34186872 <RCCEx_GetUARTCLKFreq+0x42>
      uart_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341869e8:	f7fc f996 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
341869ec:	f7fc fad2 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
341869f0:	4b0d      	ldr	r3, [pc, #52]	@ (34186a28 <RCCEx_GetUARTCLKFreq+0x1f8>)
341869f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
341869f4:	f3c3 1302 	ubfx	r3, r3, #4, #3
341869f8:	e7f4      	b.n	341869e4 <RCCEx_GetUARTCLKFreq+0x1b4>
        switch (LL_RCC_IC14_GetSource())
341869fa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
341869fe:	f47f af37 	bne.w	34186870 <RCCEx_GetUARTCLKFreq+0x40>
            uart_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34186a02:	f7ff fbd9 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
34186a06:	e76f      	b.n	341868e8 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34186a08:	f7ff fb56 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
34186a0c:	e76c      	b.n	341868e8 <RCCEx_GetUARTCLKFreq+0xb8>
            uart_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34186a0e:	f7ff fb93 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
34186a12:	e769      	b.n	341868e8 <RCCEx_GetUARTCLKFreq+0xb8>
34186a14:	07021c30 	.word	0x07021c30
34186a18:	07000034 	.word	0x07000034
34186a1c:	07011c30 	.word	0x07011c30
34186a20:	07011830 	.word	0x07011830
34186a24:	07021030 	.word	0x07021030
34186a28:	56028000 	.word	0x56028000
34186a2c:	07021830 	.word	0x07021830
34186a30:	07050034 	.word	0x07050034
34186a34:	07031830 	.word	0x07031830
34186a38:	07041830 	.word	0x07041830
34186a3c:	07041c30 	.word	0x07041c30
34186a40:	07060034 	.word	0x07060034
34186a44:	003d0900 	.word	0x003d0900
34186a48:	07051c30 	.word	0x07051c30
34186a4c:	07061830 	.word	0x07061830
34186a50:	03d09000 	.word	0x03d09000
34186a54:	07061c30 	.word	0x07061c30

34186a58 <RCCEx_GetSPICLKFreq>:
{
34186a58:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34186a5a:	f7fc fa33 	bl	34182ec4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34186a5e:	4b89      	ldr	r3, [pc, #548]	@ (34186c84 <RCCEx_GetSPICLKFreq+0x22c>)
34186a60:	4298      	cmp	r0, r3
34186a62:	d055      	beq.n	34186b10 <RCCEx_GetSPICLKFreq+0xb8>
34186a64:	d865      	bhi.n	34186b32 <RCCEx_GetSPICLKFreq+0xda>
34186a66:	f5a3 333c 	sub.w	r3, r3, #192512	@ 0x2f000
34186a6a:	4298      	cmp	r0, r3
34186a6c:	f000 80ca 	beq.w	34186c04 <RCCEx_GetSPICLKFreq+0x1ac>
34186a70:	d81e      	bhi.n	34186ab0 <RCCEx_GetSPICLKFreq+0x58>
34186a72:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34186a76:	4298      	cmp	r0, r3
34186a78:	f000 80ba 	beq.w	34186bf0 <RCCEx_GetSPICLKFreq+0x198>
34186a7c:	d80a      	bhi.n	34186a94 <RCCEx_GetSPICLKFreq+0x3c>
34186a7e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34186a82:	4298      	cmp	r0, r3
34186a84:	d00b      	beq.n	34186a9e <RCCEx_GetSPICLKFreq+0x46>
34186a86:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34186a8a:	4298      	cmp	r0, r3
34186a8c:	f000 80b0 	beq.w	34186bf0 <RCCEx_GetSPICLKFreq+0x198>
  uint32_t spi_frequency = RCC_PERIPH_FREQUENCY_NO;
34186a90:	2000      	movs	r0, #0
}
34186a92:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34186a94:	4b7c      	ldr	r3, [pc, #496]	@ (34186c88 <RCCEx_GetSPICLKFreq+0x230>)
34186a96:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34186a9a:	4298      	cmp	r0, r3
34186a9c:	d1f8      	bne.n	34186a90 <RCCEx_GetSPICLKFreq+0x38>
      spi_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34186a9e:	f7fc f93b 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
34186aa2:	f7fc fa77 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34186aa6:	4b79      	ldr	r3, [pc, #484]	@ (34186c8c <RCCEx_GetSPICLKFreq+0x234>)
34186aa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34186aaa:	f3c3 1302 	ubfx	r3, r3, #4, #3
34186aae:	e0a7      	b.n	34186c00 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34186ab0:	4b77      	ldr	r3, [pc, #476]	@ (34186c90 <RCCEx_GetSPICLKFreq+0x238>)
34186ab2:	4298      	cmp	r0, r3
34186ab4:	f000 80af 	beq.w	34186c16 <RCCEx_GetSPICLKFreq+0x1be>
34186ab8:	d81d      	bhi.n	34186af6 <RCCEx_GetSPICLKFreq+0x9e>
34186aba:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
34186abe:	4298      	cmp	r0, r3
34186ac0:	d00a      	beq.n	34186ad8 <RCCEx_GetSPICLKFreq+0x80>
34186ac2:	d80d      	bhi.n	34186ae0 <RCCEx_GetSPICLKFreq+0x88>
34186ac4:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34186ac8:	4298      	cmp	r0, r3
34186aca:	d005      	beq.n	34186ad8 <RCCEx_GetSPICLKFreq+0x80>
34186acc:	f420 6000 	bic.w	r0, r0, #2048	@ 0x800
34186ad0:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34186ad4:	4298      	cmp	r0, r3
34186ad6:	d1db      	bne.n	34186a90 <RCCEx_GetSPICLKFreq+0x38>
}
34186ad8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      spi_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34186adc:	f7ff bbac 	b.w	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34186ae0:	4b6c      	ldr	r3, [pc, #432]	@ (34186c94 <RCCEx_GetSPICLKFreq+0x23c>)
34186ae2:	4298      	cmp	r0, r3
34186ae4:	d0f8      	beq.n	34186ad8 <RCCEx_GetSPICLKFreq+0x80>
34186ae6:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34186aea:	4298      	cmp	r0, r3
34186aec:	f000 8093 	beq.w	34186c16 <RCCEx_GetSPICLKFreq+0x1be>
34186af0:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34186af4:	e7ee      	b.n	34186ad4 <RCCEx_GetSPICLKFreq+0x7c>
34186af6:	4b68      	ldr	r3, [pc, #416]	@ (34186c98 <RCCEx_GetSPICLKFreq+0x240>)
34186af8:	4298      	cmp	r0, r3
34186afa:	d009      	beq.n	34186b10 <RCCEx_GetSPICLKFreq+0xb8>
34186afc:	d813      	bhi.n	34186b26 <RCCEx_GetSPICLKFreq+0xce>
34186afe:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34186b02:	4298      	cmp	r0, r3
34186b04:	f000 8087 	beq.w	34186c16 <RCCEx_GetSPICLKFreq+0x1be>
34186b08:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34186b0c:	4298      	cmp	r0, r3
34186b0e:	d1bf      	bne.n	34186a90 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34186b10:	f7fc fa0a 	bl	34182f28 <LL_RCC_IC9_IsEnabled>
34186b14:	2800      	cmp	r0, #0
34186b16:	d0bb      	beq.n	34186a90 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC9_GetDivider();
34186b18:	f7fc fa0e 	bl	34182f38 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34186b1c:	4b5b      	ldr	r3, [pc, #364]	@ (34186c8c <RCCEx_GetSPICLKFreq+0x234>)
34186b1e:	4604      	mov	r4, r0
34186b20:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34186b24:	e082      	b.n	34186c2c <RCCEx_GetSPICLKFreq+0x1d4>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34186b26:	4b5d      	ldr	r3, [pc, #372]	@ (34186c9c <RCCEx_GetSPICLKFreq+0x244>)
34186b28:	4298      	cmp	r0, r3
34186b2a:	d074      	beq.n	34186c16 <RCCEx_GetSPICLKFreq+0x1be>
34186b2c:	f503 436c 	add.w	r3, r3, #60416	@ 0xec00
34186b30:	e7ec      	b.n	34186b0c <RCCEx_GetSPICLKFreq+0xb4>
34186b32:	4b5b      	ldr	r3, [pc, #364]	@ (34186ca0 <RCCEx_GetSPICLKFreq+0x248>)
34186b34:	4298      	cmp	r0, r3
34186b36:	d043      	beq.n	34186bc0 <RCCEx_GetSPICLKFreq+0x168>
34186b38:	d830      	bhi.n	34186b9c <RCCEx_GetSPICLKFreq+0x144>
34186b3a:	f5a3 33fa 	sub.w	r3, r3, #128000	@ 0x1f400
34186b3e:	4298      	cmp	r0, r3
34186b40:	d0e6      	beq.n	34186b10 <RCCEx_GetSPICLKFreq+0xb8>
34186b42:	d808      	bhi.n	34186b56 <RCCEx_GetSPICLKFreq+0xfe>
34186b44:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34186b48:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34186b4c:	429a      	cmp	r2, r3
34186b4e:	d079      	beq.n	34186c44 <RCCEx_GetSPICLKFreq+0x1ec>
34186b50:	f5a3 6380 	sub.w	r3, r3, #1024	@ 0x400
34186b54:	e7da      	b.n	34186b0c <RCCEx_GetSPICLKFreq+0xb4>
34186b56:	4b53      	ldr	r3, [pc, #332]	@ (34186ca4 <RCCEx_GetSPICLKFreq+0x24c>)
34186b58:	4298      	cmp	r0, r3
34186b5a:	d00d      	beq.n	34186b78 <RCCEx_GetSPICLKFreq+0x120>
34186b5c:	d814      	bhi.n	34186b88 <RCCEx_GetSPICLKFreq+0x130>
34186b5e:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34186b62:	4298      	cmp	r0, r3
34186b64:	d008      	beq.n	34186b78 <RCCEx_GetSPICLKFreq+0x120>
34186b66:	d80d      	bhi.n	34186b84 <RCCEx_GetSPICLKFreq+0x12c>
34186b68:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
34186b6c:	4298      	cmp	r0, r3
34186b6e:	d003      	beq.n	34186b78 <RCCEx_GetSPICLKFreq+0x120>
34186b70:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34186b74:	4298      	cmp	r0, r3
34186b76:	d18b      	bne.n	34186a90 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_MSI_IsReady() != 0U)
34186b78:	f7fc f982 	bl	34182e80 <LL_RCC_MSI_IsReady>
34186b7c:	2800      	cmp	r0, #0
34186b7e:	d087      	beq.n	34186a90 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = MSI_VALUE;
34186b80:	4849      	ldr	r0, [pc, #292]	@ (34186ca8 <RCCEx_GetSPICLKFreq+0x250>)
  return spi_frequency;
34186b82:	e786      	b.n	34186a92 <RCCEx_GetSPICLKFreq+0x3a>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34186b84:	4b49      	ldr	r3, [pc, #292]	@ (34186cac <RCCEx_GetSPICLKFreq+0x254>)
34186b86:	e7f5      	b.n	34186b74 <RCCEx_GetSPICLKFreq+0x11c>
34186b88:	4b49      	ldr	r3, [pc, #292]	@ (34186cb0 <RCCEx_GetSPICLKFreq+0x258>)
34186b8a:	4298      	cmp	r0, r3
34186b8c:	d018      	beq.n	34186bc0 <RCCEx_GetSPICLKFreq+0x168>
34186b8e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34186b92:	4298      	cmp	r0, r3
34186b94:	d014      	beq.n	34186bc0 <RCCEx_GetSPICLKFreq+0x168>
34186b96:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
34186b9a:	e7eb      	b.n	34186b74 <RCCEx_GetSPICLKFreq+0x11c>
34186b9c:	4b45      	ldr	r3, [pc, #276]	@ (34186cb4 <RCCEx_GetSPICLKFreq+0x25c>)
34186b9e:	4298      	cmp	r0, r3
34186ba0:	d069      	beq.n	34186c76 <RCCEx_GetSPICLKFreq+0x21e>
34186ba2:	d81e      	bhi.n	34186be2 <RCCEx_GetSPICLKFreq+0x18a>
34186ba4:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
34186ba8:	4298      	cmp	r0, r3
34186baa:	d018      	beq.n	34186bde <RCCEx_GetSPICLKFreq+0x186>
34186bac:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
34186bb0:	d811      	bhi.n	34186bd6 <RCCEx_GetSPICLKFreq+0x17e>
34186bb2:	4a41      	ldr	r2, [pc, #260]	@ (34186cb8 <RCCEx_GetSPICLKFreq+0x260>)
34186bb4:	4293      	cmp	r3, r2
34186bb6:	d003      	beq.n	34186bc0 <RCCEx_GetSPICLKFreq+0x168>
34186bb8:	4b40      	ldr	r3, [pc, #256]	@ (34186cbc <RCCEx_GetSPICLKFreq+0x264>)
34186bba:	4298      	cmp	r0, r3
34186bbc:	f47f af68 	bne.w	34186a90 <RCCEx_GetSPICLKFreq+0x38>
      if (LL_RCC_HSI_IsReady() != 0U)
34186bc0:	f7fc f956 	bl	34182e70 <LL_RCC_HSI_IsReady>
34186bc4:	2800      	cmp	r0, #0
34186bc6:	f43f af63 	beq.w	34186a90 <RCCEx_GetSPICLKFreq+0x38>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34186bca:	4b30      	ldr	r3, [pc, #192]	@ (34186c8c <RCCEx_GetSPICLKFreq+0x234>)
        spi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34186bcc:	483c      	ldr	r0, [pc, #240]	@ (34186cc0 <RCCEx_GetSPICLKFreq+0x268>)
34186bce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34186bd0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34186bd4:	e014      	b.n	34186c00 <RCCEx_GetSPICLKFreq+0x1a8>
  switch (LL_RCC_GetSPIClockSource(SPIxSource))
34186bd6:	4a3b      	ldr	r2, [pc, #236]	@ (34186cc4 <RCCEx_GetSPICLKFreq+0x26c>)
34186bd8:	4293      	cmp	r3, r2
34186bda:	f47f af59 	bne.w	34186a90 <RCCEx_GetSPICLKFreq+0x38>
34186bde:	483a      	ldr	r0, [pc, #232]	@ (34186cc8 <RCCEx_GetSPICLKFreq+0x270>)
34186be0:	e757      	b.n	34186a92 <RCCEx_GetSPICLKFreq+0x3a>
34186be2:	4b3a      	ldr	r3, [pc, #232]	@ (34186ccc <RCCEx_GetSPICLKFreq+0x274>)
34186be4:	4298      	cmp	r0, r3
34186be6:	d046      	beq.n	34186c76 <RCCEx_GetSPICLKFreq+0x21e>
34186be8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34186bec:	4298      	cmp	r0, r3
34186bee:	e7f4      	b.n	34186bda <RCCEx_GetSPICLKFreq+0x182>
      spi_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34186bf0:	f7fc f892 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
34186bf4:	f7fc f9ce 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34186bf8:	4b24      	ldr	r3, [pc, #144]	@ (34186c8c <RCCEx_GetSPICLKFreq+0x234>)
34186bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34186bfc:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34186c00:	40d8      	lsrs	r0, r3
      break;
34186c02:	e746      	b.n	34186a92 <RCCEx_GetSPICLKFreq+0x3a>
      spi_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34186c04:	f7fc f888 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
34186c08:	f7fc f9c4 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34186c0c:	4b1f      	ldr	r3, [pc, #124]	@ (34186c8c <RCCEx_GetSPICLKFreq+0x234>)
34186c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34186c10:	f3c3 3302 	ubfx	r3, r3, #12, #3
34186c14:	e7f4      	b.n	34186c00 <RCCEx_GetSPICLKFreq+0x1a8>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34186c16:	f7fc f975 	bl	34182f04 <LL_RCC_IC8_IsEnabled>
34186c1a:	2800      	cmp	r0, #0
34186c1c:	f43f af38 	beq.w	34186a90 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC8_GetDivider();
34186c20:	f7fc f978 	bl	34182f14 <LL_RCC_IC8_GetDivider>
34186c24:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34186c26:	4b19      	ldr	r3, [pc, #100]	@ (34186c8c <RCCEx_GetSPICLKFreq+0x234>)
34186c28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34186c2c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC14_GetSource())
34186c30:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34186c34:	d01c      	beq.n	34186c70 <RCCEx_GetSPICLKFreq+0x218>
34186c36:	d811      	bhi.n	34186c5c <RCCEx_GetSPICLKFreq+0x204>
34186c38:	b9bb      	cbnz	r3, 34186c6a <RCCEx_GetSPICLKFreq+0x212>
            spi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34186c3a:	f7ff f9fd 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
            spi_frequency = spi_frequency / ic_divider;
34186c3e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34186c42:	e726      	b.n	34186a92 <RCCEx_GetSPICLKFreq+0x3a>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34186c44:	f7fc f982 	bl	34182f4c <LL_RCC_IC14_IsEnabled>
34186c48:	2800      	cmp	r0, #0
34186c4a:	f43f af21 	beq.w	34186a90 <RCCEx_GetSPICLKFreq+0x38>
        ic_divider = LL_RCC_IC14_GetDivider();
34186c4e:	f7fc f985 	bl	34182f5c <LL_RCC_IC14_GetDivider>
34186c52:	4b0e      	ldr	r3, [pc, #56]	@ (34186c8c <RCCEx_GetSPICLKFreq+0x234>)
34186c54:	4604      	mov	r4, r0
34186c56:	f8d3 30f8 	ldr.w	r3, [r3, #248]	@ 0xf8
34186c5a:	e7e7      	b.n	34186c2c <RCCEx_GetSPICLKFreq+0x1d4>
        switch (LL_RCC_IC14_GetSource())
34186c5c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34186c60:	f47f af16 	bne.w	34186a90 <RCCEx_GetSPICLKFreq+0x38>
            spi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34186c64:	f7ff faa8 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
34186c68:	e7e9      	b.n	34186c3e <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34186c6a:	f7ff fa25 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
34186c6e:	e7e6      	b.n	34186c3e <RCCEx_GetSPICLKFreq+0x1e6>
            spi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34186c70:	f7ff fa62 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
34186c74:	e7e3      	b.n	34186c3e <RCCEx_GetSPICLKFreq+0x1e6>
      if (LL_RCC_HSE_IsReady() != 0U)
34186c76:	f7fc f8f3 	bl	34182e60 <LL_RCC_HSE_IsReady>
34186c7a:	2800      	cmp	r0, #0
34186c7c:	f43f af08 	beq.w	34186a90 <RCCEx_GetSPICLKFreq+0x38>
        spi_frequency = HSE_VALUE;
34186c80:	4813      	ldr	r0, [pc, #76]	@ (34186cd0 <RCCEx_GetSPICLKFreq+0x278>)
34186c82:	e706      	b.n	34186a92 <RCCEx_GetSPICLKFreq+0x3a>
34186c84:	07030820 	.word	0x07030820
34186c88:	07001020 	.word	0x07001020
34186c8c:	56028000 	.word	0x56028000
34186c90:	07020820 	.word	0x07020820
34186c94:	07011820 	.word	0x07011820
34186c98:	07021420 	.word	0x07021420
34186c9c:	07021820 	.word	0x07021820
34186ca0:	07050c20 	.word	0x07050c20
34186ca4:	07041420 	.word	0x07041420
34186ca8:	003d0900 	.word	0x003d0900
34186cac:	07041020 	.word	0x07041020
34186cb0:	07050420 	.word	0x07050420
34186cb4:	07061020 	.word	0x07061020
34186cb8:	07051020 	.word	0x07051020
34186cbc:	07051820 	.word	0x07051820
34186cc0:	03d09000 	.word	0x03d09000
34186cc4:	07060820 	.word	0x07060820
34186cc8:	00bb8000 	.word	0x00bb8000
34186ccc:	07061420 	.word	0x07061420
34186cd0:	016e3600 	.word	0x016e3600

34186cd4 <RCCEx_GetSAICLKFreq>:
{
34186cd4:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34186cd6:	f7fc f8f5 	bl	34182ec4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34186cda:	4b49      	ldr	r3, [pc, #292]	@ (34186e00 <RCCEx_GetSAICLKFreq+0x12c>)
34186cdc:	4298      	cmp	r0, r3
34186cde:	d04a      	beq.n	34186d76 <RCCEx_GetSAICLKFreq+0xa2>
34186ce0:	d839      	bhi.n	34186d56 <RCCEx_GetSAICLKFreq+0x82>
34186ce2:	f5a3 3300 	sub.w	r3, r3, #131072	@ 0x20000
34186ce6:	4298      	cmp	r0, r3
34186ce8:	d021      	beq.n	34186d2e <RCCEx_GetSAICLKFreq+0x5a>
34186cea:	d815      	bhi.n	34186d18 <RCCEx_GetSAICLKFreq+0x44>
34186cec:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186cf0:	4298      	cmp	r0, r3
34186cf2:	d00d      	beq.n	34186d10 <RCCEx_GetSAICLKFreq+0x3c>
34186cf4:	d809      	bhi.n	34186d0a <RCCEx_GetSAICLKFreq+0x36>
34186cf6:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186cfa:	4298      	cmp	r0, r3
34186cfc:	d04e      	beq.n	34186d9c <RCCEx_GetSAICLKFreq+0xc8>
34186cfe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34186d02:	4298      	cmp	r0, r3
34186d04:	d04a      	beq.n	34186d9c <RCCEx_GetSAICLKFreq+0xc8>
  uint32_t sai_frequency = RCC_PERIPH_FREQUENCY_NO;
34186d06:	2000      	movs	r0, #0
}
34186d08:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34186d0a:	4b3e      	ldr	r3, [pc, #248]	@ (34186e04 <RCCEx_GetSAICLKFreq+0x130>)
34186d0c:	4298      	cmp	r0, r3
34186d0e:	d1fa      	bne.n	34186d06 <RCCEx_GetSAICLKFreq+0x32>
}
34186d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34186d14:	f7ff ba90 	b.w	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34186d18:	4b3b      	ldr	r3, [pc, #236]	@ (34186e08 <RCCEx_GetSAICLKFreq+0x134>)
34186d1a:	4298      	cmp	r0, r3
34186d1c:	d04d      	beq.n	34186dba <RCCEx_GetSAICLKFreq+0xe6>
34186d1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34186d22:	4298      	cmp	r0, r3
34186d24:	d049      	beq.n	34186dba <RCCEx_GetSAICLKFreq+0xe6>
34186d26:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186d2a:	4298      	cmp	r0, r3
34186d2c:	d1eb      	bne.n	34186d06 <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34186d2e:	f7fc f8d7 	bl	34182ee0 <LL_RCC_IC7_IsEnabled>
34186d32:	2800      	cmp	r0, #0
34186d34:	d0e7      	beq.n	34186d06 <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC7_GetDivider();
34186d36:	f7fc f8db 	bl	34182ef0 <LL_RCC_IC7_GetDivider>
34186d3a:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34186d3c:	4b33      	ldr	r3, [pc, #204]	@ (34186e0c <RCCEx_GetSAICLKFreq+0x138>)
34186d3e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34186d42:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
34186d46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34186d4a:	d047      	beq.n	34186ddc <RCCEx_GetSAICLKFreq+0x108>
34186d4c:	d840      	bhi.n	34186dd0 <RCCEx_GetSAICLKFreq+0xfc>
34186d4e:	bb7b      	cbnz	r3, 34186db0 <RCCEx_GetSAICLKFreq+0xdc>
            sai_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34186d50:	f7ff f972 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
34186d54:	e02e      	b.n	34186db4 <RCCEx_GetSAICLKFreq+0xe0>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34186d56:	4b2e      	ldr	r3, [pc, #184]	@ (34186e10 <RCCEx_GetSAICLKFreq+0x13c>)
34186d58:	4298      	cmp	r0, r3
34186d5a:	d01d      	beq.n	34186d98 <RCCEx_GetSAICLKFreq+0xc4>
34186d5c:	d811      	bhi.n	34186d82 <RCCEx_GetSAICLKFreq+0xae>
34186d5e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186d62:	4298      	cmp	r0, r3
34186d64:	d03d      	beq.n	34186de2 <RCCEx_GetSAICLKFreq+0x10e>
34186d66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34186d6a:	4298      	cmp	r0, r3
34186d6c:	d039      	beq.n	34186de2 <RCCEx_GetSAICLKFreq+0x10e>
34186d6e:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186d72:	4298      	cmp	r0, r3
34186d74:	d1c7      	bne.n	34186d06 <RCCEx_GetSAICLKFreq+0x32>
      if (LL_RCC_MSI_IsReady() != 0U)
34186d76:	f7fc f883 	bl	34182e80 <LL_RCC_MSI_IsReady>
34186d7a:	2800      	cmp	r0, #0
34186d7c:	d0c3      	beq.n	34186d06 <RCCEx_GetSAICLKFreq+0x32>
        sai_frequency = MSI_VALUE;
34186d7e:	4825      	ldr	r0, [pc, #148]	@ (34186e14 <RCCEx_GetSAICLKFreq+0x140>)
  return sai_frequency;
34186d80:	e7c2      	b.n	34186d08 <RCCEx_GetSAICLKFreq+0x34>
  switch (LL_RCC_GetSAIClockSource(SAIxSource))
34186d82:	4b25      	ldr	r3, [pc, #148]	@ (34186e18 <RCCEx_GetSAICLKFreq+0x144>)
34186d84:	4298      	cmp	r0, r3
34186d86:	d036      	beq.n	34186df6 <RCCEx_GetSAICLKFreq+0x122>
34186d88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
34186d8c:	4298      	cmp	r0, r3
34186d8e:	d032      	beq.n	34186df6 <RCCEx_GetSAICLKFreq+0x122>
34186d90:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186d94:	4298      	cmp	r0, r3
34186d96:	d1b6      	bne.n	34186d06 <RCCEx_GetSAICLKFreq+0x32>
34186d98:	4820      	ldr	r0, [pc, #128]	@ (34186e1c <RCCEx_GetSAICLKFreq+0x148>)
34186d9a:	e7b5      	b.n	34186d08 <RCCEx_GetSAICLKFreq+0x34>
      sai_frequency = RCCEx_GetPCLK2Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34186d9c:	f7fb ffbc 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
34186da0:	f7fc f8f8 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE2));
34186da4:	4b19      	ldr	r3, [pc, #100]	@ (34186e0c <RCCEx_GetSAICLKFreq+0x138>)
34186da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
34186da8:	f3c3 1302 	ubfx	r3, r3, #4, #3
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34186dac:	40d8      	lsrs	r0, r3
34186dae:	e7ab      	b.n	34186d08 <RCCEx_GetSAICLKFreq+0x34>
            sai_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34186db0:	f7ff f982 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
            sai_frequency = sai_frequency / ic_divider;
34186db4:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34186db8:	e7a6      	b.n	34186d08 <RCCEx_GetSAICLKFreq+0x34>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34186dba:	f7fc f8a3 	bl	34182f04 <LL_RCC_IC8_IsEnabled>
34186dbe:	2800      	cmp	r0, #0
34186dc0:	d0a1      	beq.n	34186d06 <RCCEx_GetSAICLKFreq+0x32>
        ic_divider = LL_RCC_IC8_GetDivider();
34186dc2:	f7fc f8a7 	bl	34182f14 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34186dc6:	4b11      	ldr	r3, [pc, #68]	@ (34186e0c <RCCEx_GetSAICLKFreq+0x138>)
34186dc8:	4604      	mov	r4, r0
34186dca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
34186dce:	e7b8      	b.n	34186d42 <RCCEx_GetSAICLKFreq+0x6e>
        switch (LL_RCC_IC8_GetSource())
34186dd0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34186dd4:	d197      	bne.n	34186d06 <RCCEx_GetSAICLKFreq+0x32>
            sai_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34186dd6:	f7ff f9ef 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
34186dda:	e7eb      	b.n	34186db4 <RCCEx_GetSAICLKFreq+0xe0>
            sai_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34186ddc:	f7ff f9ac 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
34186de0:	e7e8      	b.n	34186db4 <RCCEx_GetSAICLKFreq+0xe0>
      if (LL_RCC_HSI_IsReady() != 0U)
34186de2:	f7fc f845 	bl	34182e70 <LL_RCC_HSI_IsReady>
34186de6:	2800      	cmp	r0, #0
34186de8:	d08d      	beq.n	34186d06 <RCCEx_GetSAICLKFreq+0x32>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34186dea:	4b08      	ldr	r3, [pc, #32]	@ (34186e0c <RCCEx_GetSAICLKFreq+0x138>)
        sai_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34186dec:	480c      	ldr	r0, [pc, #48]	@ (34186e20 <RCCEx_GetSAICLKFreq+0x14c>)
34186dee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34186df0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34186df4:	e7da      	b.n	34186dac <RCCEx_GetSAICLKFreq+0xd8>
}
34186df6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sai_frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34186dfa:	f7ff baa3 	b.w	34186344 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
34186dfe:	bf00      	nop
34186e00:	07041418 	.word	0x07041418
34186e04:	07011818 	.word	0x07011818
34186e08:	07031418 	.word	0x07031418
34186e0c:	56028000 	.word	0x56028000
34186e10:	07061418 	.word	0x07061418
34186e14:	003d0900 	.word	0x003d0900
34186e18:	07071418 	.word	0x07071418
34186e1c:	00bb8000 	.word	0x00bb8000
34186e20:	03d09000 	.word	0x03d09000

34186e24 <RCCEx_GetI3CCLKFreq>:
{
34186e24:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34186e26:	f7fc f84d 	bl	34182ec4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34186e2a:	4b3d      	ldr	r3, [pc, #244]	@ (34186f20 <RCCEx_GetI3CCLKFreq+0xfc>)
34186e2c:	4298      	cmp	r0, r3
34186e2e:	d060      	beq.n	34186ef2 <RCCEx_GetI3CCLKFreq+0xce>
34186e30:	d830      	bhi.n	34186e94 <RCCEx_GetI3CCLKFreq+0x70>
34186e32:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
34186e36:	4298      	cmp	r0, r3
34186e38:	d057      	beq.n	34186eea <RCCEx_GetI3CCLKFreq+0xc6>
34186e3a:	d80d      	bhi.n	34186e58 <RCCEx_GetI3CCLKFreq+0x34>
34186e3c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186e40:	4298      	cmp	r0, r3
34186e42:	d048      	beq.n	34186ed6 <RCCEx_GetI3CCLKFreq+0xb2>
34186e44:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34186e48:	4298      	cmp	r0, r3
34186e4a:	d04e      	beq.n	34186eea <RCCEx_GetI3CCLKFreq+0xc6>
34186e4c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186e50:	4298      	cmp	r0, r3
34186e52:	d040      	beq.n	34186ed6 <RCCEx_GetI3CCLKFreq+0xb2>
  uint32_t i3c_frequency = RCC_PERIPH_FREQUENCY_NO;
34186e54:	2000      	movs	r0, #0
}
34186e56:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34186e58:	4b32      	ldr	r3, [pc, #200]	@ (34186f24 <RCCEx_GetI3CCLKFreq+0x100>)
34186e5a:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34186e5e:	4298      	cmp	r0, r3
34186e60:	d1f8      	bne.n	34186e54 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34186e62:	4b31      	ldr	r3, [pc, #196]	@ (34186f28 <RCCEx_GetI3CCLKFreq+0x104>)
34186e64:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
34186e68:	0592      	lsls	r2, r2, #22
34186e6a:	d5f3      	bpl.n	34186e54 <RCCEx_GetI3CCLKFreq+0x30>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34186e6c:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34186e70:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34186e74:	f3c0 4007 	ubfx	r0, r0, #16, #8
34186e78:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34186e7a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34186e7e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34186e82:	d04a      	beq.n	34186f1a <RCCEx_GetI3CCLKFreq+0xf6>
34186e84:	d840      	bhi.n	34186f08 <RCCEx_GetI3CCLKFreq+0xe4>
34186e86:	2b00      	cmp	r3, #0
34186e88:	d144      	bne.n	34186f14 <RCCEx_GetI3CCLKFreq+0xf0>
            i3c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34186e8a:	f7ff f8d5 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
            i3c_frequency = i3c_frequency / ic_divider;
34186e8e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34186e92:	e7e0      	b.n	34186e56 <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34186e94:	4b25      	ldr	r3, [pc, #148]	@ (34186f2c <RCCEx_GetI3CCLKFreq+0x108>)
34186e96:	4298      	cmp	r0, r3
34186e98:	d008      	beq.n	34186eac <RCCEx_GetI3CCLKFreq+0x88>
34186e9a:	d80d      	bhi.n	34186eb8 <RCCEx_GetI3CCLKFreq+0x94>
34186e9c:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186ea0:	4298      	cmp	r0, r3
34186ea2:	d026      	beq.n	34186ef2 <RCCEx_GetI3CCLKFreq+0xce>
34186ea4:	f503 437c 	add.w	r3, r3, #64512	@ 0xfc00
34186ea8:	4298      	cmp	r0, r3
34186eaa:	d1d3      	bne.n	34186e54 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_MSI_IsReady() != 0U)
34186eac:	f7fb ffe8 	bl	34182e80 <LL_RCC_MSI_IsReady>
34186eb0:	2800      	cmp	r0, #0
34186eb2:	d0cf      	beq.n	34186e54 <RCCEx_GetI3CCLKFreq+0x30>
        i3c_frequency = MSI_VALUE;
34186eb4:	481e      	ldr	r0, [pc, #120]	@ (34186f30 <RCCEx_GetI3CCLKFreq+0x10c>)
  return i3c_frequency;
34186eb6:	e7ce      	b.n	34186e56 <RCCEx_GetI3CCLKFreq+0x32>
  switch (LL_RCC_GetI3CClockSource(I3CxSource))
34186eb8:	4b1e      	ldr	r3, [pc, #120]	@ (34186f34 <RCCEx_GetI3CCLKFreq+0x110>)
34186eba:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34186ebe:	4298      	cmp	r0, r3
34186ec0:	d1c8      	bne.n	34186e54 <RCCEx_GetI3CCLKFreq+0x30>
      if (LL_RCC_HSI_IsReady() != 0U)
34186ec2:	f7fb ffd5 	bl	34182e70 <LL_RCC_HSI_IsReady>
34186ec6:	2800      	cmp	r0, #0
34186ec8:	d0c4      	beq.n	34186e54 <RCCEx_GetI3CCLKFreq+0x30>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34186eca:	4b17      	ldr	r3, [pc, #92]	@ (34186f28 <RCCEx_GetI3CCLKFreq+0x104>)
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34186ecc:	481a      	ldr	r0, [pc, #104]	@ (34186f38 <RCCEx_GetI3CCLKFreq+0x114>)
34186ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34186ed0:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34186ed4:	e007      	b.n	34186ee6 <RCCEx_GetI3CCLKFreq+0xc2>
      i3c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34186ed6:	f7fb ff1f 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
34186eda:	f7fc f85b 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34186ede:	4b12      	ldr	r3, [pc, #72]	@ (34186f28 <RCCEx_GetI3CCLKFreq+0x104>)
34186ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34186ee2:	f003 0307 	and.w	r3, r3, #7
        i3c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34186ee6:	40d8      	lsrs	r0, r3
34186ee8:	e7b5      	b.n	34186e56 <RCCEx_GetI3CCLKFreq+0x32>
}
34186eea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i3c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34186eee:	f7ff b9a3 	b.w	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34186ef2:	f7fc f83d 	bl	34182f70 <LL_RCC_IC15_IsEnabled>
34186ef6:	2800      	cmp	r0, #0
34186ef8:	d0ac      	beq.n	34186e54 <RCCEx_GetI3CCLKFreq+0x30>
        ic_divider = LL_RCC_IC15_GetDivider();
34186efa:	f7fc f841 	bl	34182f80 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34186efe:	4b0a      	ldr	r3, [pc, #40]	@ (34186f28 <RCCEx_GetI3CCLKFreq+0x104>)
34186f00:	4604      	mov	r4, r0
34186f02:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34186f06:	e7b8      	b.n	34186e7a <RCCEx_GetI3CCLKFreq+0x56>
        switch (LL_RCC_IC15_GetSource())
34186f08:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34186f0c:	d1a2      	bne.n	34186e54 <RCCEx_GetI3CCLKFreq+0x30>
            i3c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34186f0e:	f7ff f953 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
34186f12:	e7bc      	b.n	34186e8e <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34186f14:	f7ff f8d0 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
34186f18:	e7b9      	b.n	34186e8e <RCCEx_GetI3CCLKFreq+0x6a>
            i3c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34186f1a:	f7ff f90d 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
34186f1e:	e7b6      	b.n	34186e8e <RCCEx_GetI3CCLKFreq+0x6a>
34186f20:	0703100c 	.word	0x0703100c
34186f24:	0702100c 	.word	0x0702100c
34186f28:	56028000 	.word	0x56028000
34186f2c:	0704140c 	.word	0x0704140c
34186f30:	003d0900 	.word	0x003d0900
34186f34:	0705100c 	.word	0x0705100c
34186f38:	03d09000 	.word	0x03d09000

34186f3c <RCCEx_GetSDMMCCLKFreq>:
{
34186f3c:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34186f3e:	f7fb ffc1 	bl	34182ec4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34186f42:	4b2d      	ldr	r3, [pc, #180]	@ (34186ff8 <RCCEx_GetSDMMCCLKFreq+0xbc>)
34186f44:	4298      	cmp	r0, r3
34186f46:	d01d      	beq.n	34186f84 <RCCEx_GetSDMMCCLKFreq+0x48>
34186f48:	d813      	bhi.n	34186f72 <RCCEx_GetSDMMCCLKFreq+0x36>
34186f4a:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186f4e:	4298      	cmp	r0, r3
34186f50:	d00b      	beq.n	34186f6a <RCCEx_GetSDMMCCLKFreq+0x2e>
34186f52:	d807      	bhi.n	34186f64 <RCCEx_GetSDMMCCLKFreq+0x28>
34186f54:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
34186f58:	f5a3 3380 	sub.w	r3, r3, #65536	@ 0x10000
34186f5c:	4298      	cmp	r0, r3
34186f5e:	d02a      	beq.n	34186fb6 <RCCEx_GetSDMMCCLKFreq+0x7a>
  uint32_t sdmmc_frequency = RCC_PERIPH_FREQUENCY_NO;
34186f60:	2000      	movs	r0, #0
}
34186f62:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34186f64:	4b25      	ldr	r3, [pc, #148]	@ (34186ffc <RCCEx_GetSDMMCCLKFreq+0xc0>)
34186f66:	4298      	cmp	r0, r3
34186f68:	d1fa      	bne.n	34186f60 <RCCEx_GetSDMMCCLKFreq+0x24>
}
34186f6a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34186f6e:	f7ff b963 	b.w	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetSDMMCClockSource(SDMMCxSource))
34186f72:	4b23      	ldr	r3, [pc, #140]	@ (34187000 <RCCEx_GetSDMMCCLKFreq+0xc4>)
34186f74:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
34186f78:	429a      	cmp	r2, r3
34186f7a:	d022      	beq.n	34186fc2 <RCCEx_GetSDMMCCLKFreq+0x86>
34186f7c:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34186f80:	4298      	cmp	r0, r3
34186f82:	d1ed      	bne.n	34186f60 <RCCEx_GetSDMMCCLKFreq+0x24>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
34186f84:	4b1f      	ldr	r3, [pc, #124]	@ (34187004 <RCCEx_GetSDMMCCLKFreq+0xc8>)
34186f86:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34186f8a:	f010 0008 	ands.w	r0, r0, #8
34186f8e:	d0e8      	beq.n	34186f62 <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34186f90:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
34186f94:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
34186f98:	f3c0 4007 	ubfx	r0, r0, #16, #8
34186f9c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34186f9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC5_GetSource())
34186fa2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34186fa6:	d023      	beq.n	34186ff0 <RCCEx_GetSDMMCCLKFreq+0xb4>
34186fa8:	d819      	bhi.n	34186fde <RCCEx_GetSDMMCCLKFreq+0xa2>
34186faa:	b9f3      	cbnz	r3, 34186fea <RCCEx_GetSDMMCCLKFreq+0xae>
            sdmmc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34186fac:	f7ff f844 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
            sdmmc_frequency = sdmmc_frequency / ic_divider;
34186fb0:	fbb0 f0f4 	udiv	r0, r0, r4
  return sdmmc_frequency;
34186fb4:	e7d5      	b.n	34186f62 <RCCEx_GetSDMMCCLKFreq+0x26>
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34186fb6:	f7fb feaf 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
}
34186fba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      sdmmc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34186fbe:	f7fb bfe9 	b.w	34182f94 <RCCEx_GetHCLKFreq>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC5EN) == RCC_DIVENR_IC5EN) ? 1UL : 0UL);
34186fc2:	4b10      	ldr	r3, [pc, #64]	@ (34187004 <RCCEx_GetSDMMCCLKFreq+0xc8>)
34186fc4:	f8d3 0240 	ldr.w	r0, [r3, #576]	@ 0x240
34186fc8:	f010 0010 	ands.w	r0, r0, #16
34186fcc:	d0c9      	beq.n	34186f62 <RCCEx_GetSDMMCCLKFreq+0x26>
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34186fce:	f8d3 00d4 	ldr.w	r0, [r3, #212]	@ 0xd4
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34186fd2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  return ((READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5INT) >> RCC_IC5CFGR_IC5INT_Pos) + 1UL);
34186fd6:	f3c0 4007 	ubfx	r0, r0, #16, #8
34186fda:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC5CFGR, RCC_IC5CFGR_IC5SEL));
34186fdc:	e7df      	b.n	34186f9e <RCCEx_GetSDMMCCLKFreq+0x62>
        switch (LL_RCC_IC5_GetSource())
34186fde:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34186fe2:	d1bd      	bne.n	34186f60 <RCCEx_GetSDMMCCLKFreq+0x24>
            sdmmc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34186fe4:	f7ff f8e8 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
34186fe8:	e7e2      	b.n	34186fb0 <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34186fea:	f7ff f865 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
34186fee:	e7df      	b.n	34186fb0 <RCCEx_GetSDMMCCLKFreq+0x74>
            sdmmc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34186ff0:	f7ff f8a2 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
34186ff4:	e7dc      	b.n	34186fb0 <RCCEx_GetSDMMCCLKFreq+0x74>
34186ff6:	bf00      	nop
34186ff8:	0302001c 	.word	0x0302001c
34186ffc:	0301041c 	.word	0x0301041c
34187000:	0303001c 	.word	0x0303001c
34187004:	56028000 	.word	0x56028000

34187008 <RCCEx_GetI2CCLKFreq>:
{
34187008:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
3418700a:	f7fb ff5b 	bl	34182ec4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3418700e:	4b50      	ldr	r3, [pc, #320]	@ (34187150 <RCCEx_GetI2CCLKFreq+0x148>)
34187010:	4298      	cmp	r0, r3
34187012:	f000 8085 	beq.w	34187120 <RCCEx_GetI2CCLKFreq+0x118>
34187016:	d84b      	bhi.n	341870b0 <RCCEx_GetI2CCLKFreq+0xa8>
34187018:	f5a3 33fc 	sub.w	r3, r3, #129024	@ 0x1f800
3418701c:	4298      	cmp	r0, r3
3418701e:	d01a      	beq.n	34187056 <RCCEx_GetI2CCLKFreq+0x4e>
34187020:	d81d      	bhi.n	3418705e <RCCEx_GetI2CCLKFreq+0x56>
34187022:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34187026:	4298      	cmp	r0, r3
34187028:	d008      	beq.n	3418703c <RCCEx_GetI2CCLKFreq+0x34>
3418702a:	f420 6380 	bic.w	r3, r0, #1024	@ 0x400
3418702e:	d80f      	bhi.n	34187050 <RCCEx_GetI2CCLKFreq+0x48>
34187030:	4a48      	ldr	r2, [pc, #288]	@ (34187154 <RCCEx_GetI2CCLKFreq+0x14c>)
34187032:	4293      	cmp	r3, r2
34187034:	d002      	beq.n	3418703c <RCCEx_GetI2CCLKFreq+0x34>
34187036:	4b48      	ldr	r3, [pc, #288]	@ (34187158 <RCCEx_GetI2CCLKFreq+0x150>)
34187038:	4298      	cmp	r0, r3
3418703a:	d14a      	bne.n	341870d2 <RCCEx_GetI2CCLKFreq+0xca>
      i2c_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418703c:	f7fb fe6c 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
34187040:	f7fb ffa8 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34187044:	4b45      	ldr	r3, [pc, #276]	@ (3418715c <RCCEx_GetI2CCLKFreq+0x154>)
34187046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
34187048:	f003 0307 	and.w	r3, r3, #7
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418704c:	40d8      	lsrs	r0, r3
3418704e:	e041      	b.n	341870d4 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34187050:	4a43      	ldr	r2, [pc, #268]	@ (34187160 <RCCEx_GetI2CCLKFreq+0x158>)
34187052:	4293      	cmp	r3, r2
34187054:	d13d      	bne.n	341870d2 <RCCEx_GetI2CCLKFreq+0xca>
}
34187056:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      i2c_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
3418705a:	f7ff b8ed 	b.w	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
3418705e:	4b41      	ldr	r3, [pc, #260]	@ (34187164 <RCCEx_GetI2CCLKFreq+0x15c>)
34187060:	4298      	cmp	r0, r3
34187062:	d008      	beq.n	34187076 <RCCEx_GetI2CCLKFreq+0x6e>
34187064:	d820      	bhi.n	341870a8 <RCCEx_GetI2CCLKFreq+0xa0>
34187066:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
3418706a:	4298      	cmp	r0, r3
3418706c:	d0f3      	beq.n	34187056 <RCCEx_GetI2CCLKFreq+0x4e>
3418706e:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
34187072:	4298      	cmp	r0, r3
34187074:	d12d      	bne.n	341870d2 <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC10EN) == RCC_DIVENR_IC10EN) ? 1UL : 0UL);
34187076:	4b39      	ldr	r3, [pc, #228]	@ (3418715c <RCCEx_GetI2CCLKFreq+0x154>)
34187078:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3418707c:	0592      	lsls	r2, r2, #22
3418707e:	d528      	bpl.n	341870d2 <RCCEx_GetI2CCLKFreq+0xca>
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34187080:	f8d3 00e8 	ldr.w	r0, [r3, #232]	@ 0xe8
  return (uint32_t)(READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10SEL));
34187084:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
  return ((READ_BIT(RCC->IC10CFGR, RCC_IC10CFGR_IC10INT) >> RCC_IC10CFGR_IC10INT_Pos) + 1UL);
34187088:	f3c0 4007 	ubfx	r0, r0, #16, #8
3418708c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3418708e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
34187092:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187096:	d057      	beq.n	34187148 <RCCEx_GetI2CCLKFreq+0x140>
34187098:	d84d      	bhi.n	34187136 <RCCEx_GetI2CCLKFreq+0x12e>
3418709a:	2b00      	cmp	r3, #0
3418709c:	d151      	bne.n	34187142 <RCCEx_GetI2CCLKFreq+0x13a>
            i2c_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418709e:	f7fe ffcb 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
            i2c_frequency = i2c_frequency / ic_divider;
341870a2:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
341870a6:	e015      	b.n	341870d4 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
341870a8:	4b2f      	ldr	r3, [pc, #188]	@ (34187168 <RCCEx_GetI2CCLKFreq+0x160>)
341870aa:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
341870ae:	e7e0      	b.n	34187072 <RCCEx_GetI2CCLKFreq+0x6a>
341870b0:	4b2e      	ldr	r3, [pc, #184]	@ (3418716c <RCCEx_GetI2CCLKFreq+0x164>)
341870b2:	4298      	cmp	r0, r3
341870b4:	d014      	beq.n	341870e0 <RCCEx_GetI2CCLKFreq+0xd8>
341870b6:	d819      	bhi.n	341870ec <RCCEx_GetI2CCLKFreq+0xe4>
341870b8:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
341870bc:	4298      	cmp	r0, r3
341870be:	d02f      	beq.n	34187120 <RCCEx_GetI2CCLKFreq+0x118>
341870c0:	d809      	bhi.n	341870d6 <RCCEx_GetI2CCLKFreq+0xce>
341870c2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
341870c6:	4298      	cmp	r0, r3
341870c8:	d02a      	beq.n	34187120 <RCCEx_GetI2CCLKFreq+0x118>
341870ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
341870ce:	4298      	cmp	r0, r3
341870d0:	d026      	beq.n	34187120 <RCCEx_GetI2CCLKFreq+0x118>
  uint32_t i2c_frequency = RCC_PERIPH_FREQUENCY_NO;
341870d2:	2000      	movs	r0, #0
}
341870d4:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
341870d6:	4b26      	ldr	r3, [pc, #152]	@ (34187170 <RCCEx_GetI2CCLKFreq+0x168>)
341870d8:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
341870dc:	4298      	cmp	r0, r3
341870de:	d1f8      	bne.n	341870d2 <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_MSI_IsReady() != 0U)
341870e0:	f7fb fece 	bl	34182e80 <LL_RCC_MSI_IsReady>
341870e4:	2800      	cmp	r0, #0
341870e6:	d0f4      	beq.n	341870d2 <RCCEx_GetI2CCLKFreq+0xca>
        i2c_frequency = MSI_VALUE;
341870e8:	4822      	ldr	r0, [pc, #136]	@ (34187174 <RCCEx_GetI2CCLKFreq+0x16c>)
  return i2c_frequency;
341870ea:	e7f3      	b.n	341870d4 <RCCEx_GetI2CCLKFreq+0xcc>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
341870ec:	4b22      	ldr	r3, [pc, #136]	@ (34187178 <RCCEx_GetI2CCLKFreq+0x170>)
341870ee:	4298      	cmp	r0, r3
341870f0:	d008      	beq.n	34187104 <RCCEx_GetI2CCLKFreq+0xfc>
341870f2:	d811      	bhi.n	34187118 <RCCEx_GetI2CCLKFreq+0x110>
341870f4:	f5a3 4378 	sub.w	r3, r3, #63488	@ 0xf800
341870f8:	4298      	cmp	r0, r3
341870fa:	d0f1      	beq.n	341870e0 <RCCEx_GetI2CCLKFreq+0xd8>
341870fc:	f503 4374 	add.w	r3, r3, #62464	@ 0xf400
34187100:	4298      	cmp	r0, r3
34187102:	d1e6      	bne.n	341870d2 <RCCEx_GetI2CCLKFreq+0xca>
      if (LL_RCC_HSI_IsReady() != 0U)
34187104:	f7fb feb4 	bl	34182e70 <LL_RCC_HSI_IsReady>
34187108:	2800      	cmp	r0, #0
3418710a:	d0e2      	beq.n	341870d2 <RCCEx_GetI2CCLKFreq+0xca>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3418710c:	4b13      	ldr	r3, [pc, #76]	@ (3418715c <RCCEx_GetI2CCLKFreq+0x154>)
        i2c_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418710e:	481b      	ldr	r0, [pc, #108]	@ (3418717c <RCCEx_GetI2CCLKFreq+0x174>)
34187110:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
34187112:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34187116:	e799      	b.n	3418704c <RCCEx_GetI2CCLKFreq+0x44>
  switch (LL_RCC_GetI2CClockSource(I2CxSource))
34187118:	4b19      	ldr	r3, [pc, #100]	@ (34187180 <RCCEx_GetI2CCLKFreq+0x178>)
3418711a:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3418711e:	e7ef      	b.n	34187100 <RCCEx_GetI2CCLKFreq+0xf8>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34187120:	f7fb ff26 	bl	34182f70 <LL_RCC_IC15_IsEnabled>
34187124:	2800      	cmp	r0, #0
34187126:	d0d4      	beq.n	341870d2 <RCCEx_GetI2CCLKFreq+0xca>
        ic_divider = LL_RCC_IC15_GetDivider();
34187128:	f7fb ff2a 	bl	34182f80 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
3418712c:	4b0b      	ldr	r3, [pc, #44]	@ (3418715c <RCCEx_GetI2CCLKFreq+0x154>)
3418712e:	4604      	mov	r4, r0
34187130:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
34187134:	e7ab      	b.n	3418708e <RCCEx_GetI2CCLKFreq+0x86>
        switch (LL_RCC_IC15_GetSource())
34187136:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418713a:	d1ca      	bne.n	341870d2 <RCCEx_GetI2CCLKFreq+0xca>
            i2c_frequency = HAL_RCCEx_GetPLL4CLKFreq();
3418713c:	f7ff f83c 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
34187140:	e7af      	b.n	341870a2 <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34187142:	f7fe ffb9 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
34187146:	e7ac      	b.n	341870a2 <RCCEx_GetI2CCLKFreq+0x9a>
            i2c_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34187148:	f7fe fff6 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
3418714c:	e7a9      	b.n	341870a2 <RCCEx_GetI2CCLKFreq+0x9a>
3418714e:	bf00      	nop
34187150:	0703000c 	.word	0x0703000c
34187154:	0700000c 	.word	0x0700000c
34187158:	0700080c 	.word	0x0700080c
3418715c:	56028000 	.word	0x56028000
34187160:	0701000c 	.word	0x0701000c
34187164:	0702040c 	.word	0x0702040c
34187168:	0702080c 	.word	0x0702080c
3418716c:	0704080c 	.word	0x0704080c
34187170:	0704000c 	.word	0x0704000c
34187174:	003d0900 	.word	0x003d0900
34187178:	0705040c 	.word	0x0705040c
3418717c:	03d09000 	.word	0x03d09000
34187180:	0705080c 	.word	0x0705080c

34187184 <RCCEx_GetLPTIMCLKFreq>:
{
34187184:	b510      	push	{r4, lr}
  return LL_RCC_GetClockSource(Periph);
34187186:	f7fb fe9d 	bl	34182ec4 <LL_RCC_GetClockSource>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
3418718a:	4b63      	ldr	r3, [pc, #396]	@ (34187318 <RCCEx_GetLPTIMCLKFreq+0x194>)
3418718c:	4298      	cmp	r0, r3
3418718e:	d03a      	beq.n	34187206 <RCCEx_GetLPTIMCLKFreq+0x82>
34187190:	d850      	bhi.n	34187234 <RCCEx_GetLPTIMCLKFreq+0xb0>
34187192:	f5a3 33fe 	sub.w	r3, r3, #130048	@ 0x1fc00
34187196:	4298      	cmp	r0, r3
34187198:	f000 80a7 	beq.w	341872ea <RCCEx_GetLPTIMCLKFreq+0x166>
3418719c:	d813      	bhi.n	341871c6 <RCCEx_GetLPTIMCLKFreq+0x42>
3418719e:	f5a3 6340 	sub.w	r3, r3, #3072	@ 0xc00
341871a2:	4298      	cmp	r0, r3
341871a4:	f000 8097 	beq.w	341872d6 <RCCEx_GetLPTIMCLKFreq+0x152>
341871a8:	3b01      	subs	r3, #1
341871aa:	4298      	cmp	r0, r3
341871ac:	d909      	bls.n	341871c2 <RCCEx_GetLPTIMCLKFreq+0x3e>
341871ae:	f203 4301 	addw	r3, r3, #1025	@ 0x401
341871b2:	4298      	cmp	r0, r3
341871b4:	f000 8099 	beq.w	341872ea <RCCEx_GetLPTIMCLKFreq+0x166>
341871b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
341871bc:	4298      	cmp	r0, r3
341871be:	f000 8094 	beq.w	341872ea <RCCEx_GetLPTIMCLKFreq+0x166>
  uint32_t lptim_frequency = RCC_PERIPH_FREQUENCY_NO;
341871c2:	2000      	movs	r0, #0
}
341871c4:	bd10      	pop	{r4, pc}
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
341871c6:	4b55      	ldr	r3, [pc, #340]	@ (3418731c <RCCEx_GetLPTIMCLKFreq+0x198>)
341871c8:	4298      	cmp	r0, r3
341871ca:	d015      	beq.n	341871f8 <RCCEx_GetLPTIMCLKFreq+0x74>
341871cc:	d808      	bhi.n	341871e0 <RCCEx_GetLPTIMCLKFreq+0x5c>
341871ce:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
341871d2:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
341871d6:	429a      	cmp	r2, r3
341871d8:	d00e      	beq.n	341871f8 <RCCEx_GetLPTIMCLKFreq+0x74>
341871da:	f5a3 4370 	sub.w	r3, r3, #61440	@ 0xf000
341871de:	e7ed      	b.n	341871bc <RCCEx_GetLPTIMCLKFreq+0x38>
341871e0:	4b4f      	ldr	r3, [pc, #316]	@ (34187320 <RCCEx_GetLPTIMCLKFreq+0x19c>)
341871e2:	4298      	cmp	r0, r3
341871e4:	d00f      	beq.n	34187206 <RCCEx_GetLPTIMCLKFreq+0x82>
341871e6:	d80b      	bhi.n	34187200 <RCCEx_GetLPTIMCLKFreq+0x7c>
341871e8:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
341871ec:	4298      	cmp	r0, r3
341871ee:	d003      	beq.n	341871f8 <RCCEx_GetLPTIMCLKFreq+0x74>
341871f0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
341871f4:	4298      	cmp	r0, r3
341871f6:	d1e4      	bne.n	341871c2 <RCCEx_GetLPTIMCLKFreq+0x3e>
}
341871f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      lptim_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341871fc:	f7ff b81c 	b.w	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34187200:	4b48      	ldr	r3, [pc, #288]	@ (34187324 <RCCEx_GetLPTIMCLKFreq+0x1a0>)
34187202:	4298      	cmp	r0, r3
34187204:	d1dd      	bne.n	341871c2 <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_IC15_IsEnabled() != 0U)
34187206:	f7fb feb3 	bl	34182f70 <LL_RCC_IC15_IsEnabled>
3418720a:	2800      	cmp	r0, #0
3418720c:	d0d9      	beq.n	341871c2 <RCCEx_GetLPTIMCLKFreq+0x3e>
        ic_divider = LL_RCC_IC15_GetDivider();
3418720e:	f7fb feb7 	bl	34182f80 <LL_RCC_IC15_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC15CFGR, RCC_IC15CFGR_IC15SEL));
34187212:	4b45      	ldr	r3, [pc, #276]	@ (34187328 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
34187214:	4604      	mov	r4, r0
34187216:	f8d3 30fc 	ldr.w	r3, [r3, #252]	@ 0xfc
3418721a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC15_GetSource())
3418721e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187222:	d075      	beq.n	34187310 <RCCEx_GetLPTIMCLKFreq+0x18c>
34187224:	d86a      	bhi.n	341872fc <RCCEx_GetLPTIMCLKFreq+0x178>
34187226:	2b00      	cmp	r3, #0
34187228:	d16f      	bne.n	3418730a <RCCEx_GetLPTIMCLKFreq+0x186>
            lptim_frequency = HAL_RCCEx_GetPLL1CLKFreq();
3418722a:	f7fe ff05 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
            lptim_frequency = lptim_frequency / ic_divider;
3418722e:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34187232:	e7c7      	b.n	341871c4 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34187234:	4b3d      	ldr	r3, [pc, #244]	@ (3418732c <RCCEx_GetLPTIMCLKFreq+0x1a8>)
34187236:	4298      	cmp	r0, r3
34187238:	d034      	beq.n	341872a4 <RCCEx_GetLPTIMCLKFreq+0x120>
3418723a:	d824      	bhi.n	34187286 <RCCEx_GetLPTIMCLKFreq+0x102>
3418723c:	f5a3 437c 	sub.w	r3, r3, #64512	@ 0xfc00
34187240:	4298      	cmp	r0, r3
34187242:	d00f      	beq.n	34187264 <RCCEx_GetLPTIMCLKFreq+0xe0>
34187244:	d815      	bhi.n	34187272 <RCCEx_GetLPTIMCLKFreq+0xee>
34187246:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
3418724a:	4298      	cmp	r0, r3
3418724c:	d00a      	beq.n	34187264 <RCCEx_GetLPTIMCLKFreq+0xe0>
3418724e:	d806      	bhi.n	3418725e <RCCEx_GetLPTIMCLKFreq+0xda>
34187250:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34187254:	4298      	cmp	r0, r3
34187256:	d0d6      	beq.n	34187206 <RCCEx_GetLPTIMCLKFreq+0x82>
34187258:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
3418725c:	e7d1      	b.n	34187202 <RCCEx_GetLPTIMCLKFreq+0x7e>
3418725e:	4b34      	ldr	r3, [pc, #208]	@ (34187330 <RCCEx_GetLPTIMCLKFreq+0x1ac>)
34187260:	4298      	cmp	r0, r3
34187262:	d1ae      	bne.n	341871c2 <RCCEx_GetLPTIMCLKFreq+0x3e>
      if (LL_RCC_LSE_IsReady() != 0U)
34187264:	f7fb fe14 	bl	34182e90 <LL_RCC_LSE_IsReady>
34187268:	3800      	subs	r0, #0
3418726a:	bf18      	it	ne
3418726c:	2001      	movne	r0, #1
3418726e:	03c0      	lsls	r0, r0, #15
34187270:	e7a8      	b.n	341871c4 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
34187272:	4b30      	ldr	r3, [pc, #192]	@ (34187334 <RCCEx_GetLPTIMCLKFreq+0x1b0>)
34187274:	4298      	cmp	r0, r3
34187276:	d0f5      	beq.n	34187264 <RCCEx_GetLPTIMCLKFreq+0xe0>
34187278:	f503 4370 	add.w	r3, r3, #61440	@ 0xf000
3418727c:	4298      	cmp	r0, r3
3418727e:	d011      	beq.n	341872a4 <RCCEx_GetLPTIMCLKFreq+0x120>
34187280:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34187284:	e7ec      	b.n	34187260 <RCCEx_GetLPTIMCLKFreq+0xdc>
34187286:	4b2c      	ldr	r3, [pc, #176]	@ (34187338 <RCCEx_GetLPTIMCLKFreq+0x1b4>)
34187288:	4298      	cmp	r0, r3
3418728a:	d015      	beq.n	341872b8 <RCCEx_GetLPTIMCLKFreq+0x134>
3418728c:	d81b      	bhi.n	341872c6 <RCCEx_GetLPTIMCLKFreq+0x142>
3418728e:	f5a3 4374 	sub.w	r3, r3, #62464	@ 0xf400
34187292:	4298      	cmp	r0, r3
34187294:	d006      	beq.n	341872a4 <RCCEx_GetLPTIMCLKFreq+0x120>
34187296:	d80c      	bhi.n	341872b2 <RCCEx_GetLPTIMCLKFreq+0x12e>
34187298:	f420 6080 	bic.w	r0, r0, #1024	@ 0x400
3418729c:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
341872a0:	4298      	cmp	r0, r3
341872a2:	d18e      	bne.n	341871c2 <RCCEx_GetLPTIMCLKFreq+0x3e>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
341872a4:	4b20      	ldr	r3, [pc, #128]	@ (34187328 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
341872a6:	685b      	ldr	r3, [r3, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
341872a8:	07db      	lsls	r3, r3, #31
341872aa:	d58a      	bpl.n	341871c2 <RCCEx_GetLPTIMCLKFreq+0x3e>
        lptim_frequency = LSI_VALUE;
341872ac:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return lptim_frequency;
341872b0:	e788      	b.n	341871c4 <RCCEx_GetLPTIMCLKFreq+0x40>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
341872b2:	4b22      	ldr	r3, [pc, #136]	@ (3418733c <RCCEx_GetLPTIMCLKFreq+0x1b8>)
341872b4:	4298      	cmp	r0, r3
341872b6:	d184      	bne.n	341871c2 <RCCEx_GetLPTIMCLKFreq+0x3e>
      lptim_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
341872b8:	f7fb fd2e 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
341872bc:	4b1a      	ldr	r3, [pc, #104]	@ (34187328 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
341872be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341872c0:	f3c3 6301 	ubfx	r3, r3, #24, #2
341872c4:	e00f      	b.n	341872e6 <RCCEx_GetLPTIMCLKFreq+0x162>
  switch (LL_RCC_GetLPTIMClockSource(LPTIMxSource))
341872c6:	4b1e      	ldr	r3, [pc, #120]	@ (34187340 <RCCEx_GetLPTIMCLKFreq+0x1bc>)
341872c8:	f420 6280 	bic.w	r2, r0, #1024	@ 0x400
341872cc:	429a      	cmp	r2, r3
341872ce:	d0f3      	beq.n	341872b8 <RCCEx_GetLPTIMCLKFreq+0x134>
341872d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
341872d4:	e7ee      	b.n	341872b4 <RCCEx_GetLPTIMCLKFreq+0x130>
      lptim_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341872d6:	f7fb fd1f 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
341872da:	f7fb fe5b 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
341872de:	4b12      	ldr	r3, [pc, #72]	@ (34187328 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
341872e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
341872e2:	f003 0307 	and.w	r3, r3, #7
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
341872e6:	40d8      	lsrs	r0, r3
      break;
341872e8:	e76c      	b.n	341871c4 <RCCEx_GetLPTIMCLKFreq+0x40>
      lptim_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
341872ea:	f7fb fd15 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
341872ee:	f7fb fe51 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
341872f2:	4b0d      	ldr	r3, [pc, #52]	@ (34187328 <RCCEx_GetLPTIMCLKFreq+0x1a4>)
341872f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
341872f6:	f3c3 3302 	ubfx	r3, r3, #12, #3
341872fa:	e7f4      	b.n	341872e6 <RCCEx_GetLPTIMCLKFreq+0x162>
        switch (LL_RCC_IC15_GetSource())
341872fc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187300:	f47f af5f 	bne.w	341871c2 <RCCEx_GetLPTIMCLKFreq+0x3e>
            lptim_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34187304:	f7fe ff58 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
34187308:	e791      	b.n	3418722e <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418730a:	f7fe fed5 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
3418730e:	e78e      	b.n	3418722e <RCCEx_GetLPTIMCLKFreq+0xaa>
            lptim_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34187310:	f7fe ff12 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
34187314:	e78b      	b.n	3418722e <RCCEx_GetLPTIMCLKFreq+0xaa>
34187316:	bf00      	nop
34187318:	0702102c 	.word	0x0702102c
3418731c:	0701102c 	.word	0x0701102c
34187320:	0702082c 	.word	0x0702082c
34187324:	07020c2c 	.word	0x07020c2c
34187328:	56028000 	.word	0x56028000
3418732c:	07040c2c 	.word	0x07040c2c
34187330:	07030c2c 	.word	0x07030c2c
34187334:	0703182c 	.word	0x0703182c
34187338:	07050c2c 	.word	0x07050c2c
3418733c:	0705082c 	.word	0x0705082c
34187340:	0705102c 	.word	0x0705102c

34187344 <HAL_RCCEx_GetPeriphCLKFreq>:
{
34187344:	b538      	push	{r3, r4, r5, lr}
  switch (PeriphClk)
34187346:	f100 4360 	add.w	r3, r0, #3758096384	@ 0xe0000000
3418734a:	430b      	orrs	r3, r1
3418734c:	f000 8447 	beq.w	34187bde <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
34187350:	4bbf      	ldr	r3, [pc, #764]	@ (34187650 <HAL_RCCEx_GetPeriphCLKFreq+0x30c>)
34187352:	4298      	cmp	r0, r3
34187354:	f171 0300 	sbcs.w	r3, r1, #0
34187358:	f080 80e6 	bcs.w	34187528 <HAL_RCCEx_GetPeriphCLKFreq+0x1e4>
3418735c:	f5a0 3380 	sub.w	r3, r0, #65536	@ 0x10000
34187360:	430b      	orrs	r3, r1
34187362:	f000 835b 	beq.w	34187a1c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
34187366:	f1b0 1f01 	cmp.w	r0, #65537	@ 0x10001
3418736a:	f171 0300 	sbcs.w	r3, r1, #0
3418736e:	d26a      	bcs.n	34187446 <HAL_RCCEx_GetPeriphCLKFreq+0x102>
34187370:	f5a0 7300 	sub.w	r3, r0, #512	@ 0x200
34187374:	430b      	orrs	r3, r1
34187376:	f000 82b9 	beq.w	341878ec <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
3418737a:	f240 2301 	movw	r3, #513	@ 0x201
3418737e:	4298      	cmp	r0, r3
34187380:	f171 0300 	sbcs.w	r3, r1, #0
34187384:	d224      	bcs.n	341873d0 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
34187386:	2809      	cmp	r0, #9
34187388:	f171 0300 	sbcs.w	r3, r1, #0
3418738c:	d215      	bcs.n	341873ba <HAL_RCCEx_GetPeriphCLKFreq+0x76>
3418738e:	ea50 0301 	orrs.w	r3, r0, r1
34187392:	d01b      	beq.n	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
34187394:	3801      	subs	r0, #1
34187396:	f141 31ff 	adc.w	r1, r1, #4294967295
3418739a:	2808      	cmp	r0, #8
3418739c:	f171 0100 	sbcs.w	r1, r1, #0
341873a0:	d214      	bcs.n	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
341873a2:	2807      	cmp	r0, #7
341873a4:	d812      	bhi.n	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
341873a6:	e8df f010 	tbh	[pc, r0, lsl #1]
341873aa:	01a6      	.short	0x01a6
341873ac:	0011020f 	.word	0x0011020f
341873b0:	00110285 	.word	0x00110285
341873b4:	00110011 	.word	0x00110011
341873b8:	0235      	.short	0x0235
341873ba:	f1a0 0310 	sub.w	r3, r0, #16
341873be:	430b      	orrs	r3, r1
341873c0:	f000 8242 	beq.w	34187848 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
341873c4:	3820      	subs	r0, #32
341873c6:	4308      	orrs	r0, r1
341873c8:	f000 8268 	beq.w	3418789c <HAL_RCCEx_GetPeriphCLKFreq+0x558>
  uint32_t adf_frequency = RCC_PERIPH_FREQUENCY_NO;
341873cc:	2000      	movs	r0, #0
341873ce:	e219      	b.n	34187804 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
341873d0:	f5a0 5300 	sub.w	r3, r0, #8192	@ 0x2000
341873d4:	430b      	orrs	r3, r1
341873d6:	f000 831d 	beq.w	34187a14 <HAL_RCCEx_GetPeriphCLKFreq+0x6d0>
341873da:	f242 0301 	movw	r3, #8193	@ 0x2001
341873de:	4298      	cmp	r0, r3
341873e0:	f171 0300 	sbcs.w	r3, r1, #0
341873e4:	d224      	bcs.n	34187430 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
341873e6:	f5a0 6300 	sub.w	r3, r0, #2048	@ 0x800
341873ea:	430b      	orrs	r3, r1
341873ec:	f000 82df 	beq.w	341879ae <HAL_RCCEx_GetPeriphCLKFreq+0x66a>
341873f0:	f5a0 5380 	sub.w	r3, r0, #4096	@ 0x1000
341873f4:	430b      	orrs	r3, r1
341873f6:	f000 8308 	beq.w	34187a0a <HAL_RCCEx_GetPeriphCLKFreq+0x6c6>
341873fa:	f5a0 6080 	sub.w	r0, r0, #1024	@ 0x400
341873fe:	4308      	orrs	r0, r1
34187400:	d1e4      	bne.n	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FDCANSEL));
34187402:	4d94      	ldr	r5, [pc, #592]	@ (34187654 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
34187404:	f8d5 314c 	ldr.w	r3, [r5, #332]	@ 0x14c
34187408:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetFDCANClockSource(FDCANxSource))
3418740c:	2b02      	cmp	r3, #2
3418740e:	f000 82c1 	beq.w	34187994 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
34187412:	2b03      	cmp	r3, #3
34187414:	f000 8256 	beq.w	341878c4 <HAL_RCCEx_GetPeriphCLKFreq+0x580>
34187418:	2b01      	cmp	r3, #1
3418741a:	f000 824b 	beq.w	341878b4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      fdcan_frequency = RCCEx_GetPCLK1Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418741e:	f7fb fc7b 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
34187422:	f7fb fdb7 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE1));
34187426:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34187428:	f003 0307 	and.w	r3, r3, #7
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
3418742c:	40d8      	lsrs	r0, r3
3418742e:	e1e9      	b.n	34187804 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (PeriphClk)
34187430:	f5a0 4380 	sub.w	r3, r0, #16384	@ 0x4000
34187434:	430b      	orrs	r3, r1
34187436:	f000 82ef 	beq.w	34187a18 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
3418743a:	f5a0 4000 	sub.w	r0, r0, #32768	@ 0x8000
3418743e:	4308      	orrs	r0, r1
34187440:	d1c4      	bne.n	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C4_CLKSOURCE);
34187442:	4885      	ldr	r0, [pc, #532]	@ (34187658 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
34187444:	e2e2      	b.n	34187a0c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
  switch (PeriphClk)
34187446:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
3418744a:	430b      	orrs	r3, r1
3418744c:	f000 82f6 	beq.w	34187a3c <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
34187450:	4b82      	ldr	r3, [pc, #520]	@ (3418765c <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
34187452:	4298      	cmp	r0, r3
34187454:	f171 0300 	sbcs.w	r3, r1, #0
34187458:	d224      	bcs.n	341874a4 <HAL_RCCEx_GetPeriphCLKFreq+0x160>
3418745a:	f5a0 1380 	sub.w	r3, r0, #1048576	@ 0x100000
3418745e:	430b      	orrs	r3, r1
34187460:	f000 82e8 	beq.w	34187a34 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
34187464:	4b7e      	ldr	r3, [pc, #504]	@ (34187660 <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
34187466:	4298      	cmp	r0, r3
34187468:	f171 0300 	sbcs.w	r3, r1, #0
3418746c:	d20f      	bcs.n	3418748e <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
3418746e:	f5a0 2380 	sub.w	r3, r0, #262144	@ 0x40000
34187472:	430b      	orrs	r3, r1
34187474:	f000 82d7 	beq.w	34187a26 <HAL_RCCEx_GetPeriphCLKFreq+0x6e2>
34187478:	f5a0 2300 	sub.w	r3, r0, #524288	@ 0x80000
3418747c:	430b      	orrs	r3, r1
3418747e:	f000 82d7 	beq.w	34187a30 <HAL_RCCEx_GetPeriphCLKFreq+0x6ec>
34187482:	f5a0 3000 	sub.w	r0, r0, #131072	@ 0x20000
34187486:	4308      	orrs	r0, r1
34187488:	d1a0      	bne.n	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
3418748a:	4876      	ldr	r0, [pc, #472]	@ (34187664 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
3418748c:	e2c7      	b.n	34187a1e <HAL_RCCEx_GetPeriphCLKFreq+0x6da>
  switch (PeriphClk)
3418748e:	f5a0 1300 	sub.w	r3, r0, #2097152	@ 0x200000
34187492:	430b      	orrs	r3, r1
34187494:	f000 82d0 	beq.w	34187a38 <HAL_RCCEx_GetPeriphCLKFreq+0x6f4>
34187498:	f5a0 0080 	sub.w	r0, r0, #4194304	@ 0x400000
3418749c:	4308      	orrs	r0, r1
3418749e:	d195      	bne.n	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM5_CLKSOURCE);
341874a0:	4871      	ldr	r0, [pc, #452]	@ (34187668 <HAL_RCCEx_GetPeriphCLKFreq+0x324>)
341874a2:	e2c1      	b.n	34187a28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  switch (PeriphClk)
341874a4:	f100 437c 	add.w	r3, r0, #4227858432	@ 0xfc000000
341874a8:	430b      	orrs	r3, r1
341874aa:	f000 834d 	beq.w	34187b48 <HAL_RCCEx_GetPeriphCLKFreq+0x804>
341874ae:	4b6f      	ldr	r3, [pc, #444]	@ (3418766c <HAL_RCCEx_GetPeriphCLKFreq+0x328>)
341874b0:	4298      	cmp	r0, r3
341874b2:	f171 0300 	sbcs.w	r3, r1, #0
341874b6:	d228      	bcs.n	3418750a <HAL_RCCEx_GetPeriphCLKFreq+0x1c6>
341874b8:	f100 437f 	add.w	r3, r0, #4278190080	@ 0xff000000
341874bc:	430b      	orrs	r3, r1
341874be:	f000 8302 	beq.w	34187ac6 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
341874c2:	f100 407e 	add.w	r0, r0, #4261412864	@ 0xfe000000
341874c6:	4308      	orrs	r0, r1
341874c8:	d180      	bne.n	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (uint32_t)(READ_BIT(RCC->CCIPR5, RCC_CCIPR5_MDF1SEL));
341874ca:	4d62      	ldr	r5, [pc, #392]	@ (34187654 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
341874cc:	f8d5 3154 	ldr.w	r3, [r5, #340]	@ 0x154
341874d0:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
341874d4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
341874d8:	f000 8195 	beq.w	34187806 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
341874dc:	f200 8319 	bhi.w	34187b12 <HAL_RCCEx_GetPeriphCLKFreq+0x7ce>
341874e0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
341874e4:	f000 831f 	beq.w	34187b26 <HAL_RCCEx_GetPeriphCLKFreq+0x7e2>
341874e8:	f240 81e1 	bls.w	341878ae <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
341874ec:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
341874f0:	f47f af6c 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_IC8_IsEnabled() != 0U)
341874f4:	f7fb fd06 	bl	34182f04 <LL_RCC_IC8_IsEnabled>
341874f8:	2800      	cmp	r0, #0
341874fa:	f43f af67 	beq.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC8_GetDivider();
341874fe:	f7fb fd09 	bl	34182f14 <LL_RCC_IC8_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34187502:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34187506:	4604      	mov	r4, r0
34187508:	e191      	b.n	3418782e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (PeriphClk)
3418750a:	f100 4378 	add.w	r3, r0, #4160749568	@ 0xf8000000
3418750e:	430b      	orrs	r3, r1
34187510:	f000 8344 	beq.w	34187b9c <HAL_RCCEx_GetPeriphCLKFreq+0x858>
34187514:	f100 4070 	add.w	r0, r0, #4026531840	@ 0xf0000000
34187518:	4308      	orrs	r0, r1
3418751a:	f47f af57 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI1_CLKSOURCE);
3418751e:	4854      	ldr	r0, [pc, #336]	@ (34187670 <HAL_RCCEx_GetPeriphCLKFreq+0x32c>)
}
34187520:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34187524:	f7ff bbd6 	b.w	34186cd4 <RCCEx_GetSAICLKFreq>
  switch (PeriphClk)
34187528:	2300      	movs	r3, #0
3418752a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
3418752e:	4291      	cmp	r1, r2
34187530:	bf08      	it	eq
34187532:	4298      	cmpeq	r0, r3
34187534:	f000 836f 	beq.w	34187c16 <HAL_RCCEx_GetPeriphCLKFreq+0x8d2>
34187538:	4283      	cmp	r3, r0
3418753a:	418a      	sbcs	r2, r1
3418753c:	d35f      	bcc.n	341875fe <HAL_RCCEx_GetPeriphCLKFreq+0x2ba>
3418753e:	2210      	movs	r2, #16
34187540:	4291      	cmp	r1, r2
34187542:	bf08      	it	eq
34187544:	4298      	cmpeq	r0, r3
34187546:	f000 8359 	beq.w	34187bfc <HAL_RCCEx_GetPeriphCLKFreq+0x8b8>
3418754a:	4283      	cmp	r3, r0
3418754c:	418a      	sbcs	r2, r1
3418754e:	d329      	bcc.n	341875a4 <HAL_RCCEx_GetPeriphCLKFreq+0x260>
34187550:	2202      	movs	r2, #2
34187552:	4291      	cmp	r1, r2
34187554:	bf08      	it	eq
34187556:	4298      	cmpeq	r0, r3
34187558:	f000 8349 	beq.w	34187bee <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
3418755c:	4283      	cmp	r3, r0
3418755e:	418a      	sbcs	r2, r1
34187560:	d314      	bcc.n	3418758c <HAL_RCCEx_GetPeriphCLKFreq+0x248>
34187562:	4299      	cmp	r1, r3
34187564:	bf08      	it	eq
34187566:	f1b0 4f00 	cmpeq.w	r0, #2147483648	@ 0x80000000
3418756a:	f000 833a 	beq.w	34187be2 <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
3418756e:	2901      	cmp	r1, #1
34187570:	bf08      	it	eq
34187572:	4298      	cmpeq	r0, r3
34187574:	f000 8337 	beq.w	34187be6 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
34187578:	f100 4040 	add.w	r0, r0, #3221225472	@ 0xc0000000
3418757c:	4308      	orrs	r0, r1
3418757e:	f47f af25 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC1_CLKSOURCE);
34187582:	483c      	ldr	r0, [pc, #240]	@ (34187674 <HAL_RCCEx_GetPeriphCLKFreq+0x330>)
}
34187584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34187588:	f7ff bcd8 	b.w	34186f3c <RCCEx_GetSDMMCCLKFreq>
  switch (PeriphClk)
3418758c:	2904      	cmp	r1, #4
3418758e:	bf08      	it	eq
34187590:	4298      	cmpeq	r0, r3
34187592:	f000 8331 	beq.w	34187bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b4>
34187596:	2908      	cmp	r1, #8
34187598:	bf08      	it	eq
3418759a:	4298      	cmpeq	r0, r3
3418759c:	f47f af16 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI3_CLKSOURCE);
341875a0:	4835      	ldr	r0, [pc, #212]	@ (34187678 <HAL_RCCEx_GetPeriphCLKFreq+0x334>)
341875a2:	e325      	b.n	34187bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
341875a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
341875a8:	4291      	cmp	r1, r2
341875aa:	bf08      	it	eq
341875ac:	4298      	cmpeq	r0, r3
341875ae:	f000 832e 	beq.w	34187c0e <HAL_RCCEx_GetPeriphCLKFreq+0x8ca>
341875b2:	4283      	cmp	r3, r0
341875b4:	418a      	sbcs	r2, r1
341875b6:	d311      	bcc.n	341875dc <HAL_RCCEx_GetPeriphCLKFreq+0x298>
341875b8:	2940      	cmp	r1, #64	@ 0x40
341875ba:	bf08      	it	eq
341875bc:	4298      	cmpeq	r0, r3
341875be:	f000 831f 	beq.w	34187c00 <HAL_RCCEx_GetPeriphCLKFreq+0x8bc>
341875c2:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
341875c6:	bf08      	it	eq
341875c8:	4298      	cmpeq	r0, r3
341875ca:	f000 831b 	beq.w	34187c04 <HAL_RCCEx_GetPeriphCLKFreq+0x8c0>
341875ce:	2920      	cmp	r1, #32
341875d0:	bf08      	it	eq
341875d2:	2800      	cmpeq	r0, #0
341875d4:	f47f aefa 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI5_CLKSOURCE);
341875d8:	4828      	ldr	r0, [pc, #160]	@ (3418767c <HAL_RCCEx_GetPeriphCLKFreq+0x338>)
341875da:	e309      	b.n	34187bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
  switch (PeriphClk)
341875dc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
341875e0:	bf08      	it	eq
341875e2:	4298      	cmpeq	r0, r3
341875e4:	f000 8315 	beq.w	34187c12 <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
341875e8:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
341875ec:	bf08      	it	eq
341875ee:	4298      	cmpeq	r0, r3
341875f0:	f47f aeec 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART4_CLKSOURCE);
341875f4:	4822      	ldr	r0, [pc, #136]	@ (34187680 <HAL_RCCEx_GetPeriphCLKFreq+0x33c>)
}
341875f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
341875fa:	f7ff b919 	b.w	34186830 <RCCEx_GetUARTCLKFreq>
  switch (PeriphClk)
341875fe:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
34187602:	4291      	cmp	r1, r2
34187604:	bf08      	it	eq
34187606:	4298      	cmpeq	r0, r3
34187608:	f000 830f 	beq.w	34187c2a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
3418760c:	4283      	cmp	r3, r0
3418760e:	418a      	sbcs	r2, r1
34187610:	d34b      	bcc.n	341876aa <HAL_RCCEx_GetPeriphCLKFreq+0x366>
34187612:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
34187616:	4291      	cmp	r1, r2
34187618:	bf08      	it	eq
3418761a:	4298      	cmpeq	r0, r3
3418761c:	f000 8301 	beq.w	34187c22 <HAL_RCCEx_GetPeriphCLKFreq+0x8de>
34187620:	4283      	cmp	r3, r0
34187622:	418a      	sbcs	r2, r1
34187624:	d330      	bcc.n	34187688 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
34187626:	f5b1 4f80 	cmp.w	r1, #16384	@ 0x4000
3418762a:	bf08      	it	eq
3418762c:	4298      	cmpeq	r0, r3
3418762e:	f000 82f4 	beq.w	34187c1a <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
34187632:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
34187636:	bf08      	it	eq
34187638:	4298      	cmpeq	r0, r3
3418763a:	f000 82f0 	beq.w	34187c1e <HAL_RCCEx_GetPeriphCLKFreq+0x8da>
3418763e:	f5b1 5f00 	cmp.w	r1, #8192	@ 0x2000
34187642:	bf08      	it	eq
34187644:	2800      	cmpeq	r0, #0
34187646:	f47f aec1 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART6_CLKSOURCE);
3418764a:	480e      	ldr	r0, [pc, #56]	@ (34187684 <HAL_RCCEx_GetPeriphCLKFreq+0x340>)
3418764c:	e2db      	b.n	34187c06 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
3418764e:	bf00      	nop
34187650:	20000001 	.word	0x20000001
34187654:	56028000 	.word	0x56028000
34187658:	07000c0c 	.word	0x07000c0c
3418765c:	00800001 	.word	0x00800001
34187660:	00100001 	.word	0x00100001
34187664:	0700140c 	.word	0x0700140c
34187668:	0700182c 	.word	0x0700182c
3418766c:	04000001 	.word	0x04000001
34187670:	07001418 	.word	0x07001418
34187674:	0300001c 	.word	0x0300001c
34187678:	07000c20 	.word	0x07000c20
3418767c:	07001420 	.word	0x07001420
34187680:	07000c30 	.word	0x07000c30
34187684:	07001430 	.word	0x07001430
  switch (PeriphClk)
34187688:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
3418768c:	bf08      	it	eq
3418768e:	4298      	cmpeq	r0, r3
34187690:	f000 82c9 	beq.w	34187c26 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
34187694:	f5b1 2f80 	cmp.w	r1, #262144	@ 0x40000
34187698:	bf08      	it	eq
3418769a:	4298      	cmpeq	r0, r3
3418769c:	f47f ae96 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY1CKREF_CLKSOURCE);
341876a0:	48b4      	ldr	r0, [pc, #720]	@ (34187974 <HAL_RCCEx_GetPeriphCLKFreq+0x630>)
}
341876a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
341876a6:	f7fe bf8d 	b.w	341865c4 <RCCEx_GetOTGPHYCKREFCLKFreq>
  switch (PeriphClk)
341876aa:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
341876ae:	4291      	cmp	r1, r2
341876b0:	bf08      	it	eq
341876b2:	4298      	cmpeq	r0, r3
341876b4:	f000 82c0 	beq.w	34187c38 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
341876b8:	4283      	cmp	r3, r0
341876ba:	418a      	sbcs	r2, r1
341876bc:	d30d      	bcc.n	341876da <HAL_RCCEx_GetPeriphCLKFreq+0x396>
341876be:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
341876c2:	bf08      	it	eq
341876c4:	4298      	cmpeq	r0, r3
341876c6:	f000 82b5 	beq.w	34187c34 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
341876ca:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
341876ce:	bf08      	it	eq
341876d0:	4298      	cmpeq	r0, r3
341876d2:	f47f ae7b 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
341876d6:	48a8      	ldr	r0, [pc, #672]	@ (34187978 <HAL_RCCEx_GetPeriphCLKFreq+0x634>)
341876d8:	e2a8      	b.n	34187c2c <HAL_RCCEx_GetPeriphCLKFreq+0x8e8>
  switch (PeriphClk)
341876da:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
341876de:	bf08      	it	eq
341876e0:	4298      	cmpeq	r0, r3
341876e2:	f000 82ae 	beq.w	34187c42 <HAL_RCCEx_GetPeriphCLKFreq+0x8fe>
341876e6:	f1b1 7f80 	cmp.w	r1, #16777216	@ 0x1000000
341876ea:	bf08      	it	eq
341876ec:	4298      	cmpeq	r0, r3
341876ee:	f47f ae6d 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
341876f2:	48a2      	ldr	r0, [pc, #648]	@ (3418797c <HAL_RCCEx_GetPeriphCLKFreq+0x638>)
341876f4:	e2a1      	b.n	34187c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADC12SEL));
341876f6:	4da2      	ldr	r5, [pc, #648]	@ (34187980 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
341876f8:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
341876fc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34187700:	2b40      	cmp	r3, #64	@ 0x40
34187702:	d053      	beq.n	341877ac <HAL_RCCEx_GetPeriphCLKFreq+0x468>
34187704:	d814      	bhi.n	34187730 <HAL_RCCEx_GetPeriphCLKFreq+0x3ec>
34187706:	2b20      	cmp	r3, #32
34187708:	d025      	beq.n	34187756 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
3418770a:	d805      	bhi.n	34187718 <HAL_RCCEx_GetPeriphCLKFreq+0x3d4>
3418770c:	bb03      	cbnz	r3, 34187750 <HAL_RCCEx_GetPeriphCLKFreq+0x40c>
      adc_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
3418770e:	f7fb fb03 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
34187712:	f7fb fc3f 	bl	34182f94 <RCCEx_GetHCLKFreq>
      break;
34187716:	e002      	b.n	3418771e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34187718:	2b30      	cmp	r3, #48	@ 0x30
3418771a:	d034      	beq.n	34187786 <HAL_RCCEx_GetPeriphCLKFreq+0x442>
  uint32_t adc_frequency = RCC_PERIPH_FREQUENCY_NO;
3418771c:	2000      	movs	r0, #0
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADCPRE) >> RCC_CCIPR1_ADCPRE_Pos);
3418771e:	4b98      	ldr	r3, [pc, #608]	@ (34187980 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34187720:	f8d3 3144 	ldr.w	r3, [r3, #324]	@ 0x144
34187724:	f3c3 2307 	ubfx	r3, r3, #8, #8
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34187728:	3301      	adds	r3, #1
3418772a:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
3418772e:	e069      	b.n	34187804 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
34187730:	2b60      	cmp	r3, #96	@ 0x60
34187732:	d047      	beq.n	341877c4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>
34187734:	2b70      	cmp	r3, #112	@ 0x70
34187736:	d03f      	beq.n	341877b8 <HAL_RCCEx_GetPeriphCLKFreq+0x474>
34187738:	2b50      	cmp	r3, #80	@ 0x50
3418773a:	d1ef      	bne.n	3418771c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
      if (LL_RCC_HSI_IsReady() != 0U)
3418773c:	f7fb fb98 	bl	34182e70 <LL_RCC_HSI_IsReady>
34187740:	2800      	cmp	r0, #0
34187742:	d0eb      	beq.n	3418771c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34187744:	6cab      	ldr	r3, [r5, #72]	@ 0x48
        adc_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34187746:	488f      	ldr	r0, [pc, #572]	@ (34187984 <HAL_RCCEx_GetPeriphCLKFreq+0x640>)
34187748:	f3c3 13c1 	ubfx	r3, r3, #7, #2
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
3418774c:	40d8      	lsrs	r0, r3
      break;
3418774e:	e7e6      	b.n	3418771e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34187750:	f7fe fd72 	bl	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
34187754:	e7e3      	b.n	3418771e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34187756:	f7fb fbc3 	bl	34182ee0 <LL_RCC_IC7_IsEnabled>
3418775a:	2800      	cmp	r0, #0
3418775c:	d0de      	beq.n	3418771c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC7_GetDivider();
3418775e:	f7fb fbc7 	bl	34182ef0 <LL_RCC_IC7_GetDivider>
34187762:	4604      	mov	r4, r0
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34187764:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
  return (uint32_t)(READ_BIT(RCC->IC8CFGR, RCC_IC8CFGR_IC8SEL));
34187768:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC8_GetSource())
3418776c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187770:	d019      	beq.n	341877a6 <HAL_RCCEx_GetPeriphCLKFreq+0x462>
34187772:	d812      	bhi.n	3418779a <HAL_RCCEx_GetPeriphCLKFreq+0x456>
34187774:	b913      	cbnz	r3, 3418777c <HAL_RCCEx_GetPeriphCLKFreq+0x438>
            adc_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34187776:	f7fe fc5f 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
3418777a:	e001      	b.n	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL2CLKFreq();
3418777c:	f7fe fc9c 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
            adc_frequency = adc_frequency / ic_divider;
34187780:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
34187784:	e7cb      	b.n	3418771e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      if (LL_RCC_IC8_IsEnabled() != 0U)
34187786:	f7fb fbbd 	bl	34182f04 <LL_RCC_IC8_IsEnabled>
3418778a:	2800      	cmp	r0, #0
3418778c:	d0c6      	beq.n	3418771c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        ic_divider = LL_RCC_IC8_GetDivider();
3418778e:	f7fb fbc1 	bl	34182f14 <LL_RCC_IC8_GetDivider>
34187792:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
34187796:	4604      	mov	r4, r0
34187798:	e7e6      	b.n	34187768 <HAL_RCCEx_GetPeriphCLKFreq+0x424>
        switch (LL_RCC_IC8_GetSource())
3418779a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
3418779e:	d1bd      	bne.n	3418771c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
            adc_frequency = HAL_RCCEx_GetPLL4CLKFreq();
341877a0:	f7fe fd0a 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
341877a4:	e7ec      	b.n	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
            adc_frequency = HAL_RCCEx_GetPLL3CLKFreq();
341877a6:	f7fe fcc7 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
341877aa:	e7e9      	b.n	34187780 <HAL_RCCEx_GetPeriphCLKFreq+0x43c>
      if (LL_RCC_MSI_IsReady() != 0U)
341877ac:	f7fb fb68 	bl	34182e80 <LL_RCC_MSI_IsReady>
341877b0:	2800      	cmp	r0, #0
341877b2:	d0b3      	beq.n	3418771c <HAL_RCCEx_GetPeriphCLKFreq+0x3d8>
        adc_frequency = MSI_VALUE;
341877b4:	4874      	ldr	r0, [pc, #464]	@ (34187988 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
341877b6:	e7b2      	b.n	3418771e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
      adc_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
341877b8:	f7fb faae 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
341877bc:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
341877be:	f3c3 6301 	ubfx	r3, r3, #24, #2
341877c2:	e7c3      	b.n	3418774c <HAL_RCCEx_GetPeriphCLKFreq+0x408>
  switch (LL_RCC_GetADCClockSource(ADCxSource))
341877c4:	4871      	ldr	r0, [pc, #452]	@ (3418798c <HAL_RCCEx_GetPeriphCLKFreq+0x648>)
341877c6:	e7aa      	b.n	3418771e <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_ADF1SEL));
341877c8:	4d6d      	ldr	r5, [pc, #436]	@ (34187980 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
341877ca:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
341877ce:	f003 0307 	and.w	r3, r3, #7
  switch (LL_RCC_GetADFClockSource(ADFxSource))
341877d2:	3b01      	subs	r3, #1
341877d4:	2b06      	cmp	r3, #6
341877d6:	f200 80f5 	bhi.w	341879c4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
341877da:	a201      	add	r2, pc, #4	@ (adr r2, 341877e0 <HAL_RCCEx_GetPeriphCLKFreq+0x49c>)
341877dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
341877e0:	341878b5 	.word	0x341878b5
341877e4:	34187b27 	.word	0x34187b27
341877e8:	341874f5 	.word	0x341874f5
341877ec:	34187807 	.word	0x34187807
341877f0:	34187875 	.word	0x34187875
341877f4:	34187c47 	.word	0x34187c47
341877f8:	34187b3d 	.word	0x34187b3d
            adf_frequency = HAL_RCCEx_GetPLL2CLKFreq();
341877fc:	f7fe fc5c 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
            adf_frequency = adf_frequency / ic_divider;
34187800:	fbb0 f0f4 	udiv	r0, r0, r4
}
34187804:	bd38      	pop	{r3, r4, r5, pc}
      if (LL_RCC_MSI_IsReady() != 0U)
34187806:	f7fb fb3b 	bl	34182e80 <LL_RCC_MSI_IsReady>
3418780a:	2800      	cmp	r0, #0
3418780c:	f43f adde 	beq.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        adf_frequency = MSI_VALUE;
34187810:	485d      	ldr	r0, [pc, #372]	@ (34187988 <HAL_RCCEx_GetPeriphCLKFreq+0x644>)
34187812:	e7f7      	b.n	34187804 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC18EN) == RCC_DIVENR_IC18EN) ? 1UL : 0UL);
34187814:	4b5a      	ldr	r3, [pc, #360]	@ (34187980 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
34187816:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
3418781a:	0395      	lsls	r5, r2, #14
3418781c:	f57f add6 	bpl.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34187820:	f8d3 0108 	ldr.w	r0, [r3, #264]	@ 0x108
  return (uint32_t)(READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18SEL));
34187824:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
  return ((READ_BIT(RCC->IC18CFGR, RCC_IC18CFGR_IC18INT) >> RCC_IC18CFGR_IC18INT_Pos) + 1UL);
34187828:	f3c0 4007 	ubfx	r0, r0, #16, #8
3418782c:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
3418782e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC20_GetSource())
34187832:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
34187836:	f000 81ae 	beq.w	34187b96 <HAL_RCCEx_GetPeriphCLKFreq+0x852>
3418783a:	f200 81a5 	bhi.w	34187b88 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
3418783e:	2b00      	cmp	r3, #0
34187840:	d1dc      	bne.n	341877fc <HAL_RCCEx_GetPeriphCLKFreq+0x4b8>
            pssi_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34187842:	f7fe fbf9 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
34187846:	e7db      	b.n	34187800 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR1, RCC_CCIPR1_DCMIPPSEL));
34187848:	4d4d      	ldr	r5, [pc, #308]	@ (34187980 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3418784a:	f8d5 3144 	ldr.w	r3, [r5, #324]	@ 0x144
3418784e:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
34187852:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
34187856:	d014      	beq.n	34187882 <HAL_RCCEx_GetPeriphCLKFreq+0x53e>
34187858:	d808      	bhi.n	3418786c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
3418785a:	bb5b      	cbnz	r3, 341878b4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      ltdc_frequency = RCCEx_GetPCLK5Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
3418785c:	f7fb fa5c 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
34187860:	f7fb fb98 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE5));
34187864:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
  return LL_RCC_CALC_PCLK5_FREQ(HCLK_Frequency, LL_RCC_GetAPB5Prescaler());
34187866:	f3c3 4302 	ubfx	r3, r3, #16, #3
3418786a:	e5df      	b.n	3418742c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetDCMIPPClockSource(DCMIPPxSource))
3418786c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34187870:	f47f adac 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34187874:	f7fb fafc 	bl	34182e70 <LL_RCC_HSI_IsReady>
34187878:	2800      	cmp	r0, #0
3418787a:	f43f ada7 	beq.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
3418787e:	6cab      	ldr	r3, [r5, #72]	@ 0x48
34187880:	e136      	b.n	34187af0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC17EN) == RCC_DIVENR_IC17EN) ? 1UL : 0UL);
34187882:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34187886:	03dc      	lsls	r4, r3, #15
34187888:	f57f ada0 	bpl.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
3418788c:	f8d5 0104 	ldr.w	r0, [r5, #260]	@ 0x104
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
34187890:	f8d5 3104 	ldr.w	r3, [r5, #260]	@ 0x104
  return ((READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17INT) >> RCC_IC17CFGR_IC17INT_Pos) + 1UL);
34187894:	f3c0 4007 	ubfx	r0, r0, #16, #8
34187898:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC17CFGR, RCC_IC17CFGR_IC17SEL));
3418789a:	e7c8      	b.n	3418782e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1CLKSEL));
3418789c:	4a38      	ldr	r2, [pc, #224]	@ (34187980 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3418789e:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
341878a2:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
341878a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
341878aa:	d012      	beq.n	341878d2 <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
341878ac:	d806      	bhi.n	341878bc <HAL_RCCEx_GetPeriphCLKFreq+0x578>
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
341878ae:	2b00      	cmp	r3, #0
341878b0:	f000 8088 	beq.w	341879c4 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
}
341878b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
341878b8:	f7fe bcbe 	b.w	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
  switch (LL_RCC_GetETHClockSource(ETH1xSource))
341878bc:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
341878c0:	f47f ad84 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSE_IsReady() != 0U)
341878c4:	f7fb facc 	bl	34182e60 <LL_RCC_HSE_IsReady>
341878c8:	2800      	cmp	r0, #0
341878ca:	f43f ad7f 	beq.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        eth1_frequency = HSE_VALUE;
341878ce:	4830      	ldr	r0, [pc, #192]	@ (34187990 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
341878d0:	e798      	b.n	34187804 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC12EN) == RCC_DIVENR_IC12EN) ? 1UL : 0UL);
341878d2:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
341878d6:	0518      	lsls	r0, r3, #20
341878d8:	f57f ad78 	bpl.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
341878dc:	f8d2 00f0 	ldr.w	r0, [r2, #240]	@ 0xf0
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
341878e0:	f8d2 30f0 	ldr.w	r3, [r2, #240]	@ 0xf0
  return ((READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12INT) >> RCC_IC12CFGR_IC12INT_Pos) + 1UL);
341878e4:	f3c0 4007 	ubfx	r0, r0, #16, #8
341878e8:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC12CFGR, RCC_IC12CFGR_IC12SEL));
341878ea:	e7a0      	b.n	3418782e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPSEL));
341878ec:	4a24      	ldr	r2, [pc, #144]	@ (34187980 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
341878ee:	f8d2 3148 	ldr.w	r3, [r2, #328]	@ 0x148
341878f2:	f003 0303 	and.w	r3, r3, #3
  switch (LL_RCC_GetETHPTPClockSource(ETH1PTPxSource))
341878f6:	2b02      	cmp	r3, #2
341878f8:	d010      	beq.n	3418791c <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
341878fa:	2b03      	cmp	r3, #3
341878fc:	d034      	beq.n	34187968 <HAL_RCCEx_GetPeriphCLKFreq+0x624>
341878fe:	2b01      	cmp	r3, #1
34187900:	d009      	beq.n	34187916 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
      eth1ptp_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
34187902:	f7fb fa09 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
34187906:	f7fb fb45 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (READ_BIT(RCC->CCIPR2, RCC_CCIPR2_ETH1PTPDIV));
3418790a:	4b1d      	ldr	r3, [pc, #116]	@ (34187980 <HAL_RCCEx_GetPeriphCLKFreq+0x63c>)
3418790c:	f8d3 3148 	ldr.w	r3, [r3, #328]	@ 0x148
  return (eth1ptp_frequency / __HAL_RCC_GET_ETH1PTP_DIVIDER());
34187910:	f3c3 1303 	ubfx	r3, r3, #4, #4
34187914:	e708      	b.n	34187728 <HAL_RCCEx_GetPeriphCLKFreq+0x3e4>
      eth1ptp_frequency = RCCEx_GetCLKPCLKFreq(LL_RCC_CLKP_CLKSOURCE);
34187916:	f7fe fc8f 	bl	34186238 <RCCEx_GetCLKPCLKFreq.constprop.0>
      break;
3418791a:	e7f6      	b.n	3418790a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC13EN) == RCC_DIVENR_IC13EN) ? 1UL : 0UL);
3418791c:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34187920:	04d9      	lsls	r1, r3, #19
34187922:	d516      	bpl.n	34187952 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34187924:	f8d2 00f4 	ldr.w	r0, [r2, #244]	@ 0xf4
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34187928:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
3418792c:	f3c0 4007 	ubfx	r0, r0, #16, #8
  return (uint32_t)(READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13SEL));
34187930:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        switch (LL_RCC_IC13_GetSource())
34187934:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
  return ((READ_BIT(RCC->IC13CFGR, RCC_IC13CFGR_IC13INT) >> RCC_IC13CFGR_IC13INT_Pos) + 1UL);
34187938:	f100 0401 	add.w	r4, r0, #1
3418793c:	d00e      	beq.n	3418795c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
3418793e:	d805      	bhi.n	3418794c <HAL_RCCEx_GetPeriphCLKFreq+0x608>
34187940:	b94b      	cbnz	r3, 34187956 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
            eth1ptp_frequency = HAL_RCCEx_GetPLL1CLKFreq();
34187942:	f7fe fb79 	bl	34186038 <HAL_RCCEx_GetPLL1CLKFreq>
            eth1ptp_frequency = eth1ptp_frequency / ic_divider;
34187946:	fbb0 f0f4 	udiv	r0, r0, r4
            break;
3418794a:	e7de      	b.n	3418790a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        switch (LL_RCC_IC13_GetSource())
3418794c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187950:	d007      	beq.n	34187962 <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
        eth1ptp_frequency = HSE_VALUE;
34187952:	2000      	movs	r0, #0
34187954:	e7d9      	b.n	3418790a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
            eth1ptp_frequency = HAL_RCCEx_GetPLL2CLKFreq();
34187956:	f7fe fbaf 	bl	341860b8 <HAL_RCCEx_GetPLL2CLKFreq>
3418795a:	e7f4      	b.n	34187946 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL3CLKFreq();
3418795c:	f7fe fbec 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
34187960:	e7f1      	b.n	34187946 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
            eth1ptp_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34187962:	f7fe fc29 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
34187966:	e7ee      	b.n	34187946 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
      if (LL_RCC_HSE_IsReady() != 0U)
34187968:	f7fb fa7a 	bl	34182e60 <LL_RCC_HSE_IsReady>
3418796c:	2800      	cmp	r0, #0
3418796e:	d0f0      	beq.n	34187952 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        eth1ptp_frequency = HSE_VALUE;
34187970:	4807      	ldr	r0, [pc, #28]	@ (34187990 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>)
34187972:	e7ca      	b.n	3418790a <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
34187974:	01001014 	.word	0x01001014
34187978:	03001414 	.word	0x03001414
3418797c:	03000814 	.word	0x03000814
34187980:	56028000 	.word	0x56028000
34187984:	03d09000 	.word	0x03d09000
34187988:	003d0900 	.word	0x003d0900
3418798c:	00bb8000 	.word	0x00bb8000
34187990:	016e3600 	.word	0x016e3600
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC19EN) == RCC_DIVENR_IC19EN) ? 1UL : 0UL);
34187994:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34187998:	035b      	lsls	r3, r3, #13
3418799a:	f57f ad17 	bpl.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
3418799e:	f8d5 010c 	ldr.w	r0, [r5, #268]	@ 0x10c
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
341879a2:	f8d5 310c 	ldr.w	r3, [r5, #268]	@ 0x10c
  return ((READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19INT) >> RCC_IC19CFGR_IC19INT_Pos) + 1UL);
341879a6:	f3c0 4007 	ubfx	r0, r0, #16, #8
341879aa:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC19CFGR, RCC_IC19CFGR_IC19SEL));
341879ac:	e73f      	b.n	3418782e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR3, RCC_CCIPR3_FMCSEL));
341879ae:	4ba7      	ldr	r3, [pc, #668]	@ (34187c4c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
341879b0:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
341879b4:	f002 0230 	and.w	r2, r2, #48	@ 0x30
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
341879b8:	2a20      	cmp	r2, #32
341879ba:	d019      	beq.n	341879f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
341879bc:	d808      	bhi.n	341879d0 <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
341879be:	2a00      	cmp	r2, #0
341879c0:	f47f af78 	bne.w	341878b4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
341879c4:	f7fb f9a8 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
}
341879c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      adf_frequency = RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq());
341879cc:	f7fb bae2 	b.w	34182f94 <RCCEx_GetHCLKFreq>
  switch (LL_RCC_GetFMCClockSource(FMCxSource))
341879d0:	2a30      	cmp	r2, #48	@ 0x30
341879d2:	f47f acfb 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC4EN) == RCC_DIVENR_IC4EN) ? 1UL : 0UL);
341879d6:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
341879da:	0714      	lsls	r4, r2, #28
341879dc:	f57f acf6 	bpl.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
341879e0:	f8d3 00d0 	ldr.w	r0, [r3, #208]	@ 0xd0
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
341879e4:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
  return ((READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4INT) >> RCC_IC4CFGR_IC4INT_Pos) + 1UL);
341879e8:	f3c0 4007 	ubfx	r0, r0, #16, #8
341879ec:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC4CFGR, RCC_IC4CFGR_IC4SEL));
341879ee:	e71e      	b.n	3418782e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC3EN) == RCC_DIVENR_IC3EN) ? 1UL : 0UL);
341879f0:	f8d3 2240 	ldr.w	r2, [r3, #576]	@ 0x240
341879f4:	0755      	lsls	r5, r2, #29
341879f6:	f57f ace9 	bpl.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
341879fa:	f8d3 00cc 	ldr.w	r0, [r3, #204]	@ 0xcc
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
341879fe:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
  return ((READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3INT) >> RCC_IC3CFGR_IC3INT_Pos) + 1UL);
34187a02:	f3c0 4007 	ubfx	r0, r0, #16, #8
34187a06:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC3CFGR, RCC_IC3CFGR_IC3SEL));
34187a08:	e711      	b.n	3418782e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C1_CLKSOURCE);
34187a0a:	4891      	ldr	r0, [pc, #580]	@ (34187c50 <HAL_RCCEx_GetPeriphCLKFreq+0x90c>)
}
34187a0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C2_CLKSOURCE);
34187a10:	f7ff bafa 	b.w	34187008 <RCCEx_GetI2CCLKFreq>
34187a14:	488f      	ldr	r0, [pc, #572]	@ (34187c54 <HAL_RCCEx_GetPeriphCLKFreq+0x910>)
34187a16:	e7f9      	b.n	34187a0c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI2CCLKFreq(LL_RCC_I2C3_CLKSOURCE);
34187a18:	488f      	ldr	r0, [pc, #572]	@ (34187c58 <HAL_RCCEx_GetPeriphCLKFreq+0x914>)
34187a1a:	e7f7      	b.n	34187a0c <HAL_RCCEx_GetPeriphCLKFreq+0x6c8>
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C1_CLKSOURCE);
34187a1c:	488f      	ldr	r0, [pc, #572]	@ (34187c5c <HAL_RCCEx_GetPeriphCLKFreq+0x918>)
}
34187a1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetI3CCLKFreq(LL_RCC_I3C2_CLKSOURCE);
34187a22:	f7ff b9ff 	b.w	34186e24 <RCCEx_GetI3CCLKFreq>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM1_CLKSOURCE);
34187a26:	488e      	ldr	r0, [pc, #568]	@ (34187c60 <HAL_RCCEx_GetPeriphCLKFreq+0x91c>)
}
34187a28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM2_CLKSOURCE);
34187a2c:	f7ff bbaa 	b.w	34187184 <RCCEx_GetLPTIMCLKFreq>
34187a30:	488c      	ldr	r0, [pc, #560]	@ (34187c64 <HAL_RCCEx_GetPeriphCLKFreq+0x920>)
34187a32:	e7f9      	b.n	34187a28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM3_CLKSOURCE);
34187a34:	488c      	ldr	r0, [pc, #560]	@ (34187c68 <HAL_RCCEx_GetPeriphCLKFreq+0x924>)
34187a36:	e7f7      	b.n	34187a28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
      frequency = RCCEx_GetLPTIMCLKFreq(LL_RCC_LPTIM4_CLKSOURCE);
34187a38:	488c      	ldr	r0, [pc, #560]	@ (34187c6c <HAL_RCCEx_GetPeriphCLKFreq+0x928>)
34187a3a:	e7f5      	b.n	34187a28 <HAL_RCCEx_GetPeriphCLKFreq+0x6e4>
  return (uint32_t)(READ_BIT(RCC->CCIPR14, RCC_CCIPR14_LPUART1SEL));
34187a3c:	4a83      	ldr	r2, [pc, #524]	@ (34187c4c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34187a3e:	f8d2 3178 	ldr.w	r3, [r2, #376]	@ 0x178
34187a42:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34187a46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34187a4a:	d031      	beq.n	34187ab0 <HAL_RCCEx_GetPeriphCLKFreq+0x76c>
34187a4c:	d812      	bhi.n	34187a74 <HAL_RCCEx_GetPeriphCLKFreq+0x730>
34187a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34187a52:	f43f af2f 	beq.w	341878b4 <HAL_RCCEx_GetPeriphCLKFreq+0x570>
34187a56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34187a5a:	d01d      	beq.n	34187a98 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
34187a5c:	2b00      	cmp	r3, #0
34187a5e:	f47f acb5 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      lpuart_frequency = RCCEx_GetPCLK4Freq(RCCEx_GetHCLKFreq(HAL_RCC_GetSysClockFreq()));
34187a62:	f7fb f959 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
34187a66:	f7fb fa95 	bl	34182f94 <RCCEx_GetHCLKFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PPRE4));
34187a6a:	4b78      	ldr	r3, [pc, #480]	@ (34187c4c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34187a6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
  return LL_RCC_CALC_PCLK4_FREQ(HCLK_Frequency, LL_RCC_GetAPB4Prescaler());
34187a6e:	f3c3 3302 	ubfx	r3, r3, #12, #3
34187a72:	e4db      	b.n	3418742c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  switch (LL_RCC_GetLPUARTClockSource(LPUARTxSource))
34187a74:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
34187a78:	f43f aec5 	beq.w	34187806 <HAL_RCCEx_GetPeriphCLKFreq+0x4c2>
34187a7c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34187a80:	d02f      	beq.n	34187ae2 <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
34187a82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
  switch (LL_RCC_GetRTCClockSource())
34187a86:	f47f aca1 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_LSE_IsReady() != 0U)
34187a8a:	f7fb fa01 	bl	34182e90 <LL_RCC_LSE_IsReady>
34187a8e:	3800      	subs	r0, #0
34187a90:	bf18      	it	ne
34187a92:	2001      	movne	r0, #1
34187a94:	03c0      	lsls	r0, r0, #15
34187a96:	e6b5      	b.n	34187804 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_IC9_IsEnabled() != 0U)
34187a98:	f7fb fa46 	bl	34182f28 <LL_RCC_IC9_IsEnabled>
34187a9c:	2800      	cmp	r0, #0
34187a9e:	f43f ac95 	beq.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC9_GetDivider();
34187aa2:	f7fb fa49 	bl	34182f38 <LL_RCC_IC9_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC9CFGR, RCC_IC9CFGR_IC9SEL));
34187aa6:	4b69      	ldr	r3, [pc, #420]	@ (34187c4c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34187aa8:	4604      	mov	r4, r0
34187aaa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
34187aae:	e6be      	b.n	3418782e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      if (LL_RCC_IC14_IsEnabled() != 0U)
34187ab0:	f7fb fa4c 	bl	34182f4c <LL_RCC_IC14_IsEnabled>
34187ab4:	2800      	cmp	r0, #0
34187ab6:	f43f ac89 	beq.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC14_GetDivider();
34187aba:	f7fb fa4f 	bl	34182f5c <LL_RCC_IC14_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC14CFGR, RCC_IC14CFGR_IC14SEL));
34187abe:	f8d2 30f8 	ldr.w	r3, [r2, #248]	@ 0xf8
34187ac2:	4604      	mov	r4, r0
34187ac4:	e6b3      	b.n	3418782e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  return (uint32_t)(READ_BIT(RCC->CCIPR4, RCC_CCIPR4_LTDCSEL));
34187ac6:	4d61      	ldr	r5, [pc, #388]	@ (34187c4c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34187ac8:	f8d5 3150 	ldr.w	r3, [r5, #336]	@ 0x150
34187acc:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
  switch (LL_RCC_GetLTDCClockSource(LTDCxSource))
34187ad0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
34187ad4:	d010      	beq.n	34187af8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
34187ad6:	f67f aec0 	bls.w	3418785a <HAL_RCCEx_GetPeriphCLKFreq+0x516>
34187ada:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
34187ade:	f47f ac75 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34187ae2:	f7fb f9c5 	bl	34182e70 <LL_RCC_HSI_IsReady>
34187ae6:	2800      	cmp	r0, #0
34187ae8:	f43f ac70 	beq.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34187aec:	4b57      	ldr	r3, [pc, #348]	@ (34187c4c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34187aee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
        pssi_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_HSICFGR_HSIDIV_Pos);
34187af0:	485f      	ldr	r0, [pc, #380]	@ (34187c70 <HAL_RCCEx_GetPeriphCLKFreq+0x92c>)
34187af2:	f3c3 13c1 	ubfx	r3, r3, #7, #2
34187af6:	e499      	b.n	3418742c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC16EN) == RCC_DIVENR_IC16EN) ? 1UL : 0UL);
34187af8:	f8d5 3240 	ldr.w	r3, [r5, #576]	@ 0x240
34187afc:	0418      	lsls	r0, r3, #16
34187afe:	f57f ac65 	bpl.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34187b02:	f8d5 0100 	ldr.w	r0, [r5, #256]	@ 0x100
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34187b06:	f8d5 3100 	ldr.w	r3, [r5, #256]	@ 0x100
  return ((READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16INT) >> RCC_IC16CFGR_IC16INT_Pos) + 1UL);
34187b0a:	f3c0 4007 	ubfx	r0, r0, #16, #8
34187b0e:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC16CFGR, RCC_IC16CFGR_IC16SEL));
34187b10:	e68d      	b.n	3418782e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34187b12:	f5b3 2fc0 	cmp.w	r3, #393216	@ 0x60000
34187b16:	f000 8096 	beq.w	34187c46 <HAL_RCCEx_GetPeriphCLKFreq+0x902>
34187b1a:	f5b3 2fe0 	cmp.w	r3, #458752	@ 0x70000
34187b1e:	d00d      	beq.n	34187b3c <HAL_RCCEx_GetPeriphCLKFreq+0x7f8>
34187b20:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
34187b24:	e6a4      	b.n	34187870 <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
      if (LL_RCC_IC7_IsEnabled() != 0U)
34187b26:	f7fb f9db 	bl	34182ee0 <LL_RCC_IC7_IsEnabled>
34187b2a:	2800      	cmp	r0, #0
34187b2c:	f43f ac4e 	beq.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        ic_divider = LL_RCC_IC7_GetDivider();
34187b30:	f7fb f9de 	bl	34182ef0 <LL_RCC_IC7_GetDivider>
  return (uint32_t)(READ_BIT(RCC->IC7CFGR, RCC_IC7CFGR_IC7SEL));
34187b34:	f8d5 30dc 	ldr.w	r3, [r5, #220]	@ 0xdc
34187b38:	4604      	mov	r4, r0
34187b3a:	e678      	b.n	3418782e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
      adf_frequency = HAL_RCC_GetSysClockFreq() / (1UL << LL_RCC_GetTIMPrescaler());
34187b3c:	f7fb f8ec 	bl	34182d18 <HAL_RCC_GetSysClockFreq>
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_TIMPRE) >> RCC_CFGR2_TIMPRE_Pos);
34187b40:	6a6b      	ldr	r3, [r5, #36]	@ 0x24
34187b42:	f3c3 6301 	ubfx	r3, r3, #24, #2
34187b46:	e471      	b.n	3418742c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_PSSISEL));
34187b48:	4a40      	ldr	r2, [pc, #256]	@ (34187c4c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34187b4a:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34187b4e:	f003 0330 	and.w	r3, r3, #48	@ 0x30
  switch (LL_RCC_GetPSSIClockSource(PSSIxSource))
34187b52:	2b20      	cmp	r3, #32
34187b54:	d00b      	beq.n	34187b6e <HAL_RCCEx_GetPeriphCLKFreq+0x82a>
34187b56:	f67f aeaa 	bls.w	341878ae <HAL_RCCEx_GetPeriphCLKFreq+0x56a>
34187b5a:	2b30      	cmp	r3, #48	@ 0x30
34187b5c:	f47f ac36 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
      if (LL_RCC_HSI_IsReady() != 0U)
34187b60:	f7fb f986 	bl	34182e70 <LL_RCC_HSI_IsReady>
34187b64:	2800      	cmp	r0, #0
34187b66:	f43f ac31 	beq.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return (READ_BIT(RCC->HSICFGR, RCC_HSICFGR_HSIDIV));
34187b6a:	6c93      	ldr	r3, [r2, #72]	@ 0x48
34187b6c:	e7c0      	b.n	34187af0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>
  return ((READ_BIT(RCC->DIVENR, RCC_DIVENR_IC20EN) == RCC_DIVENR_IC20EN) ? 1UL : 0UL);
34187b6e:	f8d2 3240 	ldr.w	r3, [r2, #576]	@ 0x240
34187b72:	0319      	lsls	r1, r3, #12
34187b74:	f57f ac2a 	bpl.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34187b78:	f8d2 0110 	ldr.w	r0, [r2, #272]	@ 0x110
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34187b7c:	f8d2 3110 	ldr.w	r3, [r2, #272]	@ 0x110
  return ((READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20INT) >> RCC_IC20CFGR_IC20INT_Pos) + 1UL);
34187b80:	f3c0 4007 	ubfx	r0, r0, #16, #8
34187b84:	1c44      	adds	r4, r0, #1
  return (uint32_t)(READ_BIT(RCC->IC20CFGR, RCC_IC20CFGR_IC20SEL));
34187b86:	e652      	b.n	3418782e <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        switch (LL_RCC_IC20_GetSource())
34187b88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
34187b8c:	f47f ac1e 	bne.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
            pssi_frequency = HAL_RCCEx_GetPLL4CLKFreq();
34187b90:	f7fe fb12 	bl	341861b8 <HAL_RCCEx_GetPLL4CLKFreq>
34187b94:	e634      	b.n	34187800 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
            pssi_frequency = HAL_RCCEx_GetPLL3CLKFreq();
34187b96:	f7fe facf 	bl	34186138 <HAL_RCCEx_GetPLL3CLKFreq>
34187b9a:	e631      	b.n	34187800 <HAL_RCCEx_GetPeriphCLKFreq+0x4bc>
  return (uint32_t)(READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCSEL));
34187b9c:	4a2b      	ldr	r2, [pc, #172]	@ (34187c4c <HAL_RCCEx_GetPeriphCLKFreq+0x908>)
34187b9e:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
34187ba2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
  switch (LL_RCC_GetRTCClockSource())
34187ba6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
34187baa:	d005      	beq.n	34187bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x874>
34187bac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
34187bb0:	d009      	beq.n	34187bc6 <HAL_RCCEx_GetPeriphCLKFreq+0x882>
34187bb2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
34187bb6:	e766      	b.n	34187a86 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
  return ((READ_BIT(RCC->SR, RCC_SR_LSIRDY) != 0UL) ? 1UL : 0UL);
34187bb8:	6853      	ldr	r3, [r2, #4]
      if (LL_RCC_LSI_IsReady() != 0U)
34187bba:	07db      	lsls	r3, r3, #31
34187bbc:	f57f ac06 	bpl.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        rtc_frequency = LSI_VALUE;
34187bc0:	f44f 40fa 	mov.w	r0, #32000	@ 0x7d00
  return frequency;
34187bc4:	e61e      	b.n	34187804 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
      if (LL_RCC_HSE_IsReady() != 0U)
34187bc6:	f7fb f94b 	bl	34182e60 <LL_RCC_HSE_IsReady>
34187bca:	2800      	cmp	r0, #0
34187bcc:	f43f abfe 	beq.w	341873cc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34187bd0:	f8d2 315c 	ldr.w	r3, [r2, #348]	@ 0x15c
        rtc_frequency = HSE_VALUE / prescaler;
34187bd4:	4827      	ldr	r0, [pc, #156]	@ (34187c74 <HAL_RCCEx_GetPeriphCLKFreq+0x930>)
        uint32_t prescaler = (READ_BIT(RCC->CCIPR7, RCC_CCIPR7_RTCPRE) >> RCC_CCIPR7_RTCPRE_Pos) + 1U;
34187bd6:	f3c3 3305 	ubfx	r3, r3, #12, #6
34187bda:	3301      	adds	r3, #1
34187bdc:	e5a5      	b.n	3418772a <HAL_RCCEx_GetPeriphCLKFreq+0x3e6>
      frequency = RCCEx_GetSAICLKFreq(LL_RCC_SAI2_CLKSOURCE);
34187bde:	4826      	ldr	r0, [pc, #152]	@ (34187c78 <HAL_RCCEx_GetPeriphCLKFreq+0x934>)
34187be0:	e49e      	b.n	34187520 <HAL_RCCEx_GetPeriphCLKFreq+0x1dc>
      frequency = RCCEx_GetSDMMCCLKFreq(LL_RCC_SDMMC2_CLKSOURCE);
34187be2:	4826      	ldr	r0, [pc, #152]	@ (34187c7c <HAL_RCCEx_GetPeriphCLKFreq+0x938>)
34187be4:	e4ce      	b.n	34187584 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
}
34187be6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPDIFRXCLKFreq(LL_RCC_SPDIFRX1_CLKSOURCE);
34187bea:	f7fe bbab 	b.w	34186344 <RCCEx_GetSPDIFRXCLKFreq.constprop.0>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI1_CLKSOURCE);
34187bee:	4824      	ldr	r0, [pc, #144]	@ (34187c80 <HAL_RCCEx_GetPeriphCLKFreq+0x93c>)
}
34187bf0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34187bf4:	f7fe bf30 	b.w	34186a58 <RCCEx_GetSPICLKFreq>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI2_CLKSOURCE);
34187bf8:	4822      	ldr	r0, [pc, #136]	@ (34187c84 <HAL_RCCEx_GetPeriphCLKFreq+0x940>)
34187bfa:	e7f9      	b.n	34187bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI4_CLKSOURCE);
34187bfc:	4822      	ldr	r0, [pc, #136]	@ (34187c88 <HAL_RCCEx_GetPeriphCLKFreq+0x944>)
34187bfe:	e7f7      	b.n	34187bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetSPICLKFreq(LL_RCC_SPI6_CLKSOURCE);
34187c00:	4822      	ldr	r0, [pc, #136]	@ (34187c8c <HAL_RCCEx_GetPeriphCLKFreq+0x948>)
34187c02:	e7f5      	b.n	34187bf0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART1_CLKSOURCE);
34187c04:	4822      	ldr	r0, [pc, #136]	@ (34187c90 <HAL_RCCEx_GetPeriphCLKFreq+0x94c>)
}
34187c06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34187c0a:	f7fe bd0d 	b.w	34186628 <RCCEx_GetUSARTCLKFreq>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART2_CLKSOURCE);
34187c0e:	4821      	ldr	r0, [pc, #132]	@ (34187c94 <HAL_RCCEx_GetPeriphCLKFreq+0x950>)
34187c10:	e7f9      	b.n	34187c06 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART3_CLKSOURCE);
34187c12:	4821      	ldr	r0, [pc, #132]	@ (34187c98 <HAL_RCCEx_GetPeriphCLKFreq+0x954>)
34187c14:	e7f7      	b.n	34187c06 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART5_CLKSOURCE);
34187c16:	4821      	ldr	r0, [pc, #132]	@ (34187c9c <HAL_RCCEx_GetPeriphCLKFreq+0x958>)
34187c18:	e4ed      	b.n	341875f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART7_CLKSOURCE);
34187c1a:	4821      	ldr	r0, [pc, #132]	@ (34187ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>)
34187c1c:	e4eb      	b.n	341875f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART8_CLKSOURCE);
34187c1e:	4821      	ldr	r0, [pc, #132]	@ (34187ca4 <HAL_RCCEx_GetPeriphCLKFreq+0x960>)
34187c20:	e4e9      	b.n	341875f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUARTCLKFreq(LL_RCC_UART9_CLKSOURCE);
34187c22:	4821      	ldr	r0, [pc, #132]	@ (34187ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x964>)
34187c24:	e4e7      	b.n	341875f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2b2>
      frequency = RCCEx_GetUSARTCLKFreq(LL_RCC_USART10_CLKSOURCE);
34187c26:	4821      	ldr	r0, [pc, #132]	@ (34187cac <HAL_RCCEx_GetPeriphCLKFreq+0x968>)
34187c28:	e7ed      	b.n	34187c06 <HAL_RCCEx_GetPeriphCLKFreq+0x8c2>
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY1_CLKSOURCE);
34187c2a:	4821      	ldr	r0, [pc, #132]	@ (34187cb0 <HAL_RCCEx_GetPeriphCLKFreq+0x96c>)
}
34187c2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetOTGPHYCLKFreq(LL_RCC_OTGPHY2_CLKSOURCE);
34187c30:	f7fe bc62 	b.w	341864f8 <RCCEx_GetOTGPHYCLKFreq>
      frequency = RCCEx_GetOTGPHYCKREFCLKFreq(LL_RCC_OTGPHY2CKREF_CLKSOURCE);
34187c34:	481f      	ldr	r0, [pc, #124]	@ (34187cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x970>)
34187c36:	e534      	b.n	341876a2 <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI1_CLKSOURCE);
34187c38:	481f      	ldr	r0, [pc, #124]	@ (34187cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x974>)
}
34187c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI3_CLKSOURCE);
34187c3e:	f7fe bbe1 	b.w	34186404 <RCCEx_GetXSPICLKFreq>
      frequency = RCCEx_GetXSPICLKFreq(LL_RCC_XSPI2_CLKSOURCE);
34187c42:	481e      	ldr	r0, [pc, #120]	@ (34187cbc <HAL_RCCEx_GetPeriphCLKFreq+0x978>)
34187c44:	e7f9      	b.n	34187c3a <HAL_RCCEx_GetPeriphCLKFreq+0x8f6>
  switch (LL_RCC_GetMDFClockSource(MDFxSource))
34187c46:	481e      	ldr	r0, [pc, #120]	@ (34187cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x97c>)
34187c48:	e5dc      	b.n	34187804 <HAL_RCCEx_GetPeriphCLKFreq+0x4c0>
34187c4a:	bf00      	nop
34187c4c:	56028000 	.word	0x56028000
34187c50:	0700000c 	.word	0x0700000c
34187c54:	0700040c 	.word	0x0700040c
34187c58:	0700080c 	.word	0x0700080c
34187c5c:	0700100c 	.word	0x0700100c
34187c60:	0700082c 	.word	0x0700082c
34187c64:	07000c2c 	.word	0x07000c2c
34187c68:	0700102c 	.word	0x0700102c
34187c6c:	0700142c 	.word	0x0700142c
34187c70:	03d09000 	.word	0x03d09000
34187c74:	016e3600 	.word	0x016e3600
34187c78:	07001818 	.word	0x07001818
34187c7c:	0300041c 	.word	0x0300041c
34187c80:	07000420 	.word	0x07000420
34187c84:	07000820 	.word	0x07000820
34187c88:	07001020 	.word	0x07001020
34187c8c:	07001820 	.word	0x07001820
34187c90:	07000030 	.word	0x07000030
34187c94:	07000430 	.word	0x07000430
34187c98:	07000830 	.word	0x07000830
34187c9c:	07001030 	.word	0x07001030
34187ca0:	07001830 	.word	0x07001830
34187ca4:	07001c30 	.word	0x07001c30
34187ca8:	07000034 	.word	0x07000034
34187cac:	07000434 	.word	0x07000434
34187cb0:	03000c14 	.word	0x03000c14
34187cb4:	01001814 	.word	0x01001814
34187cb8:	03000014 	.word	0x03000014
34187cbc:	03000414 	.word	0x03000414
34187cc0:	00bb8000 	.word	0x00bb8000

34187cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
34187cc4:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
34187cc6:	6802      	ldr	r2, [r0, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34187cc8:	e852 3f00 	ldrex	r3, [r2]
34187ccc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34187cd0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
34187cd4:	6802      	ldr	r2, [r0, #0]
34187cd6:	2900      	cmp	r1, #0
34187cd8:	d1f5      	bne.n	34187cc6 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
34187cda:	4c0f      	ldr	r4, [pc, #60]	@ (34187d18 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34187cdc:	f102 0308 	add.w	r3, r2, #8
34187ce0:	e853 3f00 	ldrex	r3, [r3]
34187ce4:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34187ce6:	f102 0c08 	add.w	ip, r2, #8
34187cea:	e84c 3100 	strex	r1, r3, [ip]
34187cee:	2900      	cmp	r1, #0
34187cf0:	d1f4      	bne.n	34187cdc <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
34187cf2:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
34187cf4:	2b01      	cmp	r3, #1
34187cf6:	d107      	bne.n	34187d08 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34187cf8:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
34187cfc:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34187d00:	e842 3100 	strex	r1, r3, [r2]
34187d04:	2900      	cmp	r1, #0
34187d06:	d1f7      	bne.n	34187cf8 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
34187d08:	2320      	movs	r3, #32
34187d0a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
34187d0e:	2300      	movs	r3, #0
34187d10:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
34187d12:	6743      	str	r3, [r0, #116]	@ 0x74
}
34187d14:	bd10      	pop	{r4, pc}
34187d16:	bf00      	nop
34187d18:	effffffe 	.word	0xeffffffe

34187d1c <UART_SetConfig>:
{
34187d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
34187d1e:	6842      	ldr	r2, [r0, #4]
34187d20:	4bb0      	ldr	r3, [pc, #704]	@ (34187fe4 <UART_SetConfig+0x2c8>)
{
34187d22:	4604      	mov	r4, r0
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
34187d24:	429a      	cmp	r2, r3
34187d26:	d904      	bls.n	34187d32 <UART_SetConfig+0x16>
34187d28:	f44f 6145 	mov.w	r1, #3152	@ 0xc50
34187d2c:	48ae      	ldr	r0, [pc, #696]	@ (34187fe8 <UART_SetConfig+0x2cc>)
34187d2e:	f7f9 fa0f 	bl	34181150 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
34187d32:	68a3      	ldr	r3, [r4, #8]
34187d34:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
34187d38:	d007      	beq.n	34187d4a <UART_SetConfig+0x2e>
34187d3a:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
34187d3e:	d004      	beq.n	34187d4a <UART_SetConfig+0x2e>
34187d40:	f640 4151 	movw	r1, #3153	@ 0xc51
34187d44:	48a8      	ldr	r0, [pc, #672]	@ (34187fe8 <UART_SetConfig+0x2cc>)
34187d46:	f7f9 fa03 	bl	34181150 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
34187d4a:	6822      	ldr	r2, [r4, #0]
34187d4c:	49a7      	ldr	r1, [pc, #668]	@ (34187fec <UART_SetConfig+0x2d0>)
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
34187d4e:	68e3      	ldr	r3, [r4, #12]
  if (UART_INSTANCE_LOWPOWER(huart))
34187d50:	428a      	cmp	r2, r1
34187d52:	d004      	beq.n	34187d5e <UART_SetConfig+0x42>
34187d54:	f101 4170 	add.w	r1, r1, #4026531840	@ 0xf0000000
34187d58:	428a      	cmp	r2, r1
34187d5a:	f040 80af 	bne.w	34187ebc <UART_SetConfig+0x1a0>
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
34187d5e:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
34187d62:	d004      	beq.n	34187d6e <UART_SetConfig+0x52>
34187d64:	f640 4154 	movw	r1, #3156	@ 0xc54
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
34187d68:	489f      	ldr	r0, [pc, #636]	@ (34187fe8 <UART_SetConfig+0x2cc>)
34187d6a:	f7f9 f9f1 	bl	34181150 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
34187d6e:	6923      	ldr	r3, [r4, #16]
34187d70:	f433 6280 	bics.w	r2, r3, #1024	@ 0x400
34187d74:	d007      	beq.n	34187d86 <UART_SetConfig+0x6a>
34187d76:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
34187d7a:	d004      	beq.n	34187d86 <UART_SetConfig+0x6a>
34187d7c:	f640 415c 	movw	r1, #3164	@ 0xc5c
34187d80:	4899      	ldr	r0, [pc, #612]	@ (34187fe8 <UART_SetConfig+0x2cc>)
34187d82:	f7f9 f9e5 	bl	34181150 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
34187d86:	6963      	ldr	r3, [r4, #20]
34187d88:	f033 020c 	bics.w	r2, r3, #12
34187d8c:	d100      	bne.n	34187d90 <UART_SetConfig+0x74>
34187d8e:	b923      	cbnz	r3, 34187d9a <UART_SetConfig+0x7e>
34187d90:	f640 415d 	movw	r1, #3165	@ 0xc5d
34187d94:	4894      	ldr	r0, [pc, #592]	@ (34187fe8 <UART_SetConfig+0x2cc>)
34187d96:	f7f9 f9db 	bl	34181150 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
34187d9a:	69a3      	ldr	r3, [r4, #24]
34187d9c:	f433 7340 	bics.w	r3, r3, #768	@ 0x300
34187da0:	d004      	beq.n	34187dac <UART_SetConfig+0x90>
34187da2:	f640 415e 	movw	r1, #3166	@ 0xc5e
34187da6:	4890      	ldr	r0, [pc, #576]	@ (34187fe8 <UART_SetConfig+0x2cc>)
34187da8:	f7f9 f9d2 	bl	34181150 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
34187dac:	69e3      	ldr	r3, [r4, #28]
34187dae:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
34187db2:	d004      	beq.n	34187dbe <UART_SetConfig+0xa2>
34187db4:	f640 415f 	movw	r1, #3167	@ 0xc5f
34187db8:	488b      	ldr	r0, [pc, #556]	@ (34187fe8 <UART_SetConfig+0x2cc>)
34187dba:	f7f9 f9c9 	bl	34181150 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
34187dbe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
34187dc0:	2b0b      	cmp	r3, #11
34187dc2:	d904      	bls.n	34187dce <UART_SetConfig+0xb2>
34187dc4:	f44f 6146 	mov.w	r1, #3168	@ 0xc60
34187dc8:	4887      	ldr	r0, [pc, #540]	@ (34187fe8 <UART_SetConfig+0x2cc>)
34187dca:	f7f9 f9c1 	bl	34181150 <assert_failed>
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
34187dce:	6921      	ldr	r1, [r4, #16]
34187dd0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34187dd2:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
34187dd4:	430a      	orrs	r2, r1
34187dd6:	6961      	ldr	r1, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34187dd8:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
34187dda:	69e5      	ldr	r5, [r4, #28]
34187ddc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34187dde:	4984      	ldr	r1, [pc, #528]	@ (34187ff0 <UART_SetConfig+0x2d4>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
34187de0:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
34187de2:	4001      	ands	r1, r0
34187de4:	430a      	orrs	r2, r1
34187de6:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
34187de8:	685a      	ldr	r2, [r3, #4]
34187dea:	68e1      	ldr	r1, [r4, #12]
34187dec:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
34187df0:	430a      	orrs	r2, r1
34187df2:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
34187df4:	4a7d      	ldr	r2, [pc, #500]	@ (34187fec <UART_SetConfig+0x2d0>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
34187df6:	69a1      	ldr	r1, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
34187df8:	4293      	cmp	r3, r2
34187dfa:	d005      	beq.n	34187e08 <UART_SetConfig+0xec>
34187dfc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34187e00:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
34187e02:	bf1c      	itt	ne
34187e04:	6a22      	ldrne	r2, [r4, #32]
34187e06:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
34187e08:	689a      	ldr	r2, [r3, #8]
34187e0a:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
34187e0e:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
34187e12:	430a      	orrs	r2, r1
34187e14:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
34187e16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
34187e18:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34187e1a:	f022 020f 	bic.w	r2, r2, #15
34187e1e:	430a      	orrs	r2, r1
34187e20:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
34187e22:	4a74      	ldr	r2, [pc, #464]	@ (34187ff4 <UART_SetConfig+0x2d8>)
34187e24:	4293      	cmp	r3, r2
34187e26:	d07a      	beq.n	34187f1e <UART_SetConfig+0x202>
34187e28:	4a73      	ldr	r2, [pc, #460]	@ (34187ff8 <UART_SetConfig+0x2dc>)
34187e2a:	4293      	cmp	r3, r2
34187e2c:	f000 809c 	beq.w	34187f68 <UART_SetConfig+0x24c>
34187e30:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
34187e34:	4293      	cmp	r3, r2
34187e36:	f000 809b 	beq.w	34187f70 <UART_SetConfig+0x254>
34187e3a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
34187e3e:	4293      	cmp	r3, r2
34187e40:	f000 809a 	beq.w	34187f78 <UART_SetConfig+0x25c>
34187e44:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
34187e48:	f000 809a 	beq.w	34187f80 <UART_SetConfig+0x264>
34187e4c:	4a6b      	ldr	r2, [pc, #428]	@ (34187ffc <UART_SetConfig+0x2e0>)
34187e4e:	4293      	cmp	r3, r2
34187e50:	f000 809a 	beq.w	34187f88 <UART_SetConfig+0x26c>
34187e54:	4a6a      	ldr	r2, [pc, #424]	@ (34188000 <UART_SetConfig+0x2e4>)
34187e56:	4293      	cmp	r3, r2
34187e58:	f000 809a 	beq.w	34187f90 <UART_SetConfig+0x274>
34187e5c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
34187e60:	4293      	cmp	r3, r2
34187e62:	f000 8099 	beq.w	34187f98 <UART_SetConfig+0x27c>
34187e66:	4a67      	ldr	r2, [pc, #412]	@ (34188004 <UART_SetConfig+0x2e8>)
34187e68:	4293      	cmp	r3, r2
34187e6a:	f000 8099 	beq.w	34187fa0 <UART_SetConfig+0x284>
34187e6e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
34187e72:	4293      	cmp	r3, r2
34187e74:	f000 8098 	beq.w	34187fa8 <UART_SetConfig+0x28c>
34187e78:	4a5c      	ldr	r2, [pc, #368]	@ (34187fec <UART_SetConfig+0x2d0>)
34187e7a:	4293      	cmp	r3, r2
34187e7c:	d02e      	beq.n	34187edc <UART_SetConfig+0x1c0>
  if (UART_INSTANCE_LOWPOWER(huart))
34187e7e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34187e82:	4293      	cmp	r3, r2
34187e84:	f04f 0000 	mov.w	r0, #0
34187e88:	f04f 0100 	mov.w	r1, #0
34187e8c:	d14a      	bne.n	34187f24 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34187e8e:	f7ff fa59 	bl	34187344 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
34187e92:	2800      	cmp	r0, #0
34187e94:	d041      	beq.n	34187f1a <UART_SetConfig+0x1fe>
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
34187e96:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34187e98:	4a5b      	ldr	r2, [pc, #364]	@ (34188008 <UART_SetConfig+0x2ec>)
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34187e9a:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
34187e9c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34187ea0:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
34187ea4:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34187ea8:	4299      	cmp	r1, r3
34187eaa:	d91b      	bls.n	34187ee4 <UART_SetConfig+0x1c8>
        ret = HAL_ERROR;
34187eac:	2001      	movs	r0, #1
  huart->NbRxDataToProcess = 1;
34187eae:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
34187eb2:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
34187eb4:	2300      	movs	r3, #0
  huart->TxISR = NULL;
34187eb6:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
34187eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
34187ebc:	f433 5340 	bics.w	r3, r3, #12288	@ 0x3000
34187ec0:	d004      	beq.n	34187ecc <UART_SetConfig+0x1b0>
34187ec2:	f640 4158 	movw	r1, #3160	@ 0xc58
34187ec6:	4848      	ldr	r0, [pc, #288]	@ (34187fe8 <UART_SetConfig+0x2cc>)
34187ec8:	f7f9 f942 	bl	34181150 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
34187ecc:	6a23      	ldr	r3, [r4, #32]
34187ece:	f433 6300 	bics.w	r3, r3, #2048	@ 0x800
34187ed2:	f43f af4c 	beq.w	34187d6e <UART_SetConfig+0x52>
34187ed6:	f640 4159 	movw	r1, #3161	@ 0xc59
34187eda:	e745      	b.n	34187d68 <UART_SetConfig+0x4c>
  UART_GETCLOCKSOURCE(huart, clocksource);
34187edc:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
34187ee0:	2100      	movs	r1, #0
34187ee2:	e7d4      	b.n	34187e8e <UART_SetConfig+0x172>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
34187ee4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
34187ee8:	d8e0      	bhi.n	34187eac <UART_SetConfig+0x190>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34187eea:	2300      	movs	r3, #0
34187eec:	4619      	mov	r1, r3
34187eee:	f7f8 fe13 	bl	34180b18 <__aeabi_uldivmod>
34187ef2:	4606      	mov	r6, r0
34187ef4:	460f      	mov	r7, r1
34187ef6:	ea56 270f 	orrs.w	r7, r6, pc, lsl #8
34187efa:	0868      	lsrs	r0, r5, #1
34187efc:	1830      	adds	r0, r6, r0
34187efe:	462a      	mov	r2, r5
34187f00:	f04f 0300 	mov.w	r3, #0
34187f04:	f147 0100 	adc.w	r1, r7, #0
34187f08:	f7f8 fe06 	bl	34180b18 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
34187f0c:	4b3f      	ldr	r3, [pc, #252]	@ (3418800c <UART_SetConfig+0x2f0>)
34187f0e:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
34187f12:	429a      	cmp	r2, r3
34187f14:	d8ca      	bhi.n	34187eac <UART_SetConfig+0x190>
          huart->Instance->BRR = usartdiv;
34187f16:	6823      	ldr	r3, [r4, #0]
34187f18:	60d8      	str	r0, [r3, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
34187f1a:	2000      	movs	r0, #0
34187f1c:	e7c7      	b.n	34187eae <UART_SetConfig+0x192>
  UART_GETCLOCKSOURCE(huart, clocksource);
34187f1e:	2000      	movs	r0, #0
34187f20:	f44f 7180 	mov.w	r1, #256	@ 0x100
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
34187f24:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
34187f28:	d142      	bne.n	34187fb0 <UART_SetConfig+0x294>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34187f2a:	f7ff fa0b 	bl	34187344 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
34187f2e:	2800      	cmp	r0, #0
34187f30:	d0f3      	beq.n	34187f1a <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34187f32:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34187f34:	4b34      	ldr	r3, [pc, #208]	@ (34188008 <UART_SetConfig+0x2ec>)
34187f36:	6862      	ldr	r2, [r4, #4]
34187f38:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
34187f3c:	fbb0 f0f3 	udiv	r0, r0, r3
34187f40:	0853      	lsrs	r3, r2, #1
34187f42:	eb03 0340 	add.w	r3, r3, r0, lsl #1
34187f46:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
34187f4a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
34187f4e:	f1a3 0110 	sub.w	r1, r3, #16
34187f52:	4291      	cmp	r1, r2
34187f54:	d8aa      	bhi.n	34187eac <UART_SetConfig+0x190>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
34187f56:	f023 020f 	bic.w	r2, r3, #15
        huart->Instance->BRR = brrtemp;
34187f5a:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
34187f5c:	b292      	uxth	r2, r2
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
34187f5e:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
34187f62:	4313      	orrs	r3, r2
34187f64:	60cb      	str	r3, [r1, #12]
34187f66:	e7d8      	b.n	34187f1a <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
34187f68:	2000      	movs	r0, #0
34187f6a:	f44f 7100 	mov.w	r1, #512	@ 0x200
34187f6e:	e7d9      	b.n	34187f24 <UART_SetConfig+0x208>
34187f70:	2000      	movs	r0, #0
34187f72:	f44f 6180 	mov.w	r1, #1024	@ 0x400
34187f76:	e7d5      	b.n	34187f24 <UART_SetConfig+0x208>
34187f78:	2000      	movs	r0, #0
34187f7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
34187f7e:	e7d1      	b.n	34187f24 <UART_SetConfig+0x208>
34187f80:	2000      	movs	r0, #0
34187f82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
34187f86:	e7cd      	b.n	34187f24 <UART_SetConfig+0x208>
34187f88:	2000      	movs	r0, #0
34187f8a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
34187f8e:	e7c9      	b.n	34187f24 <UART_SetConfig+0x208>
34187f90:	2000      	movs	r0, #0
34187f92:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
34187f96:	e7c5      	b.n	34187f24 <UART_SetConfig+0x208>
34187f98:	2000      	movs	r0, #0
34187f9a:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
34187f9e:	e7c1      	b.n	34187f24 <UART_SetConfig+0x208>
34187fa0:	2000      	movs	r0, #0
34187fa2:	f44f 3180 	mov.w	r1, #65536	@ 0x10000
34187fa6:	e7bd      	b.n	34187f24 <UART_SetConfig+0x208>
34187fa8:	2000      	movs	r0, #0
34187faa:	f44f 3100 	mov.w	r1, #131072	@ 0x20000
34187fae:	e7b9      	b.n	34187f24 <UART_SetConfig+0x208>
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
34187fb0:	f7ff f9c8 	bl	34187344 <HAL_RCCEx_GetPeriphCLKFreq>
    if (pclk != 0U)
34187fb4:	2800      	cmp	r0, #0
34187fb6:	d0b0      	beq.n	34187f1a <UART_SetConfig+0x1fe>
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
34187fb8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
34187fba:	4b13      	ldr	r3, [pc, #76]	@ (34188008 <UART_SetConfig+0x2ec>)
34187fbc:	6862      	ldr	r2, [r4, #4]
34187fbe:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
34187fc2:	fbb0 f3f3 	udiv	r3, r0, r3
34187fc6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
34187fca:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
34187fce:	f64f 72ef 	movw	r2, #65519	@ 0xffef
34187fd2:	f1a3 0110 	sub.w	r1, r3, #16
34187fd6:	4291      	cmp	r1, r2
34187fd8:	f63f af68 	bhi.w	34187eac <UART_SetConfig+0x190>
        huart->Instance->BRR = (uint16_t)usartdiv;
34187fdc:	6822      	ldr	r2, [r4, #0]
34187fde:	60d3      	str	r3, [r2, #12]
34187fe0:	e79b      	b.n	34187f1a <UART_SetConfig+0x1fe>
34187fe2:	bf00      	nop
34187fe4:	00bebc1f 	.word	0x00bebc1f
34187fe8:	3418cf86 	.word	0x3418cf86
34187fec:	56000c00 	.word	0x56000c00
34187ff0:	cfff69f3 	.word	0xcfff69f3
34187ff4:	52001000 	.word	0x52001000
34187ff8:	50004400 	.word	0x50004400
34187ffc:	52001400 	.word	0x52001400
34188000:	50007800 	.word	0x50007800
34188004:	52001800 	.word	0x52001800
34188008:	3418d1ca 	.word	0x3418d1ca
3418800c:	000ffcff 	.word	0x000ffcff

34188010 <UART_AdvFeatureConfig>:
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
34188010:	6a83      	ldr	r3, [r0, #40]	@ 0x28
{
34188012:	b510      	push	{r4, lr}
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
34188014:	2bff      	cmp	r3, #255	@ 0xff
{
34188016:	4604      	mov	r4, r0
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
34188018:	d904      	bls.n	34188024 <UART_AdvFeatureConfig+0x14>
3418801a:	f640 41e5 	movw	r1, #3301	@ 0xce5
3418801e:	487e      	ldr	r0, [pc, #504]	@ (34188218 <UART_AdvFeatureConfig+0x208>)
34188020:	f7f9 f896 	bl	34181150 <assert_failed>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
34188024:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34188026:	0718      	lsls	r0, r3, #28
34188028:	d50f      	bpl.n	3418804a <UART_AdvFeatureConfig+0x3a>
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
3418802a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
3418802c:	f433 4300 	bics.w	r3, r3, #32768	@ 0x8000
34188030:	d004      	beq.n	3418803c <UART_AdvFeatureConfig+0x2c>
34188032:	f640 41ea 	movw	r1, #3306	@ 0xcea
34188036:	4878      	ldr	r0, [pc, #480]	@ (34188218 <UART_AdvFeatureConfig+0x208>)
34188038:	f7f9 f88a 	bl	34181150 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
3418803c:	6822      	ldr	r2, [r4, #0]
3418803e:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
34188040:	6853      	ldr	r3, [r2, #4]
34188042:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
34188046:	430b      	orrs	r3, r1
34188048:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
3418804a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3418804c:	07d9      	lsls	r1, r3, #31
3418804e:	d50f      	bpl.n	34188070 <UART_AdvFeatureConfig+0x60>
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
34188050:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
34188052:	f433 3300 	bics.w	r3, r3, #131072	@ 0x20000
34188056:	d004      	beq.n	34188062 <UART_AdvFeatureConfig+0x52>
34188058:	f640 41f1 	movw	r1, #3313	@ 0xcf1
3418805c:	486e      	ldr	r0, [pc, #440]	@ (34188218 <UART_AdvFeatureConfig+0x208>)
3418805e:	f7f9 f877 	bl	34181150 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
34188062:	6822      	ldr	r2, [r4, #0]
34188064:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
34188066:	6853      	ldr	r3, [r2, #4]
34188068:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
3418806c:	430b      	orrs	r3, r1
3418806e:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
34188070:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34188072:	079a      	lsls	r2, r3, #30
34188074:	d50f      	bpl.n	34188096 <UART_AdvFeatureConfig+0x86>
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
34188076:	6b23      	ldr	r3, [r4, #48]	@ 0x30
34188078:	f433 3380 	bics.w	r3, r3, #65536	@ 0x10000
3418807c:	d004      	beq.n	34188088 <UART_AdvFeatureConfig+0x78>
3418807e:	f640 41f8 	movw	r1, #3320	@ 0xcf8
34188082:	4865      	ldr	r0, [pc, #404]	@ (34188218 <UART_AdvFeatureConfig+0x208>)
34188084:	f7f9 f864 	bl	34181150 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
34188088:	6822      	ldr	r2, [r4, #0]
3418808a:	6b21      	ldr	r1, [r4, #48]	@ 0x30
3418808c:	6853      	ldr	r3, [r2, #4]
3418808e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
34188092:	430b      	orrs	r3, r1
34188094:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
34188096:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34188098:	075b      	lsls	r3, r3, #29
3418809a:	d50f      	bpl.n	341880bc <UART_AdvFeatureConfig+0xac>
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
3418809c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3418809e:	f433 2380 	bics.w	r3, r3, #262144	@ 0x40000
341880a2:	d004      	beq.n	341880ae <UART_AdvFeatureConfig+0x9e>
341880a4:	f640 41ff 	movw	r1, #3327	@ 0xcff
341880a8:	485b      	ldr	r0, [pc, #364]	@ (34188218 <UART_AdvFeatureConfig+0x208>)
341880aa:	f7f9 f851 	bl	34181150 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
341880ae:	6822      	ldr	r2, [r4, #0]
341880b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
341880b2:	6853      	ldr	r3, [r2, #4]
341880b4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
341880b8:	430b      	orrs	r3, r1
341880ba:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
341880bc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
341880be:	06d8      	lsls	r0, r3, #27
341880c0:	d50f      	bpl.n	341880e2 <UART_AdvFeatureConfig+0xd2>
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
341880c2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
341880c4:	f433 5380 	bics.w	r3, r3, #4096	@ 0x1000
341880c8:	d004      	beq.n	341880d4 <UART_AdvFeatureConfig+0xc4>
341880ca:	f640 5106 	movw	r1, #3334	@ 0xd06
341880ce:	4852      	ldr	r0, [pc, #328]	@ (34188218 <UART_AdvFeatureConfig+0x208>)
341880d0:	f7f9 f83e 	bl	34181150 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
341880d4:	6822      	ldr	r2, [r4, #0]
341880d6:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
341880d8:	6893      	ldr	r3, [r2, #8]
341880da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
341880de:	430b      	orrs	r3, r1
341880e0:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
341880e2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
341880e4:	0699      	lsls	r1, r3, #26
341880e6:	d50f      	bpl.n	34188108 <UART_AdvFeatureConfig+0xf8>
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
341880e8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
341880ea:	f433 5300 	bics.w	r3, r3, #8192	@ 0x2000
341880ee:	d004      	beq.n	341880fa <UART_AdvFeatureConfig+0xea>
341880f0:	f640 510e 	movw	r1, #3342	@ 0xd0e
341880f4:	4848      	ldr	r0, [pc, #288]	@ (34188218 <UART_AdvFeatureConfig+0x208>)
341880f6:	f7f9 f82b 	bl	34181150 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
341880fa:	6822      	ldr	r2, [r4, #0]
341880fc:	6c21      	ldr	r1, [r4, #64]	@ 0x40
341880fe:	6893      	ldr	r3, [r2, #8]
34188100:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
34188104:	430b      	orrs	r3, r1
34188106:	6093      	str	r3, [r2, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
34188108:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
3418810a:	065a      	lsls	r2, r3, #25
3418810c:	d56f      	bpl.n	341881ee <UART_AdvFeatureConfig+0x1de>
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
3418810e:	6823      	ldr	r3, [r4, #0]
34188110:	4a42      	ldr	r2, [pc, #264]	@ (3418821c <UART_AdvFeatureConfig+0x20c>)
34188112:	4293      	cmp	r3, r2
34188114:	d047      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
34188116:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418811a:	4293      	cmp	r3, r2
3418811c:	d043      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
3418811e:	4a40      	ldr	r2, [pc, #256]	@ (34188220 <UART_AdvFeatureConfig+0x210>)
34188120:	4293      	cmp	r3, r2
34188122:	d040      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
34188124:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188128:	4293      	cmp	r3, r2
3418812a:	d03c      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
3418812c:	4a3d      	ldr	r2, [pc, #244]	@ (34188224 <UART_AdvFeatureConfig+0x214>)
3418812e:	4293      	cmp	r3, r2
34188130:	d039      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
34188132:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188136:	4293      	cmp	r3, r2
34188138:	d035      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
3418813a:	4a3b      	ldr	r2, [pc, #236]	@ (34188228 <UART_AdvFeatureConfig+0x218>)
3418813c:	4293      	cmp	r3, r2
3418813e:	d032      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
34188140:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188144:	4293      	cmp	r3, r2
34188146:	d02e      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
34188148:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
3418814c:	d02b      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
3418814e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
34188152:	4293      	cmp	r3, r2
34188154:	d027      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
34188156:	4a35      	ldr	r2, [pc, #212]	@ (3418822c <UART_AdvFeatureConfig+0x21c>)
34188158:	4293      	cmp	r3, r2
3418815a:	d024      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
3418815c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188160:	4293      	cmp	r3, r2
34188162:	d020      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
34188164:	4a32      	ldr	r2, [pc, #200]	@ (34188230 <UART_AdvFeatureConfig+0x220>)
34188166:	4293      	cmp	r3, r2
34188168:	d01d      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
3418816a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418816e:	4293      	cmp	r3, r2
34188170:	d019      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
34188172:	4a30      	ldr	r2, [pc, #192]	@ (34188234 <UART_AdvFeatureConfig+0x224>)
34188174:	4293      	cmp	r3, r2
34188176:	d016      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
34188178:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418817c:	4293      	cmp	r3, r2
3418817e:	d012      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
34188180:	4a2d      	ldr	r2, [pc, #180]	@ (34188238 <UART_AdvFeatureConfig+0x228>)
34188182:	4293      	cmp	r3, r2
34188184:	d00f      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
34188186:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418818a:	4293      	cmp	r3, r2
3418818c:	d00b      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
3418818e:	4a2b      	ldr	r2, [pc, #172]	@ (3418823c <UART_AdvFeatureConfig+0x22c>)
34188190:	4293      	cmp	r3, r2
34188192:	d008      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
34188194:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188198:	4293      	cmp	r3, r2
3418819a:	d004      	beq.n	341881a6 <UART_AdvFeatureConfig+0x196>
3418819c:	f640 5116 	movw	r1, #3350	@ 0xd16
341881a0:	481d      	ldr	r0, [pc, #116]	@ (34188218 <UART_AdvFeatureConfig+0x208>)
341881a2:	f7f8 ffd5 	bl	34181150 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
341881a6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
341881a8:	f433 1380 	bics.w	r3, r3, #1048576	@ 0x100000
341881ac:	d004      	beq.n	341881b8 <UART_AdvFeatureConfig+0x1a8>
341881ae:	f640 5117 	movw	r1, #3351	@ 0xd17
341881b2:	4819      	ldr	r0, [pc, #100]	@ (34188218 <UART_AdvFeatureConfig+0x208>)
341881b4:	f7f8 ffcc 	bl	34181150 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
341881b8:	6821      	ldr	r1, [r4, #0]
341881ba:	6c62      	ldr	r2, [r4, #68]	@ 0x44
341881bc:	684b      	ldr	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
341881be:	f5b2 1f80 	cmp.w	r2, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
341881c2:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
341881c6:	ea43 0302 	orr.w	r3, r3, r2
341881ca:	604b      	str	r3, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
341881cc:	d10f      	bne.n	341881ee <UART_AdvFeatureConfig+0x1de>
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
341881ce:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
341881d0:	f433 03c0 	bics.w	r3, r3, #6291456	@ 0x600000
341881d4:	d004      	beq.n	341881e0 <UART_AdvFeatureConfig+0x1d0>
341881d6:	f640 511c 	movw	r1, #3356	@ 0xd1c
341881da:	480f      	ldr	r0, [pc, #60]	@ (34188218 <UART_AdvFeatureConfig+0x208>)
341881dc:	f7f8 ffb8 	bl	34181150 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
341881e0:	6822      	ldr	r2, [r4, #0]
341881e2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
341881e4:	6853      	ldr	r3, [r2, #4]
341881e6:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
341881ea:	430b      	orrs	r3, r1
341881ec:	6053      	str	r3, [r2, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
341881ee:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
341881f0:	061b      	lsls	r3, r3, #24
341881f2:	d50f      	bpl.n	34188214 <UART_AdvFeatureConfig+0x204>
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
341881f4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
341881f6:	f433 2300 	bics.w	r3, r3, #524288	@ 0x80000
341881fa:	d004      	beq.n	34188206 <UART_AdvFeatureConfig+0x1f6>
341881fc:	f640 5124 	movw	r1, #3364	@ 0xd24
34188200:	4805      	ldr	r0, [pc, #20]	@ (34188218 <UART_AdvFeatureConfig+0x208>)
34188202:	f7f8 ffa5 	bl	34181150 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
34188206:	6822      	ldr	r2, [r4, #0]
34188208:	6ce1      	ldr	r1, [r4, #76]	@ 0x4c
3418820a:	6853      	ldr	r3, [r2, #4]
3418820c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
34188210:	430b      	orrs	r3, r1
34188212:	6053      	str	r3, [r2, #4]
}
34188214:	bd10      	pop	{r4, pc}
34188216:	bf00      	nop
34188218:	3418cf86 	.word	0x3418cf86
3418821c:	52001000 	.word	0x52001000
34188220:	50004400 	.word	0x50004400
34188224:	50004800 	.word	0x50004800
34188228:	50004c00 	.word	0x50004c00
3418822c:	52001400 	.word	0x52001400
34188230:	50007800 	.word	0x50007800
34188234:	50007c00 	.word	0x50007c00
34188238:	52001800 	.word	0x52001800
3418823c:	52001c00 	.word	0x52001c00

34188240 <UART_WaitOnFlagUntilTimeout>:
{
34188240:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
34188244:	4604      	mov	r4, r0
34188246:	460d      	mov	r5, r1
34188248:	4617      	mov	r7, r2
3418824a:	4698      	mov	r8, r3
3418824c:	f8dd 9020 	ldr.w	r9, [sp, #32]
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
34188250:	6822      	ldr	r2, [r4, #0]
34188252:	69d3      	ldr	r3, [r2, #28]
34188254:	ea35 0303 	bics.w	r3, r5, r3
34188258:	bf0c      	ite	eq
3418825a:	2301      	moveq	r3, #1
3418825c:	2300      	movne	r3, #0
3418825e:	42bb      	cmp	r3, r7
34188260:	d001      	beq.n	34188266 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
34188262:	2000      	movs	r0, #0
34188264:	e022      	b.n	341882ac <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
34188266:	f1b9 3fff 	cmp.w	r9, #4294967295
3418826a:	d0f2      	beq.n	34188252 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
3418826c:	f7f9 fa14 	bl	34181698 <HAL_GetTick>
34188270:	eba0 0008 	sub.w	r0, r0, r8
34188274:	4548      	cmp	r0, r9
34188276:	d829      	bhi.n	341882cc <UART_WaitOnFlagUntilTimeout+0x8c>
34188278:	f1b9 0f00 	cmp.w	r9, #0
3418827c:	d026      	beq.n	341882cc <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
3418827e:	6821      	ldr	r1, [r4, #0]
34188280:	680b      	ldr	r3, [r1, #0]
34188282:	075a      	lsls	r2, r3, #29
34188284:	d5e4      	bpl.n	34188250 <UART_WaitOnFlagUntilTimeout+0x10>
34188286:	2d80      	cmp	r5, #128	@ 0x80
34188288:	d0e2      	beq.n	34188250 <UART_WaitOnFlagUntilTimeout+0x10>
3418828a:	2d40      	cmp	r5, #64	@ 0x40
3418828c:	d0e0      	beq.n	34188250 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
3418828e:	69ce      	ldr	r6, [r1, #28]
34188290:	f016 0608 	ands.w	r6, r6, #8
34188294:	d00c      	beq.n	341882b0 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
34188296:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
34188298:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
3418829a:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
3418829c:	f7ff fd12 	bl	34187cc4 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
341882a0:	2300      	movs	r3, #0
          return HAL_ERROR;
341882a2:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
341882a4:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
341882a8:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
341882ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
341882b0:	69cb      	ldr	r3, [r1, #28]
341882b2:	051b      	lsls	r3, r3, #20
341882b4:	d5cc      	bpl.n	34188250 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
341882b6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
341882ba:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
341882bc:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
341882be:	f7ff fd01 	bl	34187cc4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
341882c2:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
341882c4:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
341882c8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
341882cc:	2003      	movs	r0, #3
341882ce:	e7ed      	b.n	341882ac <UART_WaitOnFlagUntilTimeout+0x6c>

341882d0 <UART_CheckIdleState>:
{
341882d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
341882d2:	2600      	movs	r6, #0
{
341882d4:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
341882d6:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
341882da:	f7f9 f9dd 	bl	34181698 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
341882de:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
341882e0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
341882e2:	681b      	ldr	r3, [r3, #0]
341882e4:	071a      	lsls	r2, r3, #28
341882e6:	d51c      	bpl.n	34188322 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
341882e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
341882ec:	4632      	mov	r2, r6
341882ee:	9300      	str	r3, [sp, #0]
341882f0:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
341882f4:	4603      	mov	r3, r0
341882f6:	4620      	mov	r0, r4
341882f8:	f7ff ffa2 	bl	34188240 <UART_WaitOnFlagUntilTimeout>
341882fc:	b188      	cbz	r0, 34188322 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
341882fe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34188300:	e852 3f00 	ldrex	r3, [r2]
34188304:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34188308:	e842 3100 	strex	r1, r3, [r2]
3418830c:	2900      	cmp	r1, #0
3418830e:	d1f6      	bne.n	341882fe <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
34188310:	2320      	movs	r3, #32
34188312:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
34188316:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
34188318:	2300      	movs	r3, #0
3418831a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
3418831e:	b002      	add	sp, #8
34188320:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
34188322:	6823      	ldr	r3, [r4, #0]
34188324:	681b      	ldr	r3, [r3, #0]
34188326:	075b      	lsls	r3, r3, #29
34188328:	d524      	bpl.n	34188374 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
3418832a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
3418832e:	2200      	movs	r2, #0
34188330:	9300      	str	r3, [sp, #0]
34188332:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
34188336:	462b      	mov	r3, r5
34188338:	4620      	mov	r0, r4
3418833a:	f7ff ff81 	bl	34188240 <UART_WaitOnFlagUntilTimeout>
3418833e:	b1c8      	cbz	r0, 34188374 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
34188340:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34188342:	e852 3f00 	ldrex	r3, [r2]
34188346:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
3418834a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
3418834e:	6822      	ldr	r2, [r4, #0]
34188350:	2900      	cmp	r1, #0
34188352:	d1f5      	bne.n	34188340 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
34188354:	f102 0308 	add.w	r3, r2, #8
34188358:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
3418835c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
34188360:	f102 0008 	add.w	r0, r2, #8
34188364:	e840 3100 	strex	r1, r3, [r0]
34188368:	2900      	cmp	r1, #0
3418836a:	d1f3      	bne.n	34188354 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
3418836c:	2320      	movs	r3, #32
3418836e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
34188372:	e7d0      	b.n	34188316 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
34188374:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
34188376:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
34188378:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
3418837c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
34188380:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
34188382:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
34188384:	e7c8      	b.n	34188318 <UART_CheckIdleState+0x48>
	...

34188388 <HAL_UART_Init>:
{
34188388:	b510      	push	{r4, lr}
  if (huart == NULL)
3418838a:	4604      	mov	r4, r0
3418838c:	2800      	cmp	r0, #0
3418838e:	f000 80d0 	beq.w	34188532 <HAL_UART_Init+0x1aa>
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
34188392:	6981      	ldr	r1, [r0, #24]
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
34188394:	6803      	ldr	r3, [r0, #0]
34188396:	4a68      	ldr	r2, [pc, #416]	@ (34188538 <HAL_UART_Init+0x1b0>)
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
34188398:	2900      	cmp	r1, #0
3418839a:	d07c      	beq.n	34188496 <HAL_UART_Init+0x10e>
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
3418839c:	4293      	cmp	r3, r2
3418839e:	d04e      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883a0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341883a4:	4293      	cmp	r3, r2
341883a6:	d04a      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883a8:	4a64      	ldr	r2, [pc, #400]	@ (3418853c <HAL_UART_Init+0x1b4>)
341883aa:	4293      	cmp	r3, r2
341883ac:	d047      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883ae:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341883b2:	4293      	cmp	r3, r2
341883b4:	d043      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883b6:	4a62      	ldr	r2, [pc, #392]	@ (34188540 <HAL_UART_Init+0x1b8>)
341883b8:	4293      	cmp	r3, r2
341883ba:	d040      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883bc:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341883c0:	4293      	cmp	r3, r2
341883c2:	d03c      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883c4:	4a5f      	ldr	r2, [pc, #380]	@ (34188544 <HAL_UART_Init+0x1bc>)
341883c6:	4293      	cmp	r3, r2
341883c8:	d039      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883ca:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341883ce:	4293      	cmp	r3, r2
341883d0:	d035      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883d2:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
341883d6:	d032      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883d8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
341883dc:	4293      	cmp	r3, r2
341883de:	d02e      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883e0:	4a59      	ldr	r2, [pc, #356]	@ (34188548 <HAL_UART_Init+0x1c0>)
341883e2:	4293      	cmp	r3, r2
341883e4:	d02b      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883e6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341883ea:	4293      	cmp	r3, r2
341883ec:	d027      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883ee:	4a57      	ldr	r2, [pc, #348]	@ (3418854c <HAL_UART_Init+0x1c4>)
341883f0:	4293      	cmp	r3, r2
341883f2:	d024      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883f4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341883f8:	4293      	cmp	r3, r2
341883fa:	d020      	beq.n	3418843e <HAL_UART_Init+0xb6>
341883fc:	4a54      	ldr	r2, [pc, #336]	@ (34188550 <HAL_UART_Init+0x1c8>)
341883fe:	4293      	cmp	r3, r2
34188400:	d01d      	beq.n	3418843e <HAL_UART_Init+0xb6>
34188402:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188406:	4293      	cmp	r3, r2
34188408:	d019      	beq.n	3418843e <HAL_UART_Init+0xb6>
3418840a:	4a52      	ldr	r2, [pc, #328]	@ (34188554 <HAL_UART_Init+0x1cc>)
3418840c:	4293      	cmp	r3, r2
3418840e:	d016      	beq.n	3418843e <HAL_UART_Init+0xb6>
34188410:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188414:	4293      	cmp	r3, r2
34188416:	d012      	beq.n	3418843e <HAL_UART_Init+0xb6>
34188418:	4a4f      	ldr	r2, [pc, #316]	@ (34188558 <HAL_UART_Init+0x1d0>)
3418841a:	4293      	cmp	r3, r2
3418841c:	d00f      	beq.n	3418843e <HAL_UART_Init+0xb6>
3418841e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188422:	4293      	cmp	r3, r2
34188424:	d00b      	beq.n	3418843e <HAL_UART_Init+0xb6>
34188426:	4a4d      	ldr	r2, [pc, #308]	@ (3418855c <HAL_UART_Init+0x1d4>)
34188428:	4293      	cmp	r3, r2
3418842a:	d008      	beq.n	3418843e <HAL_UART_Init+0xb6>
3418842c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188430:	4293      	cmp	r3, r2
34188432:	d004      	beq.n	3418843e <HAL_UART_Init+0xb6>
34188434:	f44f 71a0 	mov.w	r1, #320	@ 0x140
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
34188438:	4849      	ldr	r0, [pc, #292]	@ (34188560 <HAL_UART_Init+0x1d8>)
3418843a:	f7f8 fe89 	bl	34181150 <assert_failed>
  if (huart->gState == HAL_UART_STATE_RESET)
3418843e:	f8d4 3088 	ldr.w	r3, [r4, #136]	@ 0x88
34188442:	b923      	cbnz	r3, 3418844e <HAL_UART_Init+0xc6>
    HAL_UART_MspInit(huart);
34188444:	4620      	mov	r0, r4
    huart->Lock = HAL_UNLOCKED;
34188446:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
    HAL_UART_MspInit(huart);
3418844a:	f7f8 fe9b 	bl	34181184 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
3418844e:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
34188450:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
34188452:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
34188456:	6813      	ldr	r3, [r2, #0]
34188458:	f023 0301 	bic.w	r3, r3, #1
3418845c:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
3418845e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
34188460:	b113      	cbz	r3, 34188468 <HAL_UART_Init+0xe0>
    UART_AdvFeatureConfig(huart);
34188462:	4620      	mov	r0, r4
34188464:	f7ff fdd4 	bl	34188010 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
34188468:	4620      	mov	r0, r4
3418846a:	f7ff fc57 	bl	34187d1c <UART_SetConfig>
3418846e:	2801      	cmp	r0, #1
34188470:	d05f      	beq.n	34188532 <HAL_UART_Init+0x1aa>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
34188472:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
34188474:	4620      	mov	r0, r4
}
34188476:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
3418847a:	685a      	ldr	r2, [r3, #4]
3418847c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
34188480:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
34188482:	689a      	ldr	r2, [r3, #8]
34188484:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
34188488:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
3418848a:	681a      	ldr	r2, [r3, #0]
3418848c:	f042 0201 	orr.w	r2, r2, #1
34188490:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
34188492:	f7ff bf1d 	b.w	341882d0 <UART_CheckIdleState>
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
34188496:	4293      	cmp	r3, r2
34188498:	d0d1      	beq.n	3418843e <HAL_UART_Init+0xb6>
3418849a:	4a32      	ldr	r2, [pc, #200]	@ (34188564 <HAL_UART_Init+0x1dc>)
3418849c:	4293      	cmp	r3, r2
3418849e:	d0ce      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884a0:	4a26      	ldr	r2, [pc, #152]	@ (3418853c <HAL_UART_Init+0x1b4>)
341884a2:	4293      	cmp	r3, r2
341884a4:	d0cb      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884a6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341884aa:	4293      	cmp	r3, r2
341884ac:	d0c7      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884ae:	4a24      	ldr	r2, [pc, #144]	@ (34188540 <HAL_UART_Init+0x1b8>)
341884b0:	4293      	cmp	r3, r2
341884b2:	d0c4      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884b4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341884b8:	4293      	cmp	r3, r2
341884ba:	d0c0      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884bc:	4a21      	ldr	r2, [pc, #132]	@ (34188544 <HAL_UART_Init+0x1bc>)
341884be:	4293      	cmp	r3, r2
341884c0:	d0bd      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884c2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341884c6:	4293      	cmp	r3, r2
341884c8:	d0b9      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884ca:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
341884ce:	d0b6      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884d0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
341884d4:	4293      	cmp	r3, r2
341884d6:	d0b2      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884d8:	4a1b      	ldr	r2, [pc, #108]	@ (34188548 <HAL_UART_Init+0x1c0>)
341884da:	4293      	cmp	r3, r2
341884dc:	d0af      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884de:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341884e2:	4293      	cmp	r3, r2
341884e4:	d0ab      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884e6:	4a19      	ldr	r2, [pc, #100]	@ (3418854c <HAL_UART_Init+0x1c4>)
341884e8:	4293      	cmp	r3, r2
341884ea:	d0a8      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884ec:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341884f0:	4293      	cmp	r3, r2
341884f2:	d0a4      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884f4:	4a16      	ldr	r2, [pc, #88]	@ (34188550 <HAL_UART_Init+0x1c8>)
341884f6:	4293      	cmp	r3, r2
341884f8:	d0a1      	beq.n	3418843e <HAL_UART_Init+0xb6>
341884fa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341884fe:	4293      	cmp	r3, r2
34188500:	d09d      	beq.n	3418843e <HAL_UART_Init+0xb6>
34188502:	4a14      	ldr	r2, [pc, #80]	@ (34188554 <HAL_UART_Init+0x1cc>)
34188504:	4293      	cmp	r3, r2
34188506:	d09a      	beq.n	3418843e <HAL_UART_Init+0xb6>
34188508:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418850c:	4293      	cmp	r3, r2
3418850e:	d096      	beq.n	3418843e <HAL_UART_Init+0xb6>
34188510:	4a11      	ldr	r2, [pc, #68]	@ (34188558 <HAL_UART_Init+0x1d0>)
34188512:	4293      	cmp	r3, r2
34188514:	d093      	beq.n	3418843e <HAL_UART_Init+0xb6>
34188516:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418851a:	4293      	cmp	r3, r2
3418851c:	d08f      	beq.n	3418843e <HAL_UART_Init+0xb6>
3418851e:	4a0f      	ldr	r2, [pc, #60]	@ (3418855c <HAL_UART_Init+0x1d4>)
34188520:	4293      	cmp	r3, r2
34188522:	d08c      	beq.n	3418843e <HAL_UART_Init+0xb6>
34188524:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188528:	4293      	cmp	r3, r2
3418852a:	d088      	beq.n	3418843e <HAL_UART_Init+0xb6>
3418852c:	f240 1145 	movw	r1, #325	@ 0x145
34188530:	e782      	b.n	34188438 <HAL_UART_Init+0xb0>
}
34188532:	2001      	movs	r0, #1
34188534:	bd10      	pop	{r4, pc}
34188536:	bf00      	nop
34188538:	52001000 	.word	0x52001000
3418853c:	50004400 	.word	0x50004400
34188540:	50004800 	.word	0x50004800
34188544:	50004c00 	.word	0x50004c00
34188548:	52001400 	.word	0x52001400
3418854c:	50007800 	.word	0x50007800
34188550:	50007c00 	.word	0x50007c00
34188554:	52001800 	.word	0x52001800
34188558:	52001c00 	.word	0x52001c00
3418855c:	56000c00 	.word	0x56000c00
34188560:	3418cf86 	.word	0x3418cf86
34188564:	42001000 	.word	0x42001000

34188568 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
34188568:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
3418856a:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
3418856c:	b92b      	cbnz	r3, 3418857a <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
3418856e:	2301      	movs	r3, #1
34188570:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
34188574:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
34188578:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
3418857a:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
3418857c:	4d09      	ldr	r5, [pc, #36]	@ (341885a4 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
3418857e:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
34188580:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
34188582:	4c09      	ldr	r4, [pc, #36]	@ (341885a8 <UARTEx_SetNbDataToProcess+0x40>)
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
34188584:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
34188586:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
34188588:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
3418858a:	011b      	lsls	r3, r3, #4
3418858c:	fbb3 f3f1 	udiv	r3, r3, r1
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
34188590:	f3c2 6242 	ubfx	r2, r2, #25, #3
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
34188594:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
34188598:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
3418859a:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
3418859c:	011b      	lsls	r3, r3, #4
3418859e:	fbb3 f3f2 	udiv	r3, r3, r2
}
341885a2:	e7e7      	b.n	34188574 <UARTEx_SetNbDataToProcess+0xc>
341885a4:	3418d1ea 	.word	0x3418d1ea
341885a8:	3418d1e2 	.word	0x3418d1e2

341885ac <HAL_UARTEx_DisableFifoMode>:
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
341885ac:	6803      	ldr	r3, [r0, #0]
341885ae:	4a37      	ldr	r2, [pc, #220]	@ (3418868c <HAL_UARTEx_DisableFifoMode+0xe0>)
{
341885b0:	b510      	push	{r4, lr}
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
341885b2:	4293      	cmp	r3, r2
{
341885b4:	4604      	mov	r4, r0
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
341885b6:	d04e      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
341885b8:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341885bc:	4293      	cmp	r3, r2
341885be:	d04a      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
341885c0:	4a33      	ldr	r2, [pc, #204]	@ (34188690 <HAL_UARTEx_DisableFifoMode+0xe4>)
341885c2:	4293      	cmp	r3, r2
341885c4:	d047      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
341885c6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341885ca:	4293      	cmp	r3, r2
341885cc:	d043      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
341885ce:	4a31      	ldr	r2, [pc, #196]	@ (34188694 <HAL_UARTEx_DisableFifoMode+0xe8>)
341885d0:	4293      	cmp	r3, r2
341885d2:	d040      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
341885d4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341885d8:	4293      	cmp	r3, r2
341885da:	d03c      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
341885dc:	4a2e      	ldr	r2, [pc, #184]	@ (34188698 <HAL_UARTEx_DisableFifoMode+0xec>)
341885de:	4293      	cmp	r3, r2
341885e0:	d039      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
341885e2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341885e6:	4293      	cmp	r3, r2
341885e8:	d035      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
341885ea:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
341885ee:	d032      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
341885f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
341885f4:	4293      	cmp	r3, r2
341885f6:	d02e      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
341885f8:	4a28      	ldr	r2, [pc, #160]	@ (3418869c <HAL_UARTEx_DisableFifoMode+0xf0>)
341885fa:	4293      	cmp	r3, r2
341885fc:	d02b      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
341885fe:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188602:	4293      	cmp	r3, r2
34188604:	d027      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
34188606:	4a26      	ldr	r2, [pc, #152]	@ (341886a0 <HAL_UARTEx_DisableFifoMode+0xf4>)
34188608:	4293      	cmp	r3, r2
3418860a:	d024      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
3418860c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188610:	4293      	cmp	r3, r2
34188612:	d020      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
34188614:	4a23      	ldr	r2, [pc, #140]	@ (341886a4 <HAL_UARTEx_DisableFifoMode+0xf8>)
34188616:	4293      	cmp	r3, r2
34188618:	d01d      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
3418861a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418861e:	4293      	cmp	r3, r2
34188620:	d019      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
34188622:	4a21      	ldr	r2, [pc, #132]	@ (341886a8 <HAL_UARTEx_DisableFifoMode+0xfc>)
34188624:	4293      	cmp	r3, r2
34188626:	d016      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
34188628:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418862c:	4293      	cmp	r3, r2
3418862e:	d012      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
34188630:	4a1e      	ldr	r2, [pc, #120]	@ (341886ac <HAL_UARTEx_DisableFifoMode+0x100>)
34188632:	4293      	cmp	r3, r2
34188634:	d00f      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
34188636:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418863a:	4293      	cmp	r3, r2
3418863c:	d00b      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
3418863e:	4a1c      	ldr	r2, [pc, #112]	@ (341886b0 <HAL_UARTEx_DisableFifoMode+0x104>)
34188640:	4293      	cmp	r3, r2
34188642:	d008      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
34188644:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188648:	4293      	cmp	r3, r2
3418864a:	d004      	beq.n	34188656 <HAL_UARTEx_DisableFifoMode+0xaa>
3418864c:	f44f 710d 	mov.w	r1, #564	@ 0x234
34188650:	4818      	ldr	r0, [pc, #96]	@ (341886b4 <HAL_UARTEx_DisableFifoMode+0x108>)
34188652:	f7f8 fd7d 	bl	34181150 <assert_failed>
  __HAL_LOCK(huart);
34188656:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
3418865a:	2b01      	cmp	r3, #1
3418865c:	d013      	beq.n	34188686 <HAL_UARTEx_DisableFifoMode+0xda>
  huart->gState = HAL_UART_STATE_BUSY;
3418865e:	2324      	movs	r3, #36	@ 0x24
  huart->FifoMode = UART_FIFOMODE_DISABLE;
34188660:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_BUSY;
34188662:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
34188666:	6823      	ldr	r3, [r4, #0]
34188668:	681a      	ldr	r2, [r3, #0]
  __HAL_UART_DISABLE(huart);
3418866a:	6819      	ldr	r1, [r3, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
3418866c:	f022 5200 	bic.w	r2, r2, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
34188670:	f021 0101 	bic.w	r1, r1, #1
34188674:	6019      	str	r1, [r3, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
34188676:	6660      	str	r0, [r4, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
34188678:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
3418867a:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
3418867c:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
34188680:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
34188684:	bd10      	pop	{r4, pc}
  __HAL_LOCK(huart);
34188686:	2002      	movs	r0, #2
34188688:	e7fc      	b.n	34188684 <HAL_UARTEx_DisableFifoMode+0xd8>
3418868a:	bf00      	nop
3418868c:	52001000 	.word	0x52001000
34188690:	50004400 	.word	0x50004400
34188694:	50004800 	.word	0x50004800
34188698:	50004c00 	.word	0x50004c00
3418869c:	52001400 	.word	0x52001400
341886a0:	50007800 	.word	0x50007800
341886a4:	50007c00 	.word	0x50007c00
341886a8:	52001800 	.word	0x52001800
341886ac:	52001c00 	.word	0x52001c00
341886b0:	56000c00 	.word	0x56000c00
341886b4:	3418cfbb 	.word	0x3418cfbb

341886b8 <HAL_UARTEx_SetTxFifoThreshold>:
{
341886b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
341886ba:	4a41      	ldr	r2, [pc, #260]	@ (341887c0 <HAL_UARTEx_SetTxFifoThreshold+0x108>)
341886bc:	6803      	ldr	r3, [r0, #0]
{
341886be:	4604      	mov	r4, r0
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
341886c0:	4293      	cmp	r3, r2
{
341886c2:	460e      	mov	r6, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
341886c4:	d04e      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
341886c6:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341886ca:	4293      	cmp	r3, r2
341886cc:	d04a      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
341886ce:	4a3d      	ldr	r2, [pc, #244]	@ (341887c4 <HAL_UARTEx_SetTxFifoThreshold+0x10c>)
341886d0:	4293      	cmp	r3, r2
341886d2:	d047      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
341886d4:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341886d8:	4293      	cmp	r3, r2
341886da:	d043      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
341886dc:	4a3a      	ldr	r2, [pc, #232]	@ (341887c8 <HAL_UARTEx_SetTxFifoThreshold+0x110>)
341886de:	4293      	cmp	r3, r2
341886e0:	d040      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
341886e2:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341886e6:	4293      	cmp	r3, r2
341886e8:	d03c      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
341886ea:	4a38      	ldr	r2, [pc, #224]	@ (341887cc <HAL_UARTEx_SetTxFifoThreshold+0x114>)
341886ec:	4293      	cmp	r3, r2
341886ee:	d039      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
341886f0:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341886f4:	4293      	cmp	r3, r2
341886f6:	d035      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
341886f8:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
341886fc:	d032      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
341886fe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
34188702:	4293      	cmp	r3, r2
34188704:	d02e      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
34188706:	4a32      	ldr	r2, [pc, #200]	@ (341887d0 <HAL_UARTEx_SetTxFifoThreshold+0x118>)
34188708:	4293      	cmp	r3, r2
3418870a:	d02b      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
3418870c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188710:	4293      	cmp	r3, r2
34188712:	d027      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
34188714:	4a2f      	ldr	r2, [pc, #188]	@ (341887d4 <HAL_UARTEx_SetTxFifoThreshold+0x11c>)
34188716:	4293      	cmp	r3, r2
34188718:	d024      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
3418871a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418871e:	4293      	cmp	r3, r2
34188720:	d020      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
34188722:	4a2d      	ldr	r2, [pc, #180]	@ (341887d8 <HAL_UARTEx_SetTxFifoThreshold+0x120>)
34188724:	4293      	cmp	r3, r2
34188726:	d01d      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
34188728:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418872c:	4293      	cmp	r3, r2
3418872e:	d019      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
34188730:	4a2a      	ldr	r2, [pc, #168]	@ (341887dc <HAL_UARTEx_SetTxFifoThreshold+0x124>)
34188732:	4293      	cmp	r3, r2
34188734:	d016      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
34188736:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418873a:	4293      	cmp	r3, r2
3418873c:	d012      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
3418873e:	4a28      	ldr	r2, [pc, #160]	@ (341887e0 <HAL_UARTEx_SetTxFifoThreshold+0x128>)
34188740:	4293      	cmp	r3, r2
34188742:	d00f      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
34188744:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188748:	4293      	cmp	r3, r2
3418874a:	d00b      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
3418874c:	4a25      	ldr	r2, [pc, #148]	@ (341887e4 <HAL_UARTEx_SetTxFifoThreshold+0x12c>)
3418874e:	4293      	cmp	r3, r2
34188750:	d008      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
34188752:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188756:	4293      	cmp	r3, r2
34188758:	d004      	beq.n	34188764 <HAL_UARTEx_SetTxFifoThreshold+0xac>
3418875a:	f240 2162 	movw	r1, #610	@ 0x262
3418875e:	4822      	ldr	r0, [pc, #136]	@ (341887e8 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
34188760:	f7f8 fcf6 	bl	34181150 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
34188764:	f036 43c0 	bics.w	r3, r6, #1610612736	@ 0x60000000
34188768:	d009      	beq.n	3418877e <HAL_UARTEx_SetTxFifoThreshold+0xc6>
3418876a:	f026 5300 	bic.w	r3, r6, #536870912	@ 0x20000000
3418876e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
34188772:	d004      	beq.n	3418877e <HAL_UARTEx_SetTxFifoThreshold+0xc6>
34188774:	f240 2163 	movw	r1, #611	@ 0x263
34188778:	481b      	ldr	r0, [pc, #108]	@ (341887e8 <HAL_UARTEx_SetTxFifoThreshold+0x130>)
3418877a:	f7f8 fce9 	bl	34181150 <assert_failed>
  __HAL_LOCK(huart);
3418877e:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
34188782:	2b01      	cmp	r3, #1
34188784:	d019      	beq.n	341887ba <HAL_UARTEx_SetTxFifoThreshold+0x102>
  huart->gState = HAL_UART_STATE_BUSY;
34188786:	2324      	movs	r3, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
34188788:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
3418878a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
3418878e:	682f      	ldr	r7, [r5, #0]
  __HAL_UART_DISABLE(huart);
34188790:	682b      	ldr	r3, [r5, #0]
  UARTEx_SetNbDataToProcess(huart);
34188792:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
34188794:	f023 0301 	bic.w	r3, r3, #1
34188798:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
3418879a:	68ab      	ldr	r3, [r5, #8]
3418879c:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
341887a0:	4333      	orrs	r3, r6
341887a2:	60ab      	str	r3, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
341887a4:	f7ff fee0 	bl	34188568 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
341887a8:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
341887aa:	602f      	str	r7, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
341887ac:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
341887b0:	2300      	movs	r3, #0
  return HAL_OK;
341887b2:	4618      	mov	r0, r3
  __HAL_UNLOCK(huart);
341887b4:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
341887b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
341887ba:	2002      	movs	r0, #2
341887bc:	e7fc      	b.n	341887b8 <HAL_UARTEx_SetTxFifoThreshold+0x100>
341887be:	bf00      	nop
341887c0:	52001000 	.word	0x52001000
341887c4:	50004400 	.word	0x50004400
341887c8:	50004800 	.word	0x50004800
341887cc:	50004c00 	.word	0x50004c00
341887d0:	52001400 	.word	0x52001400
341887d4:	50007800 	.word	0x50007800
341887d8:	50007c00 	.word	0x50007c00
341887dc:	52001800 	.word	0x52001800
341887e0:	52001c00 	.word	0x52001c00
341887e4:	56000c00 	.word	0x56000c00
341887e8:	3418cfbb 	.word	0x3418cfbb

341887ec <HAL_UARTEx_SetRxFifoThreshold>:
{
341887ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
341887ee:	4a41      	ldr	r2, [pc, #260]	@ (341888f4 <HAL_UARTEx_SetRxFifoThreshold+0x108>)
341887f0:	6803      	ldr	r3, [r0, #0]
{
341887f2:	4604      	mov	r4, r0
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
341887f4:	4293      	cmp	r3, r2
{
341887f6:	460e      	mov	r6, r1
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
341887f8:	d04e      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
341887fa:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
341887fe:	4293      	cmp	r3, r2
34188800:	d04a      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188802:	4a3d      	ldr	r2, [pc, #244]	@ (341888f8 <HAL_UARTEx_SetRxFifoThreshold+0x10c>)
34188804:	4293      	cmp	r3, r2
34188806:	d047      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188808:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418880c:	4293      	cmp	r3, r2
3418880e:	d043      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188810:	4a3a      	ldr	r2, [pc, #232]	@ (341888fc <HAL_UARTEx_SetRxFifoThreshold+0x110>)
34188812:	4293      	cmp	r3, r2
34188814:	d040      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188816:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418881a:	4293      	cmp	r3, r2
3418881c:	d03c      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
3418881e:	4a38      	ldr	r2, [pc, #224]	@ (34188900 <HAL_UARTEx_SetRxFifoThreshold+0x114>)
34188820:	4293      	cmp	r3, r2
34188822:	d039      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188824:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188828:	4293      	cmp	r3, r2
3418882a:	d035      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
3418882c:	f1b3 2f50 	cmp.w	r3, #1342197760	@ 0x50005000
34188830:	d032      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188832:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
34188836:	4293      	cmp	r3, r2
34188838:	d02e      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
3418883a:	4a32      	ldr	r2, [pc, #200]	@ (34188904 <HAL_UARTEx_SetRxFifoThreshold+0x118>)
3418883c:	4293      	cmp	r3, r2
3418883e:	d02b      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188840:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188844:	4293      	cmp	r3, r2
34188846:	d027      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188848:	4a2f      	ldr	r2, [pc, #188]	@ (34188908 <HAL_UARTEx_SetRxFifoThreshold+0x11c>)
3418884a:	4293      	cmp	r3, r2
3418884c:	d024      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
3418884e:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188852:	4293      	cmp	r3, r2
34188854:	d020      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188856:	4a2d      	ldr	r2, [pc, #180]	@ (3418890c <HAL_UARTEx_SetRxFifoThreshold+0x120>)
34188858:	4293      	cmp	r3, r2
3418885a:	d01d      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
3418885c:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
34188860:	4293      	cmp	r3, r2
34188862:	d019      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188864:	4a2a      	ldr	r2, [pc, #168]	@ (34188910 <HAL_UARTEx_SetRxFifoThreshold+0x124>)
34188866:	4293      	cmp	r3, r2
34188868:	d016      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
3418886a:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418886e:	4293      	cmp	r3, r2
34188870:	d012      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188872:	4a28      	ldr	r2, [pc, #160]	@ (34188914 <HAL_UARTEx_SetRxFifoThreshold+0x128>)
34188874:	4293      	cmp	r3, r2
34188876:	d00f      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188878:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418887c:	4293      	cmp	r3, r2
3418887e:	d00b      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188880:	4a25      	ldr	r2, [pc, #148]	@ (34188918 <HAL_UARTEx_SetRxFifoThreshold+0x12c>)
34188882:	4293      	cmp	r3, r2
34188884:	d008      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
34188886:	f102 4270 	add.w	r2, r2, #4026531840	@ 0xf0000000
3418888a:	4293      	cmp	r3, r2
3418888c:	d004      	beq.n	34188898 <HAL_UARTEx_SetRxFifoThreshold+0xac>
3418888e:	f240 2193 	movw	r1, #659	@ 0x293
34188892:	4822      	ldr	r0, [pc, #136]	@ (3418891c <HAL_UARTEx_SetRxFifoThreshold+0x130>)
34188894:	f7f8 fc5c 	bl	34181150 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
34188898:	f036 63c0 	bics.w	r3, r6, #100663296	@ 0x6000000
3418889c:	d009      	beq.n	341888b2 <HAL_UARTEx_SetRxFifoThreshold+0xc6>
3418889e:	f026 7300 	bic.w	r3, r6, #33554432	@ 0x2000000
341888a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
341888a6:	d004      	beq.n	341888b2 <HAL_UARTEx_SetRxFifoThreshold+0xc6>
341888a8:	f44f 7125 	mov.w	r1, #660	@ 0x294
341888ac:	481b      	ldr	r0, [pc, #108]	@ (3418891c <HAL_UARTEx_SetRxFifoThreshold+0x130>)
341888ae:	f7f8 fc4f 	bl	34181150 <assert_failed>
  __HAL_LOCK(huart);
341888b2:	f894 3084 	ldrb.w	r3, [r4, #132]	@ 0x84
341888b6:	2b01      	cmp	r3, #1
341888b8:	d019      	beq.n	341888ee <HAL_UARTEx_SetRxFifoThreshold+0x102>
  huart->gState = HAL_UART_STATE_BUSY;
341888ba:	2324      	movs	r3, #36	@ 0x24
  tmpcr1 = READ_REG(huart->Instance->CR1);
341888bc:	6825      	ldr	r5, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
341888be:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
341888c2:	682f      	ldr	r7, [r5, #0]
  __HAL_UART_DISABLE(huart);
341888c4:	682b      	ldr	r3, [r5, #0]
  UARTEx_SetNbDataToProcess(huart);
341888c6:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
341888c8:	f023 0301 	bic.w	r3, r3, #1
341888cc:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
341888ce:	68ab      	ldr	r3, [r5, #8]
341888d0:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
341888d4:	4333      	orrs	r3, r6
341888d6:	60ab      	str	r3, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
341888d8:	f7ff fe46 	bl	34188568 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
341888dc:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
341888de:	602f      	str	r7, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
341888e0:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UNLOCK(huart);
341888e4:	2300      	movs	r3, #0
  return HAL_OK;
341888e6:	4618      	mov	r0, r3
  __HAL_UNLOCK(huart);
341888e8:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
341888ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  __HAL_LOCK(huart);
341888ee:	2002      	movs	r0, #2
341888f0:	e7fc      	b.n	341888ec <HAL_UARTEx_SetRxFifoThreshold+0x100>
341888f2:	bf00      	nop
341888f4:	52001000 	.word	0x52001000
341888f8:	50004400 	.word	0x50004400
341888fc:	50004800 	.word	0x50004800
34188900:	50004c00 	.word	0x50004c00
34188904:	52001400 	.word	0x52001400
34188908:	50007800 	.word	0x50007800
3418890c:	50007c00 	.word	0x50007c00
34188910:	52001800 	.word	0x52001800
34188914:	52001c00 	.word	0x52001c00
34188918:	56000c00 	.word	0x56000c00
3418891c:	3418cfbb 	.word	0x3418cfbb

34188920 <__cvt>:
34188920:	b5f0      	push	{r4, r5, r6, r7, lr}
34188922:	ed2d 8b02 	vpush	{d8}
34188926:	eeb0 8b40 	vmov.f64	d8, d0
3418892a:	b085      	sub	sp, #20
3418892c:	4617      	mov	r7, r2
3418892e:	460c      	mov	r4, r1
34188930:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
34188932:	ee18 2a90 	vmov	r2, s17
34188936:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
34188938:	f025 0520 	bic.w	r5, r5, #32
3418893c:	2a00      	cmp	r2, #0
3418893e:	bfb6      	itet	lt
34188940:	222d      	movlt	r2, #45	@ 0x2d
34188942:	2200      	movge	r2, #0
34188944:	eeb1 8b40 	vneglt.f64	d8, d0
34188948:	2d46      	cmp	r5, #70	@ 0x46
3418894a:	701a      	strb	r2, [r3, #0]
3418894c:	d004      	beq.n	34188958 <__cvt+0x38>
3418894e:	2d45      	cmp	r5, #69	@ 0x45
34188950:	d100      	bne.n	34188954 <__cvt+0x34>
34188952:	3401      	adds	r4, #1
34188954:	2102      	movs	r1, #2
34188956:	e000      	b.n	3418895a <__cvt+0x3a>
34188958:	2103      	movs	r1, #3
3418895a:	ab03      	add	r3, sp, #12
3418895c:	eeb0 0b48 	vmov.f64	d0, d8
34188960:	4622      	mov	r2, r4
34188962:	9301      	str	r3, [sp, #4]
34188964:	ab02      	add	r3, sp, #8
34188966:	9300      	str	r3, [sp, #0]
34188968:	4633      	mov	r3, r6
3418896a:	f001 f871 	bl	34189a50 <_dtoa_r>
3418896e:	2d47      	cmp	r5, #71	@ 0x47
34188970:	d114      	bne.n	3418899c <__cvt+0x7c>
34188972:	07fb      	lsls	r3, r7, #31
34188974:	d50a      	bpl.n	3418898c <__cvt+0x6c>
34188976:	1902      	adds	r2, r0, r4
34188978:	eeb5 8b40 	vcmp.f64	d8, #0.0
3418897c:	2130      	movs	r1, #48	@ 0x30
3418897e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34188982:	bf08      	it	eq
34188984:	9203      	streq	r2, [sp, #12]
34188986:	9b03      	ldr	r3, [sp, #12]
34188988:	4293      	cmp	r3, r2
3418898a:	d319      	bcc.n	341889c0 <__cvt+0xa0>
3418898c:	9b03      	ldr	r3, [sp, #12]
3418898e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34188990:	1a1b      	subs	r3, r3, r0
34188992:	6013      	str	r3, [r2, #0]
34188994:	b005      	add	sp, #20
34188996:	ecbd 8b02 	vpop	{d8}
3418899a:	bdf0      	pop	{r4, r5, r6, r7, pc}
3418899c:	2d46      	cmp	r5, #70	@ 0x46
3418899e:	eb00 0204 	add.w	r2, r0, r4
341889a2:	d1e9      	bne.n	34188978 <__cvt+0x58>
341889a4:	7803      	ldrb	r3, [r0, #0]
341889a6:	2b30      	cmp	r3, #48	@ 0x30
341889a8:	d107      	bne.n	341889ba <__cvt+0x9a>
341889aa:	eeb5 8b40 	vcmp.f64	d8, #0.0
341889ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
341889b2:	bf1c      	itt	ne
341889b4:	f1c4 0401 	rsbne	r4, r4, #1
341889b8:	6034      	strne	r4, [r6, #0]
341889ba:	6833      	ldr	r3, [r6, #0]
341889bc:	441a      	add	r2, r3
341889be:	e7db      	b.n	34188978 <__cvt+0x58>
341889c0:	1c5c      	adds	r4, r3, #1
341889c2:	9403      	str	r4, [sp, #12]
341889c4:	7019      	strb	r1, [r3, #0]
341889c6:	e7de      	b.n	34188986 <__cvt+0x66>

341889c8 <__exponent>:
341889c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
341889ca:	2900      	cmp	r1, #0
341889cc:	7002      	strb	r2, [r0, #0]
341889ce:	bfba      	itte	lt
341889d0:	4249      	neglt	r1, r1
341889d2:	232d      	movlt	r3, #45	@ 0x2d
341889d4:	232b      	movge	r3, #43	@ 0x2b
341889d6:	2909      	cmp	r1, #9
341889d8:	7043      	strb	r3, [r0, #1]
341889da:	dd28      	ble.n	34188a2e <__exponent+0x66>
341889dc:	f10d 0307 	add.w	r3, sp, #7
341889e0:	270a      	movs	r7, #10
341889e2:	461d      	mov	r5, r3
341889e4:	461a      	mov	r2, r3
341889e6:	3b01      	subs	r3, #1
341889e8:	fbb1 f6f7 	udiv	r6, r1, r7
341889ec:	fb07 1416 	mls	r4, r7, r6, r1
341889f0:	3430      	adds	r4, #48	@ 0x30
341889f2:	f802 4c01 	strb.w	r4, [r2, #-1]
341889f6:	460c      	mov	r4, r1
341889f8:	4631      	mov	r1, r6
341889fa:	2c63      	cmp	r4, #99	@ 0x63
341889fc:	dcf2      	bgt.n	341889e4 <__exponent+0x1c>
341889fe:	3130      	adds	r1, #48	@ 0x30
34188a00:	1e94      	subs	r4, r2, #2
34188a02:	f803 1c01 	strb.w	r1, [r3, #-1]
34188a06:	1c41      	adds	r1, r0, #1
34188a08:	4623      	mov	r3, r4
34188a0a:	42ab      	cmp	r3, r5
34188a0c:	d30a      	bcc.n	34188a24 <__exponent+0x5c>
34188a0e:	f10d 0309 	add.w	r3, sp, #9
34188a12:	1a9b      	subs	r3, r3, r2
34188a14:	42ac      	cmp	r4, r5
34188a16:	bf88      	it	hi
34188a18:	2300      	movhi	r3, #0
34188a1a:	3302      	adds	r3, #2
34188a1c:	4403      	add	r3, r0
34188a1e:	1a18      	subs	r0, r3, r0
34188a20:	b003      	add	sp, #12
34188a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
34188a24:	f813 6b01 	ldrb.w	r6, [r3], #1
34188a28:	f801 6f01 	strb.w	r6, [r1, #1]!
34188a2c:	e7ed      	b.n	34188a0a <__exponent+0x42>
34188a2e:	2330      	movs	r3, #48	@ 0x30
34188a30:	3130      	adds	r1, #48	@ 0x30
34188a32:	7083      	strb	r3, [r0, #2]
34188a34:	1d03      	adds	r3, r0, #4
34188a36:	70c1      	strb	r1, [r0, #3]
34188a38:	e7f1      	b.n	34188a1e <__exponent+0x56>
34188a3a:	0000      	movs	r0, r0
34188a3c:	0000      	movs	r0, r0
	...

34188a40 <_printf_float>:
34188a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34188a44:	b08d      	sub	sp, #52	@ 0x34
34188a46:	460c      	mov	r4, r1
34188a48:	4616      	mov	r6, r2
34188a4a:	461f      	mov	r7, r3
34188a4c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
34188a50:	4605      	mov	r5, r0
34188a52:	f000 fed5 	bl	34189800 <_localeconv_r>
34188a56:	f8d0 b000 	ldr.w	fp, [r0]
34188a5a:	4658      	mov	r0, fp
34188a5c:	f7f7 fe98 	bl	34180790 <strlen>
34188a60:	2300      	movs	r3, #0
34188a62:	f894 9018 	ldrb.w	r9, [r4, #24]
34188a66:	930a      	str	r3, [sp, #40]	@ 0x28
34188a68:	f8d8 3000 	ldr.w	r3, [r8]
34188a6c:	6822      	ldr	r2, [r4, #0]
34188a6e:	3307      	adds	r3, #7
34188a70:	9005      	str	r0, [sp, #20]
34188a72:	f023 0307 	bic.w	r3, r3, #7
34188a76:	f103 0108 	add.w	r1, r3, #8
34188a7a:	f8c8 1000 	str.w	r1, [r8]
34188a7e:	ed93 0b00 	vldr	d0, [r3]
34188a82:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 34188ce0 <_printf_float+0x2a0>
34188a86:	eeb0 7bc0 	vabs.f64	d7, d0
34188a8a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
34188a8e:	eeb4 7b46 	vcmp.f64	d7, d6
34188a92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34188a96:	dd24      	ble.n	34188ae2 <_printf_float+0xa2>
34188a98:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
34188a9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34188aa0:	d502      	bpl.n	34188aa8 <_printf_float+0x68>
34188aa2:	232d      	movs	r3, #45	@ 0x2d
34188aa4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34188aa8:	498f      	ldr	r1, [pc, #572]	@ (34188ce8 <_printf_float+0x2a8>)
34188aaa:	4b90      	ldr	r3, [pc, #576]	@ (34188cec <_printf_float+0x2ac>)
34188aac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
34188ab0:	bf8c      	ite	hi
34188ab2:	4688      	movhi	r8, r1
34188ab4:	4698      	movls	r8, r3
34188ab6:	f022 0204 	bic.w	r2, r2, #4
34188aba:	2303      	movs	r3, #3
34188abc:	f04f 0a00 	mov.w	sl, #0
34188ac0:	6022      	str	r2, [r4, #0]
34188ac2:	6123      	str	r3, [r4, #16]
34188ac4:	4633      	mov	r3, r6
34188ac6:	aa0b      	add	r2, sp, #44	@ 0x2c
34188ac8:	4621      	mov	r1, r4
34188aca:	4628      	mov	r0, r5
34188acc:	9700      	str	r7, [sp, #0]
34188ace:	f000 f9d1 	bl	34188e74 <_printf_common>
34188ad2:	3001      	adds	r0, #1
34188ad4:	f040 8089 	bne.w	34188bea <_printf_float+0x1aa>
34188ad8:	f04f 30ff 	mov.w	r0, #4294967295
34188adc:	b00d      	add	sp, #52	@ 0x34
34188ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34188ae2:	eeb4 0b40 	vcmp.f64	d0, d0
34188ae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34188aea:	d709      	bvc.n	34188b00 <_printf_float+0xc0>
34188aec:	ee10 3a90 	vmov	r3, s1
34188af0:	497f      	ldr	r1, [pc, #508]	@ (34188cf0 <_printf_float+0x2b0>)
34188af2:	2b00      	cmp	r3, #0
34188af4:	bfbc      	itt	lt
34188af6:	232d      	movlt	r3, #45	@ 0x2d
34188af8:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
34188afc:	4b7d      	ldr	r3, [pc, #500]	@ (34188cf4 <_printf_float+0x2b4>)
34188afe:	e7d5      	b.n	34188aac <_printf_float+0x6c>
34188b00:	6863      	ldr	r3, [r4, #4]
34188b02:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
34188b06:	1c59      	adds	r1, r3, #1
34188b08:	d139      	bne.n	34188b7e <_printf_float+0x13e>
34188b0a:	2306      	movs	r3, #6
34188b0c:	6063      	str	r3, [r4, #4]
34188b0e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
34188b12:	2300      	movs	r3, #0
34188b14:	4628      	mov	r0, r5
34188b16:	6022      	str	r2, [r4, #0]
34188b18:	9303      	str	r3, [sp, #12]
34188b1a:	ab0a      	add	r3, sp, #40	@ 0x28
34188b1c:	e9cd 9301 	strd	r9, r3, [sp, #4]
34188b20:	ab09      	add	r3, sp, #36	@ 0x24
34188b22:	9300      	str	r3, [sp, #0]
34188b24:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
34188b28:	6861      	ldr	r1, [r4, #4]
34188b2a:	f7ff fef9 	bl	34188920 <__cvt>
34188b2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
34188b32:	4680      	mov	r8, r0
34188b34:	9909      	ldr	r1, [sp, #36]	@ 0x24
34188b36:	d129      	bne.n	34188b8c <_printf_float+0x14c>
34188b38:	1cc8      	adds	r0, r1, #3
34188b3a:	db02      	blt.n	34188b42 <_printf_float+0x102>
34188b3c:	6863      	ldr	r3, [r4, #4]
34188b3e:	4299      	cmp	r1, r3
34188b40:	dd41      	ble.n	34188bc6 <_printf_float+0x186>
34188b42:	f1a9 0902 	sub.w	r9, r9, #2
34188b46:	fa5f f989 	uxtb.w	r9, r9
34188b4a:	3901      	subs	r1, #1
34188b4c:	464a      	mov	r2, r9
34188b4e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
34188b52:	9109      	str	r1, [sp, #36]	@ 0x24
34188b54:	f7ff ff38 	bl	341889c8 <__exponent>
34188b58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
34188b5a:	4682      	mov	sl, r0
34188b5c:	1813      	adds	r3, r2, r0
34188b5e:	2a01      	cmp	r2, #1
34188b60:	6123      	str	r3, [r4, #16]
34188b62:	dc02      	bgt.n	34188b6a <_printf_float+0x12a>
34188b64:	6822      	ldr	r2, [r4, #0]
34188b66:	07d2      	lsls	r2, r2, #31
34188b68:	d501      	bpl.n	34188b6e <_printf_float+0x12e>
34188b6a:	3301      	adds	r3, #1
34188b6c:	6123      	str	r3, [r4, #16]
34188b6e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
34188b72:	2b00      	cmp	r3, #0
34188b74:	d0a6      	beq.n	34188ac4 <_printf_float+0x84>
34188b76:	232d      	movs	r3, #45	@ 0x2d
34188b78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34188b7c:	e7a2      	b.n	34188ac4 <_printf_float+0x84>
34188b7e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
34188b82:	d1c4      	bne.n	34188b0e <_printf_float+0xce>
34188b84:	2b00      	cmp	r3, #0
34188b86:	d1c2      	bne.n	34188b0e <_printf_float+0xce>
34188b88:	2301      	movs	r3, #1
34188b8a:	e7bf      	b.n	34188b0c <_printf_float+0xcc>
34188b8c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
34188b90:	d9db      	bls.n	34188b4a <_printf_float+0x10a>
34188b92:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
34188b96:	d118      	bne.n	34188bca <_printf_float+0x18a>
34188b98:	2900      	cmp	r1, #0
34188b9a:	6863      	ldr	r3, [r4, #4]
34188b9c:	dd0b      	ble.n	34188bb6 <_printf_float+0x176>
34188b9e:	6121      	str	r1, [r4, #16]
34188ba0:	b913      	cbnz	r3, 34188ba8 <_printf_float+0x168>
34188ba2:	6822      	ldr	r2, [r4, #0]
34188ba4:	07d0      	lsls	r0, r2, #31
34188ba6:	d502      	bpl.n	34188bae <_printf_float+0x16e>
34188ba8:	3301      	adds	r3, #1
34188baa:	440b      	add	r3, r1
34188bac:	6123      	str	r3, [r4, #16]
34188bae:	f04f 0a00 	mov.w	sl, #0
34188bb2:	65a1      	str	r1, [r4, #88]	@ 0x58
34188bb4:	e7db      	b.n	34188b6e <_printf_float+0x12e>
34188bb6:	b913      	cbnz	r3, 34188bbe <_printf_float+0x17e>
34188bb8:	6822      	ldr	r2, [r4, #0]
34188bba:	07d2      	lsls	r2, r2, #31
34188bbc:	d501      	bpl.n	34188bc2 <_printf_float+0x182>
34188bbe:	3302      	adds	r3, #2
34188bc0:	e7f4      	b.n	34188bac <_printf_float+0x16c>
34188bc2:	2301      	movs	r3, #1
34188bc4:	e7f2      	b.n	34188bac <_printf_float+0x16c>
34188bc6:	f04f 0967 	mov.w	r9, #103	@ 0x67
34188bca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
34188bcc:	4299      	cmp	r1, r3
34188bce:	db05      	blt.n	34188bdc <_printf_float+0x19c>
34188bd0:	6823      	ldr	r3, [r4, #0]
34188bd2:	6121      	str	r1, [r4, #16]
34188bd4:	07d8      	lsls	r0, r3, #31
34188bd6:	d5ea      	bpl.n	34188bae <_printf_float+0x16e>
34188bd8:	1c4b      	adds	r3, r1, #1
34188bda:	e7e7      	b.n	34188bac <_printf_float+0x16c>
34188bdc:	2900      	cmp	r1, #0
34188bde:	bfd4      	ite	le
34188be0:	f1c1 0202 	rsble	r2, r1, #2
34188be4:	2201      	movgt	r2, #1
34188be6:	4413      	add	r3, r2
34188be8:	e7e0      	b.n	34188bac <_printf_float+0x16c>
34188bea:	6823      	ldr	r3, [r4, #0]
34188bec:	055a      	lsls	r2, r3, #21
34188bee:	d407      	bmi.n	34188c00 <_printf_float+0x1c0>
34188bf0:	6923      	ldr	r3, [r4, #16]
34188bf2:	4642      	mov	r2, r8
34188bf4:	4631      	mov	r1, r6
34188bf6:	4628      	mov	r0, r5
34188bf8:	47b8      	blx	r7
34188bfa:	3001      	adds	r0, #1
34188bfc:	d12a      	bne.n	34188c54 <_printf_float+0x214>
34188bfe:	e76b      	b.n	34188ad8 <_printf_float+0x98>
34188c00:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
34188c04:	f240 80e0 	bls.w	34188dc8 <_printf_float+0x388>
34188c08:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
34188c0c:	eeb5 7b40 	vcmp.f64	d7, #0.0
34188c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34188c14:	d133      	bne.n	34188c7e <_printf_float+0x23e>
34188c16:	2301      	movs	r3, #1
34188c18:	4a37      	ldr	r2, [pc, #220]	@ (34188cf8 <_printf_float+0x2b8>)
34188c1a:	4631      	mov	r1, r6
34188c1c:	4628      	mov	r0, r5
34188c1e:	47b8      	blx	r7
34188c20:	3001      	adds	r0, #1
34188c22:	f43f af59 	beq.w	34188ad8 <_printf_float+0x98>
34188c26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
34188c2a:	4543      	cmp	r3, r8
34188c2c:	db02      	blt.n	34188c34 <_printf_float+0x1f4>
34188c2e:	6823      	ldr	r3, [r4, #0]
34188c30:	07d8      	lsls	r0, r3, #31
34188c32:	d50f      	bpl.n	34188c54 <_printf_float+0x214>
34188c34:	9b05      	ldr	r3, [sp, #20]
34188c36:	465a      	mov	r2, fp
34188c38:	4631      	mov	r1, r6
34188c3a:	4628      	mov	r0, r5
34188c3c:	47b8      	blx	r7
34188c3e:	3001      	adds	r0, #1
34188c40:	f43f af4a 	beq.w	34188ad8 <_printf_float+0x98>
34188c44:	f04f 0900 	mov.w	r9, #0
34188c48:	f108 38ff 	add.w	r8, r8, #4294967295
34188c4c:	f104 0a1a 	add.w	sl, r4, #26
34188c50:	45c8      	cmp	r8, r9
34188c52:	dc09      	bgt.n	34188c68 <_printf_float+0x228>
34188c54:	6823      	ldr	r3, [r4, #0]
34188c56:	079b      	lsls	r3, r3, #30
34188c58:	f100 8107 	bmi.w	34188e6a <_printf_float+0x42a>
34188c5c:	68e0      	ldr	r0, [r4, #12]
34188c5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
34188c60:	4298      	cmp	r0, r3
34188c62:	bfb8      	it	lt
34188c64:	4618      	movlt	r0, r3
34188c66:	e739      	b.n	34188adc <_printf_float+0x9c>
34188c68:	2301      	movs	r3, #1
34188c6a:	4652      	mov	r2, sl
34188c6c:	4631      	mov	r1, r6
34188c6e:	4628      	mov	r0, r5
34188c70:	47b8      	blx	r7
34188c72:	3001      	adds	r0, #1
34188c74:	f43f af30 	beq.w	34188ad8 <_printf_float+0x98>
34188c78:	f109 0901 	add.w	r9, r9, #1
34188c7c:	e7e8      	b.n	34188c50 <_printf_float+0x210>
34188c7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34188c80:	2b00      	cmp	r3, #0
34188c82:	dc3b      	bgt.n	34188cfc <_printf_float+0x2bc>
34188c84:	2301      	movs	r3, #1
34188c86:	4a1c      	ldr	r2, [pc, #112]	@ (34188cf8 <_printf_float+0x2b8>)
34188c88:	4631      	mov	r1, r6
34188c8a:	4628      	mov	r0, r5
34188c8c:	47b8      	blx	r7
34188c8e:	3001      	adds	r0, #1
34188c90:	f43f af22 	beq.w	34188ad8 <_printf_float+0x98>
34188c94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
34188c98:	ea59 0303 	orrs.w	r3, r9, r3
34188c9c:	d102      	bne.n	34188ca4 <_printf_float+0x264>
34188c9e:	6823      	ldr	r3, [r4, #0]
34188ca0:	07d9      	lsls	r1, r3, #31
34188ca2:	d5d7      	bpl.n	34188c54 <_printf_float+0x214>
34188ca4:	9b05      	ldr	r3, [sp, #20]
34188ca6:	465a      	mov	r2, fp
34188ca8:	4631      	mov	r1, r6
34188caa:	4628      	mov	r0, r5
34188cac:	47b8      	blx	r7
34188cae:	3001      	adds	r0, #1
34188cb0:	f43f af12 	beq.w	34188ad8 <_printf_float+0x98>
34188cb4:	f04f 0a00 	mov.w	sl, #0
34188cb8:	f104 0b1a 	add.w	fp, r4, #26
34188cbc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34188cbe:	425b      	negs	r3, r3
34188cc0:	4553      	cmp	r3, sl
34188cc2:	dc01      	bgt.n	34188cc8 <_printf_float+0x288>
34188cc4:	464b      	mov	r3, r9
34188cc6:	e794      	b.n	34188bf2 <_printf_float+0x1b2>
34188cc8:	2301      	movs	r3, #1
34188cca:	465a      	mov	r2, fp
34188ccc:	4631      	mov	r1, r6
34188cce:	4628      	mov	r0, r5
34188cd0:	47b8      	blx	r7
34188cd2:	3001      	adds	r0, #1
34188cd4:	f43f af00 	beq.w	34188ad8 <_printf_float+0x98>
34188cd8:	f10a 0a01 	add.w	sl, sl, #1
34188cdc:	e7ee      	b.n	34188cbc <_printf_float+0x27c>
34188cde:	bf00      	nop
34188ce0:	ffffffff 	.word	0xffffffff
34188ce4:	7fefffff 	.word	0x7fefffff
34188ce8:	3418cff7 	.word	0x3418cff7
34188cec:	3418cff3 	.word	0x3418cff3
34188cf0:	3418cfff 	.word	0x3418cfff
34188cf4:	3418cffb 	.word	0x3418cffb
34188cf8:	3418d003 	.word	0x3418d003
34188cfc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
34188cfe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
34188d02:	4553      	cmp	r3, sl
34188d04:	bfa8      	it	ge
34188d06:	4653      	movge	r3, sl
34188d08:	2b00      	cmp	r3, #0
34188d0a:	4699      	mov	r9, r3
34188d0c:	dc37      	bgt.n	34188d7e <_printf_float+0x33e>
34188d0e:	2300      	movs	r3, #0
34188d10:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
34188d14:	f104 021a 	add.w	r2, r4, #26
34188d18:	9307      	str	r3, [sp, #28]
34188d1a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
34188d1c:	9907      	ldr	r1, [sp, #28]
34188d1e:	9306      	str	r3, [sp, #24]
34188d20:	eba3 0309 	sub.w	r3, r3, r9
34188d24:	428b      	cmp	r3, r1
34188d26:	dc31      	bgt.n	34188d8c <_printf_float+0x34c>
34188d28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34188d2a:	459a      	cmp	sl, r3
34188d2c:	dc3b      	bgt.n	34188da6 <_printf_float+0x366>
34188d2e:	6823      	ldr	r3, [r4, #0]
34188d30:	07da      	lsls	r2, r3, #31
34188d32:	d438      	bmi.n	34188da6 <_printf_float+0x366>
34188d34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34188d36:	ebaa 0903 	sub.w	r9, sl, r3
34188d3a:	9b06      	ldr	r3, [sp, #24]
34188d3c:	ebaa 0303 	sub.w	r3, sl, r3
34188d40:	4599      	cmp	r9, r3
34188d42:	bfa8      	it	ge
34188d44:	4699      	movge	r9, r3
34188d46:	f1b9 0f00 	cmp.w	r9, #0
34188d4a:	dc34      	bgt.n	34188db6 <_printf_float+0x376>
34188d4c:	f04f 0800 	mov.w	r8, #0
34188d50:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
34188d54:	f104 0b1a 	add.w	fp, r4, #26
34188d58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34188d5a:	ebaa 0303 	sub.w	r3, sl, r3
34188d5e:	eba3 0309 	sub.w	r3, r3, r9
34188d62:	4543      	cmp	r3, r8
34188d64:	f77f af76 	ble.w	34188c54 <_printf_float+0x214>
34188d68:	2301      	movs	r3, #1
34188d6a:	465a      	mov	r2, fp
34188d6c:	4631      	mov	r1, r6
34188d6e:	4628      	mov	r0, r5
34188d70:	47b8      	blx	r7
34188d72:	3001      	adds	r0, #1
34188d74:	f43f aeb0 	beq.w	34188ad8 <_printf_float+0x98>
34188d78:	f108 0801 	add.w	r8, r8, #1
34188d7c:	e7ec      	b.n	34188d58 <_printf_float+0x318>
34188d7e:	4642      	mov	r2, r8
34188d80:	4631      	mov	r1, r6
34188d82:	4628      	mov	r0, r5
34188d84:	47b8      	blx	r7
34188d86:	3001      	adds	r0, #1
34188d88:	d1c1      	bne.n	34188d0e <_printf_float+0x2ce>
34188d8a:	e6a5      	b.n	34188ad8 <_printf_float+0x98>
34188d8c:	2301      	movs	r3, #1
34188d8e:	4631      	mov	r1, r6
34188d90:	4628      	mov	r0, r5
34188d92:	9206      	str	r2, [sp, #24]
34188d94:	47b8      	blx	r7
34188d96:	3001      	adds	r0, #1
34188d98:	f43f ae9e 	beq.w	34188ad8 <_printf_float+0x98>
34188d9c:	9b07      	ldr	r3, [sp, #28]
34188d9e:	9a06      	ldr	r2, [sp, #24]
34188da0:	3301      	adds	r3, #1
34188da2:	9307      	str	r3, [sp, #28]
34188da4:	e7b9      	b.n	34188d1a <_printf_float+0x2da>
34188da6:	9b05      	ldr	r3, [sp, #20]
34188da8:	465a      	mov	r2, fp
34188daa:	4631      	mov	r1, r6
34188dac:	4628      	mov	r0, r5
34188dae:	47b8      	blx	r7
34188db0:	3001      	adds	r0, #1
34188db2:	d1bf      	bne.n	34188d34 <_printf_float+0x2f4>
34188db4:	e690      	b.n	34188ad8 <_printf_float+0x98>
34188db6:	9a06      	ldr	r2, [sp, #24]
34188db8:	464b      	mov	r3, r9
34188dba:	4631      	mov	r1, r6
34188dbc:	4628      	mov	r0, r5
34188dbe:	4442      	add	r2, r8
34188dc0:	47b8      	blx	r7
34188dc2:	3001      	adds	r0, #1
34188dc4:	d1c2      	bne.n	34188d4c <_printf_float+0x30c>
34188dc6:	e687      	b.n	34188ad8 <_printf_float+0x98>
34188dc8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
34188dcc:	f1b9 0f01 	cmp.w	r9, #1
34188dd0:	dc01      	bgt.n	34188dd6 <_printf_float+0x396>
34188dd2:	07db      	lsls	r3, r3, #31
34188dd4:	d536      	bpl.n	34188e44 <_printf_float+0x404>
34188dd6:	2301      	movs	r3, #1
34188dd8:	4642      	mov	r2, r8
34188dda:	4631      	mov	r1, r6
34188ddc:	4628      	mov	r0, r5
34188dde:	47b8      	blx	r7
34188de0:	3001      	adds	r0, #1
34188de2:	f43f ae79 	beq.w	34188ad8 <_printf_float+0x98>
34188de6:	9b05      	ldr	r3, [sp, #20]
34188de8:	465a      	mov	r2, fp
34188dea:	4631      	mov	r1, r6
34188dec:	4628      	mov	r0, r5
34188dee:	47b8      	blx	r7
34188df0:	3001      	adds	r0, #1
34188df2:	f43f ae71 	beq.w	34188ad8 <_printf_float+0x98>
34188df6:	f109 39ff 	add.w	r9, r9, #4294967295
34188dfa:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
34188dfe:	eeb5 7b40 	vcmp.f64	d7, #0.0
34188e02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34188e06:	d018      	beq.n	34188e3a <_printf_float+0x3fa>
34188e08:	464b      	mov	r3, r9
34188e0a:	f108 0201 	add.w	r2, r8, #1
34188e0e:	4631      	mov	r1, r6
34188e10:	4628      	mov	r0, r5
34188e12:	47b8      	blx	r7
34188e14:	3001      	adds	r0, #1
34188e16:	d10c      	bne.n	34188e32 <_printf_float+0x3f2>
34188e18:	e65e      	b.n	34188ad8 <_printf_float+0x98>
34188e1a:	2301      	movs	r3, #1
34188e1c:	465a      	mov	r2, fp
34188e1e:	4631      	mov	r1, r6
34188e20:	4628      	mov	r0, r5
34188e22:	47b8      	blx	r7
34188e24:	3001      	adds	r0, #1
34188e26:	f43f ae57 	beq.w	34188ad8 <_printf_float+0x98>
34188e2a:	f108 0801 	add.w	r8, r8, #1
34188e2e:	45c8      	cmp	r8, r9
34188e30:	dbf3      	blt.n	34188e1a <_printf_float+0x3da>
34188e32:	4653      	mov	r3, sl
34188e34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
34188e38:	e6dc      	b.n	34188bf4 <_printf_float+0x1b4>
34188e3a:	f04f 0800 	mov.w	r8, #0
34188e3e:	f104 0b1a 	add.w	fp, r4, #26
34188e42:	e7f4      	b.n	34188e2e <_printf_float+0x3ee>
34188e44:	2301      	movs	r3, #1
34188e46:	4642      	mov	r2, r8
34188e48:	e7e1      	b.n	34188e0e <_printf_float+0x3ce>
34188e4a:	2301      	movs	r3, #1
34188e4c:	464a      	mov	r2, r9
34188e4e:	4631      	mov	r1, r6
34188e50:	4628      	mov	r0, r5
34188e52:	47b8      	blx	r7
34188e54:	3001      	adds	r0, #1
34188e56:	f43f ae3f 	beq.w	34188ad8 <_printf_float+0x98>
34188e5a:	f108 0801 	add.w	r8, r8, #1
34188e5e:	68e3      	ldr	r3, [r4, #12]
34188e60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
34188e62:	1a5b      	subs	r3, r3, r1
34188e64:	4543      	cmp	r3, r8
34188e66:	dcf0      	bgt.n	34188e4a <_printf_float+0x40a>
34188e68:	e6f8      	b.n	34188c5c <_printf_float+0x21c>
34188e6a:	f04f 0800 	mov.w	r8, #0
34188e6e:	f104 0919 	add.w	r9, r4, #25
34188e72:	e7f4      	b.n	34188e5e <_printf_float+0x41e>

34188e74 <_printf_common>:
34188e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
34188e78:	4616      	mov	r6, r2
34188e7a:	4698      	mov	r8, r3
34188e7c:	688a      	ldr	r2, [r1, #8]
34188e7e:	4607      	mov	r7, r0
34188e80:	690b      	ldr	r3, [r1, #16]
34188e82:	460c      	mov	r4, r1
34188e84:	f8dd 9020 	ldr.w	r9, [sp, #32]
34188e88:	4293      	cmp	r3, r2
34188e8a:	bfb8      	it	lt
34188e8c:	4613      	movlt	r3, r2
34188e8e:	6033      	str	r3, [r6, #0]
34188e90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
34188e94:	b10a      	cbz	r2, 34188e9a <_printf_common+0x26>
34188e96:	3301      	adds	r3, #1
34188e98:	6033      	str	r3, [r6, #0]
34188e9a:	6823      	ldr	r3, [r4, #0]
34188e9c:	0699      	lsls	r1, r3, #26
34188e9e:	bf42      	ittt	mi
34188ea0:	6833      	ldrmi	r3, [r6, #0]
34188ea2:	3302      	addmi	r3, #2
34188ea4:	6033      	strmi	r3, [r6, #0]
34188ea6:	6825      	ldr	r5, [r4, #0]
34188ea8:	f015 0506 	ands.w	r5, r5, #6
34188eac:	d106      	bne.n	34188ebc <_printf_common+0x48>
34188eae:	f104 0a19 	add.w	sl, r4, #25
34188eb2:	68e3      	ldr	r3, [r4, #12]
34188eb4:	6832      	ldr	r2, [r6, #0]
34188eb6:	1a9b      	subs	r3, r3, r2
34188eb8:	42ab      	cmp	r3, r5
34188eba:	dc2b      	bgt.n	34188f14 <_printf_common+0xa0>
34188ebc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
34188ec0:	6822      	ldr	r2, [r4, #0]
34188ec2:	3b00      	subs	r3, #0
34188ec4:	bf18      	it	ne
34188ec6:	2301      	movne	r3, #1
34188ec8:	0692      	lsls	r2, r2, #26
34188eca:	d430      	bmi.n	34188f2e <_printf_common+0xba>
34188ecc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
34188ed0:	4641      	mov	r1, r8
34188ed2:	4638      	mov	r0, r7
34188ed4:	47c8      	blx	r9
34188ed6:	3001      	adds	r0, #1
34188ed8:	d023      	beq.n	34188f22 <_printf_common+0xae>
34188eda:	6823      	ldr	r3, [r4, #0]
34188edc:	341a      	adds	r4, #26
34188ede:	f854 2c0a 	ldr.w	r2, [r4, #-10]
34188ee2:	f003 0306 	and.w	r3, r3, #6
34188ee6:	2b04      	cmp	r3, #4
34188ee8:	bf0a      	itet	eq
34188eea:	f854 5c0e 	ldreq.w	r5, [r4, #-14]
34188eee:	2500      	movne	r5, #0
34188ef0:	6833      	ldreq	r3, [r6, #0]
34188ef2:	f04f 0600 	mov.w	r6, #0
34188ef6:	bf08      	it	eq
34188ef8:	1aed      	subeq	r5, r5, r3
34188efa:	f854 3c12 	ldr.w	r3, [r4, #-18]
34188efe:	bf08      	it	eq
34188f00:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
34188f04:	4293      	cmp	r3, r2
34188f06:	bfc4      	itt	gt
34188f08:	1a9b      	subgt	r3, r3, r2
34188f0a:	18ed      	addgt	r5, r5, r3
34188f0c:	42b5      	cmp	r5, r6
34188f0e:	d11a      	bne.n	34188f46 <_printf_common+0xd2>
34188f10:	2000      	movs	r0, #0
34188f12:	e008      	b.n	34188f26 <_printf_common+0xb2>
34188f14:	2301      	movs	r3, #1
34188f16:	4652      	mov	r2, sl
34188f18:	4641      	mov	r1, r8
34188f1a:	4638      	mov	r0, r7
34188f1c:	47c8      	blx	r9
34188f1e:	3001      	adds	r0, #1
34188f20:	d103      	bne.n	34188f2a <_printf_common+0xb6>
34188f22:	f04f 30ff 	mov.w	r0, #4294967295
34188f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
34188f2a:	3501      	adds	r5, #1
34188f2c:	e7c1      	b.n	34188eb2 <_printf_common+0x3e>
34188f2e:	18e1      	adds	r1, r4, r3
34188f30:	1c5a      	adds	r2, r3, #1
34188f32:	2030      	movs	r0, #48	@ 0x30
34188f34:	3302      	adds	r3, #2
34188f36:	4422      	add	r2, r4
34188f38:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
34188f3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
34188f40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
34188f44:	e7c2      	b.n	34188ecc <_printf_common+0x58>
34188f46:	2301      	movs	r3, #1
34188f48:	4622      	mov	r2, r4
34188f4a:	4641      	mov	r1, r8
34188f4c:	4638      	mov	r0, r7
34188f4e:	47c8      	blx	r9
34188f50:	3001      	adds	r0, #1
34188f52:	d0e6      	beq.n	34188f22 <_printf_common+0xae>
34188f54:	3601      	adds	r6, #1
34188f56:	e7d9      	b.n	34188f0c <_printf_common+0x98>

34188f58 <_printf_i>:
34188f58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
34188f5c:	7e0f      	ldrb	r7, [r1, #24]
34188f5e:	4691      	mov	r9, r2
34188f60:	4680      	mov	r8, r0
34188f62:	460c      	mov	r4, r1
34188f64:	2f78      	cmp	r7, #120	@ 0x78
34188f66:	469a      	mov	sl, r3
34188f68:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
34188f6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
34188f6e:	d807      	bhi.n	34188f80 <_printf_i+0x28>
34188f70:	2f62      	cmp	r7, #98	@ 0x62
34188f72:	d80a      	bhi.n	34188f8a <_printf_i+0x32>
34188f74:	2f00      	cmp	r7, #0
34188f76:	f000 80d1 	beq.w	3418911c <_printf_i+0x1c4>
34188f7a:	2f58      	cmp	r7, #88	@ 0x58
34188f7c:	f000 80b8 	beq.w	341890f0 <_printf_i+0x198>
34188f80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
34188f84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
34188f88:	e03a      	b.n	34189000 <_printf_i+0xa8>
34188f8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
34188f8e:	2b15      	cmp	r3, #21
34188f90:	d8f6      	bhi.n	34188f80 <_printf_i+0x28>
34188f92:	a101      	add	r1, pc, #4	@ (adr r1, 34188f98 <_printf_i+0x40>)
34188f94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
34188f98:	34188ff1 	.word	0x34188ff1
34188f9c:	34189005 	.word	0x34189005
34188fa0:	34188f81 	.word	0x34188f81
34188fa4:	34188f81 	.word	0x34188f81
34188fa8:	34188f81 	.word	0x34188f81
34188fac:	34188f81 	.word	0x34188f81
34188fb0:	34189005 	.word	0x34189005
34188fb4:	34188f81 	.word	0x34188f81
34188fb8:	34188f81 	.word	0x34188f81
34188fbc:	34188f81 	.word	0x34188f81
34188fc0:	34188f81 	.word	0x34188f81
34188fc4:	34189103 	.word	0x34189103
34188fc8:	3418902f 	.word	0x3418902f
34188fcc:	341890bd 	.word	0x341890bd
34188fd0:	34188f81 	.word	0x34188f81
34188fd4:	34188f81 	.word	0x34188f81
34188fd8:	34189125 	.word	0x34189125
34188fdc:	34188f81 	.word	0x34188f81
34188fe0:	3418902f 	.word	0x3418902f
34188fe4:	34188f81 	.word	0x34188f81
34188fe8:	34188f81 	.word	0x34188f81
34188fec:	341890c5 	.word	0x341890c5
34188ff0:	6833      	ldr	r3, [r6, #0]
34188ff2:	1d1a      	adds	r2, r3, #4
34188ff4:	681b      	ldr	r3, [r3, #0]
34188ff6:	6032      	str	r2, [r6, #0]
34188ff8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
34188ffc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
34189000:	2301      	movs	r3, #1
34189002:	e09c      	b.n	3418913e <_printf_i+0x1e6>
34189004:	6833      	ldr	r3, [r6, #0]
34189006:	6820      	ldr	r0, [r4, #0]
34189008:	1d19      	adds	r1, r3, #4
3418900a:	6031      	str	r1, [r6, #0]
3418900c:	0606      	lsls	r6, r0, #24
3418900e:	d501      	bpl.n	34189014 <_printf_i+0xbc>
34189010:	681d      	ldr	r5, [r3, #0]
34189012:	e003      	b.n	3418901c <_printf_i+0xc4>
34189014:	0645      	lsls	r5, r0, #25
34189016:	d5fb      	bpl.n	34189010 <_printf_i+0xb8>
34189018:	f9b3 5000 	ldrsh.w	r5, [r3]
3418901c:	2d00      	cmp	r5, #0
3418901e:	da03      	bge.n	34189028 <_printf_i+0xd0>
34189020:	232d      	movs	r3, #45	@ 0x2d
34189022:	426d      	negs	r5, r5
34189024:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34189028:	4858      	ldr	r0, [pc, #352]	@ (3418918c <_printf_i+0x234>)
3418902a:	230a      	movs	r3, #10
3418902c:	e011      	b.n	34189052 <_printf_i+0xfa>
3418902e:	6821      	ldr	r1, [r4, #0]
34189030:	6833      	ldr	r3, [r6, #0]
34189032:	0608      	lsls	r0, r1, #24
34189034:	f853 5b04 	ldr.w	r5, [r3], #4
34189038:	d402      	bmi.n	34189040 <_printf_i+0xe8>
3418903a:	0649      	lsls	r1, r1, #25
3418903c:	bf48      	it	mi
3418903e:	b2ad      	uxthmi	r5, r5
34189040:	2f6f      	cmp	r7, #111	@ 0x6f
34189042:	6033      	str	r3, [r6, #0]
34189044:	4851      	ldr	r0, [pc, #324]	@ (3418918c <_printf_i+0x234>)
34189046:	bf14      	ite	ne
34189048:	230a      	movne	r3, #10
3418904a:	2308      	moveq	r3, #8
3418904c:	2100      	movs	r1, #0
3418904e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
34189052:	6866      	ldr	r6, [r4, #4]
34189054:	2e00      	cmp	r6, #0
34189056:	60a6      	str	r6, [r4, #8]
34189058:	db05      	blt.n	34189066 <_printf_i+0x10e>
3418905a:	6821      	ldr	r1, [r4, #0]
3418905c:	432e      	orrs	r6, r5
3418905e:	f021 0104 	bic.w	r1, r1, #4
34189062:	6021      	str	r1, [r4, #0]
34189064:	d04b      	beq.n	341890fe <_printf_i+0x1a6>
34189066:	4616      	mov	r6, r2
34189068:	fbb5 f1f3 	udiv	r1, r5, r3
3418906c:	fb03 5711 	mls	r7, r3, r1, r5
34189070:	5dc7      	ldrb	r7, [r0, r7]
34189072:	f806 7d01 	strb.w	r7, [r6, #-1]!
34189076:	462f      	mov	r7, r5
34189078:	460d      	mov	r5, r1
3418907a:	42bb      	cmp	r3, r7
3418907c:	d9f4      	bls.n	34189068 <_printf_i+0x110>
3418907e:	2b08      	cmp	r3, #8
34189080:	d10b      	bne.n	3418909a <_printf_i+0x142>
34189082:	6823      	ldr	r3, [r4, #0]
34189084:	07df      	lsls	r7, r3, #31
34189086:	d508      	bpl.n	3418909a <_printf_i+0x142>
34189088:	6923      	ldr	r3, [r4, #16]
3418908a:	6861      	ldr	r1, [r4, #4]
3418908c:	4299      	cmp	r1, r3
3418908e:	bfde      	ittt	le
34189090:	2330      	movle	r3, #48	@ 0x30
34189092:	f806 3c01 	strble.w	r3, [r6, #-1]
34189096:	f106 36ff 	addle.w	r6, r6, #4294967295
3418909a:	1b92      	subs	r2, r2, r6
3418909c:	6122      	str	r2, [r4, #16]
3418909e:	464b      	mov	r3, r9
341890a0:	aa03      	add	r2, sp, #12
341890a2:	4621      	mov	r1, r4
341890a4:	4640      	mov	r0, r8
341890a6:	f8cd a000 	str.w	sl, [sp]
341890aa:	f7ff fee3 	bl	34188e74 <_printf_common>
341890ae:	3001      	adds	r0, #1
341890b0:	d14a      	bne.n	34189148 <_printf_i+0x1f0>
341890b2:	f04f 30ff 	mov.w	r0, #4294967295
341890b6:	b004      	add	sp, #16
341890b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
341890bc:	6823      	ldr	r3, [r4, #0]
341890be:	f043 0320 	orr.w	r3, r3, #32
341890c2:	6023      	str	r3, [r4, #0]
341890c4:	2778      	movs	r7, #120	@ 0x78
341890c6:	4832      	ldr	r0, [pc, #200]	@ (34189190 <_printf_i+0x238>)
341890c8:	6823      	ldr	r3, [r4, #0]
341890ca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
341890ce:	061f      	lsls	r7, r3, #24
341890d0:	6831      	ldr	r1, [r6, #0]
341890d2:	f851 5b04 	ldr.w	r5, [r1], #4
341890d6:	d402      	bmi.n	341890de <_printf_i+0x186>
341890d8:	065f      	lsls	r7, r3, #25
341890da:	bf48      	it	mi
341890dc:	b2ad      	uxthmi	r5, r5
341890de:	6031      	str	r1, [r6, #0]
341890e0:	07d9      	lsls	r1, r3, #31
341890e2:	bf44      	itt	mi
341890e4:	f043 0320 	orrmi.w	r3, r3, #32
341890e8:	6023      	strmi	r3, [r4, #0]
341890ea:	b11d      	cbz	r5, 341890f4 <_printf_i+0x19c>
341890ec:	2310      	movs	r3, #16
341890ee:	e7ad      	b.n	3418904c <_printf_i+0xf4>
341890f0:	4826      	ldr	r0, [pc, #152]	@ (3418918c <_printf_i+0x234>)
341890f2:	e7e9      	b.n	341890c8 <_printf_i+0x170>
341890f4:	6823      	ldr	r3, [r4, #0]
341890f6:	f023 0320 	bic.w	r3, r3, #32
341890fa:	6023      	str	r3, [r4, #0]
341890fc:	e7f6      	b.n	341890ec <_printf_i+0x194>
341890fe:	4616      	mov	r6, r2
34189100:	e7bd      	b.n	3418907e <_printf_i+0x126>
34189102:	6833      	ldr	r3, [r6, #0]
34189104:	6825      	ldr	r5, [r4, #0]
34189106:	1d18      	adds	r0, r3, #4
34189108:	6961      	ldr	r1, [r4, #20]
3418910a:	6030      	str	r0, [r6, #0]
3418910c:	062e      	lsls	r6, r5, #24
3418910e:	681b      	ldr	r3, [r3, #0]
34189110:	d501      	bpl.n	34189116 <_printf_i+0x1be>
34189112:	6019      	str	r1, [r3, #0]
34189114:	e002      	b.n	3418911c <_printf_i+0x1c4>
34189116:	0668      	lsls	r0, r5, #25
34189118:	d5fb      	bpl.n	34189112 <_printf_i+0x1ba>
3418911a:	8019      	strh	r1, [r3, #0]
3418911c:	2300      	movs	r3, #0
3418911e:	4616      	mov	r6, r2
34189120:	6123      	str	r3, [r4, #16]
34189122:	e7bc      	b.n	3418909e <_printf_i+0x146>
34189124:	6833      	ldr	r3, [r6, #0]
34189126:	2100      	movs	r1, #0
34189128:	1d1a      	adds	r2, r3, #4
3418912a:	6032      	str	r2, [r6, #0]
3418912c:	681e      	ldr	r6, [r3, #0]
3418912e:	6862      	ldr	r2, [r4, #4]
34189130:	4630      	mov	r0, r6
34189132:	f000 fbdc 	bl	341898ee <memchr>
34189136:	b108      	cbz	r0, 3418913c <_printf_i+0x1e4>
34189138:	1b80      	subs	r0, r0, r6
3418913a:	6060      	str	r0, [r4, #4]
3418913c:	6863      	ldr	r3, [r4, #4]
3418913e:	6123      	str	r3, [r4, #16]
34189140:	2300      	movs	r3, #0
34189142:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
34189146:	e7aa      	b.n	3418909e <_printf_i+0x146>
34189148:	6923      	ldr	r3, [r4, #16]
3418914a:	4632      	mov	r2, r6
3418914c:	4649      	mov	r1, r9
3418914e:	4640      	mov	r0, r8
34189150:	47d0      	blx	sl
34189152:	3001      	adds	r0, #1
34189154:	d0ad      	beq.n	341890b2 <_printf_i+0x15a>
34189156:	6823      	ldr	r3, [r4, #0]
34189158:	079b      	lsls	r3, r3, #30
3418915a:	d413      	bmi.n	34189184 <_printf_i+0x22c>
3418915c:	68e0      	ldr	r0, [r4, #12]
3418915e:	9b03      	ldr	r3, [sp, #12]
34189160:	4298      	cmp	r0, r3
34189162:	bfb8      	it	lt
34189164:	4618      	movlt	r0, r3
34189166:	e7a6      	b.n	341890b6 <_printf_i+0x15e>
34189168:	2301      	movs	r3, #1
3418916a:	4632      	mov	r2, r6
3418916c:	4649      	mov	r1, r9
3418916e:	4640      	mov	r0, r8
34189170:	47d0      	blx	sl
34189172:	3001      	adds	r0, #1
34189174:	d09d      	beq.n	341890b2 <_printf_i+0x15a>
34189176:	3501      	adds	r5, #1
34189178:	68e3      	ldr	r3, [r4, #12]
3418917a:	9903      	ldr	r1, [sp, #12]
3418917c:	1a5b      	subs	r3, r3, r1
3418917e:	42ab      	cmp	r3, r5
34189180:	dcf2      	bgt.n	34189168 <_printf_i+0x210>
34189182:	e7eb      	b.n	3418915c <_printf_i+0x204>
34189184:	2500      	movs	r5, #0
34189186:	f104 0619 	add.w	r6, r4, #25
3418918a:	e7f5      	b.n	34189178 <_printf_i+0x220>
3418918c:	3418d005 	.word	0x3418d005
34189190:	3418d016 	.word	0x3418d016

34189194 <_scanf_float>:
34189194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34189198:	b087      	sub	sp, #28
3418919a:	4691      	mov	r9, r2
3418919c:	4680      	mov	r8, r0
3418919e:	460c      	mov	r4, r1
341891a0:	9303      	str	r3, [sp, #12]
341891a2:	688b      	ldr	r3, [r1, #8]
341891a4:	1e5a      	subs	r2, r3, #1
341891a6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
341891aa:	460a      	mov	r2, r1
341891ac:	bf89      	itett	hi
341891ae:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
341891b2:	f04f 0b00 	movls.w	fp, #0
341891b6:	eb03 0b05 	addhi.w	fp, r3, r5
341891ba:	f240 135d 	movwhi	r3, #349	@ 0x15d
341891be:	f04f 0500 	mov.w	r5, #0
341891c2:	bf88      	it	hi
341891c4:	608b      	strhi	r3, [r1, #8]
341891c6:	680b      	ldr	r3, [r1, #0]
341891c8:	46aa      	mov	sl, r5
341891ca:	462f      	mov	r7, r5
341891cc:	9502      	str	r5, [sp, #8]
341891ce:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
341891d2:	f842 3b1c 	str.w	r3, [r2], #28
341891d6:	4616      	mov	r6, r2
341891d8:	9201      	str	r2, [sp, #4]
341891da:	e9cd 5504 	strd	r5, r5, [sp, #16]
341891de:	68a2      	ldr	r2, [r4, #8]
341891e0:	b15a      	cbz	r2, 341891fa <_scanf_float+0x66>
341891e2:	f8d9 3000 	ldr.w	r3, [r9]
341891e6:	781b      	ldrb	r3, [r3, #0]
341891e8:	2b4e      	cmp	r3, #78	@ 0x4e
341891ea:	d863      	bhi.n	341892b4 <_scanf_float+0x120>
341891ec:	2b40      	cmp	r3, #64	@ 0x40
341891ee:	d83b      	bhi.n	34189268 <_scanf_float+0xd4>
341891f0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
341891f4:	b2c8      	uxtb	r0, r1
341891f6:	280e      	cmp	r0, #14
341891f8:	d939      	bls.n	3418926e <_scanf_float+0xda>
341891fa:	b11f      	cbz	r7, 34189204 <_scanf_float+0x70>
341891fc:	6823      	ldr	r3, [r4, #0]
341891fe:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
34189202:	6023      	str	r3, [r4, #0]
34189204:	f10a 3aff 	add.w	sl, sl, #4294967295
34189208:	f1ba 0f01 	cmp.w	sl, #1
3418920c:	f200 8115 	bhi.w	3418943a <_scanf_float+0x2a6>
34189210:	9b01      	ldr	r3, [sp, #4]
34189212:	429e      	cmp	r6, r3
34189214:	f200 8106 	bhi.w	34189424 <_scanf_float+0x290>
34189218:	2001      	movs	r0, #1
3418921a:	b007      	add	sp, #28
3418921c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34189220:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
34189224:	2a0d      	cmp	r2, #13
34189226:	d8e8      	bhi.n	341891fa <_scanf_float+0x66>
34189228:	a101      	add	r1, pc, #4	@ (adr r1, 34189230 <_scanf_float+0x9c>)
3418922a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
3418922e:	bf00      	nop
34189230:	34189379 	.word	0x34189379
34189234:	341891fb 	.word	0x341891fb
34189238:	341891fb 	.word	0x341891fb
3418923c:	341891fb 	.word	0x341891fb
34189240:	341893d5 	.word	0x341893d5
34189244:	341893af 	.word	0x341893af
34189248:	341891fb 	.word	0x341891fb
3418924c:	341891fb 	.word	0x341891fb
34189250:	34189387 	.word	0x34189387
34189254:	341891fb 	.word	0x341891fb
34189258:	341891fb 	.word	0x341891fb
3418925c:	341891fb 	.word	0x341891fb
34189260:	341891fb 	.word	0x341891fb
34189264:	34189343 	.word	0x34189343
34189268:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
3418926c:	e7da      	b.n	34189224 <_scanf_float+0x90>
3418926e:	290e      	cmp	r1, #14
34189270:	d8c3      	bhi.n	341891fa <_scanf_float+0x66>
34189272:	a001      	add	r0, pc, #4	@ (adr r0, 34189278 <_scanf_float+0xe4>)
34189274:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
34189278:	34189333 	.word	0x34189333
3418927c:	341891fb 	.word	0x341891fb
34189280:	34189333 	.word	0x34189333
34189284:	341893c3 	.word	0x341893c3
34189288:	341891fb 	.word	0x341891fb
3418928c:	341892d5 	.word	0x341892d5
34189290:	34189319 	.word	0x34189319
34189294:	34189319 	.word	0x34189319
34189298:	34189319 	.word	0x34189319
3418929c:	34189319 	.word	0x34189319
341892a0:	34189319 	.word	0x34189319
341892a4:	34189319 	.word	0x34189319
341892a8:	34189319 	.word	0x34189319
341892ac:	34189319 	.word	0x34189319
341892b0:	34189319 	.word	0x34189319
341892b4:	2b6e      	cmp	r3, #110	@ 0x6e
341892b6:	d809      	bhi.n	341892cc <_scanf_float+0x138>
341892b8:	2b60      	cmp	r3, #96	@ 0x60
341892ba:	d8b1      	bhi.n	34189220 <_scanf_float+0x8c>
341892bc:	2b54      	cmp	r3, #84	@ 0x54
341892be:	d07b      	beq.n	341893b8 <_scanf_float+0x224>
341892c0:	2b59      	cmp	r3, #89	@ 0x59
341892c2:	d19a      	bne.n	341891fa <_scanf_float+0x66>
341892c4:	2d07      	cmp	r5, #7
341892c6:	d198      	bne.n	341891fa <_scanf_float+0x66>
341892c8:	2508      	movs	r5, #8
341892ca:	e02f      	b.n	3418932c <_scanf_float+0x198>
341892cc:	2b74      	cmp	r3, #116	@ 0x74
341892ce:	d073      	beq.n	341893b8 <_scanf_float+0x224>
341892d0:	2b79      	cmp	r3, #121	@ 0x79
341892d2:	e7f6      	b.n	341892c2 <_scanf_float+0x12e>
341892d4:	6821      	ldr	r1, [r4, #0]
341892d6:	05c8      	lsls	r0, r1, #23
341892d8:	d51e      	bpl.n	34189318 <_scanf_float+0x184>
341892da:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
341892de:	3701      	adds	r7, #1
341892e0:	6021      	str	r1, [r4, #0]
341892e2:	f1bb 0f00 	cmp.w	fp, #0
341892e6:	d003      	beq.n	341892f0 <_scanf_float+0x15c>
341892e8:	3201      	adds	r2, #1
341892ea:	f10b 3bff 	add.w	fp, fp, #4294967295
341892ee:	60a2      	str	r2, [r4, #8]
341892f0:	68a3      	ldr	r3, [r4, #8]
341892f2:	3b01      	subs	r3, #1
341892f4:	60a3      	str	r3, [r4, #8]
341892f6:	6923      	ldr	r3, [r4, #16]
341892f8:	3301      	adds	r3, #1
341892fa:	6123      	str	r3, [r4, #16]
341892fc:	f8d9 3004 	ldr.w	r3, [r9, #4]
34189300:	3b01      	subs	r3, #1
34189302:	2b00      	cmp	r3, #0
34189304:	f8c9 3004 	str.w	r3, [r9, #4]
34189308:	f340 8083 	ble.w	34189412 <_scanf_float+0x27e>
3418930c:	f8d9 3000 	ldr.w	r3, [r9]
34189310:	3301      	adds	r3, #1
34189312:	f8c9 3000 	str.w	r3, [r9]
34189316:	e762      	b.n	341891de <_scanf_float+0x4a>
34189318:	eb1a 0105 	adds.w	r1, sl, r5
3418931c:	f47f af6d 	bne.w	341891fa <_scanf_float+0x66>
34189320:	6822      	ldr	r2, [r4, #0]
34189322:	460d      	mov	r5, r1
34189324:	468a      	mov	sl, r1
34189326:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
3418932a:	6022      	str	r2, [r4, #0]
3418932c:	f806 3b01 	strb.w	r3, [r6], #1
34189330:	e7de      	b.n	341892f0 <_scanf_float+0x15c>
34189332:	6822      	ldr	r2, [r4, #0]
34189334:	0610      	lsls	r0, r2, #24
34189336:	f57f af60 	bpl.w	341891fa <_scanf_float+0x66>
3418933a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
3418933e:	6022      	str	r2, [r4, #0]
34189340:	e7f4      	b.n	3418932c <_scanf_float+0x198>
34189342:	f1ba 0f00 	cmp.w	sl, #0
34189346:	d10c      	bne.n	34189362 <_scanf_float+0x1ce>
34189348:	b977      	cbnz	r7, 34189368 <_scanf_float+0x1d4>
3418934a:	6822      	ldr	r2, [r4, #0]
3418934c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
34189350:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
34189354:	d108      	bne.n	34189368 <_scanf_float+0x1d4>
34189356:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
3418935a:	f04f 0a01 	mov.w	sl, #1
3418935e:	6022      	str	r2, [r4, #0]
34189360:	e7e4      	b.n	3418932c <_scanf_float+0x198>
34189362:	f1ba 0f02 	cmp.w	sl, #2
34189366:	d051      	beq.n	3418940c <_scanf_float+0x278>
34189368:	2d01      	cmp	r5, #1
3418936a:	d002      	beq.n	34189372 <_scanf_float+0x1de>
3418936c:	2d04      	cmp	r5, #4
3418936e:	f47f af44 	bne.w	341891fa <_scanf_float+0x66>
34189372:	3501      	adds	r5, #1
34189374:	b2ed      	uxtb	r5, r5
34189376:	e7d9      	b.n	3418932c <_scanf_float+0x198>
34189378:	f1ba 0f01 	cmp.w	sl, #1
3418937c:	f47f af3d 	bne.w	341891fa <_scanf_float+0x66>
34189380:	f04f 0a02 	mov.w	sl, #2
34189384:	e7d2      	b.n	3418932c <_scanf_float+0x198>
34189386:	b975      	cbnz	r5, 341893a6 <_scanf_float+0x212>
34189388:	2f00      	cmp	r7, #0
3418938a:	f47f af37 	bne.w	341891fc <_scanf_float+0x68>
3418938e:	6822      	ldr	r2, [r4, #0]
34189390:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
34189394:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
34189398:	f040 80fc 	bne.w	34189594 <_scanf_float+0x400>
3418939c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
341893a0:	2501      	movs	r5, #1
341893a2:	6022      	str	r2, [r4, #0]
341893a4:	e7c2      	b.n	3418932c <_scanf_float+0x198>
341893a6:	2d03      	cmp	r5, #3
341893a8:	d0e3      	beq.n	34189372 <_scanf_float+0x1de>
341893aa:	2d05      	cmp	r5, #5
341893ac:	e7df      	b.n	3418936e <_scanf_float+0x1da>
341893ae:	2d02      	cmp	r5, #2
341893b0:	f47f af23 	bne.w	341891fa <_scanf_float+0x66>
341893b4:	2503      	movs	r5, #3
341893b6:	e7b9      	b.n	3418932c <_scanf_float+0x198>
341893b8:	2d06      	cmp	r5, #6
341893ba:	f47f af1e 	bne.w	341891fa <_scanf_float+0x66>
341893be:	2507      	movs	r5, #7
341893c0:	e7b4      	b.n	3418932c <_scanf_float+0x198>
341893c2:	6822      	ldr	r2, [r4, #0]
341893c4:	0591      	lsls	r1, r2, #22
341893c6:	f57f af18 	bpl.w	341891fa <_scanf_float+0x66>
341893ca:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
341893ce:	9702      	str	r7, [sp, #8]
341893d0:	6022      	str	r2, [r4, #0]
341893d2:	e7ab      	b.n	3418932c <_scanf_float+0x198>
341893d4:	6822      	ldr	r2, [r4, #0]
341893d6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
341893da:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
341893de:	d005      	beq.n	341893ec <_scanf_float+0x258>
341893e0:	0550      	lsls	r0, r2, #21
341893e2:	f57f af0a 	bpl.w	341891fa <_scanf_float+0x66>
341893e6:	2f00      	cmp	r7, #0
341893e8:	f000 80d4 	beq.w	34189594 <_scanf_float+0x400>
341893ec:	0591      	lsls	r1, r2, #22
341893ee:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
341893f2:	bf58      	it	pl
341893f4:	9902      	ldrpl	r1, [sp, #8]
341893f6:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
341893fa:	bf58      	it	pl
341893fc:	1a79      	subpl	r1, r7, r1
341893fe:	6022      	str	r2, [r4, #0]
34189400:	f04f 0700 	mov.w	r7, #0
34189404:	bf58      	it	pl
34189406:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
3418940a:	e78f      	b.n	3418932c <_scanf_float+0x198>
3418940c:	f04f 0a03 	mov.w	sl, #3
34189410:	e78c      	b.n	3418932c <_scanf_float+0x198>
34189412:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
34189416:	4649      	mov	r1, r9
34189418:	4640      	mov	r0, r8
3418941a:	4798      	blx	r3
3418941c:	2800      	cmp	r0, #0
3418941e:	f43f aede 	beq.w	341891de <_scanf_float+0x4a>
34189422:	e6ea      	b.n	341891fa <_scanf_float+0x66>
34189424:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34189428:	464a      	mov	r2, r9
3418942a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
3418942e:	4640      	mov	r0, r8
34189430:	4798      	blx	r3
34189432:	6923      	ldr	r3, [r4, #16]
34189434:	3b01      	subs	r3, #1
34189436:	6123      	str	r3, [r4, #16]
34189438:	e6ea      	b.n	34189210 <_scanf_float+0x7c>
3418943a:	1e6b      	subs	r3, r5, #1
3418943c:	2b06      	cmp	r3, #6
3418943e:	d824      	bhi.n	3418948a <_scanf_float+0x2f6>
34189440:	2d02      	cmp	r5, #2
34189442:	d836      	bhi.n	341894b2 <_scanf_float+0x31e>
34189444:	9b01      	ldr	r3, [sp, #4]
34189446:	429e      	cmp	r6, r3
34189448:	f67f aee6 	bls.w	34189218 <_scanf_float+0x84>
3418944c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34189450:	464a      	mov	r2, r9
34189452:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
34189456:	4640      	mov	r0, r8
34189458:	4798      	blx	r3
3418945a:	6923      	ldr	r3, [r4, #16]
3418945c:	3b01      	subs	r3, #1
3418945e:	6123      	str	r3, [r4, #16]
34189460:	e7f0      	b.n	34189444 <_scanf_float+0x2b0>
34189462:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
34189466:	464a      	mov	r2, r9
34189468:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
3418946c:	4640      	mov	r0, r8
3418946e:	4798      	blx	r3
34189470:	6923      	ldr	r3, [r4, #16]
34189472:	3b01      	subs	r3, #1
34189474:	6123      	str	r3, [r4, #16]
34189476:	f10a 3aff 	add.w	sl, sl, #4294967295
3418947a:	fa5f fa8a 	uxtb.w	sl, sl
3418947e:	f1ba 0f02 	cmp.w	sl, #2
34189482:	d1ee      	bne.n	34189462 <_scanf_float+0x2ce>
34189484:	3d03      	subs	r5, #3
34189486:	b2ed      	uxtb	r5, r5
34189488:	1b76      	subs	r6, r6, r5
3418948a:	6823      	ldr	r3, [r4, #0]
3418948c:	05da      	lsls	r2, r3, #23
3418948e:	d52f      	bpl.n	341894f0 <_scanf_float+0x35c>
34189490:	055b      	lsls	r3, r3, #21
34189492:	d511      	bpl.n	341894b8 <_scanf_float+0x324>
34189494:	9b01      	ldr	r3, [sp, #4]
34189496:	429e      	cmp	r6, r3
34189498:	f67f aebe 	bls.w	34189218 <_scanf_float+0x84>
3418949c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
341894a0:	464a      	mov	r2, r9
341894a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
341894a6:	4640      	mov	r0, r8
341894a8:	4798      	blx	r3
341894aa:	6923      	ldr	r3, [r4, #16]
341894ac:	3b01      	subs	r3, #1
341894ae:	6123      	str	r3, [r4, #16]
341894b0:	e7f0      	b.n	34189494 <_scanf_float+0x300>
341894b2:	46aa      	mov	sl, r5
341894b4:	46b3      	mov	fp, r6
341894b6:	e7de      	b.n	34189476 <_scanf_float+0x2e2>
341894b8:	f816 1c01 	ldrb.w	r1, [r6, #-1]
341894bc:	1e75      	subs	r5, r6, #1
341894be:	6923      	ldr	r3, [r4, #16]
341894c0:	2965      	cmp	r1, #101	@ 0x65
341894c2:	f103 33ff 	add.w	r3, r3, #4294967295
341894c6:	6123      	str	r3, [r4, #16]
341894c8:	d00c      	beq.n	341894e4 <_scanf_float+0x350>
341894ca:	2945      	cmp	r1, #69	@ 0x45
341894cc:	d00a      	beq.n	341894e4 <_scanf_float+0x350>
341894ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
341894d2:	464a      	mov	r2, r9
341894d4:	4640      	mov	r0, r8
341894d6:	1eb5      	subs	r5, r6, #2
341894d8:	4798      	blx	r3
341894da:	6923      	ldr	r3, [r4, #16]
341894dc:	f816 1c02 	ldrb.w	r1, [r6, #-2]
341894e0:	3b01      	subs	r3, #1
341894e2:	6123      	str	r3, [r4, #16]
341894e4:	462e      	mov	r6, r5
341894e6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
341894ea:	464a      	mov	r2, r9
341894ec:	4640      	mov	r0, r8
341894ee:	4798      	blx	r3
341894f0:	6822      	ldr	r2, [r4, #0]
341894f2:	f012 0210 	ands.w	r2, r2, #16
341894f6:	d001      	beq.n	341894fc <_scanf_float+0x368>
341894f8:	2000      	movs	r0, #0
341894fa:	e68e      	b.n	3418921a <_scanf_float+0x86>
341894fc:	7032      	strb	r2, [r6, #0]
341894fe:	6823      	ldr	r3, [r4, #0]
34189500:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
34189504:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
34189508:	d123      	bne.n	34189552 <_scanf_float+0x3be>
3418950a:	9b02      	ldr	r3, [sp, #8]
3418950c:	429f      	cmp	r7, r3
3418950e:	d00a      	beq.n	34189526 <_scanf_float+0x392>
34189510:	1bda      	subs	r2, r3, r7
34189512:	f204 136f 	addw	r3, r4, #367	@ 0x16f
34189516:	4920      	ldr	r1, [pc, #128]	@ (34189598 <_scanf_float+0x404>)
34189518:	429e      	cmp	r6, r3
3418951a:	bf28      	it	cs
3418951c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
34189520:	4630      	mov	r0, r6
34189522:	f000 f8ff 	bl	34189724 <siprintf>
34189526:	2200      	movs	r2, #0
34189528:	9901      	ldr	r1, [sp, #4]
3418952a:	4640      	mov	r0, r8
3418952c:	f002 fb5a 	bl	3418bbe4 <_strtod_r>
34189530:	6821      	ldr	r1, [r4, #0]
34189532:	9b03      	ldr	r3, [sp, #12]
34189534:	f011 0f02 	tst.w	r1, #2
34189538:	681b      	ldr	r3, [r3, #0]
3418953a:	f103 0204 	add.w	r2, r3, #4
3418953e:	d015      	beq.n	3418956c <_scanf_float+0x3d8>
34189540:	9903      	ldr	r1, [sp, #12]
34189542:	600a      	str	r2, [r1, #0]
34189544:	681b      	ldr	r3, [r3, #0]
34189546:	ed83 0b00 	vstr	d0, [r3]
3418954a:	68e3      	ldr	r3, [r4, #12]
3418954c:	3301      	adds	r3, #1
3418954e:	60e3      	str	r3, [r4, #12]
34189550:	e7d2      	b.n	341894f8 <_scanf_float+0x364>
34189552:	9b04      	ldr	r3, [sp, #16]
34189554:	2b00      	cmp	r3, #0
34189556:	d0e6      	beq.n	34189526 <_scanf_float+0x392>
34189558:	9905      	ldr	r1, [sp, #20]
3418955a:	230a      	movs	r3, #10
3418955c:	4640      	mov	r0, r8
3418955e:	3101      	adds	r1, #1
34189560:	f002 fbc0 	bl	3418bce4 <_strtol_r>
34189564:	9b04      	ldr	r3, [sp, #16]
34189566:	9e05      	ldr	r6, [sp, #20]
34189568:	1ac2      	subs	r2, r0, r3
3418956a:	e7d2      	b.n	34189512 <_scanf_float+0x37e>
3418956c:	f011 0f04 	tst.w	r1, #4
34189570:	9903      	ldr	r1, [sp, #12]
34189572:	600a      	str	r2, [r1, #0]
34189574:	d1e6      	bne.n	34189544 <_scanf_float+0x3b0>
34189576:	eeb4 0b40 	vcmp.f64	d0, d0
3418957a:	681d      	ldr	r5, [r3, #0]
3418957c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189580:	d705      	bvc.n	3418958e <_scanf_float+0x3fa>
34189582:	4806      	ldr	r0, [pc, #24]	@ (3418959c <_scanf_float+0x408>)
34189584:	f000 f9ce 	bl	34189924 <nanf>
34189588:	ed85 0a00 	vstr	s0, [r5]
3418958c:	e7dd      	b.n	3418954a <_scanf_float+0x3b6>
3418958e:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
34189592:	e7f9      	b.n	34189588 <_scanf_float+0x3f4>
34189594:	2700      	movs	r7, #0
34189596:	e635      	b.n	34189204 <_scanf_float+0x70>
34189598:	3418d027 	.word	0x3418d027
3418959c:	3418d168 	.word	0x3418d168

341895a0 <std>:
341895a0:	2300      	movs	r3, #0
341895a2:	b510      	push	{r4, lr}
341895a4:	4604      	mov	r4, r0
341895a6:	6083      	str	r3, [r0, #8]
341895a8:	8181      	strh	r1, [r0, #12]
341895aa:	4619      	mov	r1, r3
341895ac:	6643      	str	r3, [r0, #100]	@ 0x64
341895ae:	81c2      	strh	r2, [r0, #14]
341895b0:	2208      	movs	r2, #8
341895b2:	6183      	str	r3, [r0, #24]
341895b4:	e9c0 3300 	strd	r3, r3, [r0]
341895b8:	e9c0 3304 	strd	r3, r3, [r0, #16]
341895bc:	305c      	adds	r0, #92	@ 0x5c
341895be:	f000 f916 	bl	341897ee <memset>
341895c2:	4b0d      	ldr	r3, [pc, #52]	@ (341895f8 <std+0x58>)
341895c4:	6224      	str	r4, [r4, #32]
341895c6:	6263      	str	r3, [r4, #36]	@ 0x24
341895c8:	4b0c      	ldr	r3, [pc, #48]	@ (341895fc <std+0x5c>)
341895ca:	62a3      	str	r3, [r4, #40]	@ 0x28
341895cc:	4b0c      	ldr	r3, [pc, #48]	@ (34189600 <std+0x60>)
341895ce:	62e3      	str	r3, [r4, #44]	@ 0x2c
341895d0:	4b0c      	ldr	r3, [pc, #48]	@ (34189604 <std+0x64>)
341895d2:	6323      	str	r3, [r4, #48]	@ 0x30
341895d4:	4b0c      	ldr	r3, [pc, #48]	@ (34189608 <std+0x68>)
341895d6:	429c      	cmp	r4, r3
341895d8:	d006      	beq.n	341895e8 <std+0x48>
341895da:	f103 0268 	add.w	r2, r3, #104	@ 0x68
341895de:	4294      	cmp	r4, r2
341895e0:	d002      	beq.n	341895e8 <std+0x48>
341895e2:	33d0      	adds	r3, #208	@ 0xd0
341895e4:	429c      	cmp	r4, r3
341895e6:	d105      	bne.n	341895f4 <std+0x54>
341895e8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
341895ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
341895f0:	f000 b97a 	b.w	341898e8 <__retarget_lock_init_recursive>
341895f4:	bd10      	pop	{r4, pc}
341895f6:	bf00      	nop
341895f8:	34189769 	.word	0x34189769
341895fc:	3418978b 	.word	0x3418978b
34189600:	341897c3 	.word	0x341897c3
34189604:	341897e7 	.word	0x341897e7
34189608:	341c0290 	.word	0x341c0290

3418960c <stdio_exit_handler>:
3418960c:	4a02      	ldr	r2, [pc, #8]	@ (34189618 <stdio_exit_handler+0xc>)
3418960e:	4903      	ldr	r1, [pc, #12]	@ (3418961c <stdio_exit_handler+0x10>)
34189610:	4803      	ldr	r0, [pc, #12]	@ (34189620 <stdio_exit_handler+0x14>)
34189612:	f000 b869 	b.w	341896e8 <_fwalk_sglue>
34189616:	bf00      	nop
34189618:	341c000c 	.word	0x341c000c
3418961c:	3418c0a1 	.word	0x3418c0a1
34189620:	341c001c 	.word	0x341c001c

34189624 <cleanup_stdio>:
34189624:	6841      	ldr	r1, [r0, #4]
34189626:	4b0c      	ldr	r3, [pc, #48]	@ (34189658 <cleanup_stdio+0x34>)
34189628:	4299      	cmp	r1, r3
3418962a:	b510      	push	{r4, lr}
3418962c:	4604      	mov	r4, r0
3418962e:	d001      	beq.n	34189634 <cleanup_stdio+0x10>
34189630:	f002 fd36 	bl	3418c0a0 <_fflush_r>
34189634:	68a1      	ldr	r1, [r4, #8]
34189636:	4b09      	ldr	r3, [pc, #36]	@ (3418965c <cleanup_stdio+0x38>)
34189638:	4299      	cmp	r1, r3
3418963a:	d002      	beq.n	34189642 <cleanup_stdio+0x1e>
3418963c:	4620      	mov	r0, r4
3418963e:	f002 fd2f 	bl	3418c0a0 <_fflush_r>
34189642:	68e1      	ldr	r1, [r4, #12]
34189644:	4b06      	ldr	r3, [pc, #24]	@ (34189660 <cleanup_stdio+0x3c>)
34189646:	4299      	cmp	r1, r3
34189648:	d004      	beq.n	34189654 <cleanup_stdio+0x30>
3418964a:	4620      	mov	r0, r4
3418964c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34189650:	f002 bd26 	b.w	3418c0a0 <_fflush_r>
34189654:	bd10      	pop	{r4, pc}
34189656:	bf00      	nop
34189658:	341c0290 	.word	0x341c0290
3418965c:	341c02f8 	.word	0x341c02f8
34189660:	341c0360 	.word	0x341c0360

34189664 <global_stdio_init.part.0>:
34189664:	b510      	push	{r4, lr}
34189666:	4b0b      	ldr	r3, [pc, #44]	@ (34189694 <global_stdio_init.part.0+0x30>)
34189668:	2104      	movs	r1, #4
3418966a:	4c0b      	ldr	r4, [pc, #44]	@ (34189698 <global_stdio_init.part.0+0x34>)
3418966c:	4a0b      	ldr	r2, [pc, #44]	@ (3418969c <global_stdio_init.part.0+0x38>)
3418966e:	4620      	mov	r0, r4
34189670:	601a      	str	r2, [r3, #0]
34189672:	2200      	movs	r2, #0
34189674:	f7ff ff94 	bl	341895a0 <std>
34189678:	f104 0068 	add.w	r0, r4, #104	@ 0x68
3418967c:	2201      	movs	r2, #1
3418967e:	2109      	movs	r1, #9
34189680:	f7ff ff8e 	bl	341895a0 <std>
34189684:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
34189688:	2202      	movs	r2, #2
3418968a:	2112      	movs	r1, #18
3418968c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
34189690:	f7ff bf86 	b.w	341895a0 <std>
34189694:	341c03c8 	.word	0x341c03c8
34189698:	341c0290 	.word	0x341c0290
3418969c:	3418960d 	.word	0x3418960d

341896a0 <__sfp_lock_acquire>:
341896a0:	4801      	ldr	r0, [pc, #4]	@ (341896a8 <__sfp_lock_acquire+0x8>)
341896a2:	f000 b922 	b.w	341898ea <__retarget_lock_acquire_recursive>
341896a6:	bf00      	nop
341896a8:	341c03d1 	.word	0x341c03d1

341896ac <__sfp_lock_release>:
341896ac:	4801      	ldr	r0, [pc, #4]	@ (341896b4 <__sfp_lock_release+0x8>)
341896ae:	f000 b91d 	b.w	341898ec <__retarget_lock_release_recursive>
341896b2:	bf00      	nop
341896b4:	341c03d1 	.word	0x341c03d1

341896b8 <__sinit>:
341896b8:	b510      	push	{r4, lr}
341896ba:	4604      	mov	r4, r0
341896bc:	f7ff fff0 	bl	341896a0 <__sfp_lock_acquire>
341896c0:	6a23      	ldr	r3, [r4, #32]
341896c2:	b11b      	cbz	r3, 341896cc <__sinit+0x14>
341896c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
341896c8:	f7ff bff0 	b.w	341896ac <__sfp_lock_release>
341896cc:	4b04      	ldr	r3, [pc, #16]	@ (341896e0 <__sinit+0x28>)
341896ce:	6223      	str	r3, [r4, #32]
341896d0:	4b04      	ldr	r3, [pc, #16]	@ (341896e4 <__sinit+0x2c>)
341896d2:	681b      	ldr	r3, [r3, #0]
341896d4:	2b00      	cmp	r3, #0
341896d6:	d1f5      	bne.n	341896c4 <__sinit+0xc>
341896d8:	f7ff ffc4 	bl	34189664 <global_stdio_init.part.0>
341896dc:	e7f2      	b.n	341896c4 <__sinit+0xc>
341896de:	bf00      	nop
341896e0:	34189625 	.word	0x34189625
341896e4:	341c03c8 	.word	0x341c03c8

341896e8 <_fwalk_sglue>:
341896e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
341896ec:	4607      	mov	r7, r0
341896ee:	4688      	mov	r8, r1
341896f0:	4614      	mov	r4, r2
341896f2:	2600      	movs	r6, #0
341896f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
341896f8:	f1b9 0901 	subs.w	r9, r9, #1
341896fc:	d505      	bpl.n	3418970a <_fwalk_sglue+0x22>
341896fe:	6824      	ldr	r4, [r4, #0]
34189700:	2c00      	cmp	r4, #0
34189702:	d1f7      	bne.n	341896f4 <_fwalk_sglue+0xc>
34189704:	4630      	mov	r0, r6
34189706:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3418970a:	89ab      	ldrh	r3, [r5, #12]
3418970c:	2b01      	cmp	r3, #1
3418970e:	d907      	bls.n	34189720 <_fwalk_sglue+0x38>
34189710:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
34189714:	3301      	adds	r3, #1
34189716:	d003      	beq.n	34189720 <_fwalk_sglue+0x38>
34189718:	4629      	mov	r1, r5
3418971a:	4638      	mov	r0, r7
3418971c:	47c0      	blx	r8
3418971e:	4306      	orrs	r6, r0
34189720:	3568      	adds	r5, #104	@ 0x68
34189722:	e7e9      	b.n	341896f8 <_fwalk_sglue+0x10>

34189724 <siprintf>:
34189724:	b40e      	push	{r1, r2, r3}
34189726:	b510      	push	{r4, lr}
34189728:	b09d      	sub	sp, #116	@ 0x74
3418972a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
3418972e:	2400      	movs	r4, #0
34189730:	ab1f      	add	r3, sp, #124	@ 0x7c
34189732:	9002      	str	r0, [sp, #8]
34189734:	9006      	str	r0, [sp, #24]
34189736:	9107      	str	r1, [sp, #28]
34189738:	9104      	str	r1, [sp, #16]
3418973a:	4809      	ldr	r0, [pc, #36]	@ (34189760 <siprintf+0x3c>)
3418973c:	4909      	ldr	r1, [pc, #36]	@ (34189764 <siprintf+0x40>)
3418973e:	f853 2b04 	ldr.w	r2, [r3], #4
34189742:	9105      	str	r1, [sp, #20]
34189744:	a902      	add	r1, sp, #8
34189746:	6800      	ldr	r0, [r0, #0]
34189748:	9301      	str	r3, [sp, #4]
3418974a:	941b      	str	r4, [sp, #108]	@ 0x6c
3418974c:	f002 fb28 	bl	3418bda0 <_svfiprintf_r>
34189750:	9b02      	ldr	r3, [sp, #8]
34189752:	701c      	strb	r4, [r3, #0]
34189754:	b01d      	add	sp, #116	@ 0x74
34189756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
3418975a:	b003      	add	sp, #12
3418975c:	4770      	bx	lr
3418975e:	bf00      	nop
34189760:	341c0018 	.word	0x341c0018
34189764:	ffff0208 	.word	0xffff0208

34189768 <__sread>:
34189768:	b510      	push	{r4, lr}
3418976a:	460c      	mov	r4, r1
3418976c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
34189770:	f000 f86c 	bl	3418984c <_read_r>
34189774:	2800      	cmp	r0, #0
34189776:	bfab      	itete	ge
34189778:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
3418977a:	89a3      	ldrhlt	r3, [r4, #12]
3418977c:	181b      	addge	r3, r3, r0
3418977e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
34189782:	bfac      	ite	ge
34189784:	6563      	strge	r3, [r4, #84]	@ 0x54
34189786:	81a3      	strhlt	r3, [r4, #12]
34189788:	bd10      	pop	{r4, pc}

3418978a <__swrite>:
3418978a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3418978e:	461f      	mov	r7, r3
34189790:	898b      	ldrh	r3, [r1, #12]
34189792:	4605      	mov	r5, r0
34189794:	460c      	mov	r4, r1
34189796:	05db      	lsls	r3, r3, #23
34189798:	4616      	mov	r6, r2
3418979a:	d505      	bpl.n	341897a8 <__swrite+0x1e>
3418979c:	2302      	movs	r3, #2
3418979e:	2200      	movs	r2, #0
341897a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
341897a4:	f000 f840 	bl	34189828 <_lseek_r>
341897a8:	89a3      	ldrh	r3, [r4, #12]
341897aa:	4632      	mov	r2, r6
341897ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
341897b0:	4628      	mov	r0, r5
341897b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
341897b6:	81a3      	strh	r3, [r4, #12]
341897b8:	463b      	mov	r3, r7
341897ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
341897be:	f000 b857 	b.w	34189870 <_write_r>

341897c2 <__sseek>:
341897c2:	b510      	push	{r4, lr}
341897c4:	460c      	mov	r4, r1
341897c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
341897ca:	f000 f82d 	bl	34189828 <_lseek_r>
341897ce:	1c43      	adds	r3, r0, #1
341897d0:	89a3      	ldrh	r3, [r4, #12]
341897d2:	bf15      	itete	ne
341897d4:	6560      	strne	r0, [r4, #84]	@ 0x54
341897d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
341897da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
341897de:	81a3      	strheq	r3, [r4, #12]
341897e0:	bf18      	it	ne
341897e2:	81a3      	strhne	r3, [r4, #12]
341897e4:	bd10      	pop	{r4, pc}

341897e6 <__sclose>:
341897e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
341897ea:	f000 b80d 	b.w	34189808 <_close_r>

341897ee <memset>:
341897ee:	4402      	add	r2, r0
341897f0:	4603      	mov	r3, r0
341897f2:	4293      	cmp	r3, r2
341897f4:	d100      	bne.n	341897f8 <memset+0xa>
341897f6:	4770      	bx	lr
341897f8:	f803 1b01 	strb.w	r1, [r3], #1
341897fc:	e7f9      	b.n	341897f2 <memset+0x4>
	...

34189800 <_localeconv_r>:
34189800:	4800      	ldr	r0, [pc, #0]	@ (34189804 <_localeconv_r+0x4>)
34189802:	4770      	bx	lr
34189804:	341c0158 	.word	0x341c0158

34189808 <_close_r>:
34189808:	b538      	push	{r3, r4, r5, lr}
3418980a:	2300      	movs	r3, #0
3418980c:	4d05      	ldr	r5, [pc, #20]	@ (34189824 <_close_r+0x1c>)
3418980e:	4604      	mov	r4, r0
34189810:	4608      	mov	r0, r1
34189812:	602b      	str	r3, [r5, #0]
34189814:	f7f7 fd01 	bl	3418121a <_close>
34189818:	1c43      	adds	r3, r0, #1
3418981a:	d102      	bne.n	34189822 <_close_r+0x1a>
3418981c:	682b      	ldr	r3, [r5, #0]
3418981e:	b103      	cbz	r3, 34189822 <_close_r+0x1a>
34189820:	6023      	str	r3, [r4, #0]
34189822:	bd38      	pop	{r3, r4, r5, pc}
34189824:	341c03cc 	.word	0x341c03cc

34189828 <_lseek_r>:
34189828:	b538      	push	{r3, r4, r5, lr}
3418982a:	4604      	mov	r4, r0
3418982c:	4d06      	ldr	r5, [pc, #24]	@ (34189848 <_lseek_r+0x20>)
3418982e:	4608      	mov	r0, r1
34189830:	4611      	mov	r1, r2
34189832:	2200      	movs	r2, #0
34189834:	602a      	str	r2, [r5, #0]
34189836:	461a      	mov	r2, r3
34189838:	f7f7 fcf2 	bl	34181220 <_lseek>
3418983c:	1c43      	adds	r3, r0, #1
3418983e:	d102      	bne.n	34189846 <_lseek_r+0x1e>
34189840:	682b      	ldr	r3, [r5, #0]
34189842:	b103      	cbz	r3, 34189846 <_lseek_r+0x1e>
34189844:	6023      	str	r3, [r4, #0]
34189846:	bd38      	pop	{r3, r4, r5, pc}
34189848:	341c03cc 	.word	0x341c03cc

3418984c <_read_r>:
3418984c:	b538      	push	{r3, r4, r5, lr}
3418984e:	4604      	mov	r4, r0
34189850:	4d06      	ldr	r5, [pc, #24]	@ (3418986c <_read_r+0x20>)
34189852:	4608      	mov	r0, r1
34189854:	4611      	mov	r1, r2
34189856:	2200      	movs	r2, #0
34189858:	602a      	str	r2, [r5, #0]
3418985a:	461a      	mov	r2, r3
3418985c:	f7f7 fce2 	bl	34181224 <_read>
34189860:	1c43      	adds	r3, r0, #1
34189862:	d102      	bne.n	3418986a <_read_r+0x1e>
34189864:	682b      	ldr	r3, [r5, #0]
34189866:	b103      	cbz	r3, 3418986a <_read_r+0x1e>
34189868:	6023      	str	r3, [r4, #0]
3418986a:	bd38      	pop	{r3, r4, r5, pc}
3418986c:	341c03cc 	.word	0x341c03cc

34189870 <_write_r>:
34189870:	b538      	push	{r3, r4, r5, lr}
34189872:	4604      	mov	r4, r0
34189874:	4d06      	ldr	r5, [pc, #24]	@ (34189890 <_write_r+0x20>)
34189876:	4608      	mov	r0, r1
34189878:	4611      	mov	r1, r2
3418987a:	2200      	movs	r2, #0
3418987c:	602a      	str	r2, [r5, #0]
3418987e:	461a      	mov	r2, r3
34189880:	f7f7 fcd2 	bl	34181228 <_write>
34189884:	1c43      	adds	r3, r0, #1
34189886:	d102      	bne.n	3418988e <_write_r+0x1e>
34189888:	682b      	ldr	r3, [r5, #0]
3418988a:	b103      	cbz	r3, 3418988e <_write_r+0x1e>
3418988c:	6023      	str	r3, [r4, #0]
3418988e:	bd38      	pop	{r3, r4, r5, pc}
34189890:	341c03cc 	.word	0x341c03cc

34189894 <__errno>:
34189894:	4b01      	ldr	r3, [pc, #4]	@ (3418989c <__errno+0x8>)
34189896:	6818      	ldr	r0, [r3, #0]
34189898:	4770      	bx	lr
3418989a:	bf00      	nop
3418989c:	341c0018 	.word	0x341c0018

341898a0 <__libc_init_array>:
341898a0:	b570      	push	{r4, r5, r6, lr}
341898a2:	4d0d      	ldr	r5, [pc, #52]	@ (341898d8 <__libc_init_array+0x38>)
341898a4:	2600      	movs	r6, #0
341898a6:	4c0d      	ldr	r4, [pc, #52]	@ (341898dc <__libc_init_array+0x3c>)
341898a8:	1b64      	subs	r4, r4, r5
341898aa:	10a4      	asrs	r4, r4, #2
341898ac:	42a6      	cmp	r6, r4
341898ae:	d109      	bne.n	341898c4 <__libc_init_array+0x24>
341898b0:	4d0b      	ldr	r5, [pc, #44]	@ (341898e0 <__libc_init_array+0x40>)
341898b2:	2600      	movs	r6, #0
341898b4:	4c0b      	ldr	r4, [pc, #44]	@ (341898e4 <__libc_init_array+0x44>)
341898b6:	f003 fad3 	bl	3418ce60 <_init>
341898ba:	1b64      	subs	r4, r4, r5
341898bc:	10a4      	asrs	r4, r4, #2
341898be:	42a6      	cmp	r6, r4
341898c0:	d105      	bne.n	341898ce <__libc_init_array+0x2e>
341898c2:	bd70      	pop	{r4, r5, r6, pc}
341898c4:	f855 3b04 	ldr.w	r3, [r5], #4
341898c8:	3601      	adds	r6, #1
341898ca:	4798      	blx	r3
341898cc:	e7ee      	b.n	341898ac <__libc_init_array+0xc>
341898ce:	f855 3b04 	ldr.w	r3, [r5], #4
341898d2:	3601      	adds	r6, #1
341898d4:	4798      	blx	r3
341898d6:	e7f2      	b.n	341898be <__libc_init_array+0x1e>
341898d8:	3418d44c 	.word	0x3418d44c
341898dc:	3418d44c 	.word	0x3418d44c
341898e0:	3418d44c 	.word	0x3418d44c
341898e4:	3418d450 	.word	0x3418d450

341898e8 <__retarget_lock_init_recursive>:
341898e8:	4770      	bx	lr

341898ea <__retarget_lock_acquire_recursive>:
341898ea:	4770      	bx	lr

341898ec <__retarget_lock_release_recursive>:
341898ec:	4770      	bx	lr

341898ee <memchr>:
341898ee:	b2c9      	uxtb	r1, r1
341898f0:	4603      	mov	r3, r0
341898f2:	4402      	add	r2, r0
341898f4:	b510      	push	{r4, lr}
341898f6:	4293      	cmp	r3, r2
341898f8:	4618      	mov	r0, r3
341898fa:	d101      	bne.n	34189900 <memchr+0x12>
341898fc:	2000      	movs	r0, #0
341898fe:	e003      	b.n	34189908 <memchr+0x1a>
34189900:	7804      	ldrb	r4, [r0, #0]
34189902:	3301      	adds	r3, #1
34189904:	428c      	cmp	r4, r1
34189906:	d1f6      	bne.n	341898f6 <memchr+0x8>
34189908:	bd10      	pop	{r4, pc}

3418990a <memcpy>:
3418990a:	440a      	add	r2, r1
3418990c:	1e43      	subs	r3, r0, #1
3418990e:	4291      	cmp	r1, r2
34189910:	d100      	bne.n	34189914 <memcpy+0xa>
34189912:	4770      	bx	lr
34189914:	b510      	push	{r4, lr}
34189916:	f811 4b01 	ldrb.w	r4, [r1], #1
3418991a:	4291      	cmp	r1, r2
3418991c:	f803 4f01 	strb.w	r4, [r3, #1]!
34189920:	d1f9      	bne.n	34189916 <memcpy+0xc>
34189922:	bd10      	pop	{r4, pc}

34189924 <nanf>:
34189924:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 3418992c <nanf+0x8>
34189928:	4770      	bx	lr
3418992a:	bf00      	nop
3418992c:	7fc00000 	.word	0x7fc00000

34189930 <quorem>:
34189930:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
34189934:	6903      	ldr	r3, [r0, #16]
34189936:	4607      	mov	r7, r0
34189938:	690c      	ldr	r4, [r1, #16]
3418993a:	42a3      	cmp	r3, r4
3418993c:	f2c0 8083 	blt.w	34189a46 <quorem+0x116>
34189940:	3c01      	subs	r4, #1
34189942:	f100 0514 	add.w	r5, r0, #20
34189946:	f101 0814 	add.w	r8, r1, #20
3418994a:	00a3      	lsls	r3, r4, #2
3418994c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
34189950:	eb08 0984 	add.w	r9, r8, r4, lsl #2
34189954:	9300      	str	r3, [sp, #0]
34189956:	eb05 0384 	add.w	r3, r5, r4, lsl #2
3418995a:	9301      	str	r3, [sp, #4]
3418995c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
34189960:	3301      	adds	r3, #1
34189962:	429a      	cmp	r2, r3
34189964:	fbb2 f6f3 	udiv	r6, r2, r3
34189968:	d331      	bcc.n	341899ce <quorem+0x9e>
3418996a:	f04f 0a00 	mov.w	sl, #0
3418996e:	46c4      	mov	ip, r8
34189970:	46ae      	mov	lr, r5
34189972:	46d3      	mov	fp, sl
34189974:	f85c 3b04 	ldr.w	r3, [ip], #4
34189978:	b298      	uxth	r0, r3
3418997a:	45e1      	cmp	r9, ip
3418997c:	ea4f 4313 	mov.w	r3, r3, lsr #16
34189980:	fb06 a000 	mla	r0, r6, r0, sl
34189984:	ea4f 4210 	mov.w	r2, r0, lsr #16
34189988:	b280      	uxth	r0, r0
3418998a:	fb06 2303 	mla	r3, r6, r3, r2
3418998e:	f8de 2000 	ldr.w	r2, [lr]
34189992:	b292      	uxth	r2, r2
34189994:	ea4f 4a13 	mov.w	sl, r3, lsr #16
34189998:	eba2 0200 	sub.w	r2, r2, r0
3418999c:	b29b      	uxth	r3, r3
3418999e:	f8de 0000 	ldr.w	r0, [lr]
341899a2:	445a      	add	r2, fp
341899a4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
341899a8:	b292      	uxth	r2, r2
341899aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
341899ae:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
341899b2:	ea4f 4b23 	mov.w	fp, r3, asr #16
341899b6:	f84e 2b04 	str.w	r2, [lr], #4
341899ba:	d2db      	bcs.n	34189974 <quorem+0x44>
341899bc:	9b00      	ldr	r3, [sp, #0]
341899be:	58eb      	ldr	r3, [r5, r3]
341899c0:	b92b      	cbnz	r3, 341899ce <quorem+0x9e>
341899c2:	9b01      	ldr	r3, [sp, #4]
341899c4:	3b04      	subs	r3, #4
341899c6:	429d      	cmp	r5, r3
341899c8:	461a      	mov	r2, r3
341899ca:	d330      	bcc.n	34189a2e <quorem+0xfe>
341899cc:	613c      	str	r4, [r7, #16]
341899ce:	4638      	mov	r0, r7
341899d0:	f001 f95c 	bl	3418ac8c <__mcmp>
341899d4:	2800      	cmp	r0, #0
341899d6:	db26      	blt.n	34189a26 <quorem+0xf6>
341899d8:	4629      	mov	r1, r5
341899da:	2000      	movs	r0, #0
341899dc:	f858 2b04 	ldr.w	r2, [r8], #4
341899e0:	f8d1 c000 	ldr.w	ip, [r1]
341899e4:	fa1f fe82 	uxth.w	lr, r2
341899e8:	45c1      	cmp	r9, r8
341899ea:	fa1f f38c 	uxth.w	r3, ip
341899ee:	ea4f 4212 	mov.w	r2, r2, lsr #16
341899f2:	eba3 030e 	sub.w	r3, r3, lr
341899f6:	4403      	add	r3, r0
341899f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
341899fc:	b29b      	uxth	r3, r3
341899fe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
34189a02:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
34189a06:	ea4f 4022 	mov.w	r0, r2, asr #16
34189a0a:	f841 3b04 	str.w	r3, [r1], #4
34189a0e:	d2e5      	bcs.n	341899dc <quorem+0xac>
34189a10:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
34189a14:	eb05 0384 	add.w	r3, r5, r4, lsl #2
34189a18:	b922      	cbnz	r2, 34189a24 <quorem+0xf4>
34189a1a:	3b04      	subs	r3, #4
34189a1c:	429d      	cmp	r5, r3
34189a1e:	461a      	mov	r2, r3
34189a20:	d30b      	bcc.n	34189a3a <quorem+0x10a>
34189a22:	613c      	str	r4, [r7, #16]
34189a24:	3601      	adds	r6, #1
34189a26:	4630      	mov	r0, r6
34189a28:	b003      	add	sp, #12
34189a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
34189a2e:	6812      	ldr	r2, [r2, #0]
34189a30:	3b04      	subs	r3, #4
34189a32:	2a00      	cmp	r2, #0
34189a34:	d1ca      	bne.n	341899cc <quorem+0x9c>
34189a36:	3c01      	subs	r4, #1
34189a38:	e7c5      	b.n	341899c6 <quorem+0x96>
34189a3a:	6812      	ldr	r2, [r2, #0]
34189a3c:	3b04      	subs	r3, #4
34189a3e:	2a00      	cmp	r2, #0
34189a40:	d1ef      	bne.n	34189a22 <quorem+0xf2>
34189a42:	3c01      	subs	r4, #1
34189a44:	e7ea      	b.n	34189a1c <quorem+0xec>
34189a46:	2000      	movs	r0, #0
34189a48:	e7ee      	b.n	34189a28 <quorem+0xf8>
34189a4a:	0000      	movs	r0, r0
34189a4c:	0000      	movs	r0, r0
	...

34189a50 <_dtoa_r>:
34189a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
34189a54:	69c7      	ldr	r7, [r0, #28]
34189a56:	4681      	mov	r9, r0
34189a58:	ed2d 8b02 	vpush	{d8}
34189a5c:	b091      	sub	sp, #68	@ 0x44
34189a5e:	ec55 4b10 	vmov	r4, r5, d0
34189a62:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
34189a64:	9107      	str	r1, [sp, #28]
34189a66:	9209      	str	r2, [sp, #36]	@ 0x24
34189a68:	930d      	str	r3, [sp, #52]	@ 0x34
34189a6a:	ed8d 0b02 	vstr	d0, [sp, #8]
34189a6e:	b97f      	cbnz	r7, 34189a90 <_dtoa_r+0x40>
34189a70:	2010      	movs	r0, #16
34189a72:	f000 fd95 	bl	3418a5a0 <malloc>
34189a76:	4602      	mov	r2, r0
34189a78:	f8c9 001c 	str.w	r0, [r9, #28]
34189a7c:	b920      	cbnz	r0, 34189a88 <_dtoa_r+0x38>
34189a7e:	4ba0      	ldr	r3, [pc, #640]	@ (34189d00 <_dtoa_r+0x2b0>)
34189a80:	21ef      	movs	r1, #239	@ 0xef
34189a82:	48a0      	ldr	r0, [pc, #640]	@ (34189d04 <_dtoa_r+0x2b4>)
34189a84:	f002 fb78 	bl	3418c178 <__assert_func>
34189a88:	e9c0 7701 	strd	r7, r7, [r0, #4]
34189a8c:	6007      	str	r7, [r0, #0]
34189a8e:	60c7      	str	r7, [r0, #12]
34189a90:	f8d9 301c 	ldr.w	r3, [r9, #28]
34189a94:	6819      	ldr	r1, [r3, #0]
34189a96:	b159      	cbz	r1, 34189ab0 <_dtoa_r+0x60>
34189a98:	685a      	ldr	r2, [r3, #4]
34189a9a:	2301      	movs	r3, #1
34189a9c:	4648      	mov	r0, r9
34189a9e:	4093      	lsls	r3, r2
34189aa0:	604a      	str	r2, [r1, #4]
34189aa2:	608b      	str	r3, [r1, #8]
34189aa4:	f000 fe72 	bl	3418a78c <_Bfree>
34189aa8:	f8d9 301c 	ldr.w	r3, [r9, #28]
34189aac:	2200      	movs	r2, #0
34189aae:	601a      	str	r2, [r3, #0]
34189ab0:	1e2b      	subs	r3, r5, #0
34189ab2:	bfb7      	itett	lt
34189ab4:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
34189ab8:	2300      	movge	r3, #0
34189aba:	2201      	movlt	r2, #1
34189abc:	9303      	strlt	r3, [sp, #12]
34189abe:	bfac      	ite	ge
34189ac0:	6033      	strge	r3, [r6, #0]
34189ac2:	6032      	strlt	r2, [r6, #0]
34189ac4:	4b90      	ldr	r3, [pc, #576]	@ (34189d08 <_dtoa_r+0x2b8>)
34189ac6:	9e03      	ldr	r6, [sp, #12]
34189ac8:	43b3      	bics	r3, r6
34189aca:	d110      	bne.n	34189aee <_dtoa_r+0x9e>
34189acc:	f242 730f 	movw	r3, #9999	@ 0x270f
34189ad0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
34189ad2:	6013      	str	r3, [r2, #0]
34189ad4:	f3c6 0313 	ubfx	r3, r6, #0, #20
34189ad8:	4323      	orrs	r3, r4
34189ada:	f000 84e6 	beq.w	3418a4aa <_dtoa_r+0xa5a>
34189ade:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34189ae0:	4f8a      	ldr	r7, [pc, #552]	@ (34189d0c <_dtoa_r+0x2bc>)
34189ae2:	2b00      	cmp	r3, #0
34189ae4:	f000 84e8 	beq.w	3418a4b8 <_dtoa_r+0xa68>
34189ae8:	1cfb      	adds	r3, r7, #3
34189aea:	f000 bce3 	b.w	3418a4b4 <_dtoa_r+0xa64>
34189aee:	ed9d 8b02 	vldr	d8, [sp, #8]
34189af2:	eeb5 8b40 	vcmp.f64	d8, #0.0
34189af6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189afa:	d10a      	bne.n	34189b12 <_dtoa_r+0xc2>
34189afc:	2301      	movs	r3, #1
34189afe:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
34189b00:	6013      	str	r3, [r2, #0]
34189b02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
34189b04:	b113      	cbz	r3, 34189b0c <_dtoa_r+0xbc>
34189b06:	4b82      	ldr	r3, [pc, #520]	@ (34189d10 <_dtoa_r+0x2c0>)
34189b08:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
34189b0a:	6013      	str	r3, [r2, #0]
34189b0c:	4f81      	ldr	r7, [pc, #516]	@ (34189d14 <_dtoa_r+0x2c4>)
34189b0e:	f000 bcd3 	b.w	3418a4b8 <_dtoa_r+0xa68>
34189b12:	aa0e      	add	r2, sp, #56	@ 0x38
34189b14:	eeb0 0b48 	vmov.f64	d0, d8
34189b18:	a90f      	add	r1, sp, #60	@ 0x3c
34189b1a:	4648      	mov	r0, r9
34189b1c:	f001 f9de 	bl	3418aedc <__d2b>
34189b20:	f3c6 530a 	ubfx	r3, r6, #20, #11
34189b24:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
34189b26:	9001      	str	r0, [sp, #4]
34189b28:	2b00      	cmp	r3, #0
34189b2a:	d045      	beq.n	34189bb8 <_dtoa_r+0x168>
34189b2c:	ee18 1a90 	vmov	r1, s17
34189b30:	eeb0 7b48 	vmov.f64	d7, d8
34189b34:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
34189b38:	2500      	movs	r5, #0
34189b3a:	f3c1 0113 	ubfx	r1, r1, #0, #20
34189b3e:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
34189b42:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
34189b46:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
34189b4a:	ee07 1a90 	vmov	s15, r1
34189b4e:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 34189ce8 <_dtoa_r+0x298>
34189b52:	ee37 7b46 	vsub.f64	d7, d7, d6
34189b56:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 34189cf0 <_dtoa_r+0x2a0>
34189b5a:	eea7 6b05 	vfma.f64	d6, d7, d5
34189b5e:	ee07 3a90 	vmov	s15, r3
34189b62:	eeb8 4be7 	vcvt.f64.s32	d4, s15
34189b66:	ed9f 5b64 	vldr	d5, [pc, #400]	@ 34189cf8 <_dtoa_r+0x2a8>
34189b6a:	eeb0 7b46 	vmov.f64	d7, d6
34189b6e:	eea4 7b05 	vfma.f64	d7, d4, d5
34189b72:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
34189b76:	eefd 6bc7 	vcvt.s32.f64	s13, d7
34189b7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189b7e:	ee16 8a90 	vmov	r8, s13
34189b82:	d508      	bpl.n	34189b96 <_dtoa_r+0x146>
34189b84:	eeb8 6be6 	vcvt.f64.s32	d6, s13
34189b88:	eeb4 6b47 	vcmp.f64	d6, d7
34189b8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189b90:	bf18      	it	ne
34189b92:	f108 38ff 	addne.w	r8, r8, #4294967295
34189b96:	f1b8 0f16 	cmp.w	r8, #22
34189b9a:	d82d      	bhi.n	34189bf8 <_dtoa_r+0x1a8>
34189b9c:	495e      	ldr	r1, [pc, #376]	@ (34189d18 <_dtoa_r+0x2c8>)
34189b9e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
34189ba2:	ed91 7b00 	vldr	d7, [r1]
34189ba6:	eeb4 8bc7 	vcmpe.f64	d8, d7
34189baa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189bae:	d501      	bpl.n	34189bb4 <_dtoa_r+0x164>
34189bb0:	f108 38ff 	add.w	r8, r8, #4294967295
34189bb4:	2100      	movs	r1, #0
34189bb6:	e020      	b.n	34189bfa <_dtoa_r+0x1aa>
34189bb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
34189bba:	2501      	movs	r5, #1
34189bbc:	4413      	add	r3, r2
34189bbe:	f203 4132 	addw	r1, r3, #1074	@ 0x432
34189bc2:	2920      	cmp	r1, #32
34189bc4:	bfc9      	itett	gt
34189bc6:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
34189bca:	f1c1 0120 	rsble	r1, r1, #32
34189bce:	408e      	lslgt	r6, r1
34189bd0:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
34189bd4:	bfd8      	it	le
34189bd6:	fa04 f101 	lslle.w	r1, r4, r1
34189bda:	f103 33ff 	add.w	r3, r3, #4294967295
34189bde:	bfc4      	itt	gt
34189be0:	fa24 f101 	lsrgt.w	r1, r4, r1
34189be4:	4331      	orrgt	r1, r6
34189be6:	ee07 1a90 	vmov	s15, r1
34189bea:	eeb8 7b67 	vcvt.f64.u32	d7, s15
34189bee:	ee17 1a90 	vmov	r1, s15
34189bf2:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
34189bf6:	e7a6      	b.n	34189b46 <_dtoa_r+0xf6>
34189bf8:	2101      	movs	r1, #1
34189bfa:	1ad2      	subs	r2, r2, r3
34189bfc:	910c      	str	r1, [sp, #48]	@ 0x30
34189bfe:	1e53      	subs	r3, r2, #1
34189c00:	9306      	str	r3, [sp, #24]
34189c02:	bf49      	itett	mi
34189c04:	f1c2 0301 	rsbmi	r3, r2, #1
34189c08:	2300      	movpl	r3, #0
34189c0a:	9304      	strmi	r3, [sp, #16]
34189c0c:	2300      	movmi	r3, #0
34189c0e:	bf54      	ite	pl
34189c10:	9304      	strpl	r3, [sp, #16]
34189c12:	9306      	strmi	r3, [sp, #24]
34189c14:	f1b8 0f00 	cmp.w	r8, #0
34189c18:	db16      	blt.n	34189c48 <_dtoa_r+0x1f8>
34189c1a:	9b06      	ldr	r3, [sp, #24]
34189c1c:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
34189c20:	4443      	add	r3, r8
34189c22:	9306      	str	r3, [sp, #24]
34189c24:	2300      	movs	r3, #0
34189c26:	9a07      	ldr	r2, [sp, #28]
34189c28:	2a09      	cmp	r2, #9
34189c2a:	d843      	bhi.n	34189cb4 <_dtoa_r+0x264>
34189c2c:	2a05      	cmp	r2, #5
34189c2e:	bfc5      	ittet	gt
34189c30:	3a04      	subgt	r2, #4
34189c32:	2400      	movgt	r4, #0
34189c34:	2401      	movle	r4, #1
34189c36:	9207      	strgt	r2, [sp, #28]
34189c38:	9a07      	ldr	r2, [sp, #28]
34189c3a:	3a02      	subs	r2, #2
34189c3c:	2a03      	cmp	r2, #3
34189c3e:	d844      	bhi.n	34189cca <_dtoa_r+0x27a>
34189c40:	e8df f002 	tbb	[pc, r2]
34189c44:	0b173634 	.word	0x0b173634
34189c48:	9b04      	ldr	r3, [sp, #16]
34189c4a:	2200      	movs	r2, #0
34189c4c:	eba3 0308 	sub.w	r3, r3, r8
34189c50:	920a      	str	r2, [sp, #40]	@ 0x28
34189c52:	9304      	str	r3, [sp, #16]
34189c54:	f1c8 0300 	rsb	r3, r8, #0
34189c58:	e7e5      	b.n	34189c26 <_dtoa_r+0x1d6>
34189c5a:	2201      	movs	r2, #1
34189c5c:	9208      	str	r2, [sp, #32]
34189c5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34189c60:	eb08 0b02 	add.w	fp, r8, r2
34189c64:	f10b 0a01 	add.w	sl, fp, #1
34189c68:	4652      	mov	r2, sl
34189c6a:	2a01      	cmp	r2, #1
34189c6c:	bfb8      	it	lt
34189c6e:	2201      	movlt	r2, #1
34189c70:	e006      	b.n	34189c80 <_dtoa_r+0x230>
34189c72:	2201      	movs	r2, #1
34189c74:	9208      	str	r2, [sp, #32]
34189c76:	9a09      	ldr	r2, [sp, #36]	@ 0x24
34189c78:	2a00      	cmp	r2, #0
34189c7a:	dd29      	ble.n	34189cd0 <_dtoa_r+0x280>
34189c7c:	4693      	mov	fp, r2
34189c7e:	4692      	mov	sl, r2
34189c80:	f8d9 701c 	ldr.w	r7, [r9, #28]
34189c84:	2100      	movs	r1, #0
34189c86:	2004      	movs	r0, #4
34189c88:	f100 0614 	add.w	r6, r0, #20
34189c8c:	4296      	cmp	r6, r2
34189c8e:	d926      	bls.n	34189cde <_dtoa_r+0x28e>
34189c90:	6079      	str	r1, [r7, #4]
34189c92:	4648      	mov	r0, r9
34189c94:	9305      	str	r3, [sp, #20]
34189c96:	f000 fd39 	bl	3418a70c <_Balloc>
34189c9a:	9b05      	ldr	r3, [sp, #20]
34189c9c:	4607      	mov	r7, r0
34189c9e:	2800      	cmp	r0, #0
34189ca0:	d13e      	bne.n	34189d20 <_dtoa_r+0x2d0>
34189ca2:	4b1e      	ldr	r3, [pc, #120]	@ (34189d1c <_dtoa_r+0x2cc>)
34189ca4:	4602      	mov	r2, r0
34189ca6:	f240 11af 	movw	r1, #431	@ 0x1af
34189caa:	e6ea      	b.n	34189a82 <_dtoa_r+0x32>
34189cac:	2200      	movs	r2, #0
34189cae:	e7e1      	b.n	34189c74 <_dtoa_r+0x224>
34189cb0:	2200      	movs	r2, #0
34189cb2:	e7d3      	b.n	34189c5c <_dtoa_r+0x20c>
34189cb4:	2401      	movs	r4, #1
34189cb6:	2200      	movs	r2, #0
34189cb8:	e9cd 2407 	strd	r2, r4, [sp, #28]
34189cbc:	f04f 3bff 	mov.w	fp, #4294967295
34189cc0:	2100      	movs	r1, #0
34189cc2:	2212      	movs	r2, #18
34189cc4:	46da      	mov	sl, fp
34189cc6:	9109      	str	r1, [sp, #36]	@ 0x24
34189cc8:	e7da      	b.n	34189c80 <_dtoa_r+0x230>
34189cca:	2201      	movs	r2, #1
34189ccc:	9208      	str	r2, [sp, #32]
34189cce:	e7f5      	b.n	34189cbc <_dtoa_r+0x26c>
34189cd0:	f04f 0b01 	mov.w	fp, #1
34189cd4:	46da      	mov	sl, fp
34189cd6:	465a      	mov	r2, fp
34189cd8:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
34189cdc:	e7d0      	b.n	34189c80 <_dtoa_r+0x230>
34189cde:	3101      	adds	r1, #1
34189ce0:	0040      	lsls	r0, r0, #1
34189ce2:	e7d1      	b.n	34189c88 <_dtoa_r+0x238>
34189ce4:	f3af 8000 	nop.w
34189ce8:	636f4361 	.word	0x636f4361
34189cec:	3fd287a7 	.word	0x3fd287a7
34189cf0:	8b60c8b3 	.word	0x8b60c8b3
34189cf4:	3fc68a28 	.word	0x3fc68a28
34189cf8:	509f79fb 	.word	0x509f79fb
34189cfc:	3fd34413 	.word	0x3fd34413
34189d00:	3418d039 	.word	0x3418d039
34189d04:	3418d050 	.word	0x3418d050
34189d08:	7ff00000 	.word	0x7ff00000
34189d0c:	3418d035 	.word	0x3418d035
34189d10:	3418d004 	.word	0x3418d004
34189d14:	3418d003 	.word	0x3418d003
34189d18:	3418d228 	.word	0x3418d228
34189d1c:	3418d0a8 	.word	0x3418d0a8
34189d20:	f8d9 201c 	ldr.w	r2, [r9, #28]
34189d24:	f1ba 0f0e 	cmp.w	sl, #14
34189d28:	6010      	str	r0, [r2, #0]
34189d2a:	d86e      	bhi.n	34189e0a <_dtoa_r+0x3ba>
34189d2c:	2c00      	cmp	r4, #0
34189d2e:	d06c      	beq.n	34189e0a <_dtoa_r+0x3ba>
34189d30:	f1b8 0f00 	cmp.w	r8, #0
34189d34:	f340 80b4 	ble.w	34189ea0 <_dtoa_r+0x450>
34189d38:	f008 010f 	and.w	r1, r8, #15
34189d3c:	4ac7      	ldr	r2, [pc, #796]	@ (3418a05c <_dtoa_r+0x60c>)
34189d3e:	f418 7f80 	tst.w	r8, #256	@ 0x100
34189d42:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
34189d46:	ea4f 1128 	mov.w	r1, r8, asr #4
34189d4a:	ed92 7b00 	vldr	d7, [r2]
34189d4e:	f000 809b 	beq.w	34189e88 <_dtoa_r+0x438>
34189d52:	4ac3      	ldr	r2, [pc, #780]	@ (3418a060 <_dtoa_r+0x610>)
34189d54:	f001 010f 	and.w	r1, r1, #15
34189d58:	ed92 6b08 	vldr	d6, [r2, #32]
34189d5c:	2203      	movs	r2, #3
34189d5e:	ee88 6b06 	vdiv.f64	d6, d8, d6
34189d62:	ed8d 6b02 	vstr	d6, [sp, #8]
34189d66:	48be      	ldr	r0, [pc, #760]	@ (3418a060 <_dtoa_r+0x610>)
34189d68:	2900      	cmp	r1, #0
34189d6a:	f040 808f 	bne.w	34189e8c <_dtoa_r+0x43c>
34189d6e:	ed9d 6b02 	vldr	d6, [sp, #8]
34189d72:	ee86 7b07 	vdiv.f64	d7, d6, d7
34189d76:	ed8d 7b02 	vstr	d7, [sp, #8]
34189d7a:	990c      	ldr	r1, [sp, #48]	@ 0x30
34189d7c:	ed9d 7b02 	vldr	d7, [sp, #8]
34189d80:	2900      	cmp	r1, #0
34189d82:	f000 80b3 	beq.w	34189eec <_dtoa_r+0x49c>
34189d86:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
34189d8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
34189d8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189d92:	f140 80ab 	bpl.w	34189eec <_dtoa_r+0x49c>
34189d96:	f1ba 0f00 	cmp.w	sl, #0
34189d9a:	f000 80a7 	beq.w	34189eec <_dtoa_r+0x49c>
34189d9e:	f1bb 0f00 	cmp.w	fp, #0
34189da2:	dd30      	ble.n	34189e06 <_dtoa_r+0x3b6>
34189da4:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
34189da8:	f108 31ff 	add.w	r1, r8, #4294967295
34189dac:	3201      	adds	r2, #1
34189dae:	465c      	mov	r4, fp
34189db0:	9105      	str	r1, [sp, #20]
34189db2:	ee27 7b06 	vmul.f64	d7, d7, d6
34189db6:	ed8d 7b02 	vstr	d7, [sp, #8]
34189dba:	ee07 2a90 	vmov	s15, r2
34189dbe:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
34189dc2:	ed9d 6b02 	vldr	d6, [sp, #8]
34189dc6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
34189dca:	eea7 5b06 	vfma.f64	d5, d7, d6
34189dce:	ee15 2a90 	vmov	r2, s11
34189dd2:	ec51 0b15 	vmov	r0, r1, d5
34189dd6:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
34189dda:	2c00      	cmp	r4, #0
34189ddc:	f040 808a 	bne.w	34189ef4 <_dtoa_r+0x4a4>
34189de0:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
34189de4:	ee36 6b47 	vsub.f64	d6, d6, d7
34189de8:	ec41 0b17 	vmov	d7, r0, r1
34189dec:	eeb4 6bc7 	vcmpe.f64	d6, d7
34189df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189df4:	f300 826a 	bgt.w	3418a2cc <_dtoa_r+0x87c>
34189df8:	eeb1 7b47 	vneg.f64	d7, d7
34189dfc:	eeb4 6bc7 	vcmpe.f64	d6, d7
34189e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189e04:	d423      	bmi.n	34189e4e <_dtoa_r+0x3fe>
34189e06:	ed8d 8b02 	vstr	d8, [sp, #8]
34189e0a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
34189e0c:	2a00      	cmp	r2, #0
34189e0e:	f2c0 8129 	blt.w	3418a064 <_dtoa_r+0x614>
34189e12:	f1b8 0f0e 	cmp.w	r8, #14
34189e16:	f300 8125 	bgt.w	3418a064 <_dtoa_r+0x614>
34189e1a:	4b90      	ldr	r3, [pc, #576]	@ (3418a05c <_dtoa_r+0x60c>)
34189e1c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
34189e20:	ed93 6b00 	vldr	d6, [r3]
34189e24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34189e26:	2b00      	cmp	r3, #0
34189e28:	f280 80c8 	bge.w	34189fbc <_dtoa_r+0x56c>
34189e2c:	f1ba 0f00 	cmp.w	sl, #0
34189e30:	f300 80c4 	bgt.w	34189fbc <_dtoa_r+0x56c>
34189e34:	d10b      	bne.n	34189e4e <_dtoa_r+0x3fe>
34189e36:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
34189e3a:	ee26 6b07 	vmul.f64	d6, d6, d7
34189e3e:	ed9d 7b02 	vldr	d7, [sp, #8]
34189e42:	eeb4 6bc7 	vcmpe.f64	d6, d7
34189e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189e4a:	f2c0 823c 	blt.w	3418a2c6 <_dtoa_r+0x876>
34189e4e:	2400      	movs	r4, #0
34189e50:	4625      	mov	r5, r4
34189e52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
34189e54:	463e      	mov	r6, r7
34189e56:	43db      	mvns	r3, r3
34189e58:	9305      	str	r3, [sp, #20]
34189e5a:	f04f 0800 	mov.w	r8, #0
34189e5e:	4621      	mov	r1, r4
34189e60:	4648      	mov	r0, r9
34189e62:	f000 fc93 	bl	3418a78c <_Bfree>
34189e66:	2d00      	cmp	r5, #0
34189e68:	f000 80a2 	beq.w	34189fb0 <_dtoa_r+0x560>
34189e6c:	f1b8 0f00 	cmp.w	r8, #0
34189e70:	d005      	beq.n	34189e7e <_dtoa_r+0x42e>
34189e72:	45a8      	cmp	r8, r5
34189e74:	d003      	beq.n	34189e7e <_dtoa_r+0x42e>
34189e76:	4641      	mov	r1, r8
34189e78:	4648      	mov	r0, r9
34189e7a:	f000 fc87 	bl	3418a78c <_Bfree>
34189e7e:	4629      	mov	r1, r5
34189e80:	4648      	mov	r0, r9
34189e82:	f000 fc83 	bl	3418a78c <_Bfree>
34189e86:	e093      	b.n	34189fb0 <_dtoa_r+0x560>
34189e88:	2202      	movs	r2, #2
34189e8a:	e76c      	b.n	34189d66 <_dtoa_r+0x316>
34189e8c:	07cc      	lsls	r4, r1, #31
34189e8e:	d504      	bpl.n	34189e9a <_dtoa_r+0x44a>
34189e90:	3201      	adds	r2, #1
34189e92:	ed90 6b00 	vldr	d6, [r0]
34189e96:	ee27 7b06 	vmul.f64	d7, d7, d6
34189e9a:	1049      	asrs	r1, r1, #1
34189e9c:	3008      	adds	r0, #8
34189e9e:	e763      	b.n	34189d68 <_dtoa_r+0x318>
34189ea0:	d022      	beq.n	34189ee8 <_dtoa_r+0x498>
34189ea2:	f1c8 0100 	rsb	r1, r8, #0
34189ea6:	4a6d      	ldr	r2, [pc, #436]	@ (3418a05c <_dtoa_r+0x60c>)
34189ea8:	2400      	movs	r4, #0
34189eaa:	f001 000f 	and.w	r0, r1, #15
34189eae:	1109      	asrs	r1, r1, #4
34189eb0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
34189eb4:	486a      	ldr	r0, [pc, #424]	@ (3418a060 <_dtoa_r+0x610>)
34189eb6:	ed92 7b00 	vldr	d7, [r2]
34189eba:	2202      	movs	r2, #2
34189ebc:	ee28 7b07 	vmul.f64	d7, d8, d7
34189ec0:	ed8d 7b02 	vstr	d7, [sp, #8]
34189ec4:	b929      	cbnz	r1, 34189ed2 <_dtoa_r+0x482>
34189ec6:	2c00      	cmp	r4, #0
34189ec8:	f43f af57 	beq.w	34189d7a <_dtoa_r+0x32a>
34189ecc:	ed8d 7b02 	vstr	d7, [sp, #8]
34189ed0:	e753      	b.n	34189d7a <_dtoa_r+0x32a>
34189ed2:	07ce      	lsls	r6, r1, #31
34189ed4:	d505      	bpl.n	34189ee2 <_dtoa_r+0x492>
34189ed6:	3201      	adds	r2, #1
34189ed8:	2401      	movs	r4, #1
34189eda:	ed90 6b00 	vldr	d6, [r0]
34189ede:	ee27 7b06 	vmul.f64	d7, d7, d6
34189ee2:	1049      	asrs	r1, r1, #1
34189ee4:	3008      	adds	r0, #8
34189ee6:	e7ed      	b.n	34189ec4 <_dtoa_r+0x474>
34189ee8:	2202      	movs	r2, #2
34189eea:	e746      	b.n	34189d7a <_dtoa_r+0x32a>
34189eec:	4654      	mov	r4, sl
34189eee:	f8cd 8014 	str.w	r8, [sp, #20]
34189ef2:	e762      	b.n	34189dba <_dtoa_r+0x36a>
34189ef4:	4a59      	ldr	r2, [pc, #356]	@ (3418a05c <_dtoa_r+0x60c>)
34189ef6:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
34189efa:	443c      	add	r4, r7
34189efc:	ed12 4b02 	vldr	d4, [r2, #-8]
34189f00:	9a08      	ldr	r2, [sp, #32]
34189f02:	ec41 0b17 	vmov	d7, r0, r1
34189f06:	b34a      	cbz	r2, 34189f5c <_dtoa_r+0x50c>
34189f08:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
34189f0c:	463e      	mov	r6, r7
34189f0e:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
34189f12:	ee83 5b04 	vdiv.f64	d5, d3, d4
34189f16:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
34189f1a:	ee35 7b47 	vsub.f64	d7, d5, d7
34189f1e:	eefd 4bc6 	vcvt.s32.f64	s9, d6
34189f22:	eeb8 5be4 	vcvt.f64.s32	d5, s9
34189f26:	ee14 2a90 	vmov	r2, s9
34189f2a:	3230      	adds	r2, #48	@ 0x30
34189f2c:	ee36 6b45 	vsub.f64	d6, d6, d5
34189f30:	f806 2b01 	strb.w	r2, [r6], #1
34189f34:	eeb4 6bc7 	vcmpe.f64	d6, d7
34189f38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189f3c:	d438      	bmi.n	34189fb0 <_dtoa_r+0x560>
34189f3e:	ee32 5b46 	vsub.f64	d5, d2, d6
34189f42:	eeb4 5bc7 	vcmpe.f64	d5, d7
34189f46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189f4a:	d46e      	bmi.n	3418a02a <_dtoa_r+0x5da>
34189f4c:	42a6      	cmp	r6, r4
34189f4e:	f43f af5a 	beq.w	34189e06 <_dtoa_r+0x3b6>
34189f52:	ee27 7b03 	vmul.f64	d7, d7, d3
34189f56:	ee26 6b03 	vmul.f64	d6, d6, d3
34189f5a:	e7e0      	b.n	34189f1e <_dtoa_r+0x4ce>
34189f5c:	ee27 7b04 	vmul.f64	d7, d7, d4
34189f60:	4621      	mov	r1, r4
34189f62:	463e      	mov	r6, r7
34189f64:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
34189f68:	eefd 4bc6 	vcvt.s32.f64	s9, d6
34189f6c:	ee14 2a90 	vmov	r2, s9
34189f70:	eeb8 5be4 	vcvt.f64.s32	d5, s9
34189f74:	3230      	adds	r2, #48	@ 0x30
34189f76:	ee36 6b45 	vsub.f64	d6, d6, d5
34189f7a:	f806 2b01 	strb.w	r2, [r6], #1
34189f7e:	42a6      	cmp	r6, r4
34189f80:	d119      	bne.n	34189fb6 <_dtoa_r+0x566>
34189f82:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
34189f86:	ee37 4b05 	vadd.f64	d4, d7, d5
34189f8a:	eeb4 6bc4 	vcmpe.f64	d6, d4
34189f8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189f92:	dc4a      	bgt.n	3418a02a <_dtoa_r+0x5da>
34189f94:	ee35 5b47 	vsub.f64	d5, d5, d7
34189f98:	eeb4 6bc5 	vcmpe.f64	d6, d5
34189f9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189fa0:	f57f af31 	bpl.w	34189e06 <_dtoa_r+0x3b6>
34189fa4:	460e      	mov	r6, r1
34189fa6:	3901      	subs	r1, #1
34189fa8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
34189fac:	2b30      	cmp	r3, #48	@ 0x30
34189fae:	d0f9      	beq.n	34189fa4 <_dtoa_r+0x554>
34189fb0:	f8dd 8014 	ldr.w	r8, [sp, #20]
34189fb4:	e027      	b.n	3418a006 <_dtoa_r+0x5b6>
34189fb6:	ee26 6b03 	vmul.f64	d6, d6, d3
34189fba:	e7d5      	b.n	34189f68 <_dtoa_r+0x518>
34189fbc:	ed9d 7b02 	vldr	d7, [sp, #8]
34189fc0:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
34189fc4:	463e      	mov	r6, r7
34189fc6:	ee87 5b06 	vdiv.f64	d5, d7, d6
34189fca:	eebd 5bc5 	vcvt.s32.f64	s10, d5
34189fce:	ee15 3a10 	vmov	r3, s10
34189fd2:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
34189fd6:	3330      	adds	r3, #48	@ 0x30
34189fd8:	eea3 7b46 	vfms.f64	d7, d3, d6
34189fdc:	f806 3b01 	strb.w	r3, [r6], #1
34189fe0:	1bf3      	subs	r3, r6, r7
34189fe2:	459a      	cmp	sl, r3
34189fe4:	d132      	bne.n	3418a04c <_dtoa_r+0x5fc>
34189fe6:	ee37 7b07 	vadd.f64	d7, d7, d7
34189fea:	eeb4 7bc6 	vcmpe.f64	d7, d6
34189fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189ff2:	dc18      	bgt.n	3418a026 <_dtoa_r+0x5d6>
34189ff4:	eeb4 7b46 	vcmp.f64	d7, d6
34189ff8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
34189ffc:	d103      	bne.n	3418a006 <_dtoa_r+0x5b6>
34189ffe:	ee15 3a10 	vmov	r3, s10
3418a002:	07db      	lsls	r3, r3, #31
3418a004:	d40f      	bmi.n	3418a026 <_dtoa_r+0x5d6>
3418a006:	9901      	ldr	r1, [sp, #4]
3418a008:	4648      	mov	r0, r9
3418a00a:	f000 fbbf 	bl	3418a78c <_Bfree>
3418a00e:	2300      	movs	r3, #0
3418a010:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3418a012:	7033      	strb	r3, [r6, #0]
3418a014:	f108 0301 	add.w	r3, r8, #1
3418a018:	6013      	str	r3, [r2, #0]
3418a01a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3418a01c:	2b00      	cmp	r3, #0
3418a01e:	f000 824b 	beq.w	3418a4b8 <_dtoa_r+0xa68>
3418a022:	601e      	str	r6, [r3, #0]
3418a024:	e248      	b.n	3418a4b8 <_dtoa_r+0xa68>
3418a026:	f8cd 8014 	str.w	r8, [sp, #20]
3418a02a:	4633      	mov	r3, r6
3418a02c:	461e      	mov	r6, r3
3418a02e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3418a032:	2a39      	cmp	r2, #57	@ 0x39
3418a034:	d106      	bne.n	3418a044 <_dtoa_r+0x5f4>
3418a036:	429f      	cmp	r7, r3
3418a038:	d1f8      	bne.n	3418a02c <_dtoa_r+0x5dc>
3418a03a:	9a05      	ldr	r2, [sp, #20]
3418a03c:	3201      	adds	r2, #1
3418a03e:	9205      	str	r2, [sp, #20]
3418a040:	2230      	movs	r2, #48	@ 0x30
3418a042:	703a      	strb	r2, [r7, #0]
3418a044:	781a      	ldrb	r2, [r3, #0]
3418a046:	3201      	adds	r2, #1
3418a048:	701a      	strb	r2, [r3, #0]
3418a04a:	e7b1      	b.n	34189fb0 <_dtoa_r+0x560>
3418a04c:	ee27 7b04 	vmul.f64	d7, d7, d4
3418a050:	eeb5 7b40 	vcmp.f64	d7, #0.0
3418a054:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418a058:	d1b5      	bne.n	34189fc6 <_dtoa_r+0x576>
3418a05a:	e7d4      	b.n	3418a006 <_dtoa_r+0x5b6>
3418a05c:	3418d228 	.word	0x3418d228
3418a060:	3418d200 	.word	0x3418d200
3418a064:	9908      	ldr	r1, [sp, #32]
3418a066:	2900      	cmp	r1, #0
3418a068:	f000 80e9 	beq.w	3418a23e <_dtoa_r+0x7ee>
3418a06c:	9907      	ldr	r1, [sp, #28]
3418a06e:	2901      	cmp	r1, #1
3418a070:	f300 80cb 	bgt.w	3418a20a <_dtoa_r+0x7ba>
3418a074:	2d00      	cmp	r5, #0
3418a076:	f000 80c4 	beq.w	3418a202 <_dtoa_r+0x7b2>
3418a07a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3418a07e:	461c      	mov	r4, r3
3418a080:	9e04      	ldr	r6, [sp, #16]
3418a082:	9305      	str	r3, [sp, #20]
3418a084:	2101      	movs	r1, #1
3418a086:	9b04      	ldr	r3, [sp, #16]
3418a088:	4648      	mov	r0, r9
3418a08a:	4413      	add	r3, r2
3418a08c:	9304      	str	r3, [sp, #16]
3418a08e:	9b06      	ldr	r3, [sp, #24]
3418a090:	4413      	add	r3, r2
3418a092:	9306      	str	r3, [sp, #24]
3418a094:	f000 fc7a 	bl	3418a98c <__i2b>
3418a098:	9b05      	ldr	r3, [sp, #20]
3418a09a:	4605      	mov	r5, r0
3418a09c:	b166      	cbz	r6, 3418a0b8 <_dtoa_r+0x668>
3418a09e:	9a06      	ldr	r2, [sp, #24]
3418a0a0:	2a00      	cmp	r2, #0
3418a0a2:	dd09      	ble.n	3418a0b8 <_dtoa_r+0x668>
3418a0a4:	42b2      	cmp	r2, r6
3418a0a6:	9904      	ldr	r1, [sp, #16]
3418a0a8:	bfa8      	it	ge
3418a0aa:	4632      	movge	r2, r6
3418a0ac:	1a89      	subs	r1, r1, r2
3418a0ae:	1ab6      	subs	r6, r6, r2
3418a0b0:	9104      	str	r1, [sp, #16]
3418a0b2:	9906      	ldr	r1, [sp, #24]
3418a0b4:	1a8a      	subs	r2, r1, r2
3418a0b6:	9206      	str	r2, [sp, #24]
3418a0b8:	b30b      	cbz	r3, 3418a0fe <_dtoa_r+0x6ae>
3418a0ba:	9a08      	ldr	r2, [sp, #32]
3418a0bc:	2a00      	cmp	r2, #0
3418a0be:	f000 80c5 	beq.w	3418a24c <_dtoa_r+0x7fc>
3418a0c2:	2c00      	cmp	r4, #0
3418a0c4:	f000 80bf 	beq.w	3418a246 <_dtoa_r+0x7f6>
3418a0c8:	4629      	mov	r1, r5
3418a0ca:	4622      	mov	r2, r4
3418a0cc:	4648      	mov	r0, r9
3418a0ce:	930b      	str	r3, [sp, #44]	@ 0x2c
3418a0d0:	f000 fd16 	bl	3418ab00 <__pow5mult>
3418a0d4:	9a01      	ldr	r2, [sp, #4]
3418a0d6:	4601      	mov	r1, r0
3418a0d8:	4605      	mov	r5, r0
3418a0da:	4648      	mov	r0, r9
3418a0dc:	f000 fc6c 	bl	3418a9b8 <__multiply>
3418a0e0:	9901      	ldr	r1, [sp, #4]
3418a0e2:	9005      	str	r0, [sp, #20]
3418a0e4:	4648      	mov	r0, r9
3418a0e6:	f000 fb51 	bl	3418a78c <_Bfree>
3418a0ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3418a0ec:	1b1b      	subs	r3, r3, r4
3418a0ee:	f000 80b0 	beq.w	3418a252 <_dtoa_r+0x802>
3418a0f2:	461a      	mov	r2, r3
3418a0f4:	9905      	ldr	r1, [sp, #20]
3418a0f6:	4648      	mov	r0, r9
3418a0f8:	f000 fd02 	bl	3418ab00 <__pow5mult>
3418a0fc:	9001      	str	r0, [sp, #4]
3418a0fe:	2101      	movs	r1, #1
3418a100:	4648      	mov	r0, r9
3418a102:	f000 fc43 	bl	3418a98c <__i2b>
3418a106:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3418a108:	4604      	mov	r4, r0
3418a10a:	2b00      	cmp	r3, #0
3418a10c:	f000 81da 	beq.w	3418a4c4 <_dtoa_r+0xa74>
3418a110:	461a      	mov	r2, r3
3418a112:	4601      	mov	r1, r0
3418a114:	4648      	mov	r0, r9
3418a116:	f000 fcf3 	bl	3418ab00 <__pow5mult>
3418a11a:	9b07      	ldr	r3, [sp, #28]
3418a11c:	4604      	mov	r4, r0
3418a11e:	2b01      	cmp	r3, #1
3418a120:	f300 80a0 	bgt.w	3418a264 <_dtoa_r+0x814>
3418a124:	9b02      	ldr	r3, [sp, #8]
3418a126:	2b00      	cmp	r3, #0
3418a128:	f040 8096 	bne.w	3418a258 <_dtoa_r+0x808>
3418a12c:	9b03      	ldr	r3, [sp, #12]
3418a12e:	f3c3 0213 	ubfx	r2, r3, #0, #20
3418a132:	2a00      	cmp	r2, #0
3418a134:	f040 8092 	bne.w	3418a25c <_dtoa_r+0x80c>
3418a138:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
3418a13c:	0d12      	lsrs	r2, r2, #20
3418a13e:	0512      	lsls	r2, r2, #20
3418a140:	2a00      	cmp	r2, #0
3418a142:	f000 808d 	beq.w	3418a260 <_dtoa_r+0x810>
3418a146:	9b04      	ldr	r3, [sp, #16]
3418a148:	3301      	adds	r3, #1
3418a14a:	9304      	str	r3, [sp, #16]
3418a14c:	9b06      	ldr	r3, [sp, #24]
3418a14e:	3301      	adds	r3, #1
3418a150:	9306      	str	r3, [sp, #24]
3418a152:	2301      	movs	r3, #1
3418a154:	930b      	str	r3, [sp, #44]	@ 0x2c
3418a156:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3418a158:	2b00      	cmp	r3, #0
3418a15a:	f000 81b9 	beq.w	3418a4d0 <_dtoa_r+0xa80>
3418a15e:	6922      	ldr	r2, [r4, #16]
3418a160:	eb04 0282 	add.w	r2, r4, r2, lsl #2
3418a164:	6910      	ldr	r0, [r2, #16]
3418a166:	f000 fbc5 	bl	3418a8f4 <__hi0bits>
3418a16a:	f1c0 0020 	rsb	r0, r0, #32
3418a16e:	9b06      	ldr	r3, [sp, #24]
3418a170:	4418      	add	r0, r3
3418a172:	f010 001f 	ands.w	r0, r0, #31
3418a176:	f000 8081 	beq.w	3418a27c <_dtoa_r+0x82c>
3418a17a:	f1c0 0220 	rsb	r2, r0, #32
3418a17e:	2a04      	cmp	r2, #4
3418a180:	dd73      	ble.n	3418a26a <_dtoa_r+0x81a>
3418a182:	f1c0 001c 	rsb	r0, r0, #28
3418a186:	9b04      	ldr	r3, [sp, #16]
3418a188:	4403      	add	r3, r0
3418a18a:	4406      	add	r6, r0
3418a18c:	9304      	str	r3, [sp, #16]
3418a18e:	9b06      	ldr	r3, [sp, #24]
3418a190:	4403      	add	r3, r0
3418a192:	9306      	str	r3, [sp, #24]
3418a194:	9b04      	ldr	r3, [sp, #16]
3418a196:	2b00      	cmp	r3, #0
3418a198:	dd05      	ble.n	3418a1a6 <_dtoa_r+0x756>
3418a19a:	461a      	mov	r2, r3
3418a19c:	9901      	ldr	r1, [sp, #4]
3418a19e:	4648      	mov	r0, r9
3418a1a0:	f000 fd08 	bl	3418abb4 <__lshift>
3418a1a4:	9001      	str	r0, [sp, #4]
3418a1a6:	9b06      	ldr	r3, [sp, #24]
3418a1a8:	2b00      	cmp	r3, #0
3418a1aa:	dd05      	ble.n	3418a1b8 <_dtoa_r+0x768>
3418a1ac:	4621      	mov	r1, r4
3418a1ae:	461a      	mov	r2, r3
3418a1b0:	4648      	mov	r0, r9
3418a1b2:	f000 fcff 	bl	3418abb4 <__lshift>
3418a1b6:	4604      	mov	r4, r0
3418a1b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3418a1ba:	2b00      	cmp	r3, #0
3418a1bc:	d060      	beq.n	3418a280 <_dtoa_r+0x830>
3418a1be:	4621      	mov	r1, r4
3418a1c0:	9801      	ldr	r0, [sp, #4]
3418a1c2:	f000 fd63 	bl	3418ac8c <__mcmp>
3418a1c6:	2800      	cmp	r0, #0
3418a1c8:	da5a      	bge.n	3418a280 <_dtoa_r+0x830>
3418a1ca:	f108 33ff 	add.w	r3, r8, #4294967295
3418a1ce:	220a      	movs	r2, #10
3418a1d0:	9901      	ldr	r1, [sp, #4]
3418a1d2:	4648      	mov	r0, r9
3418a1d4:	9305      	str	r3, [sp, #20]
3418a1d6:	2300      	movs	r3, #0
3418a1d8:	f000 fafa 	bl	3418a7d0 <__multadd>
3418a1dc:	9b08      	ldr	r3, [sp, #32]
3418a1de:	9001      	str	r0, [sp, #4]
3418a1e0:	2b00      	cmp	r3, #0
3418a1e2:	f000 8177 	beq.w	3418a4d4 <_dtoa_r+0xa84>
3418a1e6:	4629      	mov	r1, r5
3418a1e8:	2300      	movs	r3, #0
3418a1ea:	220a      	movs	r2, #10
3418a1ec:	4648      	mov	r0, r9
3418a1ee:	f000 faef 	bl	3418a7d0 <__multadd>
3418a1f2:	f1bb 0f00 	cmp.w	fp, #0
3418a1f6:	4605      	mov	r5, r0
3418a1f8:	dc6e      	bgt.n	3418a2d8 <_dtoa_r+0x888>
3418a1fa:	9b07      	ldr	r3, [sp, #28]
3418a1fc:	2b02      	cmp	r3, #2
3418a1fe:	dc48      	bgt.n	3418a292 <_dtoa_r+0x842>
3418a200:	e06a      	b.n	3418a2d8 <_dtoa_r+0x888>
3418a202:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3418a204:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
3418a208:	e739      	b.n	3418a07e <_dtoa_r+0x62e>
3418a20a:	f10a 34ff 	add.w	r4, sl, #4294967295
3418a20e:	42a3      	cmp	r3, r4
3418a210:	db07      	blt.n	3418a222 <_dtoa_r+0x7d2>
3418a212:	f1ba 0f00 	cmp.w	sl, #0
3418a216:	eba3 0404 	sub.w	r4, r3, r4
3418a21a:	db0b      	blt.n	3418a234 <_dtoa_r+0x7e4>
3418a21c:	9e04      	ldr	r6, [sp, #16]
3418a21e:	4652      	mov	r2, sl
3418a220:	e72f      	b.n	3418a082 <_dtoa_r+0x632>
3418a222:	1ae2      	subs	r2, r4, r3
3418a224:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3418a226:	9e04      	ldr	r6, [sp, #16]
3418a228:	4413      	add	r3, r2
3418a22a:	4652      	mov	r2, sl
3418a22c:	930a      	str	r3, [sp, #40]	@ 0x28
3418a22e:	4623      	mov	r3, r4
3418a230:	2400      	movs	r4, #0
3418a232:	e726      	b.n	3418a082 <_dtoa_r+0x632>
3418a234:	9a04      	ldr	r2, [sp, #16]
3418a236:	eba2 060a 	sub.w	r6, r2, sl
3418a23a:	2200      	movs	r2, #0
3418a23c:	e721      	b.n	3418a082 <_dtoa_r+0x632>
3418a23e:	461c      	mov	r4, r3
3418a240:	9e04      	ldr	r6, [sp, #16]
3418a242:	9d08      	ldr	r5, [sp, #32]
3418a244:	e72a      	b.n	3418a09c <_dtoa_r+0x64c>
3418a246:	9a01      	ldr	r2, [sp, #4]
3418a248:	9205      	str	r2, [sp, #20]
3418a24a:	e752      	b.n	3418a0f2 <_dtoa_r+0x6a2>
3418a24c:	461a      	mov	r2, r3
3418a24e:	9901      	ldr	r1, [sp, #4]
3418a250:	e751      	b.n	3418a0f6 <_dtoa_r+0x6a6>
3418a252:	9b05      	ldr	r3, [sp, #20]
3418a254:	9301      	str	r3, [sp, #4]
3418a256:	e752      	b.n	3418a0fe <_dtoa_r+0x6ae>
3418a258:	2300      	movs	r3, #0
3418a25a:	e77b      	b.n	3418a154 <_dtoa_r+0x704>
3418a25c:	9b02      	ldr	r3, [sp, #8]
3418a25e:	e779      	b.n	3418a154 <_dtoa_r+0x704>
3418a260:	920b      	str	r2, [sp, #44]	@ 0x2c
3418a262:	e778      	b.n	3418a156 <_dtoa_r+0x706>
3418a264:	2300      	movs	r3, #0
3418a266:	930b      	str	r3, [sp, #44]	@ 0x2c
3418a268:	e779      	b.n	3418a15e <_dtoa_r+0x70e>
3418a26a:	d093      	beq.n	3418a194 <_dtoa_r+0x744>
3418a26c:	321c      	adds	r2, #28
3418a26e:	9b04      	ldr	r3, [sp, #16]
3418a270:	4413      	add	r3, r2
3418a272:	4416      	add	r6, r2
3418a274:	9304      	str	r3, [sp, #16]
3418a276:	9b06      	ldr	r3, [sp, #24]
3418a278:	4413      	add	r3, r2
3418a27a:	e78a      	b.n	3418a192 <_dtoa_r+0x742>
3418a27c:	4602      	mov	r2, r0
3418a27e:	e7f5      	b.n	3418a26c <_dtoa_r+0x81c>
3418a280:	f1ba 0f00 	cmp.w	sl, #0
3418a284:	46d3      	mov	fp, sl
3418a286:	f8cd 8014 	str.w	r8, [sp, #20]
3418a28a:	dc21      	bgt.n	3418a2d0 <_dtoa_r+0x880>
3418a28c:	9b07      	ldr	r3, [sp, #28]
3418a28e:	2b02      	cmp	r3, #2
3418a290:	dd1e      	ble.n	3418a2d0 <_dtoa_r+0x880>
3418a292:	f1bb 0f00 	cmp.w	fp, #0
3418a296:	f47f addc 	bne.w	34189e52 <_dtoa_r+0x402>
3418a29a:	4621      	mov	r1, r4
3418a29c:	465b      	mov	r3, fp
3418a29e:	2205      	movs	r2, #5
3418a2a0:	4648      	mov	r0, r9
3418a2a2:	f000 fa95 	bl	3418a7d0 <__multadd>
3418a2a6:	4601      	mov	r1, r0
3418a2a8:	4604      	mov	r4, r0
3418a2aa:	9801      	ldr	r0, [sp, #4]
3418a2ac:	f000 fcee 	bl	3418ac8c <__mcmp>
3418a2b0:	2800      	cmp	r0, #0
3418a2b2:	f77f adce 	ble.w	34189e52 <_dtoa_r+0x402>
3418a2b6:	2331      	movs	r3, #49	@ 0x31
3418a2b8:	463e      	mov	r6, r7
3418a2ba:	f806 3b01 	strb.w	r3, [r6], #1
3418a2be:	9b05      	ldr	r3, [sp, #20]
3418a2c0:	3301      	adds	r3, #1
3418a2c2:	9305      	str	r3, [sp, #20]
3418a2c4:	e5c9      	b.n	34189e5a <_dtoa_r+0x40a>
3418a2c6:	4654      	mov	r4, sl
3418a2c8:	f8cd 8014 	str.w	r8, [sp, #20]
3418a2cc:	4625      	mov	r5, r4
3418a2ce:	e7f2      	b.n	3418a2b6 <_dtoa_r+0x866>
3418a2d0:	9b08      	ldr	r3, [sp, #32]
3418a2d2:	2b00      	cmp	r3, #0
3418a2d4:	f000 8102 	beq.w	3418a4dc <_dtoa_r+0xa8c>
3418a2d8:	2e00      	cmp	r6, #0
3418a2da:	dd05      	ble.n	3418a2e8 <_dtoa_r+0x898>
3418a2dc:	4629      	mov	r1, r5
3418a2de:	4632      	mov	r2, r6
3418a2e0:	4648      	mov	r0, r9
3418a2e2:	f000 fc67 	bl	3418abb4 <__lshift>
3418a2e6:	4605      	mov	r5, r0
3418a2e8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3418a2ea:	2b00      	cmp	r3, #0
3418a2ec:	d058      	beq.n	3418a3a0 <_dtoa_r+0x950>
3418a2ee:	6869      	ldr	r1, [r5, #4]
3418a2f0:	4648      	mov	r0, r9
3418a2f2:	f000 fa0b 	bl	3418a70c <_Balloc>
3418a2f6:	4606      	mov	r6, r0
3418a2f8:	b928      	cbnz	r0, 3418a306 <_dtoa_r+0x8b6>
3418a2fa:	4b82      	ldr	r3, [pc, #520]	@ (3418a504 <_dtoa_r+0xab4>)
3418a2fc:	4602      	mov	r2, r0
3418a2fe:	f240 21ef 	movw	r1, #751	@ 0x2ef
3418a302:	f7ff bbbe 	b.w	34189a82 <_dtoa_r+0x32>
3418a306:	692a      	ldr	r2, [r5, #16]
3418a308:	f105 010c 	add.w	r1, r5, #12
3418a30c:	300c      	adds	r0, #12
3418a30e:	3202      	adds	r2, #2
3418a310:	0092      	lsls	r2, r2, #2
3418a312:	f7ff fafa 	bl	3418990a <memcpy>
3418a316:	2201      	movs	r2, #1
3418a318:	4631      	mov	r1, r6
3418a31a:	4648      	mov	r0, r9
3418a31c:	f000 fc4a 	bl	3418abb4 <__lshift>
3418a320:	1c7b      	adds	r3, r7, #1
3418a322:	46a8      	mov	r8, r5
3418a324:	4605      	mov	r5, r0
3418a326:	9304      	str	r3, [sp, #16]
3418a328:	eb07 030b 	add.w	r3, r7, fp
3418a32c:	9309      	str	r3, [sp, #36]	@ 0x24
3418a32e:	9b02      	ldr	r3, [sp, #8]
3418a330:	f003 0301 	and.w	r3, r3, #1
3418a334:	9308      	str	r3, [sp, #32]
3418a336:	9b04      	ldr	r3, [sp, #16]
3418a338:	4621      	mov	r1, r4
3418a33a:	9801      	ldr	r0, [sp, #4]
3418a33c:	f103 3bff 	add.w	fp, r3, #4294967295
3418a340:	f7ff faf6 	bl	34189930 <quorem>
3418a344:	4641      	mov	r1, r8
3418a346:	9002      	str	r0, [sp, #8]
3418a348:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3418a34c:	9801      	ldr	r0, [sp, #4]
3418a34e:	f000 fc9d 	bl	3418ac8c <__mcmp>
3418a352:	462a      	mov	r2, r5
3418a354:	9006      	str	r0, [sp, #24]
3418a356:	4621      	mov	r1, r4
3418a358:	4648      	mov	r0, r9
3418a35a:	f000 fcb3 	bl	3418acc4 <__mdiff>
3418a35e:	68c2      	ldr	r2, [r0, #12]
3418a360:	4606      	mov	r6, r0
3418a362:	b9fa      	cbnz	r2, 3418a3a4 <_dtoa_r+0x954>
3418a364:	4601      	mov	r1, r0
3418a366:	9801      	ldr	r0, [sp, #4]
3418a368:	f000 fc90 	bl	3418ac8c <__mcmp>
3418a36c:	4602      	mov	r2, r0
3418a36e:	4631      	mov	r1, r6
3418a370:	4648      	mov	r0, r9
3418a372:	920a      	str	r2, [sp, #40]	@ 0x28
3418a374:	f000 fa0a 	bl	3418a78c <_Bfree>
3418a378:	9b07      	ldr	r3, [sp, #28]
3418a37a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
3418a37c:	9e04      	ldr	r6, [sp, #16]
3418a37e:	ea42 0103 	orr.w	r1, r2, r3
3418a382:	9b08      	ldr	r3, [sp, #32]
3418a384:	4319      	orrs	r1, r3
3418a386:	d10f      	bne.n	3418a3a8 <_dtoa_r+0x958>
3418a388:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3418a38c:	d028      	beq.n	3418a3e0 <_dtoa_r+0x990>
3418a38e:	9b06      	ldr	r3, [sp, #24]
3418a390:	2b00      	cmp	r3, #0
3418a392:	dd02      	ble.n	3418a39a <_dtoa_r+0x94a>
3418a394:	9b02      	ldr	r3, [sp, #8]
3418a396:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
3418a39a:	f88b a000 	strb.w	sl, [fp]
3418a39e:	e55e      	b.n	34189e5e <_dtoa_r+0x40e>
3418a3a0:	4628      	mov	r0, r5
3418a3a2:	e7bd      	b.n	3418a320 <_dtoa_r+0x8d0>
3418a3a4:	2201      	movs	r2, #1
3418a3a6:	e7e2      	b.n	3418a36e <_dtoa_r+0x91e>
3418a3a8:	9b06      	ldr	r3, [sp, #24]
3418a3aa:	2b00      	cmp	r3, #0
3418a3ac:	db04      	blt.n	3418a3b8 <_dtoa_r+0x968>
3418a3ae:	9907      	ldr	r1, [sp, #28]
3418a3b0:	430b      	orrs	r3, r1
3418a3b2:	9908      	ldr	r1, [sp, #32]
3418a3b4:	430b      	orrs	r3, r1
3418a3b6:	d120      	bne.n	3418a3fa <_dtoa_r+0x9aa>
3418a3b8:	2a00      	cmp	r2, #0
3418a3ba:	ddee      	ble.n	3418a39a <_dtoa_r+0x94a>
3418a3bc:	2201      	movs	r2, #1
3418a3be:	9901      	ldr	r1, [sp, #4]
3418a3c0:	4648      	mov	r0, r9
3418a3c2:	f000 fbf7 	bl	3418abb4 <__lshift>
3418a3c6:	4621      	mov	r1, r4
3418a3c8:	9001      	str	r0, [sp, #4]
3418a3ca:	f000 fc5f 	bl	3418ac8c <__mcmp>
3418a3ce:	2800      	cmp	r0, #0
3418a3d0:	dc03      	bgt.n	3418a3da <_dtoa_r+0x98a>
3418a3d2:	d1e2      	bne.n	3418a39a <_dtoa_r+0x94a>
3418a3d4:	f01a 0f01 	tst.w	sl, #1
3418a3d8:	d0df      	beq.n	3418a39a <_dtoa_r+0x94a>
3418a3da:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3418a3de:	d1d9      	bne.n	3418a394 <_dtoa_r+0x944>
3418a3e0:	2339      	movs	r3, #57	@ 0x39
3418a3e2:	f88b 3000 	strb.w	r3, [fp]
3418a3e6:	4633      	mov	r3, r6
3418a3e8:	461e      	mov	r6, r3
3418a3ea:	3b01      	subs	r3, #1
3418a3ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
3418a3f0:	2a39      	cmp	r2, #57	@ 0x39
3418a3f2:	d052      	beq.n	3418a49a <_dtoa_r+0xa4a>
3418a3f4:	3201      	adds	r2, #1
3418a3f6:	701a      	strb	r2, [r3, #0]
3418a3f8:	e531      	b.n	34189e5e <_dtoa_r+0x40e>
3418a3fa:	2a00      	cmp	r2, #0
3418a3fc:	dd07      	ble.n	3418a40e <_dtoa_r+0x9be>
3418a3fe:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
3418a402:	d0ed      	beq.n	3418a3e0 <_dtoa_r+0x990>
3418a404:	f10a 0301 	add.w	r3, sl, #1
3418a408:	f88b 3000 	strb.w	r3, [fp]
3418a40c:	e527      	b.n	34189e5e <_dtoa_r+0x40e>
3418a40e:	9b04      	ldr	r3, [sp, #16]
3418a410:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3418a412:	f803 ac01 	strb.w	sl, [r3, #-1]
3418a416:	4293      	cmp	r3, r2
3418a418:	d029      	beq.n	3418a46e <_dtoa_r+0xa1e>
3418a41a:	2300      	movs	r3, #0
3418a41c:	220a      	movs	r2, #10
3418a41e:	9901      	ldr	r1, [sp, #4]
3418a420:	4648      	mov	r0, r9
3418a422:	f000 f9d5 	bl	3418a7d0 <__multadd>
3418a426:	45a8      	cmp	r8, r5
3418a428:	9001      	str	r0, [sp, #4]
3418a42a:	f04f 0300 	mov.w	r3, #0
3418a42e:	f04f 020a 	mov.w	r2, #10
3418a432:	4641      	mov	r1, r8
3418a434:	4648      	mov	r0, r9
3418a436:	d107      	bne.n	3418a448 <_dtoa_r+0x9f8>
3418a438:	f000 f9ca 	bl	3418a7d0 <__multadd>
3418a43c:	4680      	mov	r8, r0
3418a43e:	4605      	mov	r5, r0
3418a440:	9b04      	ldr	r3, [sp, #16]
3418a442:	3301      	adds	r3, #1
3418a444:	9304      	str	r3, [sp, #16]
3418a446:	e776      	b.n	3418a336 <_dtoa_r+0x8e6>
3418a448:	f000 f9c2 	bl	3418a7d0 <__multadd>
3418a44c:	4629      	mov	r1, r5
3418a44e:	4680      	mov	r8, r0
3418a450:	2300      	movs	r3, #0
3418a452:	220a      	movs	r2, #10
3418a454:	4648      	mov	r0, r9
3418a456:	f000 f9bb 	bl	3418a7d0 <__multadd>
3418a45a:	4605      	mov	r5, r0
3418a45c:	e7f0      	b.n	3418a440 <_dtoa_r+0x9f0>
3418a45e:	f1bb 0f00 	cmp.w	fp, #0
3418a462:	f04f 0800 	mov.w	r8, #0
3418a466:	bfcc      	ite	gt
3418a468:	465e      	movgt	r6, fp
3418a46a:	2601      	movle	r6, #1
3418a46c:	443e      	add	r6, r7
3418a46e:	2201      	movs	r2, #1
3418a470:	9901      	ldr	r1, [sp, #4]
3418a472:	4648      	mov	r0, r9
3418a474:	f000 fb9e 	bl	3418abb4 <__lshift>
3418a478:	4621      	mov	r1, r4
3418a47a:	9001      	str	r0, [sp, #4]
3418a47c:	f000 fc06 	bl	3418ac8c <__mcmp>
3418a480:	2800      	cmp	r0, #0
3418a482:	dcb0      	bgt.n	3418a3e6 <_dtoa_r+0x996>
3418a484:	d102      	bne.n	3418a48c <_dtoa_r+0xa3c>
3418a486:	f01a 0f01 	tst.w	sl, #1
3418a48a:	d1ac      	bne.n	3418a3e6 <_dtoa_r+0x996>
3418a48c:	4633      	mov	r3, r6
3418a48e:	461e      	mov	r6, r3
3418a490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
3418a494:	2a30      	cmp	r2, #48	@ 0x30
3418a496:	d0fa      	beq.n	3418a48e <_dtoa_r+0xa3e>
3418a498:	e4e1      	b.n	34189e5e <_dtoa_r+0x40e>
3418a49a:	429f      	cmp	r7, r3
3418a49c:	d1a4      	bne.n	3418a3e8 <_dtoa_r+0x998>
3418a49e:	9b05      	ldr	r3, [sp, #20]
3418a4a0:	3301      	adds	r3, #1
3418a4a2:	9305      	str	r3, [sp, #20]
3418a4a4:	2331      	movs	r3, #49	@ 0x31
3418a4a6:	703b      	strb	r3, [r7, #0]
3418a4a8:	e4d9      	b.n	34189e5e <_dtoa_r+0x40e>
3418a4aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
3418a4ac:	4f16      	ldr	r7, [pc, #88]	@ (3418a508 <_dtoa_r+0xab8>)
3418a4ae:	b11b      	cbz	r3, 3418a4b8 <_dtoa_r+0xa68>
3418a4b0:	f107 0308 	add.w	r3, r7, #8
3418a4b4:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
3418a4b6:	6013      	str	r3, [r2, #0]
3418a4b8:	4638      	mov	r0, r7
3418a4ba:	b011      	add	sp, #68	@ 0x44
3418a4bc:	ecbd 8b02 	vpop	{d8}
3418a4c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3418a4c4:	9b07      	ldr	r3, [sp, #28]
3418a4c6:	2b01      	cmp	r3, #1
3418a4c8:	f77f ae2c 	ble.w	3418a124 <_dtoa_r+0x6d4>
3418a4cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3418a4ce:	930b      	str	r3, [sp, #44]	@ 0x2c
3418a4d0:	2001      	movs	r0, #1
3418a4d2:	e64c      	b.n	3418a16e <_dtoa_r+0x71e>
3418a4d4:	f1bb 0f00 	cmp.w	fp, #0
3418a4d8:	f77f aed8 	ble.w	3418a28c <_dtoa_r+0x83c>
3418a4dc:	463e      	mov	r6, r7
3418a4de:	4621      	mov	r1, r4
3418a4e0:	9801      	ldr	r0, [sp, #4]
3418a4e2:	f7ff fa25 	bl	34189930 <quorem>
3418a4e6:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
3418a4ea:	f806 ab01 	strb.w	sl, [r6], #1
3418a4ee:	1bf2      	subs	r2, r6, r7
3418a4f0:	4593      	cmp	fp, r2
3418a4f2:	ddb4      	ble.n	3418a45e <_dtoa_r+0xa0e>
3418a4f4:	2300      	movs	r3, #0
3418a4f6:	220a      	movs	r2, #10
3418a4f8:	9901      	ldr	r1, [sp, #4]
3418a4fa:	4648      	mov	r0, r9
3418a4fc:	f000 f968 	bl	3418a7d0 <__multadd>
3418a500:	9001      	str	r0, [sp, #4]
3418a502:	e7ec      	b.n	3418a4de <_dtoa_r+0xa8e>
3418a504:	3418d0a8 	.word	0x3418d0a8
3418a508:	3418d02c 	.word	0x3418d02c

3418a50c <_free_r>:
3418a50c:	b538      	push	{r3, r4, r5, lr}
3418a50e:	4605      	mov	r5, r0
3418a510:	2900      	cmp	r1, #0
3418a512:	d041      	beq.n	3418a598 <_free_r+0x8c>
3418a514:	f851 3c04 	ldr.w	r3, [r1, #-4]
3418a518:	1f0c      	subs	r4, r1, #4
3418a51a:	2b00      	cmp	r3, #0
3418a51c:	bfb8      	it	lt
3418a51e:	18e4      	addlt	r4, r4, r3
3418a520:	f000 f8e8 	bl	3418a6f4 <__malloc_lock>
3418a524:	4a1d      	ldr	r2, [pc, #116]	@ (3418a59c <_free_r+0x90>)
3418a526:	6813      	ldr	r3, [r2, #0]
3418a528:	b933      	cbnz	r3, 3418a538 <_free_r+0x2c>
3418a52a:	6063      	str	r3, [r4, #4]
3418a52c:	6014      	str	r4, [r2, #0]
3418a52e:	4628      	mov	r0, r5
3418a530:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3418a534:	f000 b8e4 	b.w	3418a700 <__malloc_unlock>
3418a538:	42a3      	cmp	r3, r4
3418a53a:	d908      	bls.n	3418a54e <_free_r+0x42>
3418a53c:	6820      	ldr	r0, [r4, #0]
3418a53e:	1821      	adds	r1, r4, r0
3418a540:	428b      	cmp	r3, r1
3418a542:	bf01      	itttt	eq
3418a544:	6819      	ldreq	r1, [r3, #0]
3418a546:	685b      	ldreq	r3, [r3, #4]
3418a548:	1809      	addeq	r1, r1, r0
3418a54a:	6021      	streq	r1, [r4, #0]
3418a54c:	e7ed      	b.n	3418a52a <_free_r+0x1e>
3418a54e:	461a      	mov	r2, r3
3418a550:	685b      	ldr	r3, [r3, #4]
3418a552:	b10b      	cbz	r3, 3418a558 <_free_r+0x4c>
3418a554:	42a3      	cmp	r3, r4
3418a556:	d9fa      	bls.n	3418a54e <_free_r+0x42>
3418a558:	6811      	ldr	r1, [r2, #0]
3418a55a:	1850      	adds	r0, r2, r1
3418a55c:	42a0      	cmp	r0, r4
3418a55e:	d10b      	bne.n	3418a578 <_free_r+0x6c>
3418a560:	6820      	ldr	r0, [r4, #0]
3418a562:	4401      	add	r1, r0
3418a564:	1850      	adds	r0, r2, r1
3418a566:	6011      	str	r1, [r2, #0]
3418a568:	4283      	cmp	r3, r0
3418a56a:	d1e0      	bne.n	3418a52e <_free_r+0x22>
3418a56c:	6818      	ldr	r0, [r3, #0]
3418a56e:	685b      	ldr	r3, [r3, #4]
3418a570:	4408      	add	r0, r1
3418a572:	6053      	str	r3, [r2, #4]
3418a574:	6010      	str	r0, [r2, #0]
3418a576:	e7da      	b.n	3418a52e <_free_r+0x22>
3418a578:	d902      	bls.n	3418a580 <_free_r+0x74>
3418a57a:	230c      	movs	r3, #12
3418a57c:	602b      	str	r3, [r5, #0]
3418a57e:	e7d6      	b.n	3418a52e <_free_r+0x22>
3418a580:	6820      	ldr	r0, [r4, #0]
3418a582:	1821      	adds	r1, r4, r0
3418a584:	428b      	cmp	r3, r1
3418a586:	bf02      	ittt	eq
3418a588:	6819      	ldreq	r1, [r3, #0]
3418a58a:	685b      	ldreq	r3, [r3, #4]
3418a58c:	1809      	addeq	r1, r1, r0
3418a58e:	6063      	str	r3, [r4, #4]
3418a590:	bf08      	it	eq
3418a592:	6021      	streq	r1, [r4, #0]
3418a594:	6054      	str	r4, [r2, #4]
3418a596:	e7ca      	b.n	3418a52e <_free_r+0x22>
3418a598:	bd38      	pop	{r3, r4, r5, pc}
3418a59a:	bf00      	nop
3418a59c:	341c03d8 	.word	0x341c03d8

3418a5a0 <malloc>:
3418a5a0:	4b02      	ldr	r3, [pc, #8]	@ (3418a5ac <malloc+0xc>)
3418a5a2:	4601      	mov	r1, r0
3418a5a4:	6818      	ldr	r0, [r3, #0]
3418a5a6:	f000 b825 	b.w	3418a5f4 <_malloc_r>
3418a5aa:	bf00      	nop
3418a5ac:	341c0018 	.word	0x341c0018

3418a5b0 <sbrk_aligned>:
3418a5b0:	b570      	push	{r4, r5, r6, lr}
3418a5b2:	4e0f      	ldr	r6, [pc, #60]	@ (3418a5f0 <sbrk_aligned+0x40>)
3418a5b4:	460c      	mov	r4, r1
3418a5b6:	4605      	mov	r5, r0
3418a5b8:	6831      	ldr	r1, [r6, #0]
3418a5ba:	b911      	cbnz	r1, 3418a5c2 <sbrk_aligned+0x12>
3418a5bc:	f001 fdc4 	bl	3418c148 <_sbrk_r>
3418a5c0:	6030      	str	r0, [r6, #0]
3418a5c2:	4621      	mov	r1, r4
3418a5c4:	4628      	mov	r0, r5
3418a5c6:	f001 fdbf 	bl	3418c148 <_sbrk_r>
3418a5ca:	1c43      	adds	r3, r0, #1
3418a5cc:	d103      	bne.n	3418a5d6 <sbrk_aligned+0x26>
3418a5ce:	f04f 34ff 	mov.w	r4, #4294967295
3418a5d2:	4620      	mov	r0, r4
3418a5d4:	bd70      	pop	{r4, r5, r6, pc}
3418a5d6:	1cc4      	adds	r4, r0, #3
3418a5d8:	f024 0403 	bic.w	r4, r4, #3
3418a5dc:	42a0      	cmp	r0, r4
3418a5de:	d0f8      	beq.n	3418a5d2 <sbrk_aligned+0x22>
3418a5e0:	1a21      	subs	r1, r4, r0
3418a5e2:	4628      	mov	r0, r5
3418a5e4:	f001 fdb0 	bl	3418c148 <_sbrk_r>
3418a5e8:	3001      	adds	r0, #1
3418a5ea:	d1f2      	bne.n	3418a5d2 <sbrk_aligned+0x22>
3418a5ec:	e7ef      	b.n	3418a5ce <sbrk_aligned+0x1e>
3418a5ee:	bf00      	nop
3418a5f0:	341c03d4 	.word	0x341c03d4

3418a5f4 <_malloc_r>:
3418a5f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3418a5f8:	1ccd      	adds	r5, r1, #3
3418a5fa:	4606      	mov	r6, r0
3418a5fc:	f025 0503 	bic.w	r5, r5, #3
3418a600:	3508      	adds	r5, #8
3418a602:	2d0c      	cmp	r5, #12
3418a604:	bf38      	it	cc
3418a606:	250c      	movcc	r5, #12
3418a608:	2d00      	cmp	r5, #0
3418a60a:	db01      	blt.n	3418a610 <_malloc_r+0x1c>
3418a60c:	42a9      	cmp	r1, r5
3418a60e:	d904      	bls.n	3418a61a <_malloc_r+0x26>
3418a610:	230c      	movs	r3, #12
3418a612:	6033      	str	r3, [r6, #0]
3418a614:	2000      	movs	r0, #0
3418a616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3418a61a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 3418a6f0 <_malloc_r+0xfc>
3418a61e:	f000 f869 	bl	3418a6f4 <__malloc_lock>
3418a622:	f8d8 3000 	ldr.w	r3, [r8]
3418a626:	461c      	mov	r4, r3
3418a628:	bb44      	cbnz	r4, 3418a67c <_malloc_r+0x88>
3418a62a:	4629      	mov	r1, r5
3418a62c:	4630      	mov	r0, r6
3418a62e:	f7ff ffbf 	bl	3418a5b0 <sbrk_aligned>
3418a632:	1c43      	adds	r3, r0, #1
3418a634:	4604      	mov	r4, r0
3418a636:	d158      	bne.n	3418a6ea <_malloc_r+0xf6>
3418a638:	f8d8 4000 	ldr.w	r4, [r8]
3418a63c:	4627      	mov	r7, r4
3418a63e:	2f00      	cmp	r7, #0
3418a640:	d143      	bne.n	3418a6ca <_malloc_r+0xd6>
3418a642:	2c00      	cmp	r4, #0
3418a644:	d04b      	beq.n	3418a6de <_malloc_r+0xea>
3418a646:	6823      	ldr	r3, [r4, #0]
3418a648:	4639      	mov	r1, r7
3418a64a:	4630      	mov	r0, r6
3418a64c:	eb04 0903 	add.w	r9, r4, r3
3418a650:	f001 fd7a 	bl	3418c148 <_sbrk_r>
3418a654:	4581      	cmp	r9, r0
3418a656:	d142      	bne.n	3418a6de <_malloc_r+0xea>
3418a658:	6821      	ldr	r1, [r4, #0]
3418a65a:	4630      	mov	r0, r6
3418a65c:	1a6d      	subs	r5, r5, r1
3418a65e:	4629      	mov	r1, r5
3418a660:	f7ff ffa6 	bl	3418a5b0 <sbrk_aligned>
3418a664:	3001      	adds	r0, #1
3418a666:	d03a      	beq.n	3418a6de <_malloc_r+0xea>
3418a668:	6823      	ldr	r3, [r4, #0]
3418a66a:	442b      	add	r3, r5
3418a66c:	6023      	str	r3, [r4, #0]
3418a66e:	f8d8 3000 	ldr.w	r3, [r8]
3418a672:	685a      	ldr	r2, [r3, #4]
3418a674:	bb62      	cbnz	r2, 3418a6d0 <_malloc_r+0xdc>
3418a676:	f8c8 7000 	str.w	r7, [r8]
3418a67a:	e00f      	b.n	3418a69c <_malloc_r+0xa8>
3418a67c:	6822      	ldr	r2, [r4, #0]
3418a67e:	1b52      	subs	r2, r2, r5
3418a680:	d420      	bmi.n	3418a6c4 <_malloc_r+0xd0>
3418a682:	2a0b      	cmp	r2, #11
3418a684:	d917      	bls.n	3418a6b6 <_malloc_r+0xc2>
3418a686:	1961      	adds	r1, r4, r5
3418a688:	42a3      	cmp	r3, r4
3418a68a:	6025      	str	r5, [r4, #0]
3418a68c:	bf18      	it	ne
3418a68e:	6059      	strne	r1, [r3, #4]
3418a690:	6863      	ldr	r3, [r4, #4]
3418a692:	bf08      	it	eq
3418a694:	f8c8 1000 	streq.w	r1, [r8]
3418a698:	5162      	str	r2, [r4, r5]
3418a69a:	604b      	str	r3, [r1, #4]
3418a69c:	4630      	mov	r0, r6
3418a69e:	f000 f82f 	bl	3418a700 <__malloc_unlock>
3418a6a2:	f104 000b 	add.w	r0, r4, #11
3418a6a6:	1d23      	adds	r3, r4, #4
3418a6a8:	f020 0007 	bic.w	r0, r0, #7
3418a6ac:	1ac2      	subs	r2, r0, r3
3418a6ae:	bf1c      	itt	ne
3418a6b0:	1a1b      	subne	r3, r3, r0
3418a6b2:	50a3      	strne	r3, [r4, r2]
3418a6b4:	e7af      	b.n	3418a616 <_malloc_r+0x22>
3418a6b6:	6862      	ldr	r2, [r4, #4]
3418a6b8:	42a3      	cmp	r3, r4
3418a6ba:	bf0c      	ite	eq
3418a6bc:	f8c8 2000 	streq.w	r2, [r8]
3418a6c0:	605a      	strne	r2, [r3, #4]
3418a6c2:	e7eb      	b.n	3418a69c <_malloc_r+0xa8>
3418a6c4:	4623      	mov	r3, r4
3418a6c6:	6864      	ldr	r4, [r4, #4]
3418a6c8:	e7ae      	b.n	3418a628 <_malloc_r+0x34>
3418a6ca:	463c      	mov	r4, r7
3418a6cc:	687f      	ldr	r7, [r7, #4]
3418a6ce:	e7b6      	b.n	3418a63e <_malloc_r+0x4a>
3418a6d0:	461a      	mov	r2, r3
3418a6d2:	685b      	ldr	r3, [r3, #4]
3418a6d4:	42a3      	cmp	r3, r4
3418a6d6:	d1fb      	bne.n	3418a6d0 <_malloc_r+0xdc>
3418a6d8:	2300      	movs	r3, #0
3418a6da:	6053      	str	r3, [r2, #4]
3418a6dc:	e7de      	b.n	3418a69c <_malloc_r+0xa8>
3418a6de:	230c      	movs	r3, #12
3418a6e0:	4630      	mov	r0, r6
3418a6e2:	6033      	str	r3, [r6, #0]
3418a6e4:	f000 f80c 	bl	3418a700 <__malloc_unlock>
3418a6e8:	e794      	b.n	3418a614 <_malloc_r+0x20>
3418a6ea:	6005      	str	r5, [r0, #0]
3418a6ec:	e7d6      	b.n	3418a69c <_malloc_r+0xa8>
3418a6ee:	bf00      	nop
3418a6f0:	341c03d8 	.word	0x341c03d8

3418a6f4 <__malloc_lock>:
3418a6f4:	4801      	ldr	r0, [pc, #4]	@ (3418a6fc <__malloc_lock+0x8>)
3418a6f6:	f7ff b8f8 	b.w	341898ea <__retarget_lock_acquire_recursive>
3418a6fa:	bf00      	nop
3418a6fc:	341c03d0 	.word	0x341c03d0

3418a700 <__malloc_unlock>:
3418a700:	4801      	ldr	r0, [pc, #4]	@ (3418a708 <__malloc_unlock+0x8>)
3418a702:	f7ff b8f3 	b.w	341898ec <__retarget_lock_release_recursive>
3418a706:	bf00      	nop
3418a708:	341c03d0 	.word	0x341c03d0

3418a70c <_Balloc>:
3418a70c:	b570      	push	{r4, r5, r6, lr}
3418a70e:	69c6      	ldr	r6, [r0, #28]
3418a710:	4604      	mov	r4, r0
3418a712:	460d      	mov	r5, r1
3418a714:	b976      	cbnz	r6, 3418a734 <_Balloc+0x28>
3418a716:	2010      	movs	r0, #16
3418a718:	f7ff ff42 	bl	3418a5a0 <malloc>
3418a71c:	4602      	mov	r2, r0
3418a71e:	61e0      	str	r0, [r4, #28]
3418a720:	b920      	cbnz	r0, 3418a72c <_Balloc+0x20>
3418a722:	4b18      	ldr	r3, [pc, #96]	@ (3418a784 <_Balloc+0x78>)
3418a724:	216b      	movs	r1, #107	@ 0x6b
3418a726:	4818      	ldr	r0, [pc, #96]	@ (3418a788 <_Balloc+0x7c>)
3418a728:	f001 fd26 	bl	3418c178 <__assert_func>
3418a72c:	e9c0 6601 	strd	r6, r6, [r0, #4]
3418a730:	6006      	str	r6, [r0, #0]
3418a732:	60c6      	str	r6, [r0, #12]
3418a734:	69e6      	ldr	r6, [r4, #28]
3418a736:	68f3      	ldr	r3, [r6, #12]
3418a738:	b183      	cbz	r3, 3418a75c <_Balloc+0x50>
3418a73a:	69e3      	ldr	r3, [r4, #28]
3418a73c:	68db      	ldr	r3, [r3, #12]
3418a73e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
3418a742:	b9b8      	cbnz	r0, 3418a774 <_Balloc+0x68>
3418a744:	2101      	movs	r1, #1
3418a746:	4620      	mov	r0, r4
3418a748:	fa01 f605 	lsl.w	r6, r1, r5
3418a74c:	1d72      	adds	r2, r6, #5
3418a74e:	0092      	lsls	r2, r2, #2
3418a750:	f001 fd30 	bl	3418c1b4 <_calloc_r>
3418a754:	b160      	cbz	r0, 3418a770 <_Balloc+0x64>
3418a756:	e9c0 5601 	strd	r5, r6, [r0, #4]
3418a75a:	e00e      	b.n	3418a77a <_Balloc+0x6e>
3418a75c:	2221      	movs	r2, #33	@ 0x21
3418a75e:	2104      	movs	r1, #4
3418a760:	4620      	mov	r0, r4
3418a762:	f001 fd27 	bl	3418c1b4 <_calloc_r>
3418a766:	69e3      	ldr	r3, [r4, #28]
3418a768:	60f0      	str	r0, [r6, #12]
3418a76a:	68db      	ldr	r3, [r3, #12]
3418a76c:	2b00      	cmp	r3, #0
3418a76e:	d1e4      	bne.n	3418a73a <_Balloc+0x2e>
3418a770:	2000      	movs	r0, #0
3418a772:	bd70      	pop	{r4, r5, r6, pc}
3418a774:	6802      	ldr	r2, [r0, #0]
3418a776:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
3418a77a:	2300      	movs	r3, #0
3418a77c:	e9c0 3303 	strd	r3, r3, [r0, #12]
3418a780:	e7f7      	b.n	3418a772 <_Balloc+0x66>
3418a782:	bf00      	nop
3418a784:	3418d039 	.word	0x3418d039
3418a788:	3418d0b9 	.word	0x3418d0b9

3418a78c <_Bfree>:
3418a78c:	b570      	push	{r4, r5, r6, lr}
3418a78e:	69c6      	ldr	r6, [r0, #28]
3418a790:	4605      	mov	r5, r0
3418a792:	460c      	mov	r4, r1
3418a794:	b976      	cbnz	r6, 3418a7b4 <_Bfree+0x28>
3418a796:	2010      	movs	r0, #16
3418a798:	f7ff ff02 	bl	3418a5a0 <malloc>
3418a79c:	4602      	mov	r2, r0
3418a79e:	61e8      	str	r0, [r5, #28]
3418a7a0:	b920      	cbnz	r0, 3418a7ac <_Bfree+0x20>
3418a7a2:	4b09      	ldr	r3, [pc, #36]	@ (3418a7c8 <_Bfree+0x3c>)
3418a7a4:	218f      	movs	r1, #143	@ 0x8f
3418a7a6:	4809      	ldr	r0, [pc, #36]	@ (3418a7cc <_Bfree+0x40>)
3418a7a8:	f001 fce6 	bl	3418c178 <__assert_func>
3418a7ac:	e9c0 6601 	strd	r6, r6, [r0, #4]
3418a7b0:	6006      	str	r6, [r0, #0]
3418a7b2:	60c6      	str	r6, [r0, #12]
3418a7b4:	b13c      	cbz	r4, 3418a7c6 <_Bfree+0x3a>
3418a7b6:	69eb      	ldr	r3, [r5, #28]
3418a7b8:	6862      	ldr	r2, [r4, #4]
3418a7ba:	68db      	ldr	r3, [r3, #12]
3418a7bc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
3418a7c0:	6021      	str	r1, [r4, #0]
3418a7c2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
3418a7c6:	bd70      	pop	{r4, r5, r6, pc}
3418a7c8:	3418d039 	.word	0x3418d039
3418a7cc:	3418d0b9 	.word	0x3418d0b9

3418a7d0 <__multadd>:
3418a7d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3418a7d4:	f101 0c14 	add.w	ip, r1, #20
3418a7d8:	4607      	mov	r7, r0
3418a7da:	460c      	mov	r4, r1
3418a7dc:	461e      	mov	r6, r3
3418a7de:	690d      	ldr	r5, [r1, #16]
3418a7e0:	2000      	movs	r0, #0
3418a7e2:	f8dc 3000 	ldr.w	r3, [ip]
3418a7e6:	3001      	adds	r0, #1
3418a7e8:	b299      	uxth	r1, r3
3418a7ea:	4285      	cmp	r5, r0
3418a7ec:	fb02 6101 	mla	r1, r2, r1, r6
3418a7f0:	ea4f 4613 	mov.w	r6, r3, lsr #16
3418a7f4:	ea4f 4311 	mov.w	r3, r1, lsr #16
3418a7f8:	b289      	uxth	r1, r1
3418a7fa:	fb02 3306 	mla	r3, r2, r6, r3
3418a7fe:	eb01 4103 	add.w	r1, r1, r3, lsl #16
3418a802:	ea4f 4613 	mov.w	r6, r3, lsr #16
3418a806:	f84c 1b04 	str.w	r1, [ip], #4
3418a80a:	dcea      	bgt.n	3418a7e2 <__multadd+0x12>
3418a80c:	b30e      	cbz	r6, 3418a852 <__multadd+0x82>
3418a80e:	68a3      	ldr	r3, [r4, #8]
3418a810:	42ab      	cmp	r3, r5
3418a812:	dc19      	bgt.n	3418a848 <__multadd+0x78>
3418a814:	6861      	ldr	r1, [r4, #4]
3418a816:	4638      	mov	r0, r7
3418a818:	3101      	adds	r1, #1
3418a81a:	f7ff ff77 	bl	3418a70c <_Balloc>
3418a81e:	4680      	mov	r8, r0
3418a820:	b928      	cbnz	r0, 3418a82e <__multadd+0x5e>
3418a822:	4602      	mov	r2, r0
3418a824:	4b0c      	ldr	r3, [pc, #48]	@ (3418a858 <__multadd+0x88>)
3418a826:	21ba      	movs	r1, #186	@ 0xba
3418a828:	480c      	ldr	r0, [pc, #48]	@ (3418a85c <__multadd+0x8c>)
3418a82a:	f001 fca5 	bl	3418c178 <__assert_func>
3418a82e:	6922      	ldr	r2, [r4, #16]
3418a830:	f104 010c 	add.w	r1, r4, #12
3418a834:	300c      	adds	r0, #12
3418a836:	3202      	adds	r2, #2
3418a838:	0092      	lsls	r2, r2, #2
3418a83a:	f7ff f866 	bl	3418990a <memcpy>
3418a83e:	4621      	mov	r1, r4
3418a840:	4644      	mov	r4, r8
3418a842:	4638      	mov	r0, r7
3418a844:	f7ff ffa2 	bl	3418a78c <_Bfree>
3418a848:	eb04 0385 	add.w	r3, r4, r5, lsl #2
3418a84c:	3501      	adds	r5, #1
3418a84e:	615e      	str	r6, [r3, #20]
3418a850:	6125      	str	r5, [r4, #16]
3418a852:	4620      	mov	r0, r4
3418a854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3418a858:	3418d0a8 	.word	0x3418d0a8
3418a85c:	3418d0b9 	.word	0x3418d0b9

3418a860 <__s2b>:
3418a860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3418a864:	4615      	mov	r5, r2
3418a866:	461f      	mov	r7, r3
3418a868:	2209      	movs	r2, #9
3418a86a:	3308      	adds	r3, #8
3418a86c:	460c      	mov	r4, r1
3418a86e:	4606      	mov	r6, r0
3418a870:	2100      	movs	r1, #0
3418a872:	fb93 f3f2 	sdiv	r3, r3, r2
3418a876:	2201      	movs	r2, #1
3418a878:	429a      	cmp	r2, r3
3418a87a:	db09      	blt.n	3418a890 <__s2b+0x30>
3418a87c:	4630      	mov	r0, r6
3418a87e:	f7ff ff45 	bl	3418a70c <_Balloc>
3418a882:	b940      	cbnz	r0, 3418a896 <__s2b+0x36>
3418a884:	4602      	mov	r2, r0
3418a886:	4b19      	ldr	r3, [pc, #100]	@ (3418a8ec <__s2b+0x8c>)
3418a888:	21d3      	movs	r1, #211	@ 0xd3
3418a88a:	4819      	ldr	r0, [pc, #100]	@ (3418a8f0 <__s2b+0x90>)
3418a88c:	f001 fc74 	bl	3418c178 <__assert_func>
3418a890:	0052      	lsls	r2, r2, #1
3418a892:	3101      	adds	r1, #1
3418a894:	e7f0      	b.n	3418a878 <__s2b+0x18>
3418a896:	9b08      	ldr	r3, [sp, #32]
3418a898:	2d09      	cmp	r5, #9
3418a89a:	6143      	str	r3, [r0, #20]
3418a89c:	f04f 0301 	mov.w	r3, #1
3418a8a0:	6103      	str	r3, [r0, #16]
3418a8a2:	dd16      	ble.n	3418a8d2 <__s2b+0x72>
3418a8a4:	f104 0909 	add.w	r9, r4, #9
3418a8a8:	442c      	add	r4, r5
3418a8aa:	46c8      	mov	r8, r9
3418a8ac:	f818 3b01 	ldrb.w	r3, [r8], #1
3418a8b0:	4601      	mov	r1, r0
3418a8b2:	220a      	movs	r2, #10
3418a8b4:	4630      	mov	r0, r6
3418a8b6:	3b30      	subs	r3, #48	@ 0x30
3418a8b8:	f7ff ff8a 	bl	3418a7d0 <__multadd>
3418a8bc:	45a0      	cmp	r8, r4
3418a8be:	d1f5      	bne.n	3418a8ac <__s2b+0x4c>
3418a8c0:	f1a5 0408 	sub.w	r4, r5, #8
3418a8c4:	444c      	add	r4, r9
3418a8c6:	1b2d      	subs	r5, r5, r4
3418a8c8:	1963      	adds	r3, r4, r5
3418a8ca:	42bb      	cmp	r3, r7
3418a8cc:	db04      	blt.n	3418a8d8 <__s2b+0x78>
3418a8ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3418a8d2:	340a      	adds	r4, #10
3418a8d4:	2509      	movs	r5, #9
3418a8d6:	e7f6      	b.n	3418a8c6 <__s2b+0x66>
3418a8d8:	f814 3b01 	ldrb.w	r3, [r4], #1
3418a8dc:	4601      	mov	r1, r0
3418a8de:	220a      	movs	r2, #10
3418a8e0:	4630      	mov	r0, r6
3418a8e2:	3b30      	subs	r3, #48	@ 0x30
3418a8e4:	f7ff ff74 	bl	3418a7d0 <__multadd>
3418a8e8:	e7ee      	b.n	3418a8c8 <__s2b+0x68>
3418a8ea:	bf00      	nop
3418a8ec:	3418d0a8 	.word	0x3418d0a8
3418a8f0:	3418d0b9 	.word	0x3418d0b9

3418a8f4 <__hi0bits>:
3418a8f4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
3418a8f8:	4603      	mov	r3, r0
3418a8fa:	bf36      	itet	cc
3418a8fc:	0403      	lslcc	r3, r0, #16
3418a8fe:	2000      	movcs	r0, #0
3418a900:	2010      	movcc	r0, #16
3418a902:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
3418a906:	bf3c      	itt	cc
3418a908:	021b      	lslcc	r3, r3, #8
3418a90a:	3008      	addcc	r0, #8
3418a90c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
3418a910:	bf3c      	itt	cc
3418a912:	011b      	lslcc	r3, r3, #4
3418a914:	3004      	addcc	r0, #4
3418a916:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
3418a91a:	bf3c      	itt	cc
3418a91c:	009b      	lslcc	r3, r3, #2
3418a91e:	3002      	addcc	r0, #2
3418a920:	2b00      	cmp	r3, #0
3418a922:	db05      	blt.n	3418a930 <__hi0bits+0x3c>
3418a924:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
3418a928:	f100 0001 	add.w	r0, r0, #1
3418a92c:	bf08      	it	eq
3418a92e:	2020      	moveq	r0, #32
3418a930:	4770      	bx	lr

3418a932 <__lo0bits>:
3418a932:	6803      	ldr	r3, [r0, #0]
3418a934:	4602      	mov	r2, r0
3418a936:	f013 0007 	ands.w	r0, r3, #7
3418a93a:	d00b      	beq.n	3418a954 <__lo0bits+0x22>
3418a93c:	07d9      	lsls	r1, r3, #31
3418a93e:	d421      	bmi.n	3418a984 <__lo0bits+0x52>
3418a940:	0798      	lsls	r0, r3, #30
3418a942:	bf47      	ittee	mi
3418a944:	085b      	lsrmi	r3, r3, #1
3418a946:	2001      	movmi	r0, #1
3418a948:	089b      	lsrpl	r3, r3, #2
3418a94a:	2002      	movpl	r0, #2
3418a94c:	bf4c      	ite	mi
3418a94e:	6013      	strmi	r3, [r2, #0]
3418a950:	6013      	strpl	r3, [r2, #0]
3418a952:	4770      	bx	lr
3418a954:	b299      	uxth	r1, r3
3418a956:	b909      	cbnz	r1, 3418a95c <__lo0bits+0x2a>
3418a958:	0c1b      	lsrs	r3, r3, #16
3418a95a:	2010      	movs	r0, #16
3418a95c:	b2d9      	uxtb	r1, r3
3418a95e:	b909      	cbnz	r1, 3418a964 <__lo0bits+0x32>
3418a960:	3008      	adds	r0, #8
3418a962:	0a1b      	lsrs	r3, r3, #8
3418a964:	0719      	lsls	r1, r3, #28
3418a966:	bf04      	itt	eq
3418a968:	091b      	lsreq	r3, r3, #4
3418a96a:	3004      	addeq	r0, #4
3418a96c:	0799      	lsls	r1, r3, #30
3418a96e:	bf04      	itt	eq
3418a970:	089b      	lsreq	r3, r3, #2
3418a972:	3002      	addeq	r0, #2
3418a974:	07d9      	lsls	r1, r3, #31
3418a976:	d403      	bmi.n	3418a980 <__lo0bits+0x4e>
3418a978:	085b      	lsrs	r3, r3, #1
3418a97a:	f100 0001 	add.w	r0, r0, #1
3418a97e:	d003      	beq.n	3418a988 <__lo0bits+0x56>
3418a980:	6013      	str	r3, [r2, #0]
3418a982:	4770      	bx	lr
3418a984:	2000      	movs	r0, #0
3418a986:	4770      	bx	lr
3418a988:	2020      	movs	r0, #32
3418a98a:	4770      	bx	lr

3418a98c <__i2b>:
3418a98c:	b510      	push	{r4, lr}
3418a98e:	460c      	mov	r4, r1
3418a990:	2101      	movs	r1, #1
3418a992:	f7ff febb 	bl	3418a70c <_Balloc>
3418a996:	4602      	mov	r2, r0
3418a998:	b928      	cbnz	r0, 3418a9a6 <__i2b+0x1a>
3418a99a:	4b05      	ldr	r3, [pc, #20]	@ (3418a9b0 <__i2b+0x24>)
3418a99c:	f240 1145 	movw	r1, #325	@ 0x145
3418a9a0:	4804      	ldr	r0, [pc, #16]	@ (3418a9b4 <__i2b+0x28>)
3418a9a2:	f001 fbe9 	bl	3418c178 <__assert_func>
3418a9a6:	2301      	movs	r3, #1
3418a9a8:	6144      	str	r4, [r0, #20]
3418a9aa:	6103      	str	r3, [r0, #16]
3418a9ac:	bd10      	pop	{r4, pc}
3418a9ae:	bf00      	nop
3418a9b0:	3418d0a8 	.word	0x3418d0a8
3418a9b4:	3418d0b9 	.word	0x3418d0b9

3418a9b8 <__multiply>:
3418a9b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3418a9bc:	4617      	mov	r7, r2
3418a9be:	690a      	ldr	r2, [r1, #16]
3418a9c0:	4689      	mov	r9, r1
3418a9c2:	b085      	sub	sp, #20
3418a9c4:	693b      	ldr	r3, [r7, #16]
3418a9c6:	429a      	cmp	r2, r3
3418a9c8:	bfa2      	ittt	ge
3418a9ca:	463b      	movge	r3, r7
3418a9cc:	460f      	movge	r7, r1
3418a9ce:	4699      	movge	r9, r3
3418a9d0:	693d      	ldr	r5, [r7, #16]
3418a9d2:	68bb      	ldr	r3, [r7, #8]
3418a9d4:	f8d9 a010 	ldr.w	sl, [r9, #16]
3418a9d8:	6879      	ldr	r1, [r7, #4]
3418a9da:	eb05 060a 	add.w	r6, r5, sl
3418a9de:	42b3      	cmp	r3, r6
3418a9e0:	bfb8      	it	lt
3418a9e2:	3101      	addlt	r1, #1
3418a9e4:	f7ff fe92 	bl	3418a70c <_Balloc>
3418a9e8:	b930      	cbnz	r0, 3418a9f8 <__multiply+0x40>
3418a9ea:	4602      	mov	r2, r0
3418a9ec:	4b42      	ldr	r3, [pc, #264]	@ (3418aaf8 <__multiply+0x140>)
3418a9ee:	f44f 71b1 	mov.w	r1, #354	@ 0x162
3418a9f2:	4842      	ldr	r0, [pc, #264]	@ (3418aafc <__multiply+0x144>)
3418a9f4:	f001 fbc0 	bl	3418c178 <__assert_func>
3418a9f8:	f100 0414 	add.w	r4, r0, #20
3418a9fc:	2200      	movs	r2, #0
3418a9fe:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
3418aa02:	4623      	mov	r3, r4
3418aa04:	4573      	cmp	r3, lr
3418aa06:	d320      	bcc.n	3418aa4a <__multiply+0x92>
3418aa08:	f107 0814 	add.w	r8, r7, #20
3418aa0c:	f109 0114 	add.w	r1, r9, #20
3418aa10:	eb08 0585 	add.w	r5, r8, r5, lsl #2
3418aa14:	eb01 038a 	add.w	r3, r1, sl, lsl #2
3418aa18:	9302      	str	r3, [sp, #8]
3418aa1a:	1beb      	subs	r3, r5, r7
3418aa1c:	3715      	adds	r7, #21
3418aa1e:	3b15      	subs	r3, #21
3418aa20:	f023 0303 	bic.w	r3, r3, #3
3418aa24:	3304      	adds	r3, #4
3418aa26:	42bd      	cmp	r5, r7
3418aa28:	bf38      	it	cc
3418aa2a:	2304      	movcc	r3, #4
3418aa2c:	9301      	str	r3, [sp, #4]
3418aa2e:	9b02      	ldr	r3, [sp, #8]
3418aa30:	9103      	str	r1, [sp, #12]
3418aa32:	428b      	cmp	r3, r1
3418aa34:	d80c      	bhi.n	3418aa50 <__multiply+0x98>
3418aa36:	2e00      	cmp	r6, #0
3418aa38:	dd03      	ble.n	3418aa42 <__multiply+0x8a>
3418aa3a:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
3418aa3e:	2b00      	cmp	r3, #0
3418aa40:	d057      	beq.n	3418aaf2 <__multiply+0x13a>
3418aa42:	6106      	str	r6, [r0, #16]
3418aa44:	b005      	add	sp, #20
3418aa46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3418aa4a:	f843 2b04 	str.w	r2, [r3], #4
3418aa4e:	e7d9      	b.n	3418aa04 <__multiply+0x4c>
3418aa50:	f8b1 a000 	ldrh.w	sl, [r1]
3418aa54:	f1ba 0f00 	cmp.w	sl, #0
3418aa58:	d021      	beq.n	3418aa9e <__multiply+0xe6>
3418aa5a:	46c4      	mov	ip, r8
3418aa5c:	46a1      	mov	r9, r4
3418aa5e:	2700      	movs	r7, #0
3418aa60:	f85c 2b04 	ldr.w	r2, [ip], #4
3418aa64:	f8d9 3000 	ldr.w	r3, [r9]
3418aa68:	fa1f fb82 	uxth.w	fp, r2
3418aa6c:	4565      	cmp	r5, ip
3418aa6e:	b29b      	uxth	r3, r3
3418aa70:	ea4f 4212 	mov.w	r2, r2, lsr #16
3418aa74:	fb0a 330b 	mla	r3, sl, fp, r3
3418aa78:	443b      	add	r3, r7
3418aa7a:	f8d9 7000 	ldr.w	r7, [r9]
3418aa7e:	ea4f 4717 	mov.w	r7, r7, lsr #16
3418aa82:	fb0a 7202 	mla	r2, sl, r2, r7
3418aa86:	eb02 4213 	add.w	r2, r2, r3, lsr #16
3418aa8a:	b29b      	uxth	r3, r3
3418aa8c:	ea4f 4712 	mov.w	r7, r2, lsr #16
3418aa90:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3418aa94:	f849 3b04 	str.w	r3, [r9], #4
3418aa98:	d8e2      	bhi.n	3418aa60 <__multiply+0xa8>
3418aa9a:	9b01      	ldr	r3, [sp, #4]
3418aa9c:	50e7      	str	r7, [r4, r3]
3418aa9e:	9b03      	ldr	r3, [sp, #12]
3418aaa0:	3104      	adds	r1, #4
3418aaa2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
3418aaa6:	f1b9 0f00 	cmp.w	r9, #0
3418aaaa:	d020      	beq.n	3418aaee <__multiply+0x136>
3418aaac:	6823      	ldr	r3, [r4, #0]
3418aaae:	4647      	mov	r7, r8
3418aab0:	46a4      	mov	ip, r4
3418aab2:	f04f 0a00 	mov.w	sl, #0
3418aab6:	f8b7 b000 	ldrh.w	fp, [r7]
3418aaba:	b29b      	uxth	r3, r3
3418aabc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
3418aac0:	fb09 220b 	mla	r2, r9, fp, r2
3418aac4:	4452      	add	r2, sl
3418aac6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
3418aaca:	f84c 3b04 	str.w	r3, [ip], #4
3418aace:	f857 3b04 	ldr.w	r3, [r7], #4
3418aad2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3418aad6:	f8bc 3000 	ldrh.w	r3, [ip]
3418aada:	42bd      	cmp	r5, r7
3418aadc:	fb09 330a 	mla	r3, r9, sl, r3
3418aae0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
3418aae4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
3418aae8:	d8e5      	bhi.n	3418aab6 <__multiply+0xfe>
3418aaea:	9a01      	ldr	r2, [sp, #4]
3418aaec:	50a3      	str	r3, [r4, r2]
3418aaee:	3404      	adds	r4, #4
3418aaf0:	e79d      	b.n	3418aa2e <__multiply+0x76>
3418aaf2:	3e01      	subs	r6, #1
3418aaf4:	e79f      	b.n	3418aa36 <__multiply+0x7e>
3418aaf6:	bf00      	nop
3418aaf8:	3418d0a8 	.word	0x3418d0a8
3418aafc:	3418d0b9 	.word	0x3418d0b9

3418ab00 <__pow5mult>:
3418ab00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
3418ab04:	4615      	mov	r5, r2
3418ab06:	f012 0203 	ands.w	r2, r2, #3
3418ab0a:	4607      	mov	r7, r0
3418ab0c:	460e      	mov	r6, r1
3418ab0e:	d007      	beq.n	3418ab20 <__pow5mult+0x20>
3418ab10:	3a01      	subs	r2, #1
3418ab12:	4c25      	ldr	r4, [pc, #148]	@ (3418aba8 <__pow5mult+0xa8>)
3418ab14:	2300      	movs	r3, #0
3418ab16:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
3418ab1a:	f7ff fe59 	bl	3418a7d0 <__multadd>
3418ab1e:	4606      	mov	r6, r0
3418ab20:	10ad      	asrs	r5, r5, #2
3418ab22:	d03d      	beq.n	3418aba0 <__pow5mult+0xa0>
3418ab24:	69fc      	ldr	r4, [r7, #28]
3418ab26:	b97c      	cbnz	r4, 3418ab48 <__pow5mult+0x48>
3418ab28:	2010      	movs	r0, #16
3418ab2a:	f7ff fd39 	bl	3418a5a0 <malloc>
3418ab2e:	4602      	mov	r2, r0
3418ab30:	61f8      	str	r0, [r7, #28]
3418ab32:	b928      	cbnz	r0, 3418ab40 <__pow5mult+0x40>
3418ab34:	4b1d      	ldr	r3, [pc, #116]	@ (3418abac <__pow5mult+0xac>)
3418ab36:	f240 11b3 	movw	r1, #435	@ 0x1b3
3418ab3a:	481d      	ldr	r0, [pc, #116]	@ (3418abb0 <__pow5mult+0xb0>)
3418ab3c:	f001 fb1c 	bl	3418c178 <__assert_func>
3418ab40:	e9c0 4401 	strd	r4, r4, [r0, #4]
3418ab44:	6004      	str	r4, [r0, #0]
3418ab46:	60c4      	str	r4, [r0, #12]
3418ab48:	f8d7 801c 	ldr.w	r8, [r7, #28]
3418ab4c:	f8d8 4008 	ldr.w	r4, [r8, #8]
3418ab50:	b94c      	cbnz	r4, 3418ab66 <__pow5mult+0x66>
3418ab52:	f240 2171 	movw	r1, #625	@ 0x271
3418ab56:	4638      	mov	r0, r7
3418ab58:	f7ff ff18 	bl	3418a98c <__i2b>
3418ab5c:	2300      	movs	r3, #0
3418ab5e:	4604      	mov	r4, r0
3418ab60:	f8c8 0008 	str.w	r0, [r8, #8]
3418ab64:	6003      	str	r3, [r0, #0]
3418ab66:	f04f 0900 	mov.w	r9, #0
3418ab6a:	07eb      	lsls	r3, r5, #31
3418ab6c:	d50a      	bpl.n	3418ab84 <__pow5mult+0x84>
3418ab6e:	4631      	mov	r1, r6
3418ab70:	4622      	mov	r2, r4
3418ab72:	4638      	mov	r0, r7
3418ab74:	f7ff ff20 	bl	3418a9b8 <__multiply>
3418ab78:	4680      	mov	r8, r0
3418ab7a:	4631      	mov	r1, r6
3418ab7c:	4638      	mov	r0, r7
3418ab7e:	4646      	mov	r6, r8
3418ab80:	f7ff fe04 	bl	3418a78c <_Bfree>
3418ab84:	106d      	asrs	r5, r5, #1
3418ab86:	d00b      	beq.n	3418aba0 <__pow5mult+0xa0>
3418ab88:	6820      	ldr	r0, [r4, #0]
3418ab8a:	b938      	cbnz	r0, 3418ab9c <__pow5mult+0x9c>
3418ab8c:	4622      	mov	r2, r4
3418ab8e:	4621      	mov	r1, r4
3418ab90:	4638      	mov	r0, r7
3418ab92:	f7ff ff11 	bl	3418a9b8 <__multiply>
3418ab96:	6020      	str	r0, [r4, #0]
3418ab98:	f8c0 9000 	str.w	r9, [r0]
3418ab9c:	4604      	mov	r4, r0
3418ab9e:	e7e4      	b.n	3418ab6a <__pow5mult+0x6a>
3418aba0:	4630      	mov	r0, r6
3418aba2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
3418aba6:	bf00      	nop
3418aba8:	3418d1f4 	.word	0x3418d1f4
3418abac:	3418d039 	.word	0x3418d039
3418abb0:	3418d0b9 	.word	0x3418d0b9

3418abb4 <__lshift>:
3418abb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3418abb8:	460c      	mov	r4, r1
3418abba:	4607      	mov	r7, r0
3418abbc:	4691      	mov	r9, r2
3418abbe:	ea4f 1a62 	mov.w	sl, r2, asr #5
3418abc2:	6923      	ldr	r3, [r4, #16]
3418abc4:	6849      	ldr	r1, [r1, #4]
3418abc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
3418abca:	68a3      	ldr	r3, [r4, #8]
3418abcc:	f108 0601 	add.w	r6, r8, #1
3418abd0:	42b3      	cmp	r3, r6
3418abd2:	db0b      	blt.n	3418abec <__lshift+0x38>
3418abd4:	4638      	mov	r0, r7
3418abd6:	f7ff fd99 	bl	3418a70c <_Balloc>
3418abda:	4605      	mov	r5, r0
3418abdc:	b948      	cbnz	r0, 3418abf2 <__lshift+0x3e>
3418abde:	4602      	mov	r2, r0
3418abe0:	4b28      	ldr	r3, [pc, #160]	@ (3418ac84 <__lshift+0xd0>)
3418abe2:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
3418abe6:	4828      	ldr	r0, [pc, #160]	@ (3418ac88 <__lshift+0xd4>)
3418abe8:	f001 fac6 	bl	3418c178 <__assert_func>
3418abec:	3101      	adds	r1, #1
3418abee:	005b      	lsls	r3, r3, #1
3418abf0:	e7ee      	b.n	3418abd0 <__lshift+0x1c>
3418abf2:	2300      	movs	r3, #0
3418abf4:	f100 0114 	add.w	r1, r0, #20
3418abf8:	f100 0210 	add.w	r2, r0, #16
3418abfc:	4618      	mov	r0, r3
3418abfe:	4553      	cmp	r3, sl
3418ac00:	db33      	blt.n	3418ac6a <__lshift+0xb6>
3418ac02:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
3418ac06:	f104 0314 	add.w	r3, r4, #20
3418ac0a:	6920      	ldr	r0, [r4, #16]
3418ac0c:	f019 091f 	ands.w	r9, r9, #31
3418ac10:	eb01 018a 	add.w	r1, r1, sl, lsl #2
3418ac14:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
3418ac18:	d02b      	beq.n	3418ac72 <__lshift+0xbe>
3418ac1a:	f1c9 0e20 	rsb	lr, r9, #32
3418ac1e:	468a      	mov	sl, r1
3418ac20:	2200      	movs	r2, #0
3418ac22:	6818      	ldr	r0, [r3, #0]
3418ac24:	fa00 f009 	lsl.w	r0, r0, r9
3418ac28:	4310      	orrs	r0, r2
3418ac2a:	f84a 0b04 	str.w	r0, [sl], #4
3418ac2e:	f853 2b04 	ldr.w	r2, [r3], #4
3418ac32:	459c      	cmp	ip, r3
3418ac34:	fa22 f20e 	lsr.w	r2, r2, lr
3418ac38:	d8f3      	bhi.n	3418ac22 <__lshift+0x6e>
3418ac3a:	ebac 0304 	sub.w	r3, ip, r4
3418ac3e:	f104 0015 	add.w	r0, r4, #21
3418ac42:	3b15      	subs	r3, #21
3418ac44:	f023 0303 	bic.w	r3, r3, #3
3418ac48:	3304      	adds	r3, #4
3418ac4a:	4560      	cmp	r0, ip
3418ac4c:	bf88      	it	hi
3418ac4e:	2304      	movhi	r3, #4
3418ac50:	50ca      	str	r2, [r1, r3]
3418ac52:	b10a      	cbz	r2, 3418ac58 <__lshift+0xa4>
3418ac54:	f108 0602 	add.w	r6, r8, #2
3418ac58:	3e01      	subs	r6, #1
3418ac5a:	4638      	mov	r0, r7
3418ac5c:	4621      	mov	r1, r4
3418ac5e:	612e      	str	r6, [r5, #16]
3418ac60:	f7ff fd94 	bl	3418a78c <_Bfree>
3418ac64:	4628      	mov	r0, r5
3418ac66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3418ac6a:	3301      	adds	r3, #1
3418ac6c:	f842 0f04 	str.w	r0, [r2, #4]!
3418ac70:	e7c5      	b.n	3418abfe <__lshift+0x4a>
3418ac72:	3904      	subs	r1, #4
3418ac74:	f853 2b04 	ldr.w	r2, [r3], #4
3418ac78:	459c      	cmp	ip, r3
3418ac7a:	f841 2f04 	str.w	r2, [r1, #4]!
3418ac7e:	d8f9      	bhi.n	3418ac74 <__lshift+0xc0>
3418ac80:	e7ea      	b.n	3418ac58 <__lshift+0xa4>
3418ac82:	bf00      	nop
3418ac84:	3418d0a8 	.word	0x3418d0a8
3418ac88:	3418d0b9 	.word	0x3418d0b9

3418ac8c <__mcmp>:
3418ac8c:	4603      	mov	r3, r0
3418ac8e:	690a      	ldr	r2, [r1, #16]
3418ac90:	6900      	ldr	r0, [r0, #16]
3418ac92:	1a80      	subs	r0, r0, r2
3418ac94:	b530      	push	{r4, r5, lr}
3418ac96:	d10e      	bne.n	3418acb6 <__mcmp+0x2a>
3418ac98:	3314      	adds	r3, #20
3418ac9a:	3114      	adds	r1, #20
3418ac9c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
3418aca0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
3418aca4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
3418aca8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
3418acac:	4295      	cmp	r5, r2
3418acae:	d003      	beq.n	3418acb8 <__mcmp+0x2c>
3418acb0:	d205      	bcs.n	3418acbe <__mcmp+0x32>
3418acb2:	f04f 30ff 	mov.w	r0, #4294967295
3418acb6:	bd30      	pop	{r4, r5, pc}
3418acb8:	42a3      	cmp	r3, r4
3418acba:	d3f3      	bcc.n	3418aca4 <__mcmp+0x18>
3418acbc:	e7fb      	b.n	3418acb6 <__mcmp+0x2a>
3418acbe:	2001      	movs	r0, #1
3418acc0:	e7f9      	b.n	3418acb6 <__mcmp+0x2a>
	...

3418acc4 <__mdiff>:
3418acc4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3418acc8:	4689      	mov	r9, r1
3418acca:	4606      	mov	r6, r0
3418accc:	4611      	mov	r1, r2
3418acce:	4614      	mov	r4, r2
3418acd0:	4648      	mov	r0, r9
3418acd2:	f7ff ffdb 	bl	3418ac8c <__mcmp>
3418acd6:	1e05      	subs	r5, r0, #0
3418acd8:	d112      	bne.n	3418ad00 <__mdiff+0x3c>
3418acda:	4629      	mov	r1, r5
3418acdc:	4630      	mov	r0, r6
3418acde:	f7ff fd15 	bl	3418a70c <_Balloc>
3418ace2:	4602      	mov	r2, r0
3418ace4:	b928      	cbnz	r0, 3418acf2 <__mdiff+0x2e>
3418ace6:	4b41      	ldr	r3, [pc, #260]	@ (3418adec <__mdiff+0x128>)
3418ace8:	f240 2137 	movw	r1, #567	@ 0x237
3418acec:	4840      	ldr	r0, [pc, #256]	@ (3418adf0 <__mdiff+0x12c>)
3418acee:	f001 fa43 	bl	3418c178 <__assert_func>
3418acf2:	2301      	movs	r3, #1
3418acf4:	e9c0 3504 	strd	r3, r5, [r0, #16]
3418acf8:	4610      	mov	r0, r2
3418acfa:	b003      	add	sp, #12
3418acfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3418ad00:	bfbc      	itt	lt
3418ad02:	464b      	movlt	r3, r9
3418ad04:	46a1      	movlt	r9, r4
3418ad06:	4630      	mov	r0, r6
3418ad08:	bfb8      	it	lt
3418ad0a:	2501      	movlt	r5, #1
3418ad0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
3418ad10:	bfb4      	ite	lt
3418ad12:	461c      	movlt	r4, r3
3418ad14:	2500      	movge	r5, #0
3418ad16:	f7ff fcf9 	bl	3418a70c <_Balloc>
3418ad1a:	4602      	mov	r2, r0
3418ad1c:	b918      	cbnz	r0, 3418ad26 <__mdiff+0x62>
3418ad1e:	4b33      	ldr	r3, [pc, #204]	@ (3418adec <__mdiff+0x128>)
3418ad20:	f240 2145 	movw	r1, #581	@ 0x245
3418ad24:	e7e2      	b.n	3418acec <__mdiff+0x28>
3418ad26:	f8d9 7010 	ldr.w	r7, [r9, #16]
3418ad2a:	f104 0e14 	add.w	lr, r4, #20
3418ad2e:	6926      	ldr	r6, [r4, #16]
3418ad30:	f100 0b14 	add.w	fp, r0, #20
3418ad34:	60c5      	str	r5, [r0, #12]
3418ad36:	f109 0514 	add.w	r5, r9, #20
3418ad3a:	f109 0310 	add.w	r3, r9, #16
3418ad3e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
3418ad42:	eb05 0887 	add.w	r8, r5, r7, lsl #2
3418ad46:	46d9      	mov	r9, fp
3418ad48:	f04f 0c00 	mov.w	ip, #0
3418ad4c:	9301      	str	r3, [sp, #4]
3418ad4e:	9b01      	ldr	r3, [sp, #4]
3418ad50:	f85e 0b04 	ldr.w	r0, [lr], #4
3418ad54:	f853 af04 	ldr.w	sl, [r3, #4]!
3418ad58:	4576      	cmp	r6, lr
3418ad5a:	9301      	str	r3, [sp, #4]
3418ad5c:	fa1f f38a 	uxth.w	r3, sl
3418ad60:	4619      	mov	r1, r3
3418ad62:	b283      	uxth	r3, r0
3418ad64:	ea4f 4010 	mov.w	r0, r0, lsr #16
3418ad68:	eba1 0303 	sub.w	r3, r1, r3
3418ad6c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
3418ad70:	4463      	add	r3, ip
3418ad72:	eb00 4023 	add.w	r0, r0, r3, asr #16
3418ad76:	b29b      	uxth	r3, r3
3418ad78:	ea4f 4c20 	mov.w	ip, r0, asr #16
3418ad7c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
3418ad80:	f849 3b04 	str.w	r3, [r9], #4
3418ad84:	d8e3      	bhi.n	3418ad4e <__mdiff+0x8a>
3418ad86:	1b33      	subs	r3, r6, r4
3418ad88:	3415      	adds	r4, #21
3418ad8a:	3b15      	subs	r3, #21
3418ad8c:	f023 0303 	bic.w	r3, r3, #3
3418ad90:	3304      	adds	r3, #4
3418ad92:	42a6      	cmp	r6, r4
3418ad94:	bf38      	it	cc
3418ad96:	2304      	movcc	r3, #4
3418ad98:	441d      	add	r5, r3
3418ad9a:	445b      	add	r3, fp
3418ad9c:	462c      	mov	r4, r5
3418ad9e:	461e      	mov	r6, r3
3418ada0:	4544      	cmp	r4, r8
3418ada2:	d30e      	bcc.n	3418adc2 <__mdiff+0xfe>
3418ada4:	f108 0103 	add.w	r1, r8, #3
3418ada8:	1b49      	subs	r1, r1, r5
3418adaa:	3d03      	subs	r5, #3
3418adac:	f021 0103 	bic.w	r1, r1, #3
3418adb0:	45a8      	cmp	r8, r5
3418adb2:	bf38      	it	cc
3418adb4:	2100      	movcc	r1, #0
3418adb6:	440b      	add	r3, r1
3418adb8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
3418adbc:	b199      	cbz	r1, 3418ade6 <__mdiff+0x122>
3418adbe:	6117      	str	r7, [r2, #16]
3418adc0:	e79a      	b.n	3418acf8 <__mdiff+0x34>
3418adc2:	f854 1b04 	ldr.w	r1, [r4], #4
3418adc6:	46e6      	mov	lr, ip
3418adc8:	fa1f fc81 	uxth.w	ip, r1
3418adcc:	0c08      	lsrs	r0, r1, #16
3418adce:	4471      	add	r1, lr
3418add0:	44f4      	add	ip, lr
3418add2:	b289      	uxth	r1, r1
3418add4:	eb00 402c 	add.w	r0, r0, ip, asr #16
3418add8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
3418addc:	ea4f 4c20 	mov.w	ip, r0, asr #16
3418ade0:	f846 1b04 	str.w	r1, [r6], #4
3418ade4:	e7dc      	b.n	3418ada0 <__mdiff+0xdc>
3418ade6:	3f01      	subs	r7, #1
3418ade8:	e7e6      	b.n	3418adb8 <__mdiff+0xf4>
3418adea:	bf00      	nop
3418adec:	3418d0a8 	.word	0x3418d0a8
3418adf0:	3418d0b9 	.word	0x3418d0b9

3418adf4 <__ulp>:
3418adf4:	b082      	sub	sp, #8
3418adf6:	4b11      	ldr	r3, [pc, #68]	@ (3418ae3c <__ulp+0x48>)
3418adf8:	ed8d 0b00 	vstr	d0, [sp]
3418adfc:	9a01      	ldr	r2, [sp, #4]
3418adfe:	4013      	ands	r3, r2
3418ae00:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
3418ae04:	2b00      	cmp	r3, #0
3418ae06:	dc08      	bgt.n	3418ae1a <__ulp+0x26>
3418ae08:	425b      	negs	r3, r3
3418ae0a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
3418ae0e:	ea4f 5223 	mov.w	r2, r3, asr #20
3418ae12:	da04      	bge.n	3418ae1e <__ulp+0x2a>
3418ae14:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
3418ae18:	4113      	asrs	r3, r2
3418ae1a:	2200      	movs	r2, #0
3418ae1c:	e008      	b.n	3418ae30 <__ulp+0x3c>
3418ae1e:	f1a2 0314 	sub.w	r3, r2, #20
3418ae22:	2b1e      	cmp	r3, #30
3418ae24:	bfd6      	itet	le
3418ae26:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
3418ae2a:	2201      	movgt	r2, #1
3418ae2c:	40da      	lsrle	r2, r3
3418ae2e:	2300      	movs	r3, #0
3418ae30:	4619      	mov	r1, r3
3418ae32:	4610      	mov	r0, r2
3418ae34:	ec41 0b10 	vmov	d0, r0, r1
3418ae38:	b002      	add	sp, #8
3418ae3a:	4770      	bx	lr
3418ae3c:	7ff00000 	.word	0x7ff00000

3418ae40 <__b2d>:
3418ae40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3418ae44:	6906      	ldr	r6, [r0, #16]
3418ae46:	f100 0814 	add.w	r8, r0, #20
3418ae4a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
3418ae4e:	f856 2c04 	ldr.w	r2, [r6, #-4]
3418ae52:	1f37      	subs	r7, r6, #4
3418ae54:	4610      	mov	r0, r2
3418ae56:	f7ff fd4d 	bl	3418a8f4 <__hi0bits>
3418ae5a:	f1c0 0320 	rsb	r3, r0, #32
3418ae5e:	280a      	cmp	r0, #10
3418ae60:	600b      	str	r3, [r1, #0]
3418ae62:	491d      	ldr	r1, [pc, #116]	@ (3418aed8 <__b2d+0x98>)
3418ae64:	dc16      	bgt.n	3418ae94 <__b2d+0x54>
3418ae66:	f1c0 0c0b 	rsb	ip, r0, #11
3418ae6a:	45b8      	cmp	r8, r7
3418ae6c:	f100 0015 	add.w	r0, r0, #21
3418ae70:	fa22 f30c 	lsr.w	r3, r2, ip
3418ae74:	fa02 f000 	lsl.w	r0, r2, r0
3418ae78:	ea43 0501 	orr.w	r5, r3, r1
3418ae7c:	bf34      	ite	cc
3418ae7e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
3418ae82:	2300      	movcs	r3, #0
3418ae84:	fa23 f30c 	lsr.w	r3, r3, ip
3418ae88:	4303      	orrs	r3, r0
3418ae8a:	461c      	mov	r4, r3
3418ae8c:	ec45 4b10 	vmov	d0, r4, r5
3418ae90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3418ae94:	45b8      	cmp	r8, r7
3418ae96:	bf3a      	itte	cc
3418ae98:	f1a6 0708 	subcc.w	r7, r6, #8
3418ae9c:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
3418aea0:	2300      	movcs	r3, #0
3418aea2:	380b      	subs	r0, #11
3418aea4:	d014      	beq.n	3418aed0 <__b2d+0x90>
3418aea6:	f1c0 0120 	rsb	r1, r0, #32
3418aeaa:	4082      	lsls	r2, r0
3418aeac:	4547      	cmp	r7, r8
3418aeae:	fa23 f401 	lsr.w	r4, r3, r1
3418aeb2:	fa03 f300 	lsl.w	r3, r3, r0
3418aeb6:	ea42 0204 	orr.w	r2, r2, r4
3418aeba:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
3418aebe:	bf8c      	ite	hi
3418aec0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
3418aec4:	2200      	movls	r2, #0
3418aec6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
3418aeca:	40ca      	lsrs	r2, r1
3418aecc:	4313      	orrs	r3, r2
3418aece:	e7dc      	b.n	3418ae8a <__b2d+0x4a>
3418aed0:	ea42 0501 	orr.w	r5, r2, r1
3418aed4:	e7d9      	b.n	3418ae8a <__b2d+0x4a>
3418aed6:	bf00      	nop
3418aed8:	3ff00000 	.word	0x3ff00000

3418aedc <__d2b>:
3418aedc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
3418aee0:	460f      	mov	r7, r1
3418aee2:	2101      	movs	r1, #1
3418aee4:	4616      	mov	r6, r2
3418aee6:	ec59 8b10 	vmov	r8, r9, d0
3418aeea:	f7ff fc0f 	bl	3418a70c <_Balloc>
3418aeee:	4604      	mov	r4, r0
3418aef0:	b930      	cbnz	r0, 3418af00 <__d2b+0x24>
3418aef2:	4602      	mov	r2, r0
3418aef4:	4b23      	ldr	r3, [pc, #140]	@ (3418af84 <__d2b+0xa8>)
3418aef6:	f240 310f 	movw	r1, #783	@ 0x30f
3418aefa:	4823      	ldr	r0, [pc, #140]	@ (3418af88 <__d2b+0xac>)
3418aefc:	f001 f93c 	bl	3418c178 <__assert_func>
3418af00:	f3c9 550a 	ubfx	r5, r9, #20, #11
3418af04:	f3c9 0313 	ubfx	r3, r9, #0, #20
3418af08:	b10d      	cbz	r5, 3418af0e <__d2b+0x32>
3418af0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
3418af0e:	9301      	str	r3, [sp, #4]
3418af10:	f1b8 0300 	subs.w	r3, r8, #0
3418af14:	d023      	beq.n	3418af5e <__d2b+0x82>
3418af16:	4668      	mov	r0, sp
3418af18:	9300      	str	r3, [sp, #0]
3418af1a:	f7ff fd0a 	bl	3418a932 <__lo0bits>
3418af1e:	e9dd 1200 	ldrd	r1, r2, [sp]
3418af22:	b1d0      	cbz	r0, 3418af5a <__d2b+0x7e>
3418af24:	f1c0 0320 	rsb	r3, r0, #32
3418af28:	fa02 f303 	lsl.w	r3, r2, r3
3418af2c:	40c2      	lsrs	r2, r0
3418af2e:	430b      	orrs	r3, r1
3418af30:	9201      	str	r2, [sp, #4]
3418af32:	6163      	str	r3, [r4, #20]
3418af34:	9b01      	ldr	r3, [sp, #4]
3418af36:	2b00      	cmp	r3, #0
3418af38:	61a3      	str	r3, [r4, #24]
3418af3a:	bf0c      	ite	eq
3418af3c:	2201      	moveq	r2, #1
3418af3e:	2202      	movne	r2, #2
3418af40:	6122      	str	r2, [r4, #16]
3418af42:	b1a5      	cbz	r5, 3418af6e <__d2b+0x92>
3418af44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
3418af48:	4405      	add	r5, r0
3418af4a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
3418af4e:	603d      	str	r5, [r7, #0]
3418af50:	6030      	str	r0, [r6, #0]
3418af52:	4620      	mov	r0, r4
3418af54:	b003      	add	sp, #12
3418af56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3418af5a:	6161      	str	r1, [r4, #20]
3418af5c:	e7ea      	b.n	3418af34 <__d2b+0x58>
3418af5e:	a801      	add	r0, sp, #4
3418af60:	f7ff fce7 	bl	3418a932 <__lo0bits>
3418af64:	9b01      	ldr	r3, [sp, #4]
3418af66:	3020      	adds	r0, #32
3418af68:	2201      	movs	r2, #1
3418af6a:	6163      	str	r3, [r4, #20]
3418af6c:	e7e8      	b.n	3418af40 <__d2b+0x64>
3418af6e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
3418af72:	eb04 0382 	add.w	r3, r4, r2, lsl #2
3418af76:	6038      	str	r0, [r7, #0]
3418af78:	6918      	ldr	r0, [r3, #16]
3418af7a:	f7ff fcbb 	bl	3418a8f4 <__hi0bits>
3418af7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
3418af82:	e7e5      	b.n	3418af50 <__d2b+0x74>
3418af84:	3418d0a8 	.word	0x3418d0a8
3418af88:	3418d0b9 	.word	0x3418d0b9

3418af8c <__ratio>:
3418af8c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
3418af90:	4688      	mov	r8, r1
3418af92:	4681      	mov	r9, r0
3418af94:	4669      	mov	r1, sp
3418af96:	f7ff ff53 	bl	3418ae40 <__b2d>
3418af9a:	a901      	add	r1, sp, #4
3418af9c:	4640      	mov	r0, r8
3418af9e:	ec55 4b10 	vmov	r4, r5, d0
3418afa2:	f7ff ff4d 	bl	3418ae40 <__b2d>
3418afa6:	f8d8 3010 	ldr.w	r3, [r8, #16]
3418afaa:	f8d9 2010 	ldr.w	r2, [r9, #16]
3418afae:	46ab      	mov	fp, r5
3418afb0:	46a2      	mov	sl, r4
3418afb2:	1ad2      	subs	r2, r2, r3
3418afb4:	e9dd 3100 	ldrd	r3, r1, [sp]
3418afb8:	ec57 6b10 	vmov	r6, r7, d0
3418afbc:	1a5b      	subs	r3, r3, r1
3418afbe:	eb03 1342 	add.w	r3, r3, r2, lsl #5
3418afc2:	2b00      	cmp	r3, #0
3418afc4:	bfdb      	ittet	le
3418afc6:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
3418afca:	463a      	movle	r2, r7
3418afcc:	462a      	movgt	r2, r5
3418afce:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
3418afd2:	bfcc      	ite	gt
3418afd4:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
3418afd8:	ee00 3a90 	vmovle	s1, r3
3418afdc:	ec4b ab17 	vmov	d7, sl, fp
3418afe0:	ee87 0b00 	vdiv.f64	d0, d7, d0
3418afe4:	b003      	add	sp, #12
3418afe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

3418afea <__copybits>:
3418afea:	3901      	subs	r1, #1
3418afec:	f102 0314 	add.w	r3, r2, #20
3418aff0:	1149      	asrs	r1, r1, #5
3418aff2:	b570      	push	{r4, r5, r6, lr}
3418aff4:	3101      	adds	r1, #1
3418aff6:	6914      	ldr	r4, [r2, #16]
3418aff8:	1f05      	subs	r5, r0, #4
3418affa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
3418affe:	eb03 0484 	add.w	r4, r3, r4, lsl #2
3418b002:	42a3      	cmp	r3, r4
3418b004:	d30c      	bcc.n	3418b020 <__copybits+0x36>
3418b006:	1aa3      	subs	r3, r4, r2
3418b008:	3211      	adds	r2, #17
3418b00a:	3b11      	subs	r3, #17
3418b00c:	f023 0303 	bic.w	r3, r3, #3
3418b010:	42a2      	cmp	r2, r4
3418b012:	bf88      	it	hi
3418b014:	2300      	movhi	r3, #0
3418b016:	4418      	add	r0, r3
3418b018:	2300      	movs	r3, #0
3418b01a:	4288      	cmp	r0, r1
3418b01c:	d305      	bcc.n	3418b02a <__copybits+0x40>
3418b01e:	bd70      	pop	{r4, r5, r6, pc}
3418b020:	f853 6b04 	ldr.w	r6, [r3], #4
3418b024:	f845 6f04 	str.w	r6, [r5, #4]!
3418b028:	e7eb      	b.n	3418b002 <__copybits+0x18>
3418b02a:	f840 3b04 	str.w	r3, [r0], #4
3418b02e:	e7f4      	b.n	3418b01a <__copybits+0x30>

3418b030 <__any_on>:
3418b030:	f100 0214 	add.w	r2, r0, #20
3418b034:	114b      	asrs	r3, r1, #5
3418b036:	6900      	ldr	r0, [r0, #16]
3418b038:	4298      	cmp	r0, r3
3418b03a:	b510      	push	{r4, lr}
3418b03c:	db11      	blt.n	3418b062 <__any_on+0x32>
3418b03e:	dd0a      	ble.n	3418b056 <__any_on+0x26>
3418b040:	f011 011f 	ands.w	r1, r1, #31
3418b044:	d007      	beq.n	3418b056 <__any_on+0x26>
3418b046:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
3418b04a:	fa24 f001 	lsr.w	r0, r4, r1
3418b04e:	fa00 f101 	lsl.w	r1, r0, r1
3418b052:	428c      	cmp	r4, r1
3418b054:	d10b      	bne.n	3418b06e <__any_on+0x3e>
3418b056:	eb02 0383 	add.w	r3, r2, r3, lsl #2
3418b05a:	4293      	cmp	r3, r2
3418b05c:	d803      	bhi.n	3418b066 <__any_on+0x36>
3418b05e:	2000      	movs	r0, #0
3418b060:	bd10      	pop	{r4, pc}
3418b062:	4603      	mov	r3, r0
3418b064:	e7f7      	b.n	3418b056 <__any_on+0x26>
3418b066:	f853 1d04 	ldr.w	r1, [r3, #-4]!
3418b06a:	2900      	cmp	r1, #0
3418b06c:	d0f5      	beq.n	3418b05a <__any_on+0x2a>
3418b06e:	2001      	movs	r0, #1
3418b070:	e7f6      	b.n	3418b060 <__any_on+0x30>

3418b072 <sulp>:
3418b072:	b570      	push	{r4, r5, r6, lr}
3418b074:	4604      	mov	r4, r0
3418b076:	460d      	mov	r5, r1
3418b078:	4616      	mov	r6, r2
3418b07a:	ec45 4b10 	vmov	d0, r4, r5
3418b07e:	f7ff feb9 	bl	3418adf4 <__ulp>
3418b082:	b17e      	cbz	r6, 3418b0a4 <sulp+0x32>
3418b084:	f3c5 530a 	ubfx	r3, r5, #20, #11
3418b088:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
3418b08c:	2b00      	cmp	r3, #0
3418b08e:	dd09      	ble.n	3418b0a4 <sulp+0x32>
3418b090:	051b      	lsls	r3, r3, #20
3418b092:	2000      	movs	r0, #0
3418b094:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
3418b098:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
3418b09c:	ec41 0b17 	vmov	d7, r0, r1
3418b0a0:	ee20 0b07 	vmul.f64	d0, d0, d7
3418b0a4:	bd70      	pop	{r4, r5, r6, pc}
	...

3418b0a8 <_strtod_l>:
3418b0a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3418b0ac:	ed2d 8b0a 	vpush	{d8-d12}
3418b0b0:	b097      	sub	sp, #92	@ 0x5c
3418b0b2:	4688      	mov	r8, r1
3418b0b4:	f04f 0a00 	mov.w	sl, #0
3418b0b8:	f04f 0b00 	mov.w	fp, #0
3418b0bc:	920e      	str	r2, [sp, #56]	@ 0x38
3418b0be:	2200      	movs	r2, #0
3418b0c0:	9005      	str	r0, [sp, #20]
3418b0c2:	9212      	str	r2, [sp, #72]	@ 0x48
3418b0c4:	460a      	mov	r2, r1
3418b0c6:	9211      	str	r2, [sp, #68]	@ 0x44
3418b0c8:	7811      	ldrb	r1, [r2, #0]
3418b0ca:	292b      	cmp	r1, #43	@ 0x2b
3418b0cc:	d04c      	beq.n	3418b168 <_strtod_l+0xc0>
3418b0ce:	d839      	bhi.n	3418b144 <_strtod_l+0x9c>
3418b0d0:	290d      	cmp	r1, #13
3418b0d2:	d833      	bhi.n	3418b13c <_strtod_l+0x94>
3418b0d4:	2908      	cmp	r1, #8
3418b0d6:	d833      	bhi.n	3418b140 <_strtod_l+0x98>
3418b0d8:	2900      	cmp	r1, #0
3418b0da:	d03c      	beq.n	3418b156 <_strtod_l+0xae>
3418b0dc:	2200      	movs	r2, #0
3418b0de:	9208      	str	r2, [sp, #32]
3418b0e0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
3418b0e2:	782a      	ldrb	r2, [r5, #0]
3418b0e4:	2a30      	cmp	r2, #48	@ 0x30
3418b0e6:	f040 80b7 	bne.w	3418b258 <_strtod_l+0x1b0>
3418b0ea:	786a      	ldrb	r2, [r5, #1]
3418b0ec:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
3418b0f0:	2a58      	cmp	r2, #88	@ 0x58
3418b0f2:	d170      	bne.n	3418b1d6 <_strtod_l+0x12e>
3418b0f4:	9302      	str	r3, [sp, #8]
3418b0f6:	a911      	add	r1, sp, #68	@ 0x44
3418b0f8:	9b08      	ldr	r3, [sp, #32]
3418b0fa:	4a91      	ldr	r2, [pc, #580]	@ (3418b340 <_strtod_l+0x298>)
3418b0fc:	9301      	str	r3, [sp, #4]
3418b0fe:	ab12      	add	r3, sp, #72	@ 0x48
3418b100:	9805      	ldr	r0, [sp, #20]
3418b102:	9300      	str	r3, [sp, #0]
3418b104:	ab13      	add	r3, sp, #76	@ 0x4c
3418b106:	f001 f8cf 	bl	3418c2a8 <__gethex>
3418b10a:	f010 060f 	ands.w	r6, r0, #15
3418b10e:	4604      	mov	r4, r0
3418b110:	d005      	beq.n	3418b11e <_strtod_l+0x76>
3418b112:	2e06      	cmp	r6, #6
3418b114:	d12a      	bne.n	3418b16c <_strtod_l+0xc4>
3418b116:	3501      	adds	r5, #1
3418b118:	2300      	movs	r3, #0
3418b11a:	9511      	str	r5, [sp, #68]	@ 0x44
3418b11c:	9308      	str	r3, [sp, #32]
3418b11e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
3418b120:	2b00      	cmp	r3, #0
3418b122:	f040 853b 	bne.w	3418bb9c <_strtod_l+0xaf4>
3418b126:	9b08      	ldr	r3, [sp, #32]
3418b128:	ec4b ab10 	vmov	d0, sl, fp
3418b12c:	b1cb      	cbz	r3, 3418b162 <_strtod_l+0xba>
3418b12e:	eeb1 0b40 	vneg.f64	d0, d0
3418b132:	b017      	add	sp, #92	@ 0x5c
3418b134:	ecbd 8b0a 	vpop	{d8-d12}
3418b138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3418b13c:	2920      	cmp	r1, #32
3418b13e:	d1cd      	bne.n	3418b0dc <_strtod_l+0x34>
3418b140:	3201      	adds	r2, #1
3418b142:	e7c0      	b.n	3418b0c6 <_strtod_l+0x1e>
3418b144:	292d      	cmp	r1, #45	@ 0x2d
3418b146:	d1c9      	bne.n	3418b0dc <_strtod_l+0x34>
3418b148:	2101      	movs	r1, #1
3418b14a:	9108      	str	r1, [sp, #32]
3418b14c:	1c51      	adds	r1, r2, #1
3418b14e:	9111      	str	r1, [sp, #68]	@ 0x44
3418b150:	7852      	ldrb	r2, [r2, #1]
3418b152:	2a00      	cmp	r2, #0
3418b154:	d1c4      	bne.n	3418b0e0 <_strtod_l+0x38>
3418b156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
3418b158:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
3418b15c:	2b00      	cmp	r3, #0
3418b15e:	f040 851b 	bne.w	3418bb98 <_strtod_l+0xaf0>
3418b162:	ec4b ab10 	vmov	d0, sl, fp
3418b166:	e7e4      	b.n	3418b132 <_strtod_l+0x8a>
3418b168:	2100      	movs	r1, #0
3418b16a:	e7ee      	b.n	3418b14a <_strtod_l+0xa2>
3418b16c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
3418b16e:	b13a      	cbz	r2, 3418b180 <_strtod_l+0xd8>
3418b170:	2135      	movs	r1, #53	@ 0x35
3418b172:	a814      	add	r0, sp, #80	@ 0x50
3418b174:	f7ff ff39 	bl	3418afea <__copybits>
3418b178:	9912      	ldr	r1, [sp, #72]	@ 0x48
3418b17a:	9805      	ldr	r0, [sp, #20]
3418b17c:	f7ff fb06 	bl	3418a78c <_Bfree>
3418b180:	1e73      	subs	r3, r6, #1
3418b182:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
3418b184:	2b04      	cmp	r3, #4
3418b186:	d806      	bhi.n	3418b196 <_strtod_l+0xee>
3418b188:	e8df f003 	tbb	[pc, r3]
3418b18c:	201d0314 	.word	0x201d0314
3418b190:	14          	.byte	0x14
3418b191:	00          	.byte	0x00
3418b192:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
3418b196:	05e3      	lsls	r3, r4, #23
3418b198:	bf48      	it	mi
3418b19a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
3418b19e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
3418b1a2:	0d1b      	lsrs	r3, r3, #20
3418b1a4:	051b      	lsls	r3, r3, #20
3418b1a6:	2b00      	cmp	r3, #0
3418b1a8:	d1b9      	bne.n	3418b11e <_strtod_l+0x76>
3418b1aa:	f7fe fb73 	bl	34189894 <__errno>
3418b1ae:	2322      	movs	r3, #34	@ 0x22
3418b1b0:	6003      	str	r3, [r0, #0]
3418b1b2:	e7b4      	b.n	3418b11e <_strtod_l+0x76>
3418b1b4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
3418b1b8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
3418b1bc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
3418b1c0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
3418b1c4:	e7e7      	b.n	3418b196 <_strtod_l+0xee>
3418b1c6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 3418b348 <_strtod_l+0x2a0>
3418b1ca:	e7e4      	b.n	3418b196 <_strtod_l+0xee>
3418b1cc:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
3418b1d0:	f04f 3aff 	mov.w	sl, #4294967295
3418b1d4:	e7df      	b.n	3418b196 <_strtod_l+0xee>
3418b1d6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3418b1d8:	1c5a      	adds	r2, r3, #1
3418b1da:	9211      	str	r2, [sp, #68]	@ 0x44
3418b1dc:	785b      	ldrb	r3, [r3, #1]
3418b1de:	2b30      	cmp	r3, #48	@ 0x30
3418b1e0:	d0f9      	beq.n	3418b1d6 <_strtod_l+0x12e>
3418b1e2:	2b00      	cmp	r3, #0
3418b1e4:	d09b      	beq.n	3418b11e <_strtod_l+0x76>
3418b1e6:	2301      	movs	r3, #1
3418b1e8:	9307      	str	r3, [sp, #28]
3418b1ea:	220a      	movs	r2, #10
3418b1ec:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3418b1ee:	930a      	str	r3, [sp, #40]	@ 0x28
3418b1f0:	2300      	movs	r3, #0
3418b1f2:	4699      	mov	r9, r3
3418b1f4:	461d      	mov	r5, r3
3418b1f6:	9306      	str	r3, [sp, #24]
3418b1f8:	9811      	ldr	r0, [sp, #68]	@ 0x44
3418b1fa:	7804      	ldrb	r4, [r0, #0]
3418b1fc:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
3418b200:	b2d9      	uxtb	r1, r3
3418b202:	2909      	cmp	r1, #9
3418b204:	d92a      	bls.n	3418b25c <_strtod_l+0x1b4>
3418b206:	2201      	movs	r2, #1
3418b208:	494e      	ldr	r1, [pc, #312]	@ (3418b344 <_strtod_l+0x29c>)
3418b20a:	f000 ff8b 	bl	3418c124 <strncmp>
3418b20e:	b3a0      	cbz	r0, 3418b27a <_strtod_l+0x1d2>
3418b210:	2000      	movs	r0, #0
3418b212:	4622      	mov	r2, r4
3418b214:	462b      	mov	r3, r5
3418b216:	4607      	mov	r7, r0
3418b218:	4601      	mov	r1, r0
3418b21a:	2a65      	cmp	r2, #101	@ 0x65
3418b21c:	d001      	beq.n	3418b222 <_strtod_l+0x17a>
3418b21e:	2a45      	cmp	r2, #69	@ 0x45
3418b220:	d118      	bne.n	3418b254 <_strtod_l+0x1ac>
3418b222:	b91b      	cbnz	r3, 3418b22c <_strtod_l+0x184>
3418b224:	9b07      	ldr	r3, [sp, #28]
3418b226:	4303      	orrs	r3, r0
3418b228:	d095      	beq.n	3418b156 <_strtod_l+0xae>
3418b22a:	2300      	movs	r3, #0
3418b22c:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
3418b230:	f108 0201 	add.w	r2, r8, #1
3418b234:	9211      	str	r2, [sp, #68]	@ 0x44
3418b236:	f898 2001 	ldrb.w	r2, [r8, #1]
3418b23a:	2a2b      	cmp	r2, #43	@ 0x2b
3418b23c:	d074      	beq.n	3418b328 <_strtod_l+0x280>
3418b23e:	2a2d      	cmp	r2, #45	@ 0x2d
3418b240:	d07a      	beq.n	3418b338 <_strtod_l+0x290>
3418b242:	f04f 0e00 	mov.w	lr, #0
3418b246:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
3418b24a:	2c09      	cmp	r4, #9
3418b24c:	f240 8082 	bls.w	3418b354 <_strtod_l+0x2ac>
3418b250:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
3418b254:	2400      	movs	r4, #0
3418b256:	e09d      	b.n	3418b394 <_strtod_l+0x2ec>
3418b258:	2300      	movs	r3, #0
3418b25a:	e7c5      	b.n	3418b1e8 <_strtod_l+0x140>
3418b25c:	2d08      	cmp	r5, #8
3418b25e:	f100 0001 	add.w	r0, r0, #1
3418b262:	f105 0501 	add.w	r5, r5, #1
3418b266:	bfcc      	ite	gt
3418b268:	9906      	ldrgt	r1, [sp, #24]
3418b26a:	fb02 3909 	mlale	r9, r2, r9, r3
3418b26e:	9011      	str	r0, [sp, #68]	@ 0x44
3418b270:	bfc4      	itt	gt
3418b272:	fb02 3301 	mlagt	r3, r2, r1, r3
3418b276:	9306      	strgt	r3, [sp, #24]
3418b278:	e7be      	b.n	3418b1f8 <_strtod_l+0x150>
3418b27a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3418b27c:	1c5a      	adds	r2, r3, #1
3418b27e:	9211      	str	r2, [sp, #68]	@ 0x44
3418b280:	785a      	ldrb	r2, [r3, #1]
3418b282:	b3b5      	cbz	r5, 3418b2f2 <_strtod_l+0x24a>
3418b284:	4607      	mov	r7, r0
3418b286:	462b      	mov	r3, r5
3418b288:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
3418b28c:	2909      	cmp	r1, #9
3418b28e:	d912      	bls.n	3418b2b6 <_strtod_l+0x20e>
3418b290:	2101      	movs	r1, #1
3418b292:	e7c2      	b.n	3418b21a <_strtod_l+0x172>
3418b294:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3418b296:	3001      	adds	r0, #1
3418b298:	1c5a      	adds	r2, r3, #1
3418b29a:	9211      	str	r2, [sp, #68]	@ 0x44
3418b29c:	785a      	ldrb	r2, [r3, #1]
3418b29e:	2a30      	cmp	r2, #48	@ 0x30
3418b2a0:	d0f8      	beq.n	3418b294 <_strtod_l+0x1ec>
3418b2a2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
3418b2a6:	2b08      	cmp	r3, #8
3418b2a8:	f200 847d 	bhi.w	3418bba6 <_strtod_l+0xafe>
3418b2ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3418b2ae:	4607      	mov	r7, r0
3418b2b0:	2000      	movs	r0, #0
3418b2b2:	930a      	str	r3, [sp, #40]	@ 0x28
3418b2b4:	4603      	mov	r3, r0
3418b2b6:	3a30      	subs	r2, #48	@ 0x30
3418b2b8:	f100 0101 	add.w	r1, r0, #1
3418b2bc:	d013      	beq.n	3418b2e6 <_strtod_l+0x23e>
3418b2be:	440f      	add	r7, r1
3418b2c0:	469c      	mov	ip, r3
3418b2c2:	f04f 0e0a 	mov.w	lr, #10
3418b2c6:	f10c 0401 	add.w	r4, ip, #1
3418b2ca:	1ae6      	subs	r6, r4, r3
3418b2cc:	42b1      	cmp	r1, r6
3418b2ce:	dc12      	bgt.n	3418b2f6 <_strtod_l+0x24e>
3418b2d0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
3418b2d4:	1819      	adds	r1, r3, r0
3418b2d6:	3301      	adds	r3, #1
3418b2d8:	2908      	cmp	r1, #8
3418b2da:	4403      	add	r3, r0
3418b2dc:	dc19      	bgt.n	3418b312 <_strtod_l+0x26a>
3418b2de:	210a      	movs	r1, #10
3418b2e0:	fb01 2909 	mla	r9, r1, r9, r2
3418b2e4:	2100      	movs	r1, #0
3418b2e6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
3418b2e8:	1c50      	adds	r0, r2, #1
3418b2ea:	9011      	str	r0, [sp, #68]	@ 0x44
3418b2ec:	4608      	mov	r0, r1
3418b2ee:	7852      	ldrb	r2, [r2, #1]
3418b2f0:	e7ca      	b.n	3418b288 <_strtod_l+0x1e0>
3418b2f2:	4628      	mov	r0, r5
3418b2f4:	e7d3      	b.n	3418b29e <_strtod_l+0x1f6>
3418b2f6:	f1bc 0f08 	cmp.w	ip, #8
3418b2fa:	dc03      	bgt.n	3418b304 <_strtod_l+0x25c>
3418b2fc:	fb0e f909 	mul.w	r9, lr, r9
3418b300:	46a4      	mov	ip, r4
3418b302:	e7e0      	b.n	3418b2c6 <_strtod_l+0x21e>
3418b304:	2c10      	cmp	r4, #16
3418b306:	bfde      	ittt	le
3418b308:	9e06      	ldrle	r6, [sp, #24]
3418b30a:	fb0e f606 	mulle.w	r6, lr, r6
3418b30e:	9606      	strle	r6, [sp, #24]
3418b310:	e7f6      	b.n	3418b300 <_strtod_l+0x258>
3418b312:	290f      	cmp	r1, #15
3418b314:	bfdf      	itttt	le
3418b316:	9806      	ldrle	r0, [sp, #24]
3418b318:	210a      	movle	r1, #10
3418b31a:	fb01 2200 	mlale	r2, r1, r0, r2
3418b31e:	9206      	strle	r2, [sp, #24]
3418b320:	e7e0      	b.n	3418b2e4 <_strtod_l+0x23c>
3418b322:	2700      	movs	r7, #0
3418b324:	2101      	movs	r1, #1
3418b326:	e77d      	b.n	3418b224 <_strtod_l+0x17c>
3418b328:	f04f 0e00 	mov.w	lr, #0
3418b32c:	f108 0202 	add.w	r2, r8, #2
3418b330:	9211      	str	r2, [sp, #68]	@ 0x44
3418b332:	f898 2002 	ldrb.w	r2, [r8, #2]
3418b336:	e786      	b.n	3418b246 <_strtod_l+0x19e>
3418b338:	f04f 0e01 	mov.w	lr, #1
3418b33c:	e7f6      	b.n	3418b32c <_strtod_l+0x284>
3418b33e:	bf00      	nop
3418b340:	3418d304 	.word	0x3418d304
3418b344:	3418d112 	.word	0x3418d112
3418b348:	7ff00000 	.word	0x7ff00000
3418b34c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
3418b34e:	1c54      	adds	r4, r2, #1
3418b350:	9411      	str	r4, [sp, #68]	@ 0x44
3418b352:	7852      	ldrb	r2, [r2, #1]
3418b354:	2a30      	cmp	r2, #48	@ 0x30
3418b356:	d0f9      	beq.n	3418b34c <_strtod_l+0x2a4>
3418b358:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
3418b35c:	2c08      	cmp	r4, #8
3418b35e:	f63f af79 	bhi.w	3418b254 <_strtod_l+0x1ac>
3418b362:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
3418b366:	9a11      	ldr	r2, [sp, #68]	@ 0x44
3418b368:	9209      	str	r2, [sp, #36]	@ 0x24
3418b36a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
3418b36c:	1c54      	adds	r4, r2, #1
3418b36e:	9411      	str	r4, [sp, #68]	@ 0x44
3418b370:	7852      	ldrb	r2, [r2, #1]
3418b372:	f1a2 0630 	sub.w	r6, r2, #48	@ 0x30
3418b376:	2e09      	cmp	r6, #9
3418b378:	d937      	bls.n	3418b3ea <_strtod_l+0x342>
3418b37a:	9e09      	ldr	r6, [sp, #36]	@ 0x24
3418b37c:	1ba4      	subs	r4, r4, r6
3418b37e:	2c08      	cmp	r4, #8
3418b380:	f644 641f 	movw	r4, #19999	@ 0x4e1f
3418b384:	dc02      	bgt.n	3418b38c <_strtod_l+0x2e4>
3418b386:	4564      	cmp	r4, ip
3418b388:	bfa8      	it	ge
3418b38a:	4664      	movge	r4, ip
3418b38c:	f1be 0f00 	cmp.w	lr, #0
3418b390:	d000      	beq.n	3418b394 <_strtod_l+0x2ec>
3418b392:	4264      	negs	r4, r4
3418b394:	2b00      	cmp	r3, #0
3418b396:	d14d      	bne.n	3418b434 <_strtod_l+0x38c>
3418b398:	9b07      	ldr	r3, [sp, #28]
3418b39a:	4318      	orrs	r0, r3
3418b39c:	f47f aebf 	bne.w	3418b11e <_strtod_l+0x76>
3418b3a0:	2900      	cmp	r1, #0
3418b3a2:	f47f aed8 	bne.w	3418b156 <_strtod_l+0xae>
3418b3a6:	2a69      	cmp	r2, #105	@ 0x69
3418b3a8:	d027      	beq.n	3418b3fa <_strtod_l+0x352>
3418b3aa:	dc24      	bgt.n	3418b3f6 <_strtod_l+0x34e>
3418b3ac:	2a49      	cmp	r2, #73	@ 0x49
3418b3ae:	d024      	beq.n	3418b3fa <_strtod_l+0x352>
3418b3b0:	2a4e      	cmp	r2, #78	@ 0x4e
3418b3b2:	f47f aed0 	bne.w	3418b156 <_strtod_l+0xae>
3418b3b6:	4997      	ldr	r1, [pc, #604]	@ (3418b614 <_strtod_l+0x56c>)
3418b3b8:	a811      	add	r0, sp, #68	@ 0x44
3418b3ba:	f001 f995 	bl	3418c6e8 <__match>
3418b3be:	2800      	cmp	r0, #0
3418b3c0:	f43f aec9 	beq.w	3418b156 <_strtod_l+0xae>
3418b3c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3418b3c6:	781b      	ldrb	r3, [r3, #0]
3418b3c8:	2b28      	cmp	r3, #40	@ 0x28
3418b3ca:	d12d      	bne.n	3418b428 <_strtod_l+0x380>
3418b3cc:	aa14      	add	r2, sp, #80	@ 0x50
3418b3ce:	4992      	ldr	r1, [pc, #584]	@ (3418b618 <_strtod_l+0x570>)
3418b3d0:	a811      	add	r0, sp, #68	@ 0x44
3418b3d2:	f001 f99d 	bl	3418c710 <__hexnan>
3418b3d6:	2805      	cmp	r0, #5
3418b3d8:	d126      	bne.n	3418b428 <_strtod_l+0x380>
3418b3da:	9b15      	ldr	r3, [sp, #84]	@ 0x54
3418b3dc:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
3418b3e0:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
3418b3e4:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
3418b3e8:	e699      	b.n	3418b11e <_strtod_l+0x76>
3418b3ea:	240a      	movs	r4, #10
3418b3ec:	fb04 2c0c 	mla	ip, r4, ip, r2
3418b3f0:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
3418b3f4:	e7b9      	b.n	3418b36a <_strtod_l+0x2c2>
3418b3f6:	2a6e      	cmp	r2, #110	@ 0x6e
3418b3f8:	e7db      	b.n	3418b3b2 <_strtod_l+0x30a>
3418b3fa:	4988      	ldr	r1, [pc, #544]	@ (3418b61c <_strtod_l+0x574>)
3418b3fc:	a811      	add	r0, sp, #68	@ 0x44
3418b3fe:	f001 f973 	bl	3418c6e8 <__match>
3418b402:	2800      	cmp	r0, #0
3418b404:	f43f aea7 	beq.w	3418b156 <_strtod_l+0xae>
3418b408:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3418b40a:	a811      	add	r0, sp, #68	@ 0x44
3418b40c:	4984      	ldr	r1, [pc, #528]	@ (3418b620 <_strtod_l+0x578>)
3418b40e:	3b01      	subs	r3, #1
3418b410:	9311      	str	r3, [sp, #68]	@ 0x44
3418b412:	f001 f969 	bl	3418c6e8 <__match>
3418b416:	b910      	cbnz	r0, 3418b41e <_strtod_l+0x376>
3418b418:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3418b41a:	3301      	adds	r3, #1
3418b41c:	9311      	str	r3, [sp, #68]	@ 0x44
3418b41e:	f8df b214 	ldr.w	fp, [pc, #532]	@ 3418b634 <_strtod_l+0x58c>
3418b422:	f04f 0a00 	mov.w	sl, #0
3418b426:	e67a      	b.n	3418b11e <_strtod_l+0x76>
3418b428:	487e      	ldr	r0, [pc, #504]	@ (3418b624 <_strtod_l+0x57c>)
3418b42a:	f000 fe9d 	bl	3418c168 <nan>
3418b42e:	ec5b ab10 	vmov	sl, fp, d0
3418b432:	e674      	b.n	3418b11e <_strtod_l+0x76>
3418b434:	ee07 9a90 	vmov	s15, r9
3418b438:	1be2      	subs	r2, r4, r7
3418b43a:	2d00      	cmp	r5, #0
3418b43c:	bf08      	it	eq
3418b43e:	461d      	moveq	r5, r3
3418b440:	2b10      	cmp	r3, #16
3418b442:	eeb8 7b67 	vcvt.f64.u32	d7, s15
3418b446:	9209      	str	r2, [sp, #36]	@ 0x24
3418b448:	461a      	mov	r2, r3
3418b44a:	bfa8      	it	ge
3418b44c:	2210      	movge	r2, #16
3418b44e:	2b09      	cmp	r3, #9
3418b450:	ec5b ab17 	vmov	sl, fp, d7
3418b454:	dc15      	bgt.n	3418b482 <_strtod_l+0x3da>
3418b456:	1be1      	subs	r1, r4, r7
3418b458:	2900      	cmp	r1, #0
3418b45a:	f43f ae60 	beq.w	3418b11e <_strtod_l+0x76>
3418b45e:	eba4 0107 	sub.w	r1, r4, r7
3418b462:	dd72      	ble.n	3418b54a <_strtod_l+0x4a2>
3418b464:	2916      	cmp	r1, #22
3418b466:	dc59      	bgt.n	3418b51c <_strtod_l+0x474>
3418b468:	4b6f      	ldr	r3, [pc, #444]	@ (3418b628 <_strtod_l+0x580>)
3418b46a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3418b46c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
3418b470:	ed93 7b00 	vldr	d7, [r3]
3418b474:	ec4b ab16 	vmov	d6, sl, fp
3418b478:	ee27 7b06 	vmul.f64	d7, d7, d6
3418b47c:	ec5b ab17 	vmov	sl, fp, d7
3418b480:	e64d      	b.n	3418b11e <_strtod_l+0x76>
3418b482:	4969      	ldr	r1, [pc, #420]	@ (3418b628 <_strtod_l+0x580>)
3418b484:	2b0f      	cmp	r3, #15
3418b486:	eddd 6a06 	vldr	s13, [sp, #24]
3418b48a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
3418b48e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
3418b492:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
3418b496:	eea7 6b05 	vfma.f64	d6, d7, d5
3418b49a:	ec5b ab16 	vmov	sl, fp, d6
3418b49e:	ddda      	ble.n	3418b456 <_strtod_l+0x3ae>
3418b4a0:	1a9a      	subs	r2, r3, r2
3418b4a2:	1be1      	subs	r1, r4, r7
3418b4a4:	440a      	add	r2, r1
3418b4a6:	2a00      	cmp	r2, #0
3418b4a8:	f340 8094 	ble.w	3418b5d4 <_strtod_l+0x52c>
3418b4ac:	f012 000f 	ands.w	r0, r2, #15
3418b4b0:	d00a      	beq.n	3418b4c8 <_strtod_l+0x420>
3418b4b2:	495d      	ldr	r1, [pc, #372]	@ (3418b628 <_strtod_l+0x580>)
3418b4b4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
3418b4b8:	ed91 7b00 	vldr	d7, [r1]
3418b4bc:	ec4b ab16 	vmov	d6, sl, fp
3418b4c0:	ee27 7b06 	vmul.f64	d7, d7, d6
3418b4c4:	ec5b ab17 	vmov	sl, fp, d7
3418b4c8:	f032 020f 	bics.w	r2, r2, #15
3418b4cc:	d073      	beq.n	3418b5b6 <_strtod_l+0x50e>
3418b4ce:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
3418b4d2:	dd47      	ble.n	3418b564 <_strtod_l+0x4bc>
3418b4d4:	2400      	movs	r4, #0
3418b4d6:	4625      	mov	r5, r4
3418b4d8:	4626      	mov	r6, r4
3418b4da:	9407      	str	r4, [sp, #28]
3418b4dc:	2322      	movs	r3, #34	@ 0x22
3418b4de:	9a05      	ldr	r2, [sp, #20]
3418b4e0:	f8df b150 	ldr.w	fp, [pc, #336]	@ 3418b634 <_strtod_l+0x58c>
3418b4e4:	f04f 0a00 	mov.w	sl, #0
3418b4e8:	6013      	str	r3, [r2, #0]
3418b4ea:	9b07      	ldr	r3, [sp, #28]
3418b4ec:	2b00      	cmp	r3, #0
3418b4ee:	f43f ae16 	beq.w	3418b11e <_strtod_l+0x76>
3418b4f2:	9912      	ldr	r1, [sp, #72]	@ 0x48
3418b4f4:	9805      	ldr	r0, [sp, #20]
3418b4f6:	f7ff f949 	bl	3418a78c <_Bfree>
3418b4fa:	4631      	mov	r1, r6
3418b4fc:	9805      	ldr	r0, [sp, #20]
3418b4fe:	f7ff f945 	bl	3418a78c <_Bfree>
3418b502:	4629      	mov	r1, r5
3418b504:	9805      	ldr	r0, [sp, #20]
3418b506:	f7ff f941 	bl	3418a78c <_Bfree>
3418b50a:	9907      	ldr	r1, [sp, #28]
3418b50c:	9805      	ldr	r0, [sp, #20]
3418b50e:	f7ff f93d 	bl	3418a78c <_Bfree>
3418b512:	4621      	mov	r1, r4
3418b514:	9805      	ldr	r0, [sp, #20]
3418b516:	f7ff f939 	bl	3418a78c <_Bfree>
3418b51a:	e600      	b.n	3418b11e <_strtod_l+0x76>
3418b51c:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
3418b520:	1be0      	subs	r0, r4, r7
3418b522:	4281      	cmp	r1, r0
3418b524:	dbbc      	blt.n	3418b4a0 <_strtod_l+0x3f8>
3418b526:	f1c3 030f 	rsb	r3, r3, #15
3418b52a:	4a3f      	ldr	r2, [pc, #252]	@ (3418b628 <_strtod_l+0x580>)
3418b52c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
3418b530:	ed91 7b00 	vldr	d7, [r1]
3418b534:	9909      	ldr	r1, [sp, #36]	@ 0x24
3418b536:	1acb      	subs	r3, r1, r3
3418b538:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
3418b53c:	ec4b ab16 	vmov	d6, sl, fp
3418b540:	ee27 7b06 	vmul.f64	d7, d7, d6
3418b544:	ed92 6b00 	vldr	d6, [r2]
3418b548:	e796      	b.n	3418b478 <_strtod_l+0x3d0>
3418b54a:	3116      	adds	r1, #22
3418b54c:	dba8      	blt.n	3418b4a0 <_strtod_l+0x3f8>
3418b54e:	1b3c      	subs	r4, r7, r4
3418b550:	4b35      	ldr	r3, [pc, #212]	@ (3418b628 <_strtod_l+0x580>)
3418b552:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
3418b556:	ed94 7b00 	vldr	d7, [r4]
3418b55a:	ec4b ab16 	vmov	d6, sl, fp
3418b55e:	ee86 7b07 	vdiv.f64	d7, d6, d7
3418b562:	e78b      	b.n	3418b47c <_strtod_l+0x3d4>
3418b564:	2000      	movs	r0, #0
3418b566:	1112      	asrs	r2, r2, #4
3418b568:	4e30      	ldr	r6, [pc, #192]	@ (3418b62c <_strtod_l+0x584>)
3418b56a:	4601      	mov	r1, r0
3418b56c:	ec4b ab17 	vmov	d7, sl, fp
3418b570:	2a01      	cmp	r2, #1
3418b572:	dc23      	bgt.n	3418b5bc <_strtod_l+0x514>
3418b574:	b108      	cbz	r0, 3418b57a <_strtod_l+0x4d2>
3418b576:	ec5b ab17 	vmov	sl, fp, d7
3418b57a:	4a2c      	ldr	r2, [pc, #176]	@ (3418b62c <_strtod_l+0x584>)
3418b57c:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
3418b580:	482b      	ldr	r0, [pc, #172]	@ (3418b630 <_strtod_l+0x588>)
3418b582:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
3418b586:	ed92 7b00 	vldr	d7, [r2]
3418b58a:	ec4b ab16 	vmov	d6, sl, fp
3418b58e:	4a29      	ldr	r2, [pc, #164]	@ (3418b634 <_strtod_l+0x58c>)
3418b590:	ee27 7b06 	vmul.f64	d7, d7, d6
3418b594:	ee17 1a90 	vmov	r1, s15
3418b598:	400a      	ands	r2, r1
3418b59a:	4282      	cmp	r2, r0
3418b59c:	ec5b ab17 	vmov	sl, fp, d7
3418b5a0:	d898      	bhi.n	3418b4d4 <_strtod_l+0x42c>
3418b5a2:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
3418b5a6:	4282      	cmp	r2, r0
3418b5a8:	bf86      	itte	hi
3418b5aa:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 3418b638 <_strtod_l+0x590>
3418b5ae:	f04f 3aff 	movhi.w	sl, #4294967295
3418b5b2:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
3418b5b6:	2200      	movs	r2, #0
3418b5b8:	9206      	str	r2, [sp, #24]
3418b5ba:	e077      	b.n	3418b6ac <_strtod_l+0x604>
3418b5bc:	f012 0f01 	tst.w	r2, #1
3418b5c0:	d004      	beq.n	3418b5cc <_strtod_l+0x524>
3418b5c2:	2001      	movs	r0, #1
3418b5c4:	ed96 6b00 	vldr	d6, [r6]
3418b5c8:	ee27 7b06 	vmul.f64	d7, d7, d6
3418b5cc:	3101      	adds	r1, #1
3418b5ce:	1052      	asrs	r2, r2, #1
3418b5d0:	3608      	adds	r6, #8
3418b5d2:	e7cd      	b.n	3418b570 <_strtod_l+0x4c8>
3418b5d4:	d0ef      	beq.n	3418b5b6 <_strtod_l+0x50e>
3418b5d6:	4252      	negs	r2, r2
3418b5d8:	f012 000f 	ands.w	r0, r2, #15
3418b5dc:	d00a      	beq.n	3418b5f4 <_strtod_l+0x54c>
3418b5de:	4912      	ldr	r1, [pc, #72]	@ (3418b628 <_strtod_l+0x580>)
3418b5e0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
3418b5e4:	ed91 7b00 	vldr	d7, [r1]
3418b5e8:	ec4b ab16 	vmov	d6, sl, fp
3418b5ec:	ee86 7b07 	vdiv.f64	d7, d6, d7
3418b5f0:	ec5b ab17 	vmov	sl, fp, d7
3418b5f4:	1112      	asrs	r2, r2, #4
3418b5f6:	d0de      	beq.n	3418b5b6 <_strtod_l+0x50e>
3418b5f8:	2a1f      	cmp	r2, #31
3418b5fa:	dd1f      	ble.n	3418b63c <_strtod_l+0x594>
3418b5fc:	2400      	movs	r4, #0
3418b5fe:	4625      	mov	r5, r4
3418b600:	4626      	mov	r6, r4
3418b602:	9407      	str	r4, [sp, #28]
3418b604:	2322      	movs	r3, #34	@ 0x22
3418b606:	9a05      	ldr	r2, [sp, #20]
3418b608:	f04f 0a00 	mov.w	sl, #0
3418b60c:	f04f 0b00 	mov.w	fp, #0
3418b610:	6013      	str	r3, [r2, #0]
3418b612:	e76a      	b.n	3418b4ea <_strtod_l+0x442>
3418b614:	3418d000 	.word	0x3418d000
3418b618:	3418d2f0 	.word	0x3418d2f0
3418b61c:	3418cff8 	.word	0x3418cff8
3418b620:	3418d02f 	.word	0x3418d02f
3418b624:	3418d168 	.word	0x3418d168
3418b628:	3418d228 	.word	0x3418d228
3418b62c:	3418d200 	.word	0x3418d200
3418b630:	7ca00000 	.word	0x7ca00000
3418b634:	7ff00000 	.word	0x7ff00000
3418b638:	7fefffff 	.word	0x7fefffff
3418b63c:	f012 0110 	ands.w	r1, r2, #16
3418b640:	f04f 0000 	mov.w	r0, #0
3418b644:	bf18      	it	ne
3418b646:	216a      	movne	r1, #106	@ 0x6a
3418b648:	9106      	str	r1, [sp, #24]
3418b64a:	49b1      	ldr	r1, [pc, #708]	@ (3418b910 <_strtod_l+0x868>)
3418b64c:	ec4b ab17 	vmov	d7, sl, fp
3418b650:	07d6      	lsls	r6, r2, #31
3418b652:	d504      	bpl.n	3418b65e <_strtod_l+0x5b6>
3418b654:	2001      	movs	r0, #1
3418b656:	ed91 6b00 	vldr	d6, [r1]
3418b65a:	ee27 7b06 	vmul.f64	d7, d7, d6
3418b65e:	1052      	asrs	r2, r2, #1
3418b660:	f101 0108 	add.w	r1, r1, #8
3418b664:	d1f4      	bne.n	3418b650 <_strtod_l+0x5a8>
3418b666:	b108      	cbz	r0, 3418b66c <_strtod_l+0x5c4>
3418b668:	ec5b ab17 	vmov	sl, fp, d7
3418b66c:	9a06      	ldr	r2, [sp, #24]
3418b66e:	b1b2      	cbz	r2, 3418b69e <_strtod_l+0x5f6>
3418b670:	f3cb 510a 	ubfx	r1, fp, #20, #11
3418b674:	4658      	mov	r0, fp
3418b676:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
3418b67a:	2a00      	cmp	r2, #0
3418b67c:	dd0f      	ble.n	3418b69e <_strtod_l+0x5f6>
3418b67e:	2a1f      	cmp	r2, #31
3418b680:	dd55      	ble.n	3418b72e <_strtod_l+0x686>
3418b682:	2a34      	cmp	r2, #52	@ 0x34
3418b684:	f04f 0a00 	mov.w	sl, #0
3418b688:	bfdb      	ittet	le
3418b68a:	f04f 32ff 	movle.w	r2, #4294967295
3418b68e:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
3418b692:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
3418b696:	408a      	lslle	r2, r1
3418b698:	bfd8      	it	le
3418b69a:	ea02 0b00 	andle.w	fp, r2, r0
3418b69e:	ec4b ab17 	vmov	d7, sl, fp
3418b6a2:	eeb5 7b40 	vcmp.f64	d7, #0.0
3418b6a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418b6aa:	d0a7      	beq.n	3418b5fc <_strtod_l+0x554>
3418b6ac:	462a      	mov	r2, r5
3418b6ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
3418b6b0:	9805      	ldr	r0, [sp, #20]
3418b6b2:	f8cd 9000 	str.w	r9, [sp]
3418b6b6:	f7ff f8d3 	bl	3418a860 <__s2b>
3418b6ba:	9007      	str	r0, [sp, #28]
3418b6bc:	2800      	cmp	r0, #0
3418b6be:	f43f af09 	beq.w	3418b4d4 <_strtod_l+0x42c>
3418b6c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3418b6c4:	1b3f      	subs	r7, r7, r4
3418b6c6:	2400      	movs	r4, #0
3418b6c8:	2b00      	cmp	r3, #0
3418b6ca:	4625      	mov	r5, r4
3418b6cc:	bfb4      	ite	lt
3418b6ce:	463b      	movlt	r3, r7
3418b6d0:	2300      	movge	r3, #0
3418b6d2:	930a      	str	r3, [sp, #40]	@ 0x28
3418b6d4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3418b6d6:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 3418b900 <_strtod_l+0x858>
3418b6da:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
3418b6de:	930d      	str	r3, [sp, #52]	@ 0x34
3418b6e0:	9b07      	ldr	r3, [sp, #28]
3418b6e2:	9805      	ldr	r0, [sp, #20]
3418b6e4:	6859      	ldr	r1, [r3, #4]
3418b6e6:	f7ff f811 	bl	3418a70c <_Balloc>
3418b6ea:	4606      	mov	r6, r0
3418b6ec:	2800      	cmp	r0, #0
3418b6ee:	f43f aef5 	beq.w	3418b4dc <_strtod_l+0x434>
3418b6f2:	9b07      	ldr	r3, [sp, #28]
3418b6f4:	300c      	adds	r0, #12
3418b6f6:	691a      	ldr	r2, [r3, #16]
3418b6f8:	f103 010c 	add.w	r1, r3, #12
3418b6fc:	3202      	adds	r2, #2
3418b6fe:	ec4b ab19 	vmov	d9, sl, fp
3418b702:	0092      	lsls	r2, r2, #2
3418b704:	f7fe f901 	bl	3418990a <memcpy>
3418b708:	eeb0 0b49 	vmov.f64	d0, d9
3418b70c:	aa14      	add	r2, sp, #80	@ 0x50
3418b70e:	a913      	add	r1, sp, #76	@ 0x4c
3418b710:	9805      	ldr	r0, [sp, #20]
3418b712:	f7ff fbe3 	bl	3418aedc <__d2b>
3418b716:	9012      	str	r0, [sp, #72]	@ 0x48
3418b718:	2800      	cmp	r0, #0
3418b71a:	f43f aedf 	beq.w	3418b4dc <_strtod_l+0x434>
3418b71e:	2101      	movs	r1, #1
3418b720:	9805      	ldr	r0, [sp, #20]
3418b722:	f7ff f933 	bl	3418a98c <__i2b>
3418b726:	4605      	mov	r5, r0
3418b728:	b940      	cbnz	r0, 3418b73c <_strtod_l+0x694>
3418b72a:	2500      	movs	r5, #0
3418b72c:	e6d6      	b.n	3418b4dc <_strtod_l+0x434>
3418b72e:	f04f 31ff 	mov.w	r1, #4294967295
3418b732:	fa01 f202 	lsl.w	r2, r1, r2
3418b736:	ea02 0a0a 	and.w	sl, r2, sl
3418b73a:	e7b0      	b.n	3418b69e <_strtod_l+0x5f6>
3418b73c:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
3418b73e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
3418b740:	2f00      	cmp	r7, #0
3418b742:	bfa9      	itett	ge
3418b744:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
3418b746:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
3418b748:	eb07 0903 	addge.w	r9, r7, r3
3418b74c:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
3418b750:	bfb8      	it	lt
3418b752:	eba3 0807 	sublt.w	r8, r3, r7
3418b756:	9b06      	ldr	r3, [sp, #24]
3418b758:	bfb8      	it	lt
3418b75a:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
3418b75e:	1aff      	subs	r7, r7, r3
3418b760:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
3418b764:	4417      	add	r7, r2
3418b766:	4a6b      	ldr	r2, [pc, #428]	@ (3418b914 <_strtod_l+0x86c>)
3418b768:	3f01      	subs	r7, #1
3418b76a:	4297      	cmp	r7, r2
3418b76c:	da50      	bge.n	3418b810 <_strtod_l+0x768>
3418b76e:	1bd1      	subs	r1, r2, r7
3418b770:	2201      	movs	r2, #1
3418b772:	291f      	cmp	r1, #31
3418b774:	eba3 0301 	sub.w	r3, r3, r1
3418b778:	dc3e      	bgt.n	3418b7f8 <_strtod_l+0x750>
3418b77a:	408a      	lsls	r2, r1
3418b77c:	920c      	str	r2, [sp, #48]	@ 0x30
3418b77e:	2200      	movs	r2, #0
3418b780:	920b      	str	r2, [sp, #44]	@ 0x2c
3418b782:	eb09 0703 	add.w	r7, r9, r3
3418b786:	4498      	add	r8, r3
3418b788:	9b06      	ldr	r3, [sp, #24]
3418b78a:	45b9      	cmp	r9, r7
3418b78c:	4498      	add	r8, r3
3418b78e:	464b      	mov	r3, r9
3418b790:	bfa8      	it	ge
3418b792:	463b      	movge	r3, r7
3418b794:	4543      	cmp	r3, r8
3418b796:	bfa8      	it	ge
3418b798:	4643      	movge	r3, r8
3418b79a:	2b00      	cmp	r3, #0
3418b79c:	bfc2      	ittt	gt
3418b79e:	1aff      	subgt	r7, r7, r3
3418b7a0:	eba8 0803 	subgt.w	r8, r8, r3
3418b7a4:	eba9 0903 	subgt.w	r9, r9, r3
3418b7a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
3418b7aa:	2b00      	cmp	r3, #0
3418b7ac:	dd16      	ble.n	3418b7dc <_strtod_l+0x734>
3418b7ae:	4629      	mov	r1, r5
3418b7b0:	461a      	mov	r2, r3
3418b7b2:	9805      	ldr	r0, [sp, #20]
3418b7b4:	f7ff f9a4 	bl	3418ab00 <__pow5mult>
3418b7b8:	4605      	mov	r5, r0
3418b7ba:	2800      	cmp	r0, #0
3418b7bc:	d0b5      	beq.n	3418b72a <_strtod_l+0x682>
3418b7be:	4601      	mov	r1, r0
3418b7c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
3418b7c2:	9805      	ldr	r0, [sp, #20]
3418b7c4:	f7ff f8f8 	bl	3418a9b8 <__multiply>
3418b7c8:	900f      	str	r0, [sp, #60]	@ 0x3c
3418b7ca:	2800      	cmp	r0, #0
3418b7cc:	f43f ae86 	beq.w	3418b4dc <_strtod_l+0x434>
3418b7d0:	9912      	ldr	r1, [sp, #72]	@ 0x48
3418b7d2:	9805      	ldr	r0, [sp, #20]
3418b7d4:	f7fe ffda 	bl	3418a78c <_Bfree>
3418b7d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3418b7da:	9312      	str	r3, [sp, #72]	@ 0x48
3418b7dc:	2f00      	cmp	r7, #0
3418b7de:	dc1b      	bgt.n	3418b818 <_strtod_l+0x770>
3418b7e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3418b7e2:	2b00      	cmp	r3, #0
3418b7e4:	dd21      	ble.n	3418b82a <_strtod_l+0x782>
3418b7e6:	4631      	mov	r1, r6
3418b7e8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
3418b7ea:	9805      	ldr	r0, [sp, #20]
3418b7ec:	f7ff f988 	bl	3418ab00 <__pow5mult>
3418b7f0:	4606      	mov	r6, r0
3418b7f2:	b9d0      	cbnz	r0, 3418b82a <_strtod_l+0x782>
3418b7f4:	2600      	movs	r6, #0
3418b7f6:	e671      	b.n	3418b4dc <_strtod_l+0x434>
3418b7f8:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
3418b7fc:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
3418b800:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
3418b804:	37e2      	adds	r7, #226	@ 0xe2
3418b806:	fa02 f107 	lsl.w	r1, r2, r7
3418b80a:	910b      	str	r1, [sp, #44]	@ 0x2c
3418b80c:	920c      	str	r2, [sp, #48]	@ 0x30
3418b80e:	e7b8      	b.n	3418b782 <_strtod_l+0x6da>
3418b810:	2200      	movs	r2, #0
3418b812:	920b      	str	r2, [sp, #44]	@ 0x2c
3418b814:	2201      	movs	r2, #1
3418b816:	e7f9      	b.n	3418b80c <_strtod_l+0x764>
3418b818:	463a      	mov	r2, r7
3418b81a:	9912      	ldr	r1, [sp, #72]	@ 0x48
3418b81c:	9805      	ldr	r0, [sp, #20]
3418b81e:	f7ff f9c9 	bl	3418abb4 <__lshift>
3418b822:	9012      	str	r0, [sp, #72]	@ 0x48
3418b824:	2800      	cmp	r0, #0
3418b826:	d1db      	bne.n	3418b7e0 <_strtod_l+0x738>
3418b828:	e658      	b.n	3418b4dc <_strtod_l+0x434>
3418b82a:	f1b8 0f00 	cmp.w	r8, #0
3418b82e:	dd07      	ble.n	3418b840 <_strtod_l+0x798>
3418b830:	4631      	mov	r1, r6
3418b832:	4642      	mov	r2, r8
3418b834:	9805      	ldr	r0, [sp, #20]
3418b836:	f7ff f9bd 	bl	3418abb4 <__lshift>
3418b83a:	4606      	mov	r6, r0
3418b83c:	2800      	cmp	r0, #0
3418b83e:	d0d9      	beq.n	3418b7f4 <_strtod_l+0x74c>
3418b840:	f1b9 0f00 	cmp.w	r9, #0
3418b844:	dd08      	ble.n	3418b858 <_strtod_l+0x7b0>
3418b846:	4629      	mov	r1, r5
3418b848:	464a      	mov	r2, r9
3418b84a:	9805      	ldr	r0, [sp, #20]
3418b84c:	f7ff f9b2 	bl	3418abb4 <__lshift>
3418b850:	4605      	mov	r5, r0
3418b852:	2800      	cmp	r0, #0
3418b854:	f43f ae42 	beq.w	3418b4dc <_strtod_l+0x434>
3418b858:	4632      	mov	r2, r6
3418b85a:	9912      	ldr	r1, [sp, #72]	@ 0x48
3418b85c:	9805      	ldr	r0, [sp, #20]
3418b85e:	f7ff fa31 	bl	3418acc4 <__mdiff>
3418b862:	4604      	mov	r4, r0
3418b864:	2800      	cmp	r0, #0
3418b866:	f43f ae39 	beq.w	3418b4dc <_strtod_l+0x434>
3418b86a:	2300      	movs	r3, #0
3418b86c:	f8d0 800c 	ldr.w	r8, [r0, #12]
3418b870:	4629      	mov	r1, r5
3418b872:	60c3      	str	r3, [r0, #12]
3418b874:	f7ff fa0a 	bl	3418ac8c <__mcmp>
3418b878:	2800      	cmp	r0, #0
3418b87a:	da4f      	bge.n	3418b91c <_strtod_l+0x874>
3418b87c:	ea58 080a 	orrs.w	r8, r8, sl
3418b880:	d175      	bne.n	3418b96e <_strtod_l+0x8c6>
3418b882:	f3cb 0313 	ubfx	r3, fp, #0, #20
3418b886:	2b00      	cmp	r3, #0
3418b888:	d171      	bne.n	3418b96e <_strtod_l+0x8c6>
3418b88a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
3418b88e:	0d1b      	lsrs	r3, r3, #20
3418b890:	051b      	lsls	r3, r3, #20
3418b892:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
3418b896:	d96a      	bls.n	3418b96e <_strtod_l+0x8c6>
3418b898:	6963      	ldr	r3, [r4, #20]
3418b89a:	b913      	cbnz	r3, 3418b8a2 <_strtod_l+0x7fa>
3418b89c:	6923      	ldr	r3, [r4, #16]
3418b89e:	2b01      	cmp	r3, #1
3418b8a0:	dd65      	ble.n	3418b96e <_strtod_l+0x8c6>
3418b8a2:	4621      	mov	r1, r4
3418b8a4:	2201      	movs	r2, #1
3418b8a6:	9805      	ldr	r0, [sp, #20]
3418b8a8:	f7ff f984 	bl	3418abb4 <__lshift>
3418b8ac:	4629      	mov	r1, r5
3418b8ae:	4604      	mov	r4, r0
3418b8b0:	f7ff f9ec 	bl	3418ac8c <__mcmp>
3418b8b4:	2800      	cmp	r0, #0
3418b8b6:	dd5a      	ble.n	3418b96e <_strtod_l+0x8c6>
3418b8b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
3418b8bc:	9a06      	ldr	r2, [sp, #24]
3418b8be:	0d1b      	lsrs	r3, r3, #20
3418b8c0:	051b      	lsls	r3, r3, #20
3418b8c2:	2a00      	cmp	r2, #0
3418b8c4:	d071      	beq.n	3418b9aa <_strtod_l+0x902>
3418b8c6:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
3418b8ca:	d86e      	bhi.n	3418b9aa <_strtod_l+0x902>
3418b8cc:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
3418b8d0:	f67f ae98 	bls.w	3418b604 <_strtod_l+0x55c>
3418b8d4:	4b10      	ldr	r3, [pc, #64]	@ (3418b918 <_strtod_l+0x870>)
3418b8d6:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 3418b908 <_strtod_l+0x860>
3418b8da:	ec4b ab16 	vmov	d6, sl, fp
3418b8de:	ee26 7b07 	vmul.f64	d7, d6, d7
3418b8e2:	ee17 2a90 	vmov	r2, s15
3418b8e6:	4013      	ands	r3, r2
3418b8e8:	ec5b ab17 	vmov	sl, fp, d7
3418b8ec:	2b00      	cmp	r3, #0
3418b8ee:	f47f ae00 	bne.w	3418b4f2 <_strtod_l+0x44a>
3418b8f2:	2322      	movs	r3, #34	@ 0x22
3418b8f4:	9a05      	ldr	r2, [sp, #20]
3418b8f6:	6013      	str	r3, [r2, #0]
3418b8f8:	e5fb      	b.n	3418b4f2 <_strtod_l+0x44a>
3418b8fa:	bf00      	nop
3418b8fc:	f3af 8000 	nop.w
3418b900:	ffc00000 	.word	0xffc00000
3418b904:	41dfffff 	.word	0x41dfffff
3418b908:	00000000 	.word	0x00000000
3418b90c:	39500000 	.word	0x39500000
3418b910:	3418d318 	.word	0x3418d318
3418b914:	fffffc02 	.word	0xfffffc02
3418b918:	7ff00000 	.word	0x7ff00000
3418b91c:	46d9      	mov	r9, fp
3418b91e:	d15d      	bne.n	3418b9dc <_strtod_l+0x934>
3418b920:	f3cb 0313 	ubfx	r3, fp, #0, #20
3418b924:	f1b8 0f00 	cmp.w	r8, #0
3418b928:	d02a      	beq.n	3418b980 <_strtod_l+0x8d8>
3418b92a:	4aa9      	ldr	r2, [pc, #676]	@ (3418bbd0 <_strtod_l+0xb28>)
3418b92c:	4293      	cmp	r3, r2
3418b92e:	d12a      	bne.n	3418b986 <_strtod_l+0x8de>
3418b930:	9b06      	ldr	r3, [sp, #24]
3418b932:	4652      	mov	r2, sl
3418b934:	b1fb      	cbz	r3, 3418b976 <_strtod_l+0x8ce>
3418b936:	4ba7      	ldr	r3, [pc, #668]	@ (3418bbd4 <_strtod_l+0xb2c>)
3418b938:	f04f 31ff 	mov.w	r1, #4294967295
3418b93c:	ea0b 0303 	and.w	r3, fp, r3
3418b940:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
3418b944:	d81a      	bhi.n	3418b97c <_strtod_l+0x8d4>
3418b946:	0d1b      	lsrs	r3, r3, #20
3418b948:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
3418b94c:	fa01 f303 	lsl.w	r3, r1, r3
3418b950:	429a      	cmp	r2, r3
3418b952:	d118      	bne.n	3418b986 <_strtod_l+0x8de>
3418b954:	4ba0      	ldr	r3, [pc, #640]	@ (3418bbd8 <_strtod_l+0xb30>)
3418b956:	4599      	cmp	r9, r3
3418b958:	d102      	bne.n	3418b960 <_strtod_l+0x8b8>
3418b95a:	3201      	adds	r2, #1
3418b95c:	f43f adbe 	beq.w	3418b4dc <_strtod_l+0x434>
3418b960:	4b9c      	ldr	r3, [pc, #624]	@ (3418bbd4 <_strtod_l+0xb2c>)
3418b962:	f04f 0a00 	mov.w	sl, #0
3418b966:	ea09 0303 	and.w	r3, r9, r3
3418b96a:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
3418b96e:	9b06      	ldr	r3, [sp, #24]
3418b970:	2b00      	cmp	r3, #0
3418b972:	d1af      	bne.n	3418b8d4 <_strtod_l+0x82c>
3418b974:	e5bd      	b.n	3418b4f2 <_strtod_l+0x44a>
3418b976:	f04f 33ff 	mov.w	r3, #4294967295
3418b97a:	e7e9      	b.n	3418b950 <_strtod_l+0x8a8>
3418b97c:	460b      	mov	r3, r1
3418b97e:	e7e7      	b.n	3418b950 <_strtod_l+0x8a8>
3418b980:	ea53 030a 	orrs.w	r3, r3, sl
3418b984:	d098      	beq.n	3418b8b8 <_strtod_l+0x810>
3418b986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
3418b988:	b1c3      	cbz	r3, 3418b9bc <_strtod_l+0x914>
3418b98a:	ea13 0f09 	tst.w	r3, r9
3418b98e:	d0ee      	beq.n	3418b96e <_strtod_l+0x8c6>
3418b990:	9a06      	ldr	r2, [sp, #24]
3418b992:	4650      	mov	r0, sl
3418b994:	4659      	mov	r1, fp
3418b996:	f1b8 0f00 	cmp.w	r8, #0
3418b99a:	d013      	beq.n	3418b9c4 <_strtod_l+0x91c>
3418b99c:	f7ff fb69 	bl	3418b072 <sulp>
3418b9a0:	ee39 7b00 	vadd.f64	d7, d9, d0
3418b9a4:	ec5b ab17 	vmov	sl, fp, d7
3418b9a8:	e7e1      	b.n	3418b96e <_strtod_l+0x8c6>
3418b9aa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
3418b9ae:	f04f 3aff 	mov.w	sl, #4294967295
3418b9b2:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
3418b9b6:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
3418b9ba:	e7d8      	b.n	3418b96e <_strtod_l+0x8c6>
3418b9bc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
3418b9be:	ea13 0f0a 	tst.w	r3, sl
3418b9c2:	e7e4      	b.n	3418b98e <_strtod_l+0x8e6>
3418b9c4:	f7ff fb55 	bl	3418b072 <sulp>
3418b9c8:	ee39 0b40 	vsub.f64	d0, d9, d0
3418b9cc:	eeb5 0b40 	vcmp.f64	d0, #0.0
3418b9d0:	ec5b ab10 	vmov	sl, fp, d0
3418b9d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418b9d8:	d1c9      	bne.n	3418b96e <_strtod_l+0x8c6>
3418b9da:	e613      	b.n	3418b604 <_strtod_l+0x55c>
3418b9dc:	4629      	mov	r1, r5
3418b9de:	4620      	mov	r0, r4
3418b9e0:	f7ff fad4 	bl	3418af8c <__ratio>
3418b9e4:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
3418b9e8:	eeb4 0bc7 	vcmpe.f64	d0, d7
3418b9ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418b9f0:	d85d      	bhi.n	3418baae <_strtod_l+0xa06>
3418b9f2:	f1b8 0f00 	cmp.w	r8, #0
3418b9f6:	d164      	bne.n	3418bac2 <_strtod_l+0xa1a>
3418b9f8:	f1ba 0f00 	cmp.w	sl, #0
3418b9fc:	d14b      	bne.n	3418ba96 <_strtod_l+0x9ee>
3418b9fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
3418ba02:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
3418ba06:	2b00      	cmp	r3, #0
3418ba08:	d160      	bne.n	3418bacc <_strtod_l+0xa24>
3418ba0a:	eeb4 0bc8 	vcmpe.f64	d0, d8
3418ba0e:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
3418ba12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418ba16:	d401      	bmi.n	3418ba1c <_strtod_l+0x974>
3418ba18:	ee20 8b08 	vmul.f64	d8, d0, d8
3418ba1c:	eeb1 ab48 	vneg.f64	d10, d8
3418ba20:	486c      	ldr	r0, [pc, #432]	@ (3418bbd4 <_strtod_l+0xb2c>)
3418ba22:	496e      	ldr	r1, [pc, #440]	@ (3418bbdc <_strtod_l+0xb34>)
3418ba24:	ea09 0700 	and.w	r7, r9, r0
3418ba28:	428f      	cmp	r7, r1
3418ba2a:	ec53 2b1a 	vmov	r2, r3, d10
3418ba2e:	d17d      	bne.n	3418bb2c <_strtod_l+0xa84>
3418ba30:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
3418ba34:	ec4b ab1c 	vmov	d12, sl, fp
3418ba38:	eeb0 0b4c 	vmov.f64	d0, d12
3418ba3c:	f7ff f9da 	bl	3418adf4 <__ulp>
3418ba40:	eea0 cb0a 	vfma.f64	d12, d0, d10
3418ba44:	4863      	ldr	r0, [pc, #396]	@ (3418bbd4 <_strtod_l+0xb2c>)
3418ba46:	4a66      	ldr	r2, [pc, #408]	@ (3418bbe0 <_strtod_l+0xb38>)
3418ba48:	ee1c 3a90 	vmov	r3, s25
3418ba4c:	ea03 0100 	and.w	r1, r3, r0
3418ba50:	4291      	cmp	r1, r2
3418ba52:	ec5b ab1c 	vmov	sl, fp, d12
3418ba56:	d93c      	bls.n	3418bad2 <_strtod_l+0xa2a>
3418ba58:	ee19 2a90 	vmov	r2, s19
3418ba5c:	4b5e      	ldr	r3, [pc, #376]	@ (3418bbd8 <_strtod_l+0xb30>)
3418ba5e:	429a      	cmp	r2, r3
3418ba60:	d104      	bne.n	3418ba6c <_strtod_l+0x9c4>
3418ba62:	ee19 3a10 	vmov	r3, s18
3418ba66:	3301      	adds	r3, #1
3418ba68:	f43f ad38 	beq.w	3418b4dc <_strtod_l+0x434>
3418ba6c:	f8df b168 	ldr.w	fp, [pc, #360]	@ 3418bbd8 <_strtod_l+0xb30>
3418ba70:	f04f 3aff 	mov.w	sl, #4294967295
3418ba74:	9912      	ldr	r1, [sp, #72]	@ 0x48
3418ba76:	9805      	ldr	r0, [sp, #20]
3418ba78:	f7fe fe88 	bl	3418a78c <_Bfree>
3418ba7c:	4631      	mov	r1, r6
3418ba7e:	9805      	ldr	r0, [sp, #20]
3418ba80:	f7fe fe84 	bl	3418a78c <_Bfree>
3418ba84:	4629      	mov	r1, r5
3418ba86:	9805      	ldr	r0, [sp, #20]
3418ba88:	f7fe fe80 	bl	3418a78c <_Bfree>
3418ba8c:	4621      	mov	r1, r4
3418ba8e:	9805      	ldr	r0, [sp, #20]
3418ba90:	f7fe fe7c 	bl	3418a78c <_Bfree>
3418ba94:	e624      	b.n	3418b6e0 <_strtod_l+0x638>
3418ba96:	f1ba 0f01 	cmp.w	sl, #1
3418ba9a:	d103      	bne.n	3418baa4 <_strtod_l+0x9fc>
3418ba9c:	f1bb 0f00 	cmp.w	fp, #0
3418baa0:	f43f adb0 	beq.w	3418b604 <_strtod_l+0x55c>
3418baa4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
3418baa8:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
3418baac:	e7b8      	b.n	3418ba20 <_strtod_l+0x978>
3418baae:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
3418bab2:	ee20 8b08 	vmul.f64	d8, d0, d8
3418bab6:	f1b8 0f00 	cmp.w	r8, #0
3418baba:	d0af      	beq.n	3418ba1c <_strtod_l+0x974>
3418babc:	eeb0 ab48 	vmov.f64	d10, d8
3418bac0:	e7ae      	b.n	3418ba20 <_strtod_l+0x978>
3418bac2:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
3418bac6:	eeb0 8b4a 	vmov.f64	d8, d10
3418baca:	e7a9      	b.n	3418ba20 <_strtod_l+0x978>
3418bacc:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
3418bad0:	e7a6      	b.n	3418ba20 <_strtod_l+0x978>
3418bad2:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
3418bad6:	9b06      	ldr	r3, [sp, #24]
3418bad8:	46d9      	mov	r9, fp
3418bada:	2b00      	cmp	r3, #0
3418badc:	d1ca      	bne.n	3418ba74 <_strtod_l+0x9cc>
3418bade:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
3418bae2:	0d1b      	lsrs	r3, r3, #20
3418bae4:	051b      	lsls	r3, r3, #20
3418bae6:	429f      	cmp	r7, r3
3418bae8:	d1c4      	bne.n	3418ba74 <_strtod_l+0x9cc>
3418baea:	f3cb 0913 	ubfx	r9, fp, #0, #20
3418baee:	ec51 0b18 	vmov	r0, r1, d8
3418baf2:	ea49 090a 	orr.w	r9, r9, sl
3418baf6:	f7f5 f827 	bl	34180b48 <__aeabi_d2lz>
3418bafa:	f7f4 ffdf 	bl	34180abc <__aeabi_l2d>
3418bafe:	ea59 0908 	orrs.w	r9, r9, r8
3418bb02:	ec41 0b17 	vmov	d7, r0, r1
3418bb06:	ee38 8b47 	vsub.f64	d8, d8, d7
3418bb0a:	d03c      	beq.n	3418bb86 <_strtod_l+0xade>
3418bb0c:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 3418bbb8 <_strtod_l+0xb10>
3418bb10:	eeb4 8bc7 	vcmpe.f64	d8, d7
3418bb14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418bb18:	f53f aceb 	bmi.w	3418b4f2 <_strtod_l+0x44a>
3418bb1c:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 3418bbc0 <_strtod_l+0xb18>
3418bb20:	eeb4 8bc7 	vcmpe.f64	d8, d7
3418bb24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418bb28:	dda4      	ble.n	3418ba74 <_strtod_l+0x9cc>
3418bb2a:	e4e2      	b.n	3418b4f2 <_strtod_l+0x44a>
3418bb2c:	9906      	ldr	r1, [sp, #24]
3418bb2e:	b1e1      	cbz	r1, 3418bb6a <_strtod_l+0xac2>
3418bb30:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
3418bb34:	d819      	bhi.n	3418bb6a <_strtod_l+0xac2>
3418bb36:	eeb4 8bcb 	vcmpe.f64	d8, d11
3418bb3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418bb3e:	d811      	bhi.n	3418bb64 <_strtod_l+0xabc>
3418bb40:	eebc 8bc8 	vcvt.u32.f64	s16, d8
3418bb44:	ee18 3a10 	vmov	r3, s16
3418bb48:	2b01      	cmp	r3, #1
3418bb4a:	bf38      	it	cc
3418bb4c:	2301      	movcc	r3, #1
3418bb4e:	ee08 3a10 	vmov	s16, r3
3418bb52:	eeb8 8b48 	vcvt.f64.u32	d8, s16
3418bb56:	f1b8 0f00 	cmp.w	r8, #0
3418bb5a:	d111      	bne.n	3418bb80 <_strtod_l+0xad8>
3418bb5c:	eeb1 7b48 	vneg.f64	d7, d8
3418bb60:	ec53 2b17 	vmov	r2, r3, d7
3418bb64:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
3418bb68:	1bcb      	subs	r3, r1, r7
3418bb6a:	eeb0 0b49 	vmov.f64	d0, d9
3418bb6e:	ec43 2b1a 	vmov	d10, r2, r3
3418bb72:	f7ff f93f 	bl	3418adf4 <__ulp>
3418bb76:	eeaa 9b00 	vfma.f64	d9, d10, d0
3418bb7a:	ec5b ab19 	vmov	sl, fp, d9
3418bb7e:	e7aa      	b.n	3418bad6 <_strtod_l+0xa2e>
3418bb80:	eeb0 7b48 	vmov.f64	d7, d8
3418bb84:	e7ec      	b.n	3418bb60 <_strtod_l+0xab8>
3418bb86:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 3418bbc8 <_strtod_l+0xb20>
3418bb8a:	eeb4 8bc7 	vcmpe.f64	d8, d7
3418bb8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
3418bb92:	f57f af6f 	bpl.w	3418ba74 <_strtod_l+0x9cc>
3418bb96:	e4ac      	b.n	3418b4f2 <_strtod_l+0x44a>
3418bb98:	2300      	movs	r3, #0
3418bb9a:	9308      	str	r3, [sp, #32]
3418bb9c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
3418bb9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3418bba0:	6013      	str	r3, [r2, #0]
3418bba2:	f7ff bac0 	b.w	3418b126 <_strtod_l+0x7e>
3418bba6:	2a65      	cmp	r2, #101	@ 0x65
3418bba8:	f43f abbb 	beq.w	3418b322 <_strtod_l+0x27a>
3418bbac:	2a45      	cmp	r2, #69	@ 0x45
3418bbae:	f43f abb8 	beq.w	3418b322 <_strtod_l+0x27a>
3418bbb2:	2101      	movs	r1, #1
3418bbb4:	f7ff bbf0 	b.w	3418b398 <_strtod_l+0x2f0>
3418bbb8:	94a03595 	.word	0x94a03595
3418bbbc:	3fdfffff 	.word	0x3fdfffff
3418bbc0:	35afe535 	.word	0x35afe535
3418bbc4:	3fe00000 	.word	0x3fe00000
3418bbc8:	94a03595 	.word	0x94a03595
3418bbcc:	3fcfffff 	.word	0x3fcfffff
3418bbd0:	000fffff 	.word	0x000fffff
3418bbd4:	7ff00000 	.word	0x7ff00000
3418bbd8:	7fefffff 	.word	0x7fefffff
3418bbdc:	7fe00000 	.word	0x7fe00000
3418bbe0:	7c9fffff 	.word	0x7c9fffff

3418bbe4 <_strtod_r>:
3418bbe4:	4b01      	ldr	r3, [pc, #4]	@ (3418bbec <_strtod_r+0x8>)
3418bbe6:	f7ff ba5f 	b.w	3418b0a8 <_strtod_l>
3418bbea:	bf00      	nop
3418bbec:	341c0068 	.word	0x341c0068

3418bbf0 <_strtol_l.isra.0>:
3418bbf0:	2b24      	cmp	r3, #36	@ 0x24
3418bbf2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3418bbf6:	4686      	mov	lr, r0
3418bbf8:	4690      	mov	r8, r2
3418bbfa:	d801      	bhi.n	3418bc00 <_strtol_l.isra.0+0x10>
3418bbfc:	2b01      	cmp	r3, #1
3418bbfe:	d106      	bne.n	3418bc0e <_strtol_l.isra.0+0x1e>
3418bc00:	f7fd fe48 	bl	34189894 <__errno>
3418bc04:	2316      	movs	r3, #22
3418bc06:	6003      	str	r3, [r0, #0]
3418bc08:	2000      	movs	r0, #0
3418bc0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3418bc0e:	460d      	mov	r5, r1
3418bc10:	4833      	ldr	r0, [pc, #204]	@ (3418bce0 <_strtol_l.isra.0+0xf0>)
3418bc12:	462a      	mov	r2, r5
3418bc14:	f815 4b01 	ldrb.w	r4, [r5], #1
3418bc18:	5d06      	ldrb	r6, [r0, r4]
3418bc1a:	f016 0608 	ands.w	r6, r6, #8
3418bc1e:	d1f8      	bne.n	3418bc12 <_strtol_l.isra.0+0x22>
3418bc20:	2c2d      	cmp	r4, #45	@ 0x2d
3418bc22:	d110      	bne.n	3418bc46 <_strtol_l.isra.0+0x56>
3418bc24:	782c      	ldrb	r4, [r5, #0]
3418bc26:	2601      	movs	r6, #1
3418bc28:	1c95      	adds	r5, r2, #2
3418bc2a:	f033 0210 	bics.w	r2, r3, #16
3418bc2e:	d115      	bne.n	3418bc5c <_strtol_l.isra.0+0x6c>
3418bc30:	2c30      	cmp	r4, #48	@ 0x30
3418bc32:	d10d      	bne.n	3418bc50 <_strtol_l.isra.0+0x60>
3418bc34:	782a      	ldrb	r2, [r5, #0]
3418bc36:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
3418bc3a:	2a58      	cmp	r2, #88	@ 0x58
3418bc3c:	d108      	bne.n	3418bc50 <_strtol_l.isra.0+0x60>
3418bc3e:	786c      	ldrb	r4, [r5, #1]
3418bc40:	3502      	adds	r5, #2
3418bc42:	2310      	movs	r3, #16
3418bc44:	e00a      	b.n	3418bc5c <_strtol_l.isra.0+0x6c>
3418bc46:	2c2b      	cmp	r4, #43	@ 0x2b
3418bc48:	bf04      	itt	eq
3418bc4a:	782c      	ldrbeq	r4, [r5, #0]
3418bc4c:	1c95      	addeq	r5, r2, #2
3418bc4e:	e7ec      	b.n	3418bc2a <_strtol_l.isra.0+0x3a>
3418bc50:	2b00      	cmp	r3, #0
3418bc52:	d1f6      	bne.n	3418bc42 <_strtol_l.isra.0+0x52>
3418bc54:	2c30      	cmp	r4, #48	@ 0x30
3418bc56:	bf14      	ite	ne
3418bc58:	230a      	movne	r3, #10
3418bc5a:	2308      	moveq	r3, #8
3418bc5c:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
3418bc60:	2200      	movs	r2, #0
3418bc62:	f10c 3cff 	add.w	ip, ip, #4294967295
3418bc66:	4610      	mov	r0, r2
3418bc68:	fbbc f9f3 	udiv	r9, ip, r3
3418bc6c:	fb03 ca19 	mls	sl, r3, r9, ip
3418bc70:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
3418bc74:	2f09      	cmp	r7, #9
3418bc76:	d80f      	bhi.n	3418bc98 <_strtol_l.isra.0+0xa8>
3418bc78:	463c      	mov	r4, r7
3418bc7a:	42a3      	cmp	r3, r4
3418bc7c:	dd1b      	ble.n	3418bcb6 <_strtol_l.isra.0+0xc6>
3418bc7e:	1c57      	adds	r7, r2, #1
3418bc80:	d007      	beq.n	3418bc92 <_strtol_l.isra.0+0xa2>
3418bc82:	4581      	cmp	r9, r0
3418bc84:	d314      	bcc.n	3418bcb0 <_strtol_l.isra.0+0xc0>
3418bc86:	d101      	bne.n	3418bc8c <_strtol_l.isra.0+0x9c>
3418bc88:	45a2      	cmp	sl, r4
3418bc8a:	db11      	blt.n	3418bcb0 <_strtol_l.isra.0+0xc0>
3418bc8c:	fb00 4003 	mla	r0, r0, r3, r4
3418bc90:	2201      	movs	r2, #1
3418bc92:	f815 4b01 	ldrb.w	r4, [r5], #1
3418bc96:	e7eb      	b.n	3418bc70 <_strtol_l.isra.0+0x80>
3418bc98:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
3418bc9c:	2f19      	cmp	r7, #25
3418bc9e:	d801      	bhi.n	3418bca4 <_strtol_l.isra.0+0xb4>
3418bca0:	3c37      	subs	r4, #55	@ 0x37
3418bca2:	e7ea      	b.n	3418bc7a <_strtol_l.isra.0+0x8a>
3418bca4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
3418bca8:	2f19      	cmp	r7, #25
3418bcaa:	d804      	bhi.n	3418bcb6 <_strtol_l.isra.0+0xc6>
3418bcac:	3c57      	subs	r4, #87	@ 0x57
3418bcae:	e7e4      	b.n	3418bc7a <_strtol_l.isra.0+0x8a>
3418bcb0:	f04f 32ff 	mov.w	r2, #4294967295
3418bcb4:	e7ed      	b.n	3418bc92 <_strtol_l.isra.0+0xa2>
3418bcb6:	1c53      	adds	r3, r2, #1
3418bcb8:	d108      	bne.n	3418bccc <_strtol_l.isra.0+0xdc>
3418bcba:	2322      	movs	r3, #34	@ 0x22
3418bcbc:	4660      	mov	r0, ip
3418bcbe:	f8ce 3000 	str.w	r3, [lr]
3418bcc2:	f1b8 0f00 	cmp.w	r8, #0
3418bcc6:	d0a0      	beq.n	3418bc0a <_strtol_l.isra.0+0x1a>
3418bcc8:	1e69      	subs	r1, r5, #1
3418bcca:	e006      	b.n	3418bcda <_strtol_l.isra.0+0xea>
3418bccc:	b106      	cbz	r6, 3418bcd0 <_strtol_l.isra.0+0xe0>
3418bcce:	4240      	negs	r0, r0
3418bcd0:	f1b8 0f00 	cmp.w	r8, #0
3418bcd4:	d099      	beq.n	3418bc0a <_strtol_l.isra.0+0x1a>
3418bcd6:	2a00      	cmp	r2, #0
3418bcd8:	d1f6      	bne.n	3418bcc8 <_strtol_l.isra.0+0xd8>
3418bcda:	f8c8 1000 	str.w	r1, [r8]
3418bcde:	e794      	b.n	3418bc0a <_strtol_l.isra.0+0x1a>
3418bce0:	3418d341 	.word	0x3418d341

3418bce4 <_strtol_r>:
3418bce4:	f7ff bf84 	b.w	3418bbf0 <_strtol_l.isra.0>

3418bce8 <__ssputs_r>:
3418bce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
3418bcec:	461f      	mov	r7, r3
3418bcee:	688e      	ldr	r6, [r1, #8]
3418bcf0:	4682      	mov	sl, r0
3418bcf2:	460c      	mov	r4, r1
3418bcf4:	42be      	cmp	r6, r7
3418bcf6:	4690      	mov	r8, r2
3418bcf8:	680b      	ldr	r3, [r1, #0]
3418bcfa:	d82d      	bhi.n	3418bd58 <__ssputs_r+0x70>
3418bcfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3418bd00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
3418bd04:	d026      	beq.n	3418bd54 <__ssputs_r+0x6c>
3418bd06:	6965      	ldr	r5, [r4, #20]
3418bd08:	6909      	ldr	r1, [r1, #16]
3418bd0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
3418bd0e:	eba3 0901 	sub.w	r9, r3, r1
3418bd12:	1c7b      	adds	r3, r7, #1
3418bd14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
3418bd18:	444b      	add	r3, r9
3418bd1a:	106d      	asrs	r5, r5, #1
3418bd1c:	429d      	cmp	r5, r3
3418bd1e:	bf38      	it	cc
3418bd20:	461d      	movcc	r5, r3
3418bd22:	0553      	lsls	r3, r2, #21
3418bd24:	d527      	bpl.n	3418bd76 <__ssputs_r+0x8e>
3418bd26:	4629      	mov	r1, r5
3418bd28:	f7fe fc64 	bl	3418a5f4 <_malloc_r>
3418bd2c:	4606      	mov	r6, r0
3418bd2e:	b360      	cbz	r0, 3418bd8a <__ssputs_r+0xa2>
3418bd30:	464a      	mov	r2, r9
3418bd32:	6921      	ldr	r1, [r4, #16]
3418bd34:	f7fd fde9 	bl	3418990a <memcpy>
3418bd38:	89a3      	ldrh	r3, [r4, #12]
3418bd3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
3418bd3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
3418bd42:	81a3      	strh	r3, [r4, #12]
3418bd44:	6126      	str	r6, [r4, #16]
3418bd46:	444e      	add	r6, r9
3418bd48:	6165      	str	r5, [r4, #20]
3418bd4a:	eba5 0509 	sub.w	r5, r5, r9
3418bd4e:	6026      	str	r6, [r4, #0]
3418bd50:	463e      	mov	r6, r7
3418bd52:	60a5      	str	r5, [r4, #8]
3418bd54:	42be      	cmp	r6, r7
3418bd56:	d900      	bls.n	3418bd5a <__ssputs_r+0x72>
3418bd58:	463e      	mov	r6, r7
3418bd5a:	4632      	mov	r2, r6
3418bd5c:	4641      	mov	r1, r8
3418bd5e:	6820      	ldr	r0, [r4, #0]
3418bd60:	f000 f9c6 	bl	3418c0f0 <memmove>
3418bd64:	68a3      	ldr	r3, [r4, #8]
3418bd66:	2000      	movs	r0, #0
3418bd68:	1b9b      	subs	r3, r3, r6
3418bd6a:	60a3      	str	r3, [r4, #8]
3418bd6c:	6823      	ldr	r3, [r4, #0]
3418bd6e:	4433      	add	r3, r6
3418bd70:	6023      	str	r3, [r4, #0]
3418bd72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
3418bd76:	462a      	mov	r2, r5
3418bd78:	f000 fd77 	bl	3418c86a <_realloc_r>
3418bd7c:	4606      	mov	r6, r0
3418bd7e:	2800      	cmp	r0, #0
3418bd80:	d1e0      	bne.n	3418bd44 <__ssputs_r+0x5c>
3418bd82:	6921      	ldr	r1, [r4, #16]
3418bd84:	4650      	mov	r0, sl
3418bd86:	f7fe fbc1 	bl	3418a50c <_free_r>
3418bd8a:	230c      	movs	r3, #12
3418bd8c:	f04f 30ff 	mov.w	r0, #4294967295
3418bd90:	f8ca 3000 	str.w	r3, [sl]
3418bd94:	89a3      	ldrh	r3, [r4, #12]
3418bd96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3418bd9a:	81a3      	strh	r3, [r4, #12]
3418bd9c:	e7e9      	b.n	3418bd72 <__ssputs_r+0x8a>
	...

3418bda0 <_svfiprintf_r>:
3418bda0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3418bda4:	4698      	mov	r8, r3
3418bda6:	898b      	ldrh	r3, [r1, #12]
3418bda8:	b09d      	sub	sp, #116	@ 0x74
3418bdaa:	4607      	mov	r7, r0
3418bdac:	061b      	lsls	r3, r3, #24
3418bdae:	460d      	mov	r5, r1
3418bdb0:	4614      	mov	r4, r2
3418bdb2:	d510      	bpl.n	3418bdd6 <_svfiprintf_r+0x36>
3418bdb4:	690b      	ldr	r3, [r1, #16]
3418bdb6:	b973      	cbnz	r3, 3418bdd6 <_svfiprintf_r+0x36>
3418bdb8:	2140      	movs	r1, #64	@ 0x40
3418bdba:	f7fe fc1b 	bl	3418a5f4 <_malloc_r>
3418bdbe:	6028      	str	r0, [r5, #0]
3418bdc0:	6128      	str	r0, [r5, #16]
3418bdc2:	b930      	cbnz	r0, 3418bdd2 <_svfiprintf_r+0x32>
3418bdc4:	230c      	movs	r3, #12
3418bdc6:	603b      	str	r3, [r7, #0]
3418bdc8:	f04f 30ff 	mov.w	r0, #4294967295
3418bdcc:	b01d      	add	sp, #116	@ 0x74
3418bdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3418bdd2:	2340      	movs	r3, #64	@ 0x40
3418bdd4:	616b      	str	r3, [r5, #20]
3418bdd6:	2300      	movs	r3, #0
3418bdd8:	f8cd 800c 	str.w	r8, [sp, #12]
3418bddc:	f04f 0901 	mov.w	r9, #1
3418bde0:	f8df 81a0 	ldr.w	r8, [pc, #416]	@ 3418bf84 <_svfiprintf_r+0x1e4>
3418bde4:	9309      	str	r3, [sp, #36]	@ 0x24
3418bde6:	2320      	movs	r3, #32
3418bde8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3418bdec:	2330      	movs	r3, #48	@ 0x30
3418bdee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
3418bdf2:	4623      	mov	r3, r4
3418bdf4:	469a      	mov	sl, r3
3418bdf6:	f813 2b01 	ldrb.w	r2, [r3], #1
3418bdfa:	b10a      	cbz	r2, 3418be00 <_svfiprintf_r+0x60>
3418bdfc:	2a25      	cmp	r2, #37	@ 0x25
3418bdfe:	d1f9      	bne.n	3418bdf4 <_svfiprintf_r+0x54>
3418be00:	ebba 0b04 	subs.w	fp, sl, r4
3418be04:	d00b      	beq.n	3418be1e <_svfiprintf_r+0x7e>
3418be06:	465b      	mov	r3, fp
3418be08:	4622      	mov	r2, r4
3418be0a:	4629      	mov	r1, r5
3418be0c:	4638      	mov	r0, r7
3418be0e:	f7ff ff6b 	bl	3418bce8 <__ssputs_r>
3418be12:	3001      	adds	r0, #1
3418be14:	f000 80a7 	beq.w	3418bf66 <_svfiprintf_r+0x1c6>
3418be18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3418be1a:	445a      	add	r2, fp
3418be1c:	9209      	str	r2, [sp, #36]	@ 0x24
3418be1e:	f89a 3000 	ldrb.w	r3, [sl]
3418be22:	2b00      	cmp	r3, #0
3418be24:	f000 809f 	beq.w	3418bf66 <_svfiprintf_r+0x1c6>
3418be28:	2300      	movs	r3, #0
3418be2a:	f04f 32ff 	mov.w	r2, #4294967295
3418be2e:	f10a 0a01 	add.w	sl, sl, #1
3418be32:	9304      	str	r3, [sp, #16]
3418be34:	9307      	str	r3, [sp, #28]
3418be36:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3418be3a:	931a      	str	r3, [sp, #104]	@ 0x68
3418be3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
3418be40:	4654      	mov	r4, sl
3418be42:	2205      	movs	r2, #5
3418be44:	484f      	ldr	r0, [pc, #316]	@ (3418bf84 <_svfiprintf_r+0x1e4>)
3418be46:	f814 1b01 	ldrb.w	r1, [r4], #1
3418be4a:	f7fd fd50 	bl	341898ee <memchr>
3418be4e:	9a04      	ldr	r2, [sp, #16]
3418be50:	b9d8      	cbnz	r0, 3418be8a <_svfiprintf_r+0xea>
3418be52:	06d0      	lsls	r0, r2, #27
3418be54:	bf44      	itt	mi
3418be56:	2320      	movmi	r3, #32
3418be58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3418be5c:	0711      	lsls	r1, r2, #28
3418be5e:	bf44      	itt	mi
3418be60:	232b      	movmi	r3, #43	@ 0x2b
3418be62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3418be66:	f89a 3000 	ldrb.w	r3, [sl]
3418be6a:	2b2a      	cmp	r3, #42	@ 0x2a
3418be6c:	d015      	beq.n	3418be9a <_svfiprintf_r+0xfa>
3418be6e:	9a07      	ldr	r2, [sp, #28]
3418be70:	4654      	mov	r4, sl
3418be72:	2000      	movs	r0, #0
3418be74:	f04f 0c0a 	mov.w	ip, #10
3418be78:	4621      	mov	r1, r4
3418be7a:	f811 3b01 	ldrb.w	r3, [r1], #1
3418be7e:	3b30      	subs	r3, #48	@ 0x30
3418be80:	2b09      	cmp	r3, #9
3418be82:	d94b      	bls.n	3418bf1c <_svfiprintf_r+0x17c>
3418be84:	b1b0      	cbz	r0, 3418beb4 <_svfiprintf_r+0x114>
3418be86:	9207      	str	r2, [sp, #28]
3418be88:	e014      	b.n	3418beb4 <_svfiprintf_r+0x114>
3418be8a:	eba0 0308 	sub.w	r3, r0, r8
3418be8e:	46a2      	mov	sl, r4
3418be90:	fa09 f303 	lsl.w	r3, r9, r3
3418be94:	4313      	orrs	r3, r2
3418be96:	9304      	str	r3, [sp, #16]
3418be98:	e7d2      	b.n	3418be40 <_svfiprintf_r+0xa0>
3418be9a:	9b03      	ldr	r3, [sp, #12]
3418be9c:	1d19      	adds	r1, r3, #4
3418be9e:	681b      	ldr	r3, [r3, #0]
3418bea0:	2b00      	cmp	r3, #0
3418bea2:	9103      	str	r1, [sp, #12]
3418bea4:	bfbb      	ittet	lt
3418bea6:	425b      	neglt	r3, r3
3418bea8:	f042 0202 	orrlt.w	r2, r2, #2
3418beac:	9307      	strge	r3, [sp, #28]
3418beae:	9307      	strlt	r3, [sp, #28]
3418beb0:	bfb8      	it	lt
3418beb2:	9204      	strlt	r2, [sp, #16]
3418beb4:	7823      	ldrb	r3, [r4, #0]
3418beb6:	2b2e      	cmp	r3, #46	@ 0x2e
3418beb8:	d10a      	bne.n	3418bed0 <_svfiprintf_r+0x130>
3418beba:	7863      	ldrb	r3, [r4, #1]
3418bebc:	2b2a      	cmp	r3, #42	@ 0x2a
3418bebe:	d132      	bne.n	3418bf26 <_svfiprintf_r+0x186>
3418bec0:	9b03      	ldr	r3, [sp, #12]
3418bec2:	3402      	adds	r4, #2
3418bec4:	1d1a      	adds	r2, r3, #4
3418bec6:	681b      	ldr	r3, [r3, #0]
3418bec8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3418becc:	9203      	str	r2, [sp, #12]
3418bece:	9305      	str	r3, [sp, #20]
3418bed0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 3418bf94 <_svfiprintf_r+0x1f4>
3418bed4:	2203      	movs	r2, #3
3418bed6:	7821      	ldrb	r1, [r4, #0]
3418bed8:	4650      	mov	r0, sl
3418beda:	f7fd fd08 	bl	341898ee <memchr>
3418bede:	b138      	cbz	r0, 3418bef0 <_svfiprintf_r+0x150>
3418bee0:	eba0 000a 	sub.w	r0, r0, sl
3418bee4:	2240      	movs	r2, #64	@ 0x40
3418bee6:	9b04      	ldr	r3, [sp, #16]
3418bee8:	3401      	adds	r4, #1
3418beea:	4082      	lsls	r2, r0
3418beec:	4313      	orrs	r3, r2
3418beee:	9304      	str	r3, [sp, #16]
3418bef0:	f814 1b01 	ldrb.w	r1, [r4], #1
3418bef4:	2206      	movs	r2, #6
3418bef6:	4824      	ldr	r0, [pc, #144]	@ (3418bf88 <_svfiprintf_r+0x1e8>)
3418bef8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3418befc:	f7fd fcf7 	bl	341898ee <memchr>
3418bf00:	2800      	cmp	r0, #0
3418bf02:	d036      	beq.n	3418bf72 <_svfiprintf_r+0x1d2>
3418bf04:	4b21      	ldr	r3, [pc, #132]	@ (3418bf8c <_svfiprintf_r+0x1ec>)
3418bf06:	bb1b      	cbnz	r3, 3418bf50 <_svfiprintf_r+0x1b0>
3418bf08:	9b03      	ldr	r3, [sp, #12]
3418bf0a:	3307      	adds	r3, #7
3418bf0c:	f023 0307 	bic.w	r3, r3, #7
3418bf10:	3308      	adds	r3, #8
3418bf12:	9303      	str	r3, [sp, #12]
3418bf14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3418bf16:	4433      	add	r3, r6
3418bf18:	9309      	str	r3, [sp, #36]	@ 0x24
3418bf1a:	e76a      	b.n	3418bdf2 <_svfiprintf_r+0x52>
3418bf1c:	fb0c 3202 	mla	r2, ip, r2, r3
3418bf20:	460c      	mov	r4, r1
3418bf22:	2001      	movs	r0, #1
3418bf24:	e7a8      	b.n	3418be78 <_svfiprintf_r+0xd8>
3418bf26:	2300      	movs	r3, #0
3418bf28:	3401      	adds	r4, #1
3418bf2a:	f04f 0c0a 	mov.w	ip, #10
3418bf2e:	4619      	mov	r1, r3
3418bf30:	9305      	str	r3, [sp, #20]
3418bf32:	4620      	mov	r0, r4
3418bf34:	f810 2b01 	ldrb.w	r2, [r0], #1
3418bf38:	3a30      	subs	r2, #48	@ 0x30
3418bf3a:	2a09      	cmp	r2, #9
3418bf3c:	d903      	bls.n	3418bf46 <_svfiprintf_r+0x1a6>
3418bf3e:	2b00      	cmp	r3, #0
3418bf40:	d0c6      	beq.n	3418bed0 <_svfiprintf_r+0x130>
3418bf42:	9105      	str	r1, [sp, #20]
3418bf44:	e7c4      	b.n	3418bed0 <_svfiprintf_r+0x130>
3418bf46:	fb0c 2101 	mla	r1, ip, r1, r2
3418bf4a:	4604      	mov	r4, r0
3418bf4c:	2301      	movs	r3, #1
3418bf4e:	e7f0      	b.n	3418bf32 <_svfiprintf_r+0x192>
3418bf50:	ab03      	add	r3, sp, #12
3418bf52:	462a      	mov	r2, r5
3418bf54:	a904      	add	r1, sp, #16
3418bf56:	4638      	mov	r0, r7
3418bf58:	9300      	str	r3, [sp, #0]
3418bf5a:	4b0d      	ldr	r3, [pc, #52]	@ (3418bf90 <_svfiprintf_r+0x1f0>)
3418bf5c:	f7fc fd70 	bl	34188a40 <_printf_float>
3418bf60:	1c42      	adds	r2, r0, #1
3418bf62:	4606      	mov	r6, r0
3418bf64:	d1d6      	bne.n	3418bf14 <_svfiprintf_r+0x174>
3418bf66:	89ab      	ldrh	r3, [r5, #12]
3418bf68:	065b      	lsls	r3, r3, #25
3418bf6a:	f53f af2d 	bmi.w	3418bdc8 <_svfiprintf_r+0x28>
3418bf6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
3418bf70:	e72c      	b.n	3418bdcc <_svfiprintf_r+0x2c>
3418bf72:	ab03      	add	r3, sp, #12
3418bf74:	462a      	mov	r2, r5
3418bf76:	a904      	add	r1, sp, #16
3418bf78:	4638      	mov	r0, r7
3418bf7a:	9300      	str	r3, [sp, #0]
3418bf7c:	4b04      	ldr	r3, [pc, #16]	@ (3418bf90 <_svfiprintf_r+0x1f0>)
3418bf7e:	f7fc ffeb 	bl	34188f58 <_printf_i>
3418bf82:	e7ed      	b.n	3418bf60 <_svfiprintf_r+0x1c0>
3418bf84:	3418d114 	.word	0x3418d114
3418bf88:	3418d11e 	.word	0x3418d11e
3418bf8c:	34188a41 	.word	0x34188a41
3418bf90:	3418bce9 	.word	0x3418bce9
3418bf94:	3418d11a 	.word	0x3418d11a

3418bf98 <__sflush_r>:
3418bf98:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
3418bf9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3418bfa0:	0716      	lsls	r6, r2, #28
3418bfa2:	4605      	mov	r5, r0
3418bfa4:	460c      	mov	r4, r1
3418bfa6:	d454      	bmi.n	3418c052 <__sflush_r+0xba>
3418bfa8:	684b      	ldr	r3, [r1, #4]
3418bfaa:	2b00      	cmp	r3, #0
3418bfac:	dc02      	bgt.n	3418bfb4 <__sflush_r+0x1c>
3418bfae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
3418bfb0:	2b00      	cmp	r3, #0
3418bfb2:	dd48      	ble.n	3418c046 <__sflush_r+0xae>
3418bfb4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3418bfb6:	2e00      	cmp	r6, #0
3418bfb8:	d045      	beq.n	3418c046 <__sflush_r+0xae>
3418bfba:	2300      	movs	r3, #0
3418bfbc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
3418bfc0:	682f      	ldr	r7, [r5, #0]
3418bfc2:	6a21      	ldr	r1, [r4, #32]
3418bfc4:	602b      	str	r3, [r5, #0]
3418bfc6:	d030      	beq.n	3418c02a <__sflush_r+0x92>
3418bfc8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
3418bfca:	89a3      	ldrh	r3, [r4, #12]
3418bfcc:	0759      	lsls	r1, r3, #29
3418bfce:	d505      	bpl.n	3418bfdc <__sflush_r+0x44>
3418bfd0:	6863      	ldr	r3, [r4, #4]
3418bfd2:	1ad2      	subs	r2, r2, r3
3418bfd4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
3418bfd6:	b10b      	cbz	r3, 3418bfdc <__sflush_r+0x44>
3418bfd8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
3418bfda:	1ad2      	subs	r2, r2, r3
3418bfdc:	2300      	movs	r3, #0
3418bfde:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
3418bfe0:	6a21      	ldr	r1, [r4, #32]
3418bfe2:	4628      	mov	r0, r5
3418bfe4:	47b0      	blx	r6
3418bfe6:	1c43      	adds	r3, r0, #1
3418bfe8:	89a3      	ldrh	r3, [r4, #12]
3418bfea:	d106      	bne.n	3418bffa <__sflush_r+0x62>
3418bfec:	6829      	ldr	r1, [r5, #0]
3418bfee:	291d      	cmp	r1, #29
3418bff0:	d82b      	bhi.n	3418c04a <__sflush_r+0xb2>
3418bff2:	4a2a      	ldr	r2, [pc, #168]	@ (3418c09c <__sflush_r+0x104>)
3418bff4:	40ca      	lsrs	r2, r1
3418bff6:	07d6      	lsls	r6, r2, #31
3418bff8:	d527      	bpl.n	3418c04a <__sflush_r+0xb2>
3418bffa:	2200      	movs	r2, #0
3418bffc:	04d9      	lsls	r1, r3, #19
3418bffe:	6062      	str	r2, [r4, #4]
3418c000:	6922      	ldr	r2, [r4, #16]
3418c002:	6022      	str	r2, [r4, #0]
3418c004:	d504      	bpl.n	3418c010 <__sflush_r+0x78>
3418c006:	1c42      	adds	r2, r0, #1
3418c008:	d101      	bne.n	3418c00e <__sflush_r+0x76>
3418c00a:	682b      	ldr	r3, [r5, #0]
3418c00c:	b903      	cbnz	r3, 3418c010 <__sflush_r+0x78>
3418c00e:	6560      	str	r0, [r4, #84]	@ 0x54
3418c010:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3418c012:	602f      	str	r7, [r5, #0]
3418c014:	b1b9      	cbz	r1, 3418c046 <__sflush_r+0xae>
3418c016:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3418c01a:	4299      	cmp	r1, r3
3418c01c:	d002      	beq.n	3418c024 <__sflush_r+0x8c>
3418c01e:	4628      	mov	r0, r5
3418c020:	f7fe fa74 	bl	3418a50c <_free_r>
3418c024:	2300      	movs	r3, #0
3418c026:	6363      	str	r3, [r4, #52]	@ 0x34
3418c028:	e00d      	b.n	3418c046 <__sflush_r+0xae>
3418c02a:	2301      	movs	r3, #1
3418c02c:	4628      	mov	r0, r5
3418c02e:	47b0      	blx	r6
3418c030:	4602      	mov	r2, r0
3418c032:	1c50      	adds	r0, r2, #1
3418c034:	d1c9      	bne.n	3418bfca <__sflush_r+0x32>
3418c036:	682b      	ldr	r3, [r5, #0]
3418c038:	2b00      	cmp	r3, #0
3418c03a:	d0c6      	beq.n	3418bfca <__sflush_r+0x32>
3418c03c:	2b1d      	cmp	r3, #29
3418c03e:	d001      	beq.n	3418c044 <__sflush_r+0xac>
3418c040:	2b16      	cmp	r3, #22
3418c042:	d11d      	bne.n	3418c080 <__sflush_r+0xe8>
3418c044:	602f      	str	r7, [r5, #0]
3418c046:	2000      	movs	r0, #0
3418c048:	e021      	b.n	3418c08e <__sflush_r+0xf6>
3418c04a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3418c04e:	b21b      	sxth	r3, r3
3418c050:	e01a      	b.n	3418c088 <__sflush_r+0xf0>
3418c052:	690f      	ldr	r7, [r1, #16]
3418c054:	2f00      	cmp	r7, #0
3418c056:	d0f6      	beq.n	3418c046 <__sflush_r+0xae>
3418c058:	0793      	lsls	r3, r2, #30
3418c05a:	680e      	ldr	r6, [r1, #0]
3418c05c:	600f      	str	r7, [r1, #0]
3418c05e:	bf0c      	ite	eq
3418c060:	694b      	ldreq	r3, [r1, #20]
3418c062:	2300      	movne	r3, #0
3418c064:	eba6 0807 	sub.w	r8, r6, r7
3418c068:	608b      	str	r3, [r1, #8]
3418c06a:	f1b8 0f00 	cmp.w	r8, #0
3418c06e:	ddea      	ble.n	3418c046 <__sflush_r+0xae>
3418c070:	4643      	mov	r3, r8
3418c072:	463a      	mov	r2, r7
3418c074:	6a21      	ldr	r1, [r4, #32]
3418c076:	4628      	mov	r0, r5
3418c078:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
3418c07a:	47b0      	blx	r6
3418c07c:	2800      	cmp	r0, #0
3418c07e:	dc08      	bgt.n	3418c092 <__sflush_r+0xfa>
3418c080:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3418c084:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3418c088:	f04f 30ff 	mov.w	r0, #4294967295
3418c08c:	81a3      	strh	r3, [r4, #12]
3418c08e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3418c092:	4407      	add	r7, r0
3418c094:	eba8 0800 	sub.w	r8, r8, r0
3418c098:	e7e7      	b.n	3418c06a <__sflush_r+0xd2>
3418c09a:	bf00      	nop
3418c09c:	20400001 	.word	0x20400001

3418c0a0 <_fflush_r>:
3418c0a0:	b538      	push	{r3, r4, r5, lr}
3418c0a2:	690b      	ldr	r3, [r1, #16]
3418c0a4:	4605      	mov	r5, r0
3418c0a6:	460c      	mov	r4, r1
3418c0a8:	b913      	cbnz	r3, 3418c0b0 <_fflush_r+0x10>
3418c0aa:	2500      	movs	r5, #0
3418c0ac:	4628      	mov	r0, r5
3418c0ae:	bd38      	pop	{r3, r4, r5, pc}
3418c0b0:	b118      	cbz	r0, 3418c0ba <_fflush_r+0x1a>
3418c0b2:	6a03      	ldr	r3, [r0, #32]
3418c0b4:	b90b      	cbnz	r3, 3418c0ba <_fflush_r+0x1a>
3418c0b6:	f7fd faff 	bl	341896b8 <__sinit>
3418c0ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3418c0be:	2b00      	cmp	r3, #0
3418c0c0:	d0f3      	beq.n	3418c0aa <_fflush_r+0xa>
3418c0c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
3418c0c4:	07d0      	lsls	r0, r2, #31
3418c0c6:	d404      	bmi.n	3418c0d2 <_fflush_r+0x32>
3418c0c8:	0599      	lsls	r1, r3, #22
3418c0ca:	d402      	bmi.n	3418c0d2 <_fflush_r+0x32>
3418c0cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3418c0ce:	f7fd fc0c 	bl	341898ea <__retarget_lock_acquire_recursive>
3418c0d2:	4628      	mov	r0, r5
3418c0d4:	4621      	mov	r1, r4
3418c0d6:	f7ff ff5f 	bl	3418bf98 <__sflush_r>
3418c0da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
3418c0dc:	4605      	mov	r5, r0
3418c0de:	07da      	lsls	r2, r3, #31
3418c0e0:	d4e4      	bmi.n	3418c0ac <_fflush_r+0xc>
3418c0e2:	89a3      	ldrh	r3, [r4, #12]
3418c0e4:	059b      	lsls	r3, r3, #22
3418c0e6:	d4e1      	bmi.n	3418c0ac <_fflush_r+0xc>
3418c0e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
3418c0ea:	f7fd fbff 	bl	341898ec <__retarget_lock_release_recursive>
3418c0ee:	e7dd      	b.n	3418c0ac <_fflush_r+0xc>

3418c0f0 <memmove>:
3418c0f0:	4288      	cmp	r0, r1
3418c0f2:	b510      	push	{r4, lr}
3418c0f4:	eb01 0402 	add.w	r4, r1, r2
3418c0f8:	d902      	bls.n	3418c100 <memmove+0x10>
3418c0fa:	4284      	cmp	r4, r0
3418c0fc:	4623      	mov	r3, r4
3418c0fe:	d807      	bhi.n	3418c110 <memmove+0x20>
3418c100:	1e43      	subs	r3, r0, #1
3418c102:	42a1      	cmp	r1, r4
3418c104:	d008      	beq.n	3418c118 <memmove+0x28>
3418c106:	f811 2b01 	ldrb.w	r2, [r1], #1
3418c10a:	f803 2f01 	strb.w	r2, [r3, #1]!
3418c10e:	e7f8      	b.n	3418c102 <memmove+0x12>
3418c110:	4402      	add	r2, r0
3418c112:	4601      	mov	r1, r0
3418c114:	428a      	cmp	r2, r1
3418c116:	d100      	bne.n	3418c11a <memmove+0x2a>
3418c118:	bd10      	pop	{r4, pc}
3418c11a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
3418c11e:	f802 4d01 	strb.w	r4, [r2, #-1]!
3418c122:	e7f7      	b.n	3418c114 <memmove+0x24>

3418c124 <strncmp>:
3418c124:	b510      	push	{r4, lr}
3418c126:	b16a      	cbz	r2, 3418c144 <strncmp+0x20>
3418c128:	3901      	subs	r1, #1
3418c12a:	1884      	adds	r4, r0, r2
3418c12c:	f810 2b01 	ldrb.w	r2, [r0], #1
3418c130:	f811 3f01 	ldrb.w	r3, [r1, #1]!
3418c134:	429a      	cmp	r2, r3
3418c136:	d103      	bne.n	3418c140 <strncmp+0x1c>
3418c138:	42a0      	cmp	r0, r4
3418c13a:	d001      	beq.n	3418c140 <strncmp+0x1c>
3418c13c:	2a00      	cmp	r2, #0
3418c13e:	d1f5      	bne.n	3418c12c <strncmp+0x8>
3418c140:	1ad0      	subs	r0, r2, r3
3418c142:	bd10      	pop	{r4, pc}
3418c144:	4610      	mov	r0, r2
3418c146:	e7fc      	b.n	3418c142 <strncmp+0x1e>

3418c148 <_sbrk_r>:
3418c148:	b538      	push	{r3, r4, r5, lr}
3418c14a:	2300      	movs	r3, #0
3418c14c:	4d05      	ldr	r5, [pc, #20]	@ (3418c164 <_sbrk_r+0x1c>)
3418c14e:	4604      	mov	r4, r0
3418c150:	4608      	mov	r0, r1
3418c152:	602b      	str	r3, [r5, #0]
3418c154:	f7f5 f876 	bl	34181244 <_sbrk>
3418c158:	1c43      	adds	r3, r0, #1
3418c15a:	d102      	bne.n	3418c162 <_sbrk_r+0x1a>
3418c15c:	682b      	ldr	r3, [r5, #0]
3418c15e:	b103      	cbz	r3, 3418c162 <_sbrk_r+0x1a>
3418c160:	6023      	str	r3, [r4, #0]
3418c162:	bd38      	pop	{r3, r4, r5, pc}
3418c164:	341c03cc 	.word	0x341c03cc

3418c168 <nan>:
3418c168:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 3418c170 <nan+0x8>
3418c16c:	4770      	bx	lr
3418c16e:	bf00      	nop
3418c170:	00000000 	.word	0x00000000
3418c174:	7ff80000 	.word	0x7ff80000

3418c178 <__assert_func>:
3418c178:	b51f      	push	{r0, r1, r2, r3, r4, lr}
3418c17a:	4614      	mov	r4, r2
3418c17c:	461a      	mov	r2, r3
3418c17e:	4b09      	ldr	r3, [pc, #36]	@ (3418c1a4 <__assert_func+0x2c>)
3418c180:	4605      	mov	r5, r0
3418c182:	681b      	ldr	r3, [r3, #0]
3418c184:	68d8      	ldr	r0, [r3, #12]
3418c186:	b14c      	cbz	r4, 3418c19c <__assert_func+0x24>
3418c188:	4b07      	ldr	r3, [pc, #28]	@ (3418c1a8 <__assert_func+0x30>)
3418c18a:	9100      	str	r1, [sp, #0]
3418c18c:	4907      	ldr	r1, [pc, #28]	@ (3418c1ac <__assert_func+0x34>)
3418c18e:	e9cd 3401 	strd	r3, r4, [sp, #4]
3418c192:	462b      	mov	r3, r5
3418c194:	f000 fba4 	bl	3418c8e0 <fiprintf>
3418c198:	f000 fbb4 	bl	3418c904 <abort>
3418c19c:	4b04      	ldr	r3, [pc, #16]	@ (3418c1b0 <__assert_func+0x38>)
3418c19e:	461c      	mov	r4, r3
3418c1a0:	e7f3      	b.n	3418c18a <__assert_func+0x12>
3418c1a2:	bf00      	nop
3418c1a4:	341c0018 	.word	0x341c0018
3418c1a8:	3418d12d 	.word	0x3418d12d
3418c1ac:	3418d13a 	.word	0x3418d13a
3418c1b0:	3418d168 	.word	0x3418d168

3418c1b4 <_calloc_r>:
3418c1b4:	b570      	push	{r4, r5, r6, lr}
3418c1b6:	fba1 5402 	umull	r5, r4, r1, r2
3418c1ba:	b934      	cbnz	r4, 3418c1ca <_calloc_r+0x16>
3418c1bc:	4629      	mov	r1, r5
3418c1be:	f7fe fa19 	bl	3418a5f4 <_malloc_r>
3418c1c2:	4606      	mov	r6, r0
3418c1c4:	b928      	cbnz	r0, 3418c1d2 <_calloc_r+0x1e>
3418c1c6:	4630      	mov	r0, r6
3418c1c8:	bd70      	pop	{r4, r5, r6, pc}
3418c1ca:	220c      	movs	r2, #12
3418c1cc:	2600      	movs	r6, #0
3418c1ce:	6002      	str	r2, [r0, #0]
3418c1d0:	e7f9      	b.n	3418c1c6 <_calloc_r+0x12>
3418c1d2:	462a      	mov	r2, r5
3418c1d4:	4621      	mov	r1, r4
3418c1d6:	f7fd fb0a 	bl	341897ee <memset>
3418c1da:	e7f4      	b.n	3418c1c6 <_calloc_r+0x12>

3418c1dc <rshift>:
3418c1dc:	6903      	ldr	r3, [r0, #16]
3418c1de:	114a      	asrs	r2, r1, #5
3418c1e0:	ebb3 1f61 	cmp.w	r3, r1, asr #5
3418c1e4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
3418c1e8:	f100 0414 	add.w	r4, r0, #20
3418c1ec:	dd45      	ble.n	3418c27a <rshift+0x9e>
3418c1ee:	f011 011f 	ands.w	r1, r1, #31
3418c1f2:	eb04 0683 	add.w	r6, r4, r3, lsl #2
3418c1f6:	eb04 0582 	add.w	r5, r4, r2, lsl #2
3418c1fa:	d10c      	bne.n	3418c216 <rshift+0x3a>
3418c1fc:	f100 0710 	add.w	r7, r0, #16
3418c200:	4629      	mov	r1, r5
3418c202:	42b1      	cmp	r1, r6
3418c204:	d334      	bcc.n	3418c270 <rshift+0x94>
3418c206:	1a9b      	subs	r3, r3, r2
3418c208:	1eea      	subs	r2, r5, #3
3418c20a:	009b      	lsls	r3, r3, #2
3418c20c:	4296      	cmp	r6, r2
3418c20e:	bf38      	it	cc
3418c210:	2300      	movcc	r3, #0
3418c212:	4423      	add	r3, r4
3418c214:	e015      	b.n	3418c242 <rshift+0x66>
3418c216:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
3418c21a:	f1c1 0820 	rsb	r8, r1, #32
3418c21e:	f105 0e04 	add.w	lr, r5, #4
3418c222:	46a1      	mov	r9, r4
3418c224:	40cf      	lsrs	r7, r1
3418c226:	4576      	cmp	r6, lr
3418c228:	46f4      	mov	ip, lr
3418c22a:	d815      	bhi.n	3418c258 <rshift+0x7c>
3418c22c:	1a9a      	subs	r2, r3, r2
3418c22e:	3501      	adds	r5, #1
3418c230:	0092      	lsls	r2, r2, #2
3418c232:	3a04      	subs	r2, #4
3418c234:	42ae      	cmp	r6, r5
3418c236:	bf38      	it	cc
3418c238:	2200      	movcc	r2, #0
3418c23a:	18a3      	adds	r3, r4, r2
3418c23c:	50a7      	str	r7, [r4, r2]
3418c23e:	b107      	cbz	r7, 3418c242 <rshift+0x66>
3418c240:	3304      	adds	r3, #4
3418c242:	1b1a      	subs	r2, r3, r4
3418c244:	42a3      	cmp	r3, r4
3418c246:	ea4f 02a2 	mov.w	r2, r2, asr #2
3418c24a:	bf08      	it	eq
3418c24c:	2300      	moveq	r3, #0
3418c24e:	6102      	str	r2, [r0, #16]
3418c250:	bf08      	it	eq
3418c252:	6143      	streq	r3, [r0, #20]
3418c254:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
3418c258:	f8dc c000 	ldr.w	ip, [ip]
3418c25c:	fa0c fc08 	lsl.w	ip, ip, r8
3418c260:	ea4c 0707 	orr.w	r7, ip, r7
3418c264:	f849 7b04 	str.w	r7, [r9], #4
3418c268:	f85e 7b04 	ldr.w	r7, [lr], #4
3418c26c:	40cf      	lsrs	r7, r1
3418c26e:	e7da      	b.n	3418c226 <rshift+0x4a>
3418c270:	f851 cb04 	ldr.w	ip, [r1], #4
3418c274:	f847 cf04 	str.w	ip, [r7, #4]!
3418c278:	e7c3      	b.n	3418c202 <rshift+0x26>
3418c27a:	4623      	mov	r3, r4
3418c27c:	e7e1      	b.n	3418c242 <rshift+0x66>

3418c27e <__hexdig_fun>:
3418c27e:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
3418c282:	2b09      	cmp	r3, #9
3418c284:	d802      	bhi.n	3418c28c <__hexdig_fun+0xe>
3418c286:	3820      	subs	r0, #32
3418c288:	b2c0      	uxtb	r0, r0
3418c28a:	4770      	bx	lr
3418c28c:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
3418c290:	2b05      	cmp	r3, #5
3418c292:	d801      	bhi.n	3418c298 <__hexdig_fun+0x1a>
3418c294:	3847      	subs	r0, #71	@ 0x47
3418c296:	e7f7      	b.n	3418c288 <__hexdig_fun+0xa>
3418c298:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
3418c29c:	2b05      	cmp	r3, #5
3418c29e:	d801      	bhi.n	3418c2a4 <__hexdig_fun+0x26>
3418c2a0:	3827      	subs	r0, #39	@ 0x27
3418c2a2:	e7f1      	b.n	3418c288 <__hexdig_fun+0xa>
3418c2a4:	2000      	movs	r0, #0
3418c2a6:	4770      	bx	lr

3418c2a8 <__gethex>:
3418c2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3418c2ac:	b085      	sub	sp, #20
3418c2ae:	468a      	mov	sl, r1
3418c2b0:	4690      	mov	r8, r2
3418c2b2:	9302      	str	r3, [sp, #8]
3418c2b4:	680b      	ldr	r3, [r1, #0]
3418c2b6:	9001      	str	r0, [sp, #4]
3418c2b8:	1c9c      	adds	r4, r3, #2
3418c2ba:	46a1      	mov	r9, r4
3418c2bc:	f814 0b01 	ldrb.w	r0, [r4], #1
3418c2c0:	2830      	cmp	r0, #48	@ 0x30
3418c2c2:	d0fa      	beq.n	3418c2ba <__gethex+0x12>
3418c2c4:	eba9 0303 	sub.w	r3, r9, r3
3418c2c8:	f1a3 0b02 	sub.w	fp, r3, #2
3418c2cc:	f7ff ffd7 	bl	3418c27e <__hexdig_fun>
3418c2d0:	4605      	mov	r5, r0
3418c2d2:	2800      	cmp	r0, #0
3418c2d4:	d166      	bne.n	3418c3a4 <__gethex+0xfc>
3418c2d6:	2201      	movs	r2, #1
3418c2d8:	499e      	ldr	r1, [pc, #632]	@ (3418c554 <__gethex+0x2ac>)
3418c2da:	4648      	mov	r0, r9
3418c2dc:	f7ff ff22 	bl	3418c124 <strncmp>
3418c2e0:	4607      	mov	r7, r0
3418c2e2:	2800      	cmp	r0, #0
3418c2e4:	d165      	bne.n	3418c3b2 <__gethex+0x10a>
3418c2e6:	f899 0001 	ldrb.w	r0, [r9, #1]
3418c2ea:	4626      	mov	r6, r4
3418c2ec:	f7ff ffc7 	bl	3418c27e <__hexdig_fun>
3418c2f0:	2800      	cmp	r0, #0
3418c2f2:	d060      	beq.n	3418c3b6 <__gethex+0x10e>
3418c2f4:	4623      	mov	r3, r4
3418c2f6:	7818      	ldrb	r0, [r3, #0]
3418c2f8:	4699      	mov	r9, r3
3418c2fa:	3301      	adds	r3, #1
3418c2fc:	2830      	cmp	r0, #48	@ 0x30
3418c2fe:	d0fa      	beq.n	3418c2f6 <__gethex+0x4e>
3418c300:	f7ff ffbd 	bl	3418c27e <__hexdig_fun>
3418c304:	fab0 f580 	clz	r5, r0
3418c308:	f04f 0b01 	mov.w	fp, #1
3418c30c:	096d      	lsrs	r5, r5, #5
3418c30e:	464a      	mov	r2, r9
3418c310:	4616      	mov	r6, r2
3418c312:	3201      	adds	r2, #1
3418c314:	7830      	ldrb	r0, [r6, #0]
3418c316:	f7ff ffb2 	bl	3418c27e <__hexdig_fun>
3418c31a:	2800      	cmp	r0, #0
3418c31c:	d1f8      	bne.n	3418c310 <__gethex+0x68>
3418c31e:	2201      	movs	r2, #1
3418c320:	498c      	ldr	r1, [pc, #560]	@ (3418c554 <__gethex+0x2ac>)
3418c322:	4630      	mov	r0, r6
3418c324:	f7ff fefe 	bl	3418c124 <strncmp>
3418c328:	2800      	cmp	r0, #0
3418c32a:	d13e      	bne.n	3418c3aa <__gethex+0x102>
3418c32c:	b944      	cbnz	r4, 3418c340 <__gethex+0x98>
3418c32e:	1c74      	adds	r4, r6, #1
3418c330:	4622      	mov	r2, r4
3418c332:	4616      	mov	r6, r2
3418c334:	3201      	adds	r2, #1
3418c336:	7830      	ldrb	r0, [r6, #0]
3418c338:	f7ff ffa1 	bl	3418c27e <__hexdig_fun>
3418c33c:	2800      	cmp	r0, #0
3418c33e:	d1f8      	bne.n	3418c332 <__gethex+0x8a>
3418c340:	1ba4      	subs	r4, r4, r6
3418c342:	00a7      	lsls	r7, r4, #2
3418c344:	7833      	ldrb	r3, [r6, #0]
3418c346:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
3418c34a:	2b50      	cmp	r3, #80	@ 0x50
3418c34c:	d13d      	bne.n	3418c3ca <__gethex+0x122>
3418c34e:	7873      	ldrb	r3, [r6, #1]
3418c350:	2b2b      	cmp	r3, #43	@ 0x2b
3418c352:	d032      	beq.n	3418c3ba <__gethex+0x112>
3418c354:	2b2d      	cmp	r3, #45	@ 0x2d
3418c356:	d033      	beq.n	3418c3c0 <__gethex+0x118>
3418c358:	1c71      	adds	r1, r6, #1
3418c35a:	2400      	movs	r4, #0
3418c35c:	7808      	ldrb	r0, [r1, #0]
3418c35e:	f7ff ff8e 	bl	3418c27e <__hexdig_fun>
3418c362:	1e43      	subs	r3, r0, #1
3418c364:	b2db      	uxtb	r3, r3
3418c366:	2b18      	cmp	r3, #24
3418c368:	d82f      	bhi.n	3418c3ca <__gethex+0x122>
3418c36a:	f1a0 0210 	sub.w	r2, r0, #16
3418c36e:	f811 0f01 	ldrb.w	r0, [r1, #1]!
3418c372:	f7ff ff84 	bl	3418c27e <__hexdig_fun>
3418c376:	f100 3cff 	add.w	ip, r0, #4294967295
3418c37a:	230a      	movs	r3, #10
3418c37c:	fa5f fc8c 	uxtb.w	ip, ip
3418c380:	f1bc 0f18 	cmp.w	ip, #24
3418c384:	d91e      	bls.n	3418c3c4 <__gethex+0x11c>
3418c386:	b104      	cbz	r4, 3418c38a <__gethex+0xe2>
3418c388:	4252      	negs	r2, r2
3418c38a:	4417      	add	r7, r2
3418c38c:	f8ca 1000 	str.w	r1, [sl]
3418c390:	b1ed      	cbz	r5, 3418c3ce <__gethex+0x126>
3418c392:	f1bb 0f00 	cmp.w	fp, #0
3418c396:	bf0c      	ite	eq
3418c398:	2506      	moveq	r5, #6
3418c39a:	2500      	movne	r5, #0
3418c39c:	4628      	mov	r0, r5
3418c39e:	b005      	add	sp, #20
3418c3a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3418c3a4:	2500      	movs	r5, #0
3418c3a6:	462c      	mov	r4, r5
3418c3a8:	e7b1      	b.n	3418c30e <__gethex+0x66>
3418c3aa:	2c00      	cmp	r4, #0
3418c3ac:	d1c8      	bne.n	3418c340 <__gethex+0x98>
3418c3ae:	4627      	mov	r7, r4
3418c3b0:	e7c8      	b.n	3418c344 <__gethex+0x9c>
3418c3b2:	464e      	mov	r6, r9
3418c3b4:	462f      	mov	r7, r5
3418c3b6:	2501      	movs	r5, #1
3418c3b8:	e7c4      	b.n	3418c344 <__gethex+0x9c>
3418c3ba:	2400      	movs	r4, #0
3418c3bc:	1cb1      	adds	r1, r6, #2
3418c3be:	e7cd      	b.n	3418c35c <__gethex+0xb4>
3418c3c0:	2401      	movs	r4, #1
3418c3c2:	e7fb      	b.n	3418c3bc <__gethex+0x114>
3418c3c4:	fb03 0002 	mla	r0, r3, r2, r0
3418c3c8:	e7cf      	b.n	3418c36a <__gethex+0xc2>
3418c3ca:	4631      	mov	r1, r6
3418c3cc:	e7de      	b.n	3418c38c <__gethex+0xe4>
3418c3ce:	eba6 0309 	sub.w	r3, r6, r9
3418c3d2:	4629      	mov	r1, r5
3418c3d4:	3b01      	subs	r3, #1
3418c3d6:	2b07      	cmp	r3, #7
3418c3d8:	dc0a      	bgt.n	3418c3f0 <__gethex+0x148>
3418c3da:	9801      	ldr	r0, [sp, #4]
3418c3dc:	f7fe f996 	bl	3418a70c <_Balloc>
3418c3e0:	4604      	mov	r4, r0
3418c3e2:	b940      	cbnz	r0, 3418c3f6 <__gethex+0x14e>
3418c3e4:	4b5c      	ldr	r3, [pc, #368]	@ (3418c558 <__gethex+0x2b0>)
3418c3e6:	4602      	mov	r2, r0
3418c3e8:	21e4      	movs	r1, #228	@ 0xe4
3418c3ea:	485c      	ldr	r0, [pc, #368]	@ (3418c55c <__gethex+0x2b4>)
3418c3ec:	f7ff fec4 	bl	3418c178 <__assert_func>
3418c3f0:	3101      	adds	r1, #1
3418c3f2:	105b      	asrs	r3, r3, #1
3418c3f4:	e7ef      	b.n	3418c3d6 <__gethex+0x12e>
3418c3f6:	f100 0a14 	add.w	sl, r0, #20
3418c3fa:	2300      	movs	r3, #0
3418c3fc:	4655      	mov	r5, sl
3418c3fe:	469b      	mov	fp, r3
3418c400:	45b1      	cmp	r9, r6
3418c402:	d337      	bcc.n	3418c474 <__gethex+0x1cc>
3418c404:	f845 bb04 	str.w	fp, [r5], #4
3418c408:	eba5 050a 	sub.w	r5, r5, sl
3418c40c:	4658      	mov	r0, fp
3418c40e:	10ad      	asrs	r5, r5, #2
3418c410:	6125      	str	r5, [r4, #16]
3418c412:	016d      	lsls	r5, r5, #5
3418c414:	f7fe fa6e 	bl	3418a8f4 <__hi0bits>
3418c418:	f8d8 6000 	ldr.w	r6, [r8]
3418c41c:	1a2d      	subs	r5, r5, r0
3418c41e:	42b5      	cmp	r5, r6
3418c420:	dd54      	ble.n	3418c4cc <__gethex+0x224>
3418c422:	1bad      	subs	r5, r5, r6
3418c424:	4620      	mov	r0, r4
3418c426:	4629      	mov	r1, r5
3418c428:	f7fe fe02 	bl	3418b030 <__any_on>
3418c42c:	4681      	mov	r9, r0
3418c42e:	b178      	cbz	r0, 3418c450 <__gethex+0x1a8>
3418c430:	1e6b      	subs	r3, r5, #1
3418c432:	f04f 0901 	mov.w	r9, #1
3418c436:	1159      	asrs	r1, r3, #5
3418c438:	f003 021f 	and.w	r2, r3, #31
3418c43c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
3418c440:	fa09 f202 	lsl.w	r2, r9, r2
3418c444:	420a      	tst	r2, r1
3418c446:	d003      	beq.n	3418c450 <__gethex+0x1a8>
3418c448:	454b      	cmp	r3, r9
3418c44a:	dc36      	bgt.n	3418c4ba <__gethex+0x212>
3418c44c:	f04f 0902 	mov.w	r9, #2
3418c450:	442f      	add	r7, r5
3418c452:	4629      	mov	r1, r5
3418c454:	4620      	mov	r0, r4
3418c456:	f7ff fec1 	bl	3418c1dc <rshift>
3418c45a:	f8d8 3008 	ldr.w	r3, [r8, #8]
3418c45e:	42bb      	cmp	r3, r7
3418c460:	da42      	bge.n	3418c4e8 <__gethex+0x240>
3418c462:	4621      	mov	r1, r4
3418c464:	9801      	ldr	r0, [sp, #4]
3418c466:	f7fe f991 	bl	3418a78c <_Bfree>
3418c46a:	2300      	movs	r3, #0
3418c46c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3418c46e:	25a3      	movs	r5, #163	@ 0xa3
3418c470:	6013      	str	r3, [r2, #0]
3418c472:	e793      	b.n	3418c39c <__gethex+0xf4>
3418c474:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
3418c478:	2a2e      	cmp	r2, #46	@ 0x2e
3418c47a:	d012      	beq.n	3418c4a2 <__gethex+0x1fa>
3418c47c:	2b20      	cmp	r3, #32
3418c47e:	d104      	bne.n	3418c48a <__gethex+0x1e2>
3418c480:	f845 bb04 	str.w	fp, [r5], #4
3418c484:	f04f 0b00 	mov.w	fp, #0
3418c488:	465b      	mov	r3, fp
3418c48a:	7830      	ldrb	r0, [r6, #0]
3418c48c:	9303      	str	r3, [sp, #12]
3418c48e:	f7ff fef6 	bl	3418c27e <__hexdig_fun>
3418c492:	9b03      	ldr	r3, [sp, #12]
3418c494:	f000 000f 	and.w	r0, r0, #15
3418c498:	4098      	lsls	r0, r3
3418c49a:	3304      	adds	r3, #4
3418c49c:	ea4b 0b00 	orr.w	fp, fp, r0
3418c4a0:	e7ae      	b.n	3418c400 <__gethex+0x158>
3418c4a2:	45b1      	cmp	r9, r6
3418c4a4:	d8ea      	bhi.n	3418c47c <__gethex+0x1d4>
3418c4a6:	2201      	movs	r2, #1
3418c4a8:	492a      	ldr	r1, [pc, #168]	@ (3418c554 <__gethex+0x2ac>)
3418c4aa:	4630      	mov	r0, r6
3418c4ac:	9303      	str	r3, [sp, #12]
3418c4ae:	f7ff fe39 	bl	3418c124 <strncmp>
3418c4b2:	9b03      	ldr	r3, [sp, #12]
3418c4b4:	2800      	cmp	r0, #0
3418c4b6:	d1e1      	bne.n	3418c47c <__gethex+0x1d4>
3418c4b8:	e7a2      	b.n	3418c400 <__gethex+0x158>
3418c4ba:	1ea9      	subs	r1, r5, #2
3418c4bc:	4620      	mov	r0, r4
3418c4be:	f7fe fdb7 	bl	3418b030 <__any_on>
3418c4c2:	2800      	cmp	r0, #0
3418c4c4:	d0c2      	beq.n	3418c44c <__gethex+0x1a4>
3418c4c6:	f04f 0903 	mov.w	r9, #3
3418c4ca:	e7c1      	b.n	3418c450 <__gethex+0x1a8>
3418c4cc:	da09      	bge.n	3418c4e2 <__gethex+0x23a>
3418c4ce:	1b75      	subs	r5, r6, r5
3418c4d0:	4621      	mov	r1, r4
3418c4d2:	9801      	ldr	r0, [sp, #4]
3418c4d4:	462a      	mov	r2, r5
3418c4d6:	1b7f      	subs	r7, r7, r5
3418c4d8:	f7fe fb6c 	bl	3418abb4 <__lshift>
3418c4dc:	4604      	mov	r4, r0
3418c4de:	f100 0a14 	add.w	sl, r0, #20
3418c4e2:	f04f 0900 	mov.w	r9, #0
3418c4e6:	e7b8      	b.n	3418c45a <__gethex+0x1b2>
3418c4e8:	f8d8 5004 	ldr.w	r5, [r8, #4]
3418c4ec:	42bd      	cmp	r5, r7
3418c4ee:	dd6f      	ble.n	3418c5d0 <__gethex+0x328>
3418c4f0:	1bed      	subs	r5, r5, r7
3418c4f2:	42ae      	cmp	r6, r5
3418c4f4:	dc34      	bgt.n	3418c560 <__gethex+0x2b8>
3418c4f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
3418c4fa:	2b02      	cmp	r3, #2
3418c4fc:	d022      	beq.n	3418c544 <__gethex+0x29c>
3418c4fe:	2b03      	cmp	r3, #3
3418c500:	d024      	beq.n	3418c54c <__gethex+0x2a4>
3418c502:	2b01      	cmp	r3, #1
3418c504:	d115      	bne.n	3418c532 <__gethex+0x28a>
3418c506:	42ae      	cmp	r6, r5
3418c508:	d113      	bne.n	3418c532 <__gethex+0x28a>
3418c50a:	2e01      	cmp	r6, #1
3418c50c:	d10b      	bne.n	3418c526 <__gethex+0x27e>
3418c50e:	f8d8 3004 	ldr.w	r3, [r8, #4]
3418c512:	2562      	movs	r5, #98	@ 0x62
3418c514:	9a02      	ldr	r2, [sp, #8]
3418c516:	6013      	str	r3, [r2, #0]
3418c518:	2301      	movs	r3, #1
3418c51a:	6123      	str	r3, [r4, #16]
3418c51c:	f8ca 3000 	str.w	r3, [sl]
3418c520:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
3418c522:	601c      	str	r4, [r3, #0]
3418c524:	e73a      	b.n	3418c39c <__gethex+0xf4>
3418c526:	1e71      	subs	r1, r6, #1
3418c528:	4620      	mov	r0, r4
3418c52a:	f7fe fd81 	bl	3418b030 <__any_on>
3418c52e:	2800      	cmp	r0, #0
3418c530:	d1ed      	bne.n	3418c50e <__gethex+0x266>
3418c532:	4621      	mov	r1, r4
3418c534:	9801      	ldr	r0, [sp, #4]
3418c536:	f7fe f929 	bl	3418a78c <_Bfree>
3418c53a:	2300      	movs	r3, #0
3418c53c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
3418c53e:	2550      	movs	r5, #80	@ 0x50
3418c540:	6013      	str	r3, [r2, #0]
3418c542:	e72b      	b.n	3418c39c <__gethex+0xf4>
3418c544:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3418c546:	2b00      	cmp	r3, #0
3418c548:	d1f3      	bne.n	3418c532 <__gethex+0x28a>
3418c54a:	e7e0      	b.n	3418c50e <__gethex+0x266>
3418c54c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3418c54e:	2b00      	cmp	r3, #0
3418c550:	d1dd      	bne.n	3418c50e <__gethex+0x266>
3418c552:	e7ee      	b.n	3418c532 <__gethex+0x28a>
3418c554:	3418d112 	.word	0x3418d112
3418c558:	3418d0a8 	.word	0x3418d0a8
3418c55c:	3418d169 	.word	0x3418d169
3418c560:	1e6f      	subs	r7, r5, #1
3418c562:	f1b9 0f00 	cmp.w	r9, #0
3418c566:	d130      	bne.n	3418c5ca <__gethex+0x322>
3418c568:	b127      	cbz	r7, 3418c574 <__gethex+0x2cc>
3418c56a:	4639      	mov	r1, r7
3418c56c:	4620      	mov	r0, r4
3418c56e:	f7fe fd5f 	bl	3418b030 <__any_on>
3418c572:	4681      	mov	r9, r0
3418c574:	117a      	asrs	r2, r7, #5
3418c576:	2301      	movs	r3, #1
3418c578:	f007 071f 	and.w	r7, r7, #31
3418c57c:	4629      	mov	r1, r5
3418c57e:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
3418c582:	4620      	mov	r0, r4
3418c584:	40bb      	lsls	r3, r7
3418c586:	1b76      	subs	r6, r6, r5
3418c588:	2502      	movs	r5, #2
3418c58a:	4213      	tst	r3, r2
3418c58c:	bf18      	it	ne
3418c58e:	f049 0902 	orrne.w	r9, r9, #2
3418c592:	f7ff fe23 	bl	3418c1dc <rshift>
3418c596:	f8d8 7004 	ldr.w	r7, [r8, #4]
3418c59a:	f1b9 0f00 	cmp.w	r9, #0
3418c59e:	d047      	beq.n	3418c630 <__gethex+0x388>
3418c5a0:	f8d8 300c 	ldr.w	r3, [r8, #12]
3418c5a4:	2b02      	cmp	r3, #2
3418c5a6:	d015      	beq.n	3418c5d4 <__gethex+0x32c>
3418c5a8:	2b03      	cmp	r3, #3
3418c5aa:	d017      	beq.n	3418c5dc <__gethex+0x334>
3418c5ac:	2b01      	cmp	r3, #1
3418c5ae:	d109      	bne.n	3418c5c4 <__gethex+0x31c>
3418c5b0:	f019 0f02 	tst.w	r9, #2
3418c5b4:	d006      	beq.n	3418c5c4 <__gethex+0x31c>
3418c5b6:	f8da 3000 	ldr.w	r3, [sl]
3418c5ba:	ea49 0903 	orr.w	r9, r9, r3
3418c5be:	f019 0f01 	tst.w	r9, #1
3418c5c2:	d10e      	bne.n	3418c5e2 <__gethex+0x33a>
3418c5c4:	f045 0510 	orr.w	r5, r5, #16
3418c5c8:	e032      	b.n	3418c630 <__gethex+0x388>
3418c5ca:	f04f 0901 	mov.w	r9, #1
3418c5ce:	e7d1      	b.n	3418c574 <__gethex+0x2cc>
3418c5d0:	2501      	movs	r5, #1
3418c5d2:	e7e2      	b.n	3418c59a <__gethex+0x2f2>
3418c5d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3418c5d6:	f1c3 0301 	rsb	r3, r3, #1
3418c5da:	930f      	str	r3, [sp, #60]	@ 0x3c
3418c5dc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
3418c5de:	2b00      	cmp	r3, #0
3418c5e0:	d0f0      	beq.n	3418c5c4 <__gethex+0x31c>
3418c5e2:	f8d4 b010 	ldr.w	fp, [r4, #16]
3418c5e6:	f104 0314 	add.w	r3, r4, #20
3418c5ea:	f04f 0c00 	mov.w	ip, #0
3418c5ee:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
3418c5f2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
3418c5f6:	4618      	mov	r0, r3
3418c5f8:	f853 2b04 	ldr.w	r2, [r3], #4
3418c5fc:	f1b2 3fff 	cmp.w	r2, #4294967295
3418c600:	d01b      	beq.n	3418c63a <__gethex+0x392>
3418c602:	3201      	adds	r2, #1
3418c604:	6002      	str	r2, [r0, #0]
3418c606:	2d02      	cmp	r5, #2
3418c608:	f104 0314 	add.w	r3, r4, #20
3418c60c:	d13c      	bne.n	3418c688 <__gethex+0x3e0>
3418c60e:	f8d8 2000 	ldr.w	r2, [r8]
3418c612:	3a01      	subs	r2, #1
3418c614:	42b2      	cmp	r2, r6
3418c616:	d109      	bne.n	3418c62c <__gethex+0x384>
3418c618:	1171      	asrs	r1, r6, #5
3418c61a:	2201      	movs	r2, #1
3418c61c:	f006 061f 	and.w	r6, r6, #31
3418c620:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
3418c624:	fa02 f606 	lsl.w	r6, r2, r6
3418c628:	421e      	tst	r6, r3
3418c62a:	d13a      	bne.n	3418c6a2 <__gethex+0x3fa>
3418c62c:	f045 0520 	orr.w	r5, r5, #32
3418c630:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
3418c632:	601c      	str	r4, [r3, #0]
3418c634:	9b02      	ldr	r3, [sp, #8]
3418c636:	601f      	str	r7, [r3, #0]
3418c638:	e6b0      	b.n	3418c39c <__gethex+0xf4>
3418c63a:	4299      	cmp	r1, r3
3418c63c:	f843 cc04 	str.w	ip, [r3, #-4]
3418c640:	d8d9      	bhi.n	3418c5f6 <__gethex+0x34e>
3418c642:	68a3      	ldr	r3, [r4, #8]
3418c644:	459b      	cmp	fp, r3
3418c646:	db17      	blt.n	3418c678 <__gethex+0x3d0>
3418c648:	6861      	ldr	r1, [r4, #4]
3418c64a:	9801      	ldr	r0, [sp, #4]
3418c64c:	3101      	adds	r1, #1
3418c64e:	f7fe f85d 	bl	3418a70c <_Balloc>
3418c652:	4681      	mov	r9, r0
3418c654:	b918      	cbnz	r0, 3418c65e <__gethex+0x3b6>
3418c656:	4b1a      	ldr	r3, [pc, #104]	@ (3418c6c0 <__gethex+0x418>)
3418c658:	4602      	mov	r2, r0
3418c65a:	2184      	movs	r1, #132	@ 0x84
3418c65c:	e6c5      	b.n	3418c3ea <__gethex+0x142>
3418c65e:	6922      	ldr	r2, [r4, #16]
3418c660:	f104 010c 	add.w	r1, r4, #12
3418c664:	300c      	adds	r0, #12
3418c666:	3202      	adds	r2, #2
3418c668:	0092      	lsls	r2, r2, #2
3418c66a:	f7fd f94e 	bl	3418990a <memcpy>
3418c66e:	4621      	mov	r1, r4
3418c670:	464c      	mov	r4, r9
3418c672:	9801      	ldr	r0, [sp, #4]
3418c674:	f7fe f88a 	bl	3418a78c <_Bfree>
3418c678:	6923      	ldr	r3, [r4, #16]
3418c67a:	1c5a      	adds	r2, r3, #1
3418c67c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
3418c680:	6122      	str	r2, [r4, #16]
3418c682:	2201      	movs	r2, #1
3418c684:	615a      	str	r2, [r3, #20]
3418c686:	e7be      	b.n	3418c606 <__gethex+0x35e>
3418c688:	6922      	ldr	r2, [r4, #16]
3418c68a:	455a      	cmp	r2, fp
3418c68c:	dd0b      	ble.n	3418c6a6 <__gethex+0x3fe>
3418c68e:	2101      	movs	r1, #1
3418c690:	4620      	mov	r0, r4
3418c692:	f7ff fda3 	bl	3418c1dc <rshift>
3418c696:	3701      	adds	r7, #1
3418c698:	f8d8 3008 	ldr.w	r3, [r8, #8]
3418c69c:	42bb      	cmp	r3, r7
3418c69e:	f6ff aee0 	blt.w	3418c462 <__gethex+0x1ba>
3418c6a2:	2501      	movs	r5, #1
3418c6a4:	e7c2      	b.n	3418c62c <__gethex+0x384>
3418c6a6:	f016 061f 	ands.w	r6, r6, #31
3418c6aa:	d0fa      	beq.n	3418c6a2 <__gethex+0x3fa>
3418c6ac:	4453      	add	r3, sl
3418c6ae:	f1c6 0620 	rsb	r6, r6, #32
3418c6b2:	f853 0c04 	ldr.w	r0, [r3, #-4]
3418c6b6:	f7fe f91d 	bl	3418a8f4 <__hi0bits>
3418c6ba:	42b0      	cmp	r0, r6
3418c6bc:	dbe7      	blt.n	3418c68e <__gethex+0x3e6>
3418c6be:	e7f0      	b.n	3418c6a2 <__gethex+0x3fa>
3418c6c0:	3418d0a8 	.word	0x3418d0a8

3418c6c4 <L_shift>:
3418c6c4:	f1c2 0208 	rsb	r2, r2, #8
3418c6c8:	0092      	lsls	r2, r2, #2
3418c6ca:	b570      	push	{r4, r5, r6, lr}
3418c6cc:	f1c2 0620 	rsb	r6, r2, #32
3418c6d0:	6843      	ldr	r3, [r0, #4]
3418c6d2:	6804      	ldr	r4, [r0, #0]
3418c6d4:	fa03 f506 	lsl.w	r5, r3, r6
3418c6d8:	40d3      	lsrs	r3, r2
3418c6da:	432c      	orrs	r4, r5
3418c6dc:	6004      	str	r4, [r0, #0]
3418c6de:	f840 3f04 	str.w	r3, [r0, #4]!
3418c6e2:	4288      	cmp	r0, r1
3418c6e4:	d3f4      	bcc.n	3418c6d0 <L_shift+0xc>
3418c6e6:	bd70      	pop	{r4, r5, r6, pc}

3418c6e8 <__match>:
3418c6e8:	6803      	ldr	r3, [r0, #0]
3418c6ea:	3301      	adds	r3, #1
3418c6ec:	b530      	push	{r4, r5, lr}
3418c6ee:	f811 4b01 	ldrb.w	r4, [r1], #1
3418c6f2:	b914      	cbnz	r4, 3418c6fa <__match+0x12>
3418c6f4:	6003      	str	r3, [r0, #0]
3418c6f6:	2001      	movs	r0, #1
3418c6f8:	bd30      	pop	{r4, r5, pc}
3418c6fa:	f813 2b01 	ldrb.w	r2, [r3], #1
3418c6fe:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
3418c702:	2d19      	cmp	r5, #25
3418c704:	bf98      	it	ls
3418c706:	3220      	addls	r2, #32
3418c708:	42a2      	cmp	r2, r4
3418c70a:	d0f0      	beq.n	3418c6ee <__match+0x6>
3418c70c:	2000      	movs	r0, #0
3418c70e:	e7f3      	b.n	3418c6f8 <__match+0x10>

3418c710 <__hexnan>:
3418c710:	680b      	ldr	r3, [r1, #0]
3418c712:	6801      	ldr	r1, [r0, #0]
3418c714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3418c718:	115e      	asrs	r6, r3, #5
3418c71a:	f013 031f 	ands.w	r3, r3, #31
3418c71e:	f04f 0500 	mov.w	r5, #0
3418c722:	b087      	sub	sp, #28
3418c724:	eb02 0686 	add.w	r6, r2, r6, lsl #2
3418c728:	4682      	mov	sl, r0
3418c72a:	4690      	mov	r8, r2
3418c72c:	46ab      	mov	fp, r5
3418c72e:	bf18      	it	ne
3418c730:	3604      	addne	r6, #4
3418c732:	9301      	str	r3, [sp, #4]
3418c734:	9502      	str	r5, [sp, #8]
3418c736:	1f37      	subs	r7, r6, #4
3418c738:	f846 5c04 	str.w	r5, [r6, #-4]
3418c73c:	46b9      	mov	r9, r7
3418c73e:	463c      	mov	r4, r7
3418c740:	1c4b      	adds	r3, r1, #1
3418c742:	784a      	ldrb	r2, [r1, #1]
3418c744:	9303      	str	r3, [sp, #12]
3418c746:	b342      	cbz	r2, 3418c79a <__hexnan+0x8a>
3418c748:	4610      	mov	r0, r2
3418c74a:	9105      	str	r1, [sp, #20]
3418c74c:	9204      	str	r2, [sp, #16]
3418c74e:	f7ff fd96 	bl	3418c27e <__hexdig_fun>
3418c752:	2800      	cmp	r0, #0
3418c754:	d151      	bne.n	3418c7fa <__hexnan+0xea>
3418c756:	9a04      	ldr	r2, [sp, #16]
3418c758:	9905      	ldr	r1, [sp, #20]
3418c75a:	2a20      	cmp	r2, #32
3418c75c:	d818      	bhi.n	3418c790 <__hexnan+0x80>
3418c75e:	9b02      	ldr	r3, [sp, #8]
3418c760:	459b      	cmp	fp, r3
3418c762:	dd13      	ble.n	3418c78c <__hexnan+0x7c>
3418c764:	454c      	cmp	r4, r9
3418c766:	d206      	bcs.n	3418c776 <__hexnan+0x66>
3418c768:	2d07      	cmp	r5, #7
3418c76a:	dc04      	bgt.n	3418c776 <__hexnan+0x66>
3418c76c:	462a      	mov	r2, r5
3418c76e:	4649      	mov	r1, r9
3418c770:	4620      	mov	r0, r4
3418c772:	f7ff ffa7 	bl	3418c6c4 <L_shift>
3418c776:	4544      	cmp	r4, r8
3418c778:	d951      	bls.n	3418c81e <__hexnan+0x10e>
3418c77a:	2300      	movs	r3, #0
3418c77c:	f1a4 0904 	sub.w	r9, r4, #4
3418c780:	f8cd b008 	str.w	fp, [sp, #8]
3418c784:	f844 3c04 	str.w	r3, [r4, #-4]
3418c788:	461d      	mov	r5, r3
3418c78a:	464c      	mov	r4, r9
3418c78c:	9903      	ldr	r1, [sp, #12]
3418c78e:	e7d7      	b.n	3418c740 <__hexnan+0x30>
3418c790:	2a29      	cmp	r2, #41	@ 0x29
3418c792:	d156      	bne.n	3418c842 <__hexnan+0x132>
3418c794:	3102      	adds	r1, #2
3418c796:	f8ca 1000 	str.w	r1, [sl]
3418c79a:	f1bb 0f00 	cmp.w	fp, #0
3418c79e:	d050      	beq.n	3418c842 <__hexnan+0x132>
3418c7a0:	454c      	cmp	r4, r9
3418c7a2:	d206      	bcs.n	3418c7b2 <__hexnan+0xa2>
3418c7a4:	2d07      	cmp	r5, #7
3418c7a6:	dc04      	bgt.n	3418c7b2 <__hexnan+0xa2>
3418c7a8:	462a      	mov	r2, r5
3418c7aa:	4649      	mov	r1, r9
3418c7ac:	4620      	mov	r0, r4
3418c7ae:	f7ff ff89 	bl	3418c6c4 <L_shift>
3418c7b2:	4544      	cmp	r4, r8
3418c7b4:	d935      	bls.n	3418c822 <__hexnan+0x112>
3418c7b6:	f1a8 0204 	sub.w	r2, r8, #4
3418c7ba:	4623      	mov	r3, r4
3418c7bc:	f853 1b04 	ldr.w	r1, [r3], #4
3418c7c0:	429f      	cmp	r7, r3
3418c7c2:	f842 1f04 	str.w	r1, [r2, #4]!
3418c7c6:	d2f9      	bcs.n	3418c7bc <__hexnan+0xac>
3418c7c8:	1b3b      	subs	r3, r7, r4
3418c7ca:	3e03      	subs	r6, #3
3418c7cc:	3401      	adds	r4, #1
3418c7ce:	2200      	movs	r2, #0
3418c7d0:	f023 0303 	bic.w	r3, r3, #3
3418c7d4:	3304      	adds	r3, #4
3418c7d6:	42b4      	cmp	r4, r6
3418c7d8:	bf88      	it	hi
3418c7da:	2304      	movhi	r3, #4
3418c7dc:	4443      	add	r3, r8
3418c7de:	f843 2b04 	str.w	r2, [r3], #4
3418c7e2:	429f      	cmp	r7, r3
3418c7e4:	d2fb      	bcs.n	3418c7de <__hexnan+0xce>
3418c7e6:	683b      	ldr	r3, [r7, #0]
3418c7e8:	b91b      	cbnz	r3, 3418c7f2 <__hexnan+0xe2>
3418c7ea:	4547      	cmp	r7, r8
3418c7ec:	d127      	bne.n	3418c83e <__hexnan+0x12e>
3418c7ee:	2301      	movs	r3, #1
3418c7f0:	603b      	str	r3, [r7, #0]
3418c7f2:	2005      	movs	r0, #5
3418c7f4:	b007      	add	sp, #28
3418c7f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3418c7fa:	3501      	adds	r5, #1
3418c7fc:	f10b 0b01 	add.w	fp, fp, #1
3418c800:	2d08      	cmp	r5, #8
3418c802:	dd05      	ble.n	3418c810 <__hexnan+0x100>
3418c804:	4544      	cmp	r4, r8
3418c806:	d9c1      	bls.n	3418c78c <__hexnan+0x7c>
3418c808:	2300      	movs	r3, #0
3418c80a:	3c04      	subs	r4, #4
3418c80c:	2501      	movs	r5, #1
3418c80e:	6023      	str	r3, [r4, #0]
3418c810:	6822      	ldr	r2, [r4, #0]
3418c812:	f000 000f 	and.w	r0, r0, #15
3418c816:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
3418c81a:	6020      	str	r0, [r4, #0]
3418c81c:	e7b6      	b.n	3418c78c <__hexnan+0x7c>
3418c81e:	2508      	movs	r5, #8
3418c820:	e7b4      	b.n	3418c78c <__hexnan+0x7c>
3418c822:	9b01      	ldr	r3, [sp, #4]
3418c824:	2b00      	cmp	r3, #0
3418c826:	d0de      	beq.n	3418c7e6 <__hexnan+0xd6>
3418c828:	f1c3 0320 	rsb	r3, r3, #32
3418c82c:	f04f 32ff 	mov.w	r2, #4294967295
3418c830:	40da      	lsrs	r2, r3
3418c832:	f856 3c04 	ldr.w	r3, [r6, #-4]
3418c836:	4013      	ands	r3, r2
3418c838:	f846 3c04 	str.w	r3, [r6, #-4]
3418c83c:	e7d3      	b.n	3418c7e6 <__hexnan+0xd6>
3418c83e:	3f04      	subs	r7, #4
3418c840:	e7d1      	b.n	3418c7e6 <__hexnan+0xd6>
3418c842:	2004      	movs	r0, #4
3418c844:	e7d6      	b.n	3418c7f4 <__hexnan+0xe4>

3418c846 <__ascii_mbtowc>:
3418c846:	b082      	sub	sp, #8
3418c848:	b901      	cbnz	r1, 3418c84c <__ascii_mbtowc+0x6>
3418c84a:	a901      	add	r1, sp, #4
3418c84c:	b142      	cbz	r2, 3418c860 <__ascii_mbtowc+0x1a>
3418c84e:	b14b      	cbz	r3, 3418c864 <__ascii_mbtowc+0x1e>
3418c850:	7813      	ldrb	r3, [r2, #0]
3418c852:	600b      	str	r3, [r1, #0]
3418c854:	7812      	ldrb	r2, [r2, #0]
3418c856:	1e10      	subs	r0, r2, #0
3418c858:	bf18      	it	ne
3418c85a:	2001      	movne	r0, #1
3418c85c:	b002      	add	sp, #8
3418c85e:	4770      	bx	lr
3418c860:	4610      	mov	r0, r2
3418c862:	e7fb      	b.n	3418c85c <__ascii_mbtowc+0x16>
3418c864:	f06f 0001 	mvn.w	r0, #1
3418c868:	e7f8      	b.n	3418c85c <__ascii_mbtowc+0x16>

3418c86a <_realloc_r>:
3418c86a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
3418c86e:	4607      	mov	r7, r0
3418c870:	4614      	mov	r4, r2
3418c872:	460d      	mov	r5, r1
3418c874:	b921      	cbnz	r1, 3418c880 <_realloc_r+0x16>
3418c876:	4611      	mov	r1, r2
3418c878:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
3418c87c:	f7fd beba 	b.w	3418a5f4 <_malloc_r>
3418c880:	b92a      	cbnz	r2, 3418c88e <_realloc_r+0x24>
3418c882:	4625      	mov	r5, r4
3418c884:	f7fd fe42 	bl	3418a50c <_free_r>
3418c888:	4628      	mov	r0, r5
3418c88a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
3418c88e:	f000 f840 	bl	3418c912 <_malloc_usable_size_r>
3418c892:	4284      	cmp	r4, r0
3418c894:	4606      	mov	r6, r0
3418c896:	d802      	bhi.n	3418c89e <_realloc_r+0x34>
3418c898:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
3418c89c:	d8f4      	bhi.n	3418c888 <_realloc_r+0x1e>
3418c89e:	4621      	mov	r1, r4
3418c8a0:	4638      	mov	r0, r7
3418c8a2:	f7fd fea7 	bl	3418a5f4 <_malloc_r>
3418c8a6:	4680      	mov	r8, r0
3418c8a8:	b908      	cbnz	r0, 3418c8ae <_realloc_r+0x44>
3418c8aa:	4645      	mov	r5, r8
3418c8ac:	e7ec      	b.n	3418c888 <_realloc_r+0x1e>
3418c8ae:	42b4      	cmp	r4, r6
3418c8b0:	4622      	mov	r2, r4
3418c8b2:	4629      	mov	r1, r5
3418c8b4:	bf28      	it	cs
3418c8b6:	4632      	movcs	r2, r6
3418c8b8:	f7fd f827 	bl	3418990a <memcpy>
3418c8bc:	4629      	mov	r1, r5
3418c8be:	4638      	mov	r0, r7
3418c8c0:	f7fd fe24 	bl	3418a50c <_free_r>
3418c8c4:	e7f1      	b.n	3418c8aa <_realloc_r+0x40>

3418c8c6 <__ascii_wctomb>:
3418c8c6:	4603      	mov	r3, r0
3418c8c8:	4608      	mov	r0, r1
3418c8ca:	b141      	cbz	r1, 3418c8de <__ascii_wctomb+0x18>
3418c8cc:	2aff      	cmp	r2, #255	@ 0xff
3418c8ce:	d904      	bls.n	3418c8da <__ascii_wctomb+0x14>
3418c8d0:	228a      	movs	r2, #138	@ 0x8a
3418c8d2:	f04f 30ff 	mov.w	r0, #4294967295
3418c8d6:	601a      	str	r2, [r3, #0]
3418c8d8:	4770      	bx	lr
3418c8da:	2001      	movs	r0, #1
3418c8dc:	700a      	strb	r2, [r1, #0]
3418c8de:	4770      	bx	lr

3418c8e0 <fiprintf>:
3418c8e0:	b40e      	push	{r1, r2, r3}
3418c8e2:	b503      	push	{r0, r1, lr}
3418c8e4:	ab03      	add	r3, sp, #12
3418c8e6:	4601      	mov	r1, r0
3418c8e8:	4805      	ldr	r0, [pc, #20]	@ (3418c900 <fiprintf+0x20>)
3418c8ea:	f853 2b04 	ldr.w	r2, [r3], #4
3418c8ee:	6800      	ldr	r0, [r0, #0]
3418c8f0:	9301      	str	r3, [sp, #4]
3418c8f2:	f000 f83f 	bl	3418c974 <_vfiprintf_r>
3418c8f6:	b002      	add	sp, #8
3418c8f8:	f85d eb04 	ldr.w	lr, [sp], #4
3418c8fc:	b003      	add	sp, #12
3418c8fe:	4770      	bx	lr
3418c900:	341c0018 	.word	0x341c0018

3418c904 <abort>:
3418c904:	2006      	movs	r0, #6
3418c906:	b508      	push	{r3, lr}
3418c908:	f000 fa08 	bl	3418cd1c <raise>
3418c90c:	2001      	movs	r0, #1
3418c90e:	f000 faa5 	bl	3418ce5c <_exit>

3418c912 <_malloc_usable_size_r>:
3418c912:	f851 3c04 	ldr.w	r3, [r1, #-4]
3418c916:	1f18      	subs	r0, r3, #4
3418c918:	2b00      	cmp	r3, #0
3418c91a:	bfbc      	itt	lt
3418c91c:	580b      	ldrlt	r3, [r1, r0]
3418c91e:	18c0      	addlt	r0, r0, r3
3418c920:	4770      	bx	lr

3418c922 <__sfputc_r>:
3418c922:	6893      	ldr	r3, [r2, #8]
3418c924:	3b01      	subs	r3, #1
3418c926:	2b00      	cmp	r3, #0
3418c928:	b410      	push	{r4}
3418c92a:	6093      	str	r3, [r2, #8]
3418c92c:	da08      	bge.n	3418c940 <__sfputc_r+0x1e>
3418c92e:	6994      	ldr	r4, [r2, #24]
3418c930:	42a3      	cmp	r3, r4
3418c932:	db01      	blt.n	3418c938 <__sfputc_r+0x16>
3418c934:	290a      	cmp	r1, #10
3418c936:	d103      	bne.n	3418c940 <__sfputc_r+0x1e>
3418c938:	f85d 4b04 	ldr.w	r4, [sp], #4
3418c93c:	f000 b932 	b.w	3418cba4 <__swbuf_r>
3418c940:	6813      	ldr	r3, [r2, #0]
3418c942:	1c58      	adds	r0, r3, #1
3418c944:	6010      	str	r0, [r2, #0]
3418c946:	4608      	mov	r0, r1
3418c948:	7019      	strb	r1, [r3, #0]
3418c94a:	f85d 4b04 	ldr.w	r4, [sp], #4
3418c94e:	4770      	bx	lr

3418c950 <__sfputs_r>:
3418c950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3418c952:	4606      	mov	r6, r0
3418c954:	460f      	mov	r7, r1
3418c956:	4614      	mov	r4, r2
3418c958:	18d5      	adds	r5, r2, r3
3418c95a:	42ac      	cmp	r4, r5
3418c95c:	d101      	bne.n	3418c962 <__sfputs_r+0x12>
3418c95e:	2000      	movs	r0, #0
3418c960:	e007      	b.n	3418c972 <__sfputs_r+0x22>
3418c962:	463a      	mov	r2, r7
3418c964:	f814 1b01 	ldrb.w	r1, [r4], #1
3418c968:	4630      	mov	r0, r6
3418c96a:	f7ff ffda 	bl	3418c922 <__sfputc_r>
3418c96e:	1c43      	adds	r3, r0, #1
3418c970:	d1f3      	bne.n	3418c95a <__sfputs_r+0xa>
3418c972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

3418c974 <_vfiprintf_r>:
3418c974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
3418c978:	460d      	mov	r5, r1
3418c97a:	b09d      	sub	sp, #116	@ 0x74
3418c97c:	4614      	mov	r4, r2
3418c97e:	4698      	mov	r8, r3
3418c980:	4606      	mov	r6, r0
3418c982:	b118      	cbz	r0, 3418c98c <_vfiprintf_r+0x18>
3418c984:	6a03      	ldr	r3, [r0, #32]
3418c986:	b90b      	cbnz	r3, 3418c98c <_vfiprintf_r+0x18>
3418c988:	f7fc fe96 	bl	341896b8 <__sinit>
3418c98c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3418c98e:	07d9      	lsls	r1, r3, #31
3418c990:	d405      	bmi.n	3418c99e <_vfiprintf_r+0x2a>
3418c992:	89ab      	ldrh	r3, [r5, #12]
3418c994:	059a      	lsls	r2, r3, #22
3418c996:	d402      	bmi.n	3418c99e <_vfiprintf_r+0x2a>
3418c998:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3418c99a:	f7fc ffa6 	bl	341898ea <__retarget_lock_acquire_recursive>
3418c99e:	89ab      	ldrh	r3, [r5, #12]
3418c9a0:	071b      	lsls	r3, r3, #28
3418c9a2:	d501      	bpl.n	3418c9a8 <_vfiprintf_r+0x34>
3418c9a4:	692b      	ldr	r3, [r5, #16]
3418c9a6:	b99b      	cbnz	r3, 3418c9d0 <_vfiprintf_r+0x5c>
3418c9a8:	4629      	mov	r1, r5
3418c9aa:	4630      	mov	r0, r6
3418c9ac:	f000 f938 	bl	3418cc20 <__swsetup_r>
3418c9b0:	b170      	cbz	r0, 3418c9d0 <_vfiprintf_r+0x5c>
3418c9b2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3418c9b4:	07dc      	lsls	r4, r3, #31
3418c9b6:	d504      	bpl.n	3418c9c2 <_vfiprintf_r+0x4e>
3418c9b8:	f04f 30ff 	mov.w	r0, #4294967295
3418c9bc:	b01d      	add	sp, #116	@ 0x74
3418c9be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
3418c9c2:	89ab      	ldrh	r3, [r5, #12]
3418c9c4:	0598      	lsls	r0, r3, #22
3418c9c6:	d4f7      	bmi.n	3418c9b8 <_vfiprintf_r+0x44>
3418c9c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3418c9ca:	f7fc ff8f 	bl	341898ec <__retarget_lock_release_recursive>
3418c9ce:	e7f3      	b.n	3418c9b8 <_vfiprintf_r+0x44>
3418c9d0:	2300      	movs	r3, #0
3418c9d2:	f8cd 800c 	str.w	r8, [sp, #12]
3418c9d6:	f04f 0901 	mov.w	r9, #1
3418c9da:	f8df 81b4 	ldr.w	r8, [pc, #436]	@ 3418cb90 <_vfiprintf_r+0x21c>
3418c9de:	9309      	str	r3, [sp, #36]	@ 0x24
3418c9e0:	2320      	movs	r3, #32
3418c9e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
3418c9e6:	2330      	movs	r3, #48	@ 0x30
3418c9e8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
3418c9ec:	4623      	mov	r3, r4
3418c9ee:	469a      	mov	sl, r3
3418c9f0:	f813 2b01 	ldrb.w	r2, [r3], #1
3418c9f4:	b10a      	cbz	r2, 3418c9fa <_vfiprintf_r+0x86>
3418c9f6:	2a25      	cmp	r2, #37	@ 0x25
3418c9f8:	d1f9      	bne.n	3418c9ee <_vfiprintf_r+0x7a>
3418c9fa:	ebba 0b04 	subs.w	fp, sl, r4
3418c9fe:	d00b      	beq.n	3418ca18 <_vfiprintf_r+0xa4>
3418ca00:	465b      	mov	r3, fp
3418ca02:	4622      	mov	r2, r4
3418ca04:	4629      	mov	r1, r5
3418ca06:	4630      	mov	r0, r6
3418ca08:	f7ff ffa2 	bl	3418c950 <__sfputs_r>
3418ca0c:	3001      	adds	r0, #1
3418ca0e:	f000 80a7 	beq.w	3418cb60 <_vfiprintf_r+0x1ec>
3418ca12:	9a09      	ldr	r2, [sp, #36]	@ 0x24
3418ca14:	445a      	add	r2, fp
3418ca16:	9209      	str	r2, [sp, #36]	@ 0x24
3418ca18:	f89a 3000 	ldrb.w	r3, [sl]
3418ca1c:	2b00      	cmp	r3, #0
3418ca1e:	f000 809f 	beq.w	3418cb60 <_vfiprintf_r+0x1ec>
3418ca22:	2300      	movs	r3, #0
3418ca24:	f04f 32ff 	mov.w	r2, #4294967295
3418ca28:	f10a 0a01 	add.w	sl, sl, #1
3418ca2c:	9304      	str	r3, [sp, #16]
3418ca2e:	9307      	str	r3, [sp, #28]
3418ca30:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
3418ca34:	931a      	str	r3, [sp, #104]	@ 0x68
3418ca36:	e9cd 2305 	strd	r2, r3, [sp, #20]
3418ca3a:	4654      	mov	r4, sl
3418ca3c:	2205      	movs	r2, #5
3418ca3e:	4854      	ldr	r0, [pc, #336]	@ (3418cb90 <_vfiprintf_r+0x21c>)
3418ca40:	f814 1b01 	ldrb.w	r1, [r4], #1
3418ca44:	f7fc ff53 	bl	341898ee <memchr>
3418ca48:	9a04      	ldr	r2, [sp, #16]
3418ca4a:	b9d8      	cbnz	r0, 3418ca84 <_vfiprintf_r+0x110>
3418ca4c:	06d1      	lsls	r1, r2, #27
3418ca4e:	bf44      	itt	mi
3418ca50:	2320      	movmi	r3, #32
3418ca52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3418ca56:	0713      	lsls	r3, r2, #28
3418ca58:	bf44      	itt	mi
3418ca5a:	232b      	movmi	r3, #43	@ 0x2b
3418ca5c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
3418ca60:	f89a 3000 	ldrb.w	r3, [sl]
3418ca64:	2b2a      	cmp	r3, #42	@ 0x2a
3418ca66:	d015      	beq.n	3418ca94 <_vfiprintf_r+0x120>
3418ca68:	9a07      	ldr	r2, [sp, #28]
3418ca6a:	4654      	mov	r4, sl
3418ca6c:	2000      	movs	r0, #0
3418ca6e:	f04f 0c0a 	mov.w	ip, #10
3418ca72:	4621      	mov	r1, r4
3418ca74:	f811 3b01 	ldrb.w	r3, [r1], #1
3418ca78:	3b30      	subs	r3, #48	@ 0x30
3418ca7a:	2b09      	cmp	r3, #9
3418ca7c:	d94b      	bls.n	3418cb16 <_vfiprintf_r+0x1a2>
3418ca7e:	b1b0      	cbz	r0, 3418caae <_vfiprintf_r+0x13a>
3418ca80:	9207      	str	r2, [sp, #28]
3418ca82:	e014      	b.n	3418caae <_vfiprintf_r+0x13a>
3418ca84:	eba0 0308 	sub.w	r3, r0, r8
3418ca88:	46a2      	mov	sl, r4
3418ca8a:	fa09 f303 	lsl.w	r3, r9, r3
3418ca8e:	4313      	orrs	r3, r2
3418ca90:	9304      	str	r3, [sp, #16]
3418ca92:	e7d2      	b.n	3418ca3a <_vfiprintf_r+0xc6>
3418ca94:	9b03      	ldr	r3, [sp, #12]
3418ca96:	1d19      	adds	r1, r3, #4
3418ca98:	681b      	ldr	r3, [r3, #0]
3418ca9a:	2b00      	cmp	r3, #0
3418ca9c:	9103      	str	r1, [sp, #12]
3418ca9e:	bfbb      	ittet	lt
3418caa0:	425b      	neglt	r3, r3
3418caa2:	f042 0202 	orrlt.w	r2, r2, #2
3418caa6:	9307      	strge	r3, [sp, #28]
3418caa8:	9307      	strlt	r3, [sp, #28]
3418caaa:	bfb8      	it	lt
3418caac:	9204      	strlt	r2, [sp, #16]
3418caae:	7823      	ldrb	r3, [r4, #0]
3418cab0:	2b2e      	cmp	r3, #46	@ 0x2e
3418cab2:	d10a      	bne.n	3418caca <_vfiprintf_r+0x156>
3418cab4:	7863      	ldrb	r3, [r4, #1]
3418cab6:	2b2a      	cmp	r3, #42	@ 0x2a
3418cab8:	d132      	bne.n	3418cb20 <_vfiprintf_r+0x1ac>
3418caba:	9b03      	ldr	r3, [sp, #12]
3418cabc:	3402      	adds	r4, #2
3418cabe:	1d1a      	adds	r2, r3, #4
3418cac0:	681b      	ldr	r3, [r3, #0]
3418cac2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
3418cac6:	9203      	str	r2, [sp, #12]
3418cac8:	9305      	str	r3, [sp, #20]
3418caca:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 3418cba0 <_vfiprintf_r+0x22c>
3418cace:	2203      	movs	r2, #3
3418cad0:	7821      	ldrb	r1, [r4, #0]
3418cad2:	4650      	mov	r0, sl
3418cad4:	f7fc ff0b 	bl	341898ee <memchr>
3418cad8:	b138      	cbz	r0, 3418caea <_vfiprintf_r+0x176>
3418cada:	eba0 000a 	sub.w	r0, r0, sl
3418cade:	2240      	movs	r2, #64	@ 0x40
3418cae0:	9b04      	ldr	r3, [sp, #16]
3418cae2:	3401      	adds	r4, #1
3418cae4:	4082      	lsls	r2, r0
3418cae6:	4313      	orrs	r3, r2
3418cae8:	9304      	str	r3, [sp, #16]
3418caea:	f814 1b01 	ldrb.w	r1, [r4], #1
3418caee:	2206      	movs	r2, #6
3418caf0:	4828      	ldr	r0, [pc, #160]	@ (3418cb94 <_vfiprintf_r+0x220>)
3418caf2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
3418caf6:	f7fc fefa 	bl	341898ee <memchr>
3418cafa:	2800      	cmp	r0, #0
3418cafc:	d03f      	beq.n	3418cb7e <_vfiprintf_r+0x20a>
3418cafe:	4b26      	ldr	r3, [pc, #152]	@ (3418cb98 <_vfiprintf_r+0x224>)
3418cb00:	bb1b      	cbnz	r3, 3418cb4a <_vfiprintf_r+0x1d6>
3418cb02:	9b03      	ldr	r3, [sp, #12]
3418cb04:	3307      	adds	r3, #7
3418cb06:	f023 0307 	bic.w	r3, r3, #7
3418cb0a:	3308      	adds	r3, #8
3418cb0c:	9303      	str	r3, [sp, #12]
3418cb0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
3418cb10:	443b      	add	r3, r7
3418cb12:	9309      	str	r3, [sp, #36]	@ 0x24
3418cb14:	e76a      	b.n	3418c9ec <_vfiprintf_r+0x78>
3418cb16:	fb0c 3202 	mla	r2, ip, r2, r3
3418cb1a:	460c      	mov	r4, r1
3418cb1c:	2001      	movs	r0, #1
3418cb1e:	e7a8      	b.n	3418ca72 <_vfiprintf_r+0xfe>
3418cb20:	2300      	movs	r3, #0
3418cb22:	3401      	adds	r4, #1
3418cb24:	f04f 0c0a 	mov.w	ip, #10
3418cb28:	4619      	mov	r1, r3
3418cb2a:	9305      	str	r3, [sp, #20]
3418cb2c:	4620      	mov	r0, r4
3418cb2e:	f810 2b01 	ldrb.w	r2, [r0], #1
3418cb32:	3a30      	subs	r2, #48	@ 0x30
3418cb34:	2a09      	cmp	r2, #9
3418cb36:	d903      	bls.n	3418cb40 <_vfiprintf_r+0x1cc>
3418cb38:	2b00      	cmp	r3, #0
3418cb3a:	d0c6      	beq.n	3418caca <_vfiprintf_r+0x156>
3418cb3c:	9105      	str	r1, [sp, #20]
3418cb3e:	e7c4      	b.n	3418caca <_vfiprintf_r+0x156>
3418cb40:	fb0c 2101 	mla	r1, ip, r1, r2
3418cb44:	4604      	mov	r4, r0
3418cb46:	2301      	movs	r3, #1
3418cb48:	e7f0      	b.n	3418cb2c <_vfiprintf_r+0x1b8>
3418cb4a:	ab03      	add	r3, sp, #12
3418cb4c:	462a      	mov	r2, r5
3418cb4e:	a904      	add	r1, sp, #16
3418cb50:	4630      	mov	r0, r6
3418cb52:	9300      	str	r3, [sp, #0]
3418cb54:	4b11      	ldr	r3, [pc, #68]	@ (3418cb9c <_vfiprintf_r+0x228>)
3418cb56:	f7fb ff73 	bl	34188a40 <_printf_float>
3418cb5a:	4607      	mov	r7, r0
3418cb5c:	1c78      	adds	r0, r7, #1
3418cb5e:	d1d6      	bne.n	3418cb0e <_vfiprintf_r+0x19a>
3418cb60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
3418cb62:	07d9      	lsls	r1, r3, #31
3418cb64:	d405      	bmi.n	3418cb72 <_vfiprintf_r+0x1fe>
3418cb66:	89ab      	ldrh	r3, [r5, #12]
3418cb68:	059a      	lsls	r2, r3, #22
3418cb6a:	d402      	bmi.n	3418cb72 <_vfiprintf_r+0x1fe>
3418cb6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
3418cb6e:	f7fc febd 	bl	341898ec <__retarget_lock_release_recursive>
3418cb72:	89ab      	ldrh	r3, [r5, #12]
3418cb74:	065b      	lsls	r3, r3, #25
3418cb76:	f53f af1f 	bmi.w	3418c9b8 <_vfiprintf_r+0x44>
3418cb7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
3418cb7c:	e71e      	b.n	3418c9bc <_vfiprintf_r+0x48>
3418cb7e:	ab03      	add	r3, sp, #12
3418cb80:	462a      	mov	r2, r5
3418cb82:	a904      	add	r1, sp, #16
3418cb84:	4630      	mov	r0, r6
3418cb86:	9300      	str	r3, [sp, #0]
3418cb88:	4b04      	ldr	r3, [pc, #16]	@ (3418cb9c <_vfiprintf_r+0x228>)
3418cb8a:	f7fc f9e5 	bl	34188f58 <_printf_i>
3418cb8e:	e7e4      	b.n	3418cb5a <_vfiprintf_r+0x1e6>
3418cb90:	3418d114 	.word	0x3418d114
3418cb94:	3418d11e 	.word	0x3418d11e
3418cb98:	34188a41 	.word	0x34188a41
3418cb9c:	3418c951 	.word	0x3418c951
3418cba0:	3418d11a 	.word	0x3418d11a

3418cba4 <__swbuf_r>:
3418cba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3418cba6:	460e      	mov	r6, r1
3418cba8:	4614      	mov	r4, r2
3418cbaa:	4605      	mov	r5, r0
3418cbac:	b118      	cbz	r0, 3418cbb6 <__swbuf_r+0x12>
3418cbae:	6a03      	ldr	r3, [r0, #32]
3418cbb0:	b90b      	cbnz	r3, 3418cbb6 <__swbuf_r+0x12>
3418cbb2:	f7fc fd81 	bl	341896b8 <__sinit>
3418cbb6:	69a3      	ldr	r3, [r4, #24]
3418cbb8:	60a3      	str	r3, [r4, #8]
3418cbba:	89a3      	ldrh	r3, [r4, #12]
3418cbbc:	071a      	lsls	r2, r3, #28
3418cbbe:	d501      	bpl.n	3418cbc4 <__swbuf_r+0x20>
3418cbc0:	6923      	ldr	r3, [r4, #16]
3418cbc2:	b943      	cbnz	r3, 3418cbd6 <__swbuf_r+0x32>
3418cbc4:	4621      	mov	r1, r4
3418cbc6:	4628      	mov	r0, r5
3418cbc8:	f000 f82a 	bl	3418cc20 <__swsetup_r>
3418cbcc:	b118      	cbz	r0, 3418cbd6 <__swbuf_r+0x32>
3418cbce:	f04f 37ff 	mov.w	r7, #4294967295
3418cbd2:	4638      	mov	r0, r7
3418cbd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
3418cbd6:	6823      	ldr	r3, [r4, #0]
3418cbd8:	b2f6      	uxtb	r6, r6
3418cbda:	6922      	ldr	r2, [r4, #16]
3418cbdc:	4637      	mov	r7, r6
3418cbde:	1a98      	subs	r0, r3, r2
3418cbe0:	6963      	ldr	r3, [r4, #20]
3418cbe2:	4283      	cmp	r3, r0
3418cbe4:	dc05      	bgt.n	3418cbf2 <__swbuf_r+0x4e>
3418cbe6:	4621      	mov	r1, r4
3418cbe8:	4628      	mov	r0, r5
3418cbea:	f7ff fa59 	bl	3418c0a0 <_fflush_r>
3418cbee:	2800      	cmp	r0, #0
3418cbf0:	d1ed      	bne.n	3418cbce <__swbuf_r+0x2a>
3418cbf2:	68a3      	ldr	r3, [r4, #8]
3418cbf4:	3b01      	subs	r3, #1
3418cbf6:	60a3      	str	r3, [r4, #8]
3418cbf8:	6823      	ldr	r3, [r4, #0]
3418cbfa:	1c5a      	adds	r2, r3, #1
3418cbfc:	6022      	str	r2, [r4, #0]
3418cbfe:	701e      	strb	r6, [r3, #0]
3418cc00:	1c43      	adds	r3, r0, #1
3418cc02:	6962      	ldr	r2, [r4, #20]
3418cc04:	429a      	cmp	r2, r3
3418cc06:	d004      	beq.n	3418cc12 <__swbuf_r+0x6e>
3418cc08:	89a3      	ldrh	r3, [r4, #12]
3418cc0a:	07db      	lsls	r3, r3, #31
3418cc0c:	d5e1      	bpl.n	3418cbd2 <__swbuf_r+0x2e>
3418cc0e:	2e0a      	cmp	r6, #10
3418cc10:	d1df      	bne.n	3418cbd2 <__swbuf_r+0x2e>
3418cc12:	4621      	mov	r1, r4
3418cc14:	4628      	mov	r0, r5
3418cc16:	f7ff fa43 	bl	3418c0a0 <_fflush_r>
3418cc1a:	2800      	cmp	r0, #0
3418cc1c:	d0d9      	beq.n	3418cbd2 <__swbuf_r+0x2e>
3418cc1e:	e7d6      	b.n	3418cbce <__swbuf_r+0x2a>

3418cc20 <__swsetup_r>:
3418cc20:	b538      	push	{r3, r4, r5, lr}
3418cc22:	4b29      	ldr	r3, [pc, #164]	@ (3418ccc8 <__swsetup_r+0xa8>)
3418cc24:	4605      	mov	r5, r0
3418cc26:	460c      	mov	r4, r1
3418cc28:	6818      	ldr	r0, [r3, #0]
3418cc2a:	b118      	cbz	r0, 3418cc34 <__swsetup_r+0x14>
3418cc2c:	6a03      	ldr	r3, [r0, #32]
3418cc2e:	b90b      	cbnz	r3, 3418cc34 <__swsetup_r+0x14>
3418cc30:	f7fc fd42 	bl	341896b8 <__sinit>
3418cc34:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3418cc38:	0719      	lsls	r1, r3, #28
3418cc3a:	d422      	bmi.n	3418cc82 <__swsetup_r+0x62>
3418cc3c:	06da      	lsls	r2, r3, #27
3418cc3e:	d407      	bmi.n	3418cc50 <__swsetup_r+0x30>
3418cc40:	2209      	movs	r2, #9
3418cc42:	602a      	str	r2, [r5, #0]
3418cc44:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
3418cc48:	f04f 30ff 	mov.w	r0, #4294967295
3418cc4c:	81a3      	strh	r3, [r4, #12]
3418cc4e:	e033      	b.n	3418ccb8 <__swsetup_r+0x98>
3418cc50:	0758      	lsls	r0, r3, #29
3418cc52:	d512      	bpl.n	3418cc7a <__swsetup_r+0x5a>
3418cc54:	6b61      	ldr	r1, [r4, #52]	@ 0x34
3418cc56:	b141      	cbz	r1, 3418cc6a <__swsetup_r+0x4a>
3418cc58:	f104 0344 	add.w	r3, r4, #68	@ 0x44
3418cc5c:	4299      	cmp	r1, r3
3418cc5e:	d002      	beq.n	3418cc66 <__swsetup_r+0x46>
3418cc60:	4628      	mov	r0, r5
3418cc62:	f7fd fc53 	bl	3418a50c <_free_r>
3418cc66:	2300      	movs	r3, #0
3418cc68:	6363      	str	r3, [r4, #52]	@ 0x34
3418cc6a:	89a3      	ldrh	r3, [r4, #12]
3418cc6c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
3418cc70:	81a3      	strh	r3, [r4, #12]
3418cc72:	2300      	movs	r3, #0
3418cc74:	6063      	str	r3, [r4, #4]
3418cc76:	6923      	ldr	r3, [r4, #16]
3418cc78:	6023      	str	r3, [r4, #0]
3418cc7a:	89a3      	ldrh	r3, [r4, #12]
3418cc7c:	f043 0308 	orr.w	r3, r3, #8
3418cc80:	81a3      	strh	r3, [r4, #12]
3418cc82:	6923      	ldr	r3, [r4, #16]
3418cc84:	b94b      	cbnz	r3, 3418cc9a <__swsetup_r+0x7a>
3418cc86:	89a3      	ldrh	r3, [r4, #12]
3418cc88:	f403 7320 	and.w	r3, r3, #640	@ 0x280
3418cc8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
3418cc90:	d003      	beq.n	3418cc9a <__swsetup_r+0x7a>
3418cc92:	4621      	mov	r1, r4
3418cc94:	4628      	mov	r0, r5
3418cc96:	f000 f882 	bl	3418cd9e <__smakebuf_r>
3418cc9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3418cc9e:	f013 0201 	ands.w	r2, r3, #1
3418cca2:	d00a      	beq.n	3418ccba <__swsetup_r+0x9a>
3418cca4:	2200      	movs	r2, #0
3418cca6:	60a2      	str	r2, [r4, #8]
3418cca8:	6962      	ldr	r2, [r4, #20]
3418ccaa:	4252      	negs	r2, r2
3418ccac:	61a2      	str	r2, [r4, #24]
3418ccae:	6922      	ldr	r2, [r4, #16]
3418ccb0:	b942      	cbnz	r2, 3418ccc4 <__swsetup_r+0xa4>
3418ccb2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
3418ccb6:	d1c5      	bne.n	3418cc44 <__swsetup_r+0x24>
3418ccb8:	bd38      	pop	{r3, r4, r5, pc}
3418ccba:	0799      	lsls	r1, r3, #30
3418ccbc:	bf58      	it	pl
3418ccbe:	6962      	ldrpl	r2, [r4, #20]
3418ccc0:	60a2      	str	r2, [r4, #8]
3418ccc2:	e7f4      	b.n	3418ccae <__swsetup_r+0x8e>
3418ccc4:	2000      	movs	r0, #0
3418ccc6:	e7f7      	b.n	3418ccb8 <__swsetup_r+0x98>
3418ccc8:	341c0018 	.word	0x341c0018

3418cccc <_raise_r>:
3418cccc:	291f      	cmp	r1, #31
3418ccce:	b538      	push	{r3, r4, r5, lr}
3418ccd0:	4605      	mov	r5, r0
3418ccd2:	460c      	mov	r4, r1
3418ccd4:	d904      	bls.n	3418cce0 <_raise_r+0x14>
3418ccd6:	2316      	movs	r3, #22
3418ccd8:	6003      	str	r3, [r0, #0]
3418ccda:	f04f 30ff 	mov.w	r0, #4294967295
3418ccde:	bd38      	pop	{r3, r4, r5, pc}
3418cce0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
3418cce2:	b112      	cbz	r2, 3418ccea <_raise_r+0x1e>
3418cce4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
3418cce8:	b94b      	cbnz	r3, 3418ccfe <_raise_r+0x32>
3418ccea:	4628      	mov	r0, r5
3418ccec:	f000 f830 	bl	3418cd50 <_getpid_r>
3418ccf0:	4622      	mov	r2, r4
3418ccf2:	4601      	mov	r1, r0
3418ccf4:	4628      	mov	r0, r5
3418ccf6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
3418ccfa:	f000 b817 	b.w	3418cd2c <_kill_r>
3418ccfe:	2b01      	cmp	r3, #1
3418cd00:	d00a      	beq.n	3418cd18 <_raise_r+0x4c>
3418cd02:	1c59      	adds	r1, r3, #1
3418cd04:	d103      	bne.n	3418cd0e <_raise_r+0x42>
3418cd06:	2316      	movs	r3, #22
3418cd08:	6003      	str	r3, [r0, #0]
3418cd0a:	2001      	movs	r0, #1
3418cd0c:	e7e7      	b.n	3418ccde <_raise_r+0x12>
3418cd0e:	2100      	movs	r1, #0
3418cd10:	4620      	mov	r0, r4
3418cd12:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
3418cd16:	4798      	blx	r3
3418cd18:	2000      	movs	r0, #0
3418cd1a:	e7e0      	b.n	3418ccde <_raise_r+0x12>

3418cd1c <raise>:
3418cd1c:	4b02      	ldr	r3, [pc, #8]	@ (3418cd28 <raise+0xc>)
3418cd1e:	4601      	mov	r1, r0
3418cd20:	6818      	ldr	r0, [r3, #0]
3418cd22:	f7ff bfd3 	b.w	3418cccc <_raise_r>
3418cd26:	bf00      	nop
3418cd28:	341c0018 	.word	0x341c0018

3418cd2c <_kill_r>:
3418cd2c:	b538      	push	{r3, r4, r5, lr}
3418cd2e:	2300      	movs	r3, #0
3418cd30:	4d06      	ldr	r5, [pc, #24]	@ (3418cd4c <_kill_r+0x20>)
3418cd32:	4604      	mov	r4, r0
3418cd34:	4608      	mov	r0, r1
3418cd36:	4611      	mov	r1, r2
3418cd38:	602b      	str	r3, [r5, #0]
3418cd3a:	f7f4 fa80 	bl	3418123e <_kill>
3418cd3e:	1c43      	adds	r3, r0, #1
3418cd40:	d102      	bne.n	3418cd48 <_kill_r+0x1c>
3418cd42:	682b      	ldr	r3, [r5, #0]
3418cd44:	b103      	cbz	r3, 3418cd48 <_kill_r+0x1c>
3418cd46:	6023      	str	r3, [r4, #0]
3418cd48:	bd38      	pop	{r3, r4, r5, pc}
3418cd4a:	bf00      	nop
3418cd4c:	341c03cc 	.word	0x341c03cc

3418cd50 <_getpid_r>:
3418cd50:	f7f4 ba73 	b.w	3418123a <_getpid>

3418cd54 <__swhatbuf_r>:
3418cd54:	b570      	push	{r4, r5, r6, lr}
3418cd56:	460c      	mov	r4, r1
3418cd58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
3418cd5c:	b096      	sub	sp, #88	@ 0x58
3418cd5e:	4615      	mov	r5, r2
3418cd60:	2900      	cmp	r1, #0
3418cd62:	461e      	mov	r6, r3
3418cd64:	da0c      	bge.n	3418cd80 <__swhatbuf_r+0x2c>
3418cd66:	89a3      	ldrh	r3, [r4, #12]
3418cd68:	2100      	movs	r1, #0
3418cd6a:	f013 0f80 	tst.w	r3, #128	@ 0x80
3418cd6e:	bf14      	ite	ne
3418cd70:	2340      	movne	r3, #64	@ 0x40
3418cd72:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
3418cd76:	2000      	movs	r0, #0
3418cd78:	6031      	str	r1, [r6, #0]
3418cd7a:	602b      	str	r3, [r5, #0]
3418cd7c:	b016      	add	sp, #88	@ 0x58
3418cd7e:	bd70      	pop	{r4, r5, r6, pc}
3418cd80:	466a      	mov	r2, sp
3418cd82:	f000 f849 	bl	3418ce18 <_fstat_r>
3418cd86:	2800      	cmp	r0, #0
3418cd88:	dbed      	blt.n	3418cd66 <__swhatbuf_r+0x12>
3418cd8a:	9901      	ldr	r1, [sp, #4]
3418cd8c:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
3418cd90:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
3418cd94:	4259      	negs	r1, r3
3418cd96:	4159      	adcs	r1, r3
3418cd98:	f44f 6380 	mov.w	r3, #1024	@ 0x400
3418cd9c:	e7eb      	b.n	3418cd76 <__swhatbuf_r+0x22>

3418cd9e <__smakebuf_r>:
3418cd9e:	898b      	ldrh	r3, [r1, #12]
3418cda0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
3418cda2:	079d      	lsls	r5, r3, #30
3418cda4:	4606      	mov	r6, r0
3418cda6:	460c      	mov	r4, r1
3418cda8:	d507      	bpl.n	3418cdba <__smakebuf_r+0x1c>
3418cdaa:	f104 0347 	add.w	r3, r4, #71	@ 0x47
3418cdae:	6023      	str	r3, [r4, #0]
3418cdb0:	6123      	str	r3, [r4, #16]
3418cdb2:	2301      	movs	r3, #1
3418cdb4:	6163      	str	r3, [r4, #20]
3418cdb6:	b003      	add	sp, #12
3418cdb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
3418cdba:	ab01      	add	r3, sp, #4
3418cdbc:	466a      	mov	r2, sp
3418cdbe:	f7ff ffc9 	bl	3418cd54 <__swhatbuf_r>
3418cdc2:	9f00      	ldr	r7, [sp, #0]
3418cdc4:	4605      	mov	r5, r0
3418cdc6:	4630      	mov	r0, r6
3418cdc8:	4639      	mov	r1, r7
3418cdca:	f7fd fc13 	bl	3418a5f4 <_malloc_r>
3418cdce:	b948      	cbnz	r0, 3418cde4 <__smakebuf_r+0x46>
3418cdd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
3418cdd4:	059a      	lsls	r2, r3, #22
3418cdd6:	d4ee      	bmi.n	3418cdb6 <__smakebuf_r+0x18>
3418cdd8:	f023 0303 	bic.w	r3, r3, #3
3418cddc:	f043 0302 	orr.w	r3, r3, #2
3418cde0:	81a3      	strh	r3, [r4, #12]
3418cde2:	e7e2      	b.n	3418cdaa <__smakebuf_r+0xc>
3418cde4:	89a3      	ldrh	r3, [r4, #12]
3418cde6:	6020      	str	r0, [r4, #0]
3418cde8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
3418cdec:	81a3      	strh	r3, [r4, #12]
3418cdee:	9b01      	ldr	r3, [sp, #4]
3418cdf0:	e9c4 0704 	strd	r0, r7, [r4, #16]
3418cdf4:	b15b      	cbz	r3, 3418ce0e <__smakebuf_r+0x70>
3418cdf6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
3418cdfa:	4630      	mov	r0, r6
3418cdfc:	f000 f81e 	bl	3418ce3c <_isatty_r>
3418ce00:	b128      	cbz	r0, 3418ce0e <__smakebuf_r+0x70>
3418ce02:	89a3      	ldrh	r3, [r4, #12]
3418ce04:	f023 0303 	bic.w	r3, r3, #3
3418ce08:	f043 0301 	orr.w	r3, r3, #1
3418ce0c:	81a3      	strh	r3, [r4, #12]
3418ce0e:	89a3      	ldrh	r3, [r4, #12]
3418ce10:	431d      	orrs	r5, r3
3418ce12:	81a5      	strh	r5, [r4, #12]
3418ce14:	e7cf      	b.n	3418cdb6 <__smakebuf_r+0x18>
	...

3418ce18 <_fstat_r>:
3418ce18:	b538      	push	{r3, r4, r5, lr}
3418ce1a:	2300      	movs	r3, #0
3418ce1c:	4d06      	ldr	r5, [pc, #24]	@ (3418ce38 <_fstat_r+0x20>)
3418ce1e:	4604      	mov	r4, r0
3418ce20:	4608      	mov	r0, r1
3418ce22:	4611      	mov	r1, r2
3418ce24:	602b      	str	r3, [r5, #0]
3418ce26:	f7f4 fa01 	bl	3418122c <_fstat>
3418ce2a:	1c43      	adds	r3, r0, #1
3418ce2c:	d102      	bne.n	3418ce34 <_fstat_r+0x1c>
3418ce2e:	682b      	ldr	r3, [r5, #0]
3418ce30:	b103      	cbz	r3, 3418ce34 <_fstat_r+0x1c>
3418ce32:	6023      	str	r3, [r4, #0]
3418ce34:	bd38      	pop	{r3, r4, r5, pc}
3418ce36:	bf00      	nop
3418ce38:	341c03cc 	.word	0x341c03cc

3418ce3c <_isatty_r>:
3418ce3c:	b538      	push	{r3, r4, r5, lr}
3418ce3e:	2300      	movs	r3, #0
3418ce40:	4d05      	ldr	r5, [pc, #20]	@ (3418ce58 <_isatty_r+0x1c>)
3418ce42:	4604      	mov	r4, r0
3418ce44:	4608      	mov	r0, r1
3418ce46:	602b      	str	r3, [r5, #0]
3418ce48:	f7f4 f9f5 	bl	34181236 <_isatty>
3418ce4c:	1c43      	adds	r3, r0, #1
3418ce4e:	d102      	bne.n	3418ce56 <_isatty_r+0x1a>
3418ce50:	682b      	ldr	r3, [r5, #0]
3418ce52:	b103      	cbz	r3, 3418ce56 <_isatty_r+0x1a>
3418ce54:	6023      	str	r3, [r4, #0]
3418ce56:	bd38      	pop	{r3, r4, r5, pc}
3418ce58:	341c03cc 	.word	0x341c03cc

3418ce5c <_exit>:
3418ce5c:	e7fe      	b.n	3418ce5c <_exit>
	...

3418ce60 <_init>:
3418ce60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3418ce62:	bf00      	nop
3418ce64:	bcf8      	pop	{r3, r4, r5, r6, r7}
3418ce66:	bc08      	pop	{r3}
3418ce68:	469e      	mov	lr, r3
3418ce6a:	4770      	bx	lr

3418ce6c <_fini>:
3418ce6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
3418ce6e:	bf00      	nop
3418ce70:	bcf8      	pop	{r3, r4, r5, r6, r7}
3418ce72:	bc08      	pop	{r3}
3418ce74:	469e      	mov	lr, r3
3418ce76:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

3418d640 <SECURE_SystemCoreClockUpdate>:
3418d640:	e97f e97f 	sg
3418d644:	f7f3 bfa2 	b.w	3418158c <__acle_se_SECURE_SystemCoreClockUpdate>
	...
